Implementation smell,Namespace,Class,File,Method,Description
Long Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The method has 200 lines of code.
Long Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,The method has 127 lines of code.
Long Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The method has 102 lines of code.
Complex Method,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DoDeleteItems,Cyclomatic complexity of the method is 11
Complex Method,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OffsetLocationViewStates,Cyclomatic complexity of the method is 10
Complex Method,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnViewStateChanged,Cyclomatic complexity of the method is 8
Complex Method,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,RemoveStateVisual,Cyclomatic complexity of the method is 9
Complex Method,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,Cyclomatic complexity of the method is 10
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,Cyclomatic complexity of the method is 9
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,Cyclomatic complexity of the method is 17
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,Cyclomatic complexity of the method is 9
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessII,Cyclomatic complexity of the method is 8
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,Cyclomatic complexity of the method is 8
Complex Method,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,Cyclomatic complexity of the method is 16
Long Parameter List,Machine.Design,AutoScrollHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\AutoScrollHelper.cs,AutoScroll,The method has 7 parameters. Parameters: positionInScrollViewer' scrollViewer' positionInLogicalView' logicalView' scrollOnDragThresholdX' scrollOnDragThresholdY' scrollOnDragOffset
Long Parameter List,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectionPoint,The method has 5 parameters. Parameters: element' widthFraction' heightFraction' location' type
Long Parameter List,Machine.Design.FreeFormEditing,ConnectionPointsAdorner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPointsAdorner.cs,DrawConnectionPoint,The method has 5 parameters. Parameters: connPoint' actualLocation' renderBrush' renderPen' drawingContext
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The method has 5 parameters. Parameters: outmostPanel' panel' begin' end' excludedRects
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,The method has 5 parameters. Parameters: panel' begin' end' srcEdge' destEdge
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The method has 12 parameters. Parameters: coverSet' Z' escapePointsA' horizontalSegmentsA' verticalSegmentsA' horizontalSegmentsB' verticalSegmentsB' orientationA' intersectionSegmentA' intersectionSegmentB' margin' noEscapeA
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The method has 5 parameters. Parameters: coverSet' Z' escapeLine' orientation' margin
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessII,The method has 12 parameters. Parameters: coverSet' orientation' escapePointsA' horizontalSegmentsA' verticalSegmentsA' horizontalSegmentsB' verticalSegmentsB' R' margin' intersectionFlag' intersectionSegmentA' intersectionSegmentB
Long Parameter List,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,The method has 5 parameters. Parameters: begin' end' margin' rectanglesToExclude' linesToExclude
Long Identifier,Machine.Design,ResizeGrip,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\ResizeGrip.cs,,The length of the parameter ParentStateContainerEditorProperty is 34.
Long Identifier,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,,The length of the parameter DroppingTypeResolvingOptionsProperty is 36.
Long Identifier,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,,The length of the parameter lastConnectionPointMouseUpElement is 33.
Long Identifier,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,,The length of the parameter StateContainerWidthViewStateKey is 31.
Long Identifier,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,,The length of the parameter StateContainerHeightViewStateKey is 32.
Long Identifier,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,,The length of the parameter MinConnectorSegmentLengthForLabel is 33.
Long Identifier,Machine.Design.FreeFormEditing,FreeFormPanel,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\FreeFormPanel.cs,,The length of the parameter DestinationConnectionPointProperty is 34.
Long Statement,Machine.Design,AutoScrollHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\AutoScrollHelper.cs,AutoScroll,The length of the statement  "                AutoScroll(e.GetPosition(scrollViewer)' scrollViewer' logicalView != null ? e.GetPosition(logicalView) : (Point?)null' logicalView' " is 131.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateMachineType' stateMachineType.GetProperty(StateContainerEditor.ChildStatesPropertyName)' BrowsableAttribute.No); " is 145.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateMachineType' stateMachineType.GetProperty(StateMachineDesigner.VariablesPropertyName)' BrowsableAttribute.No); " is 143.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateMachineType' stateMachineType.GetProperty(StateMachineDesigner.InitialStatePropertyName)' BrowsableAttribute.No); " is 146.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateType' stateType.GetProperty(StateContainerEditor.ChildStatesPropertyName)' BrowsableAttribute.No); " is 131.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateType' stateType.GetProperty(StateDesigner.TransitionsPropertyName)' BrowsableAttribute.No); " is 124.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(stateType' stateType.GetProperty(StateDesigner.IsFinalPropertyName)' BrowsableAttribute.No); " is 120.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(transitionType' transitionType.GetProperty(TransitionDesigner.TriggerPropertyName)' BrowsableAttribute.No); " is 135.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(transitionType' transitionType.GetProperty(TransitionDesigner.ActionPropertyName)' BrowsableAttribute.No); " is 134.
Long Statement,Machine.Design,DesignerMetadata,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\RegisterMetadata.cs,Register,The length of the statement  "            builder.AddCustomAttributes(transitionType' transitionType.GetProperty(TransitionDesigner.ToPropertyName)' BrowsableAttribute.No); " is 130.
Long Statement,Machine.Design,ResizeGrip,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\ResizeGrip.cs,OnMouseMove,The length of the statement  "                    stateContainerEditor.StateContainerWidth = Math.Min(Math.Max(panel.RequiredWidth' currentPosition.X)' stateContainerGrid.MaxWidth); " is 131.
Long Statement,Machine.Design,ResizeGrip,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\ResizeGrip.cs,OnMouseMove,The length of the statement  "                    stateContainerEditor.StateContainerHeight = Math.Min(Math.Max(panel.RequiredHeight' currentPosition.Y)' stateContainerGrid.MaxHeight); " is 134.
Long Statement,Machine.Design,ResizeGrip,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\ResizeGrip.cs,OnPreviewMouseLeftButtonUp,The length of the statement  "                    viewStateService.StoreViewStateWithUndo(stateContainerModelItem' StateContainerEditor.StateContainerWidthViewStateKey' this.ParentStateContainerEditor.StateContainerWidth); " is 172.
Long Statement,Machine.Design,ResizeGrip,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\ResizeGrip.cs,OnPreviewMouseLeftButtonUp,The length of the statement  "                    viewStateService.StoreViewStateWithUndo(stateContainerModelItem' StateContainerEditor.StateContainerHeightViewStateKey' this.ParentStateContainerEditor.StateContainerHeight); " is 174.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DoDeleteItems,The length of the statement  "                    if (!StateContainerEditor.IsTransitionModelItemContainedByStateModelItems(transitionModelItem' selectedStateModelItems)) " is 120.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DoDeleteItems,The length of the statement  "            // This is in order to create an undo unit that contains the change notifications needed to make undo/redo work correctly. " is 122.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DoDeleteItems,The length of the statement  "                        StateContainerEditor.GetParentStateModelItemForTransition(connectorModelItem).Properties[StateDesigner.TransitionsPropertyName].Collection.Add(connectorModelItem); " is 163.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,UpdateLocationViewStatesByPoint,The length of the statement  "            OffsetLocationViewStates(new Vector(point.X - topLeft.X' point.Y - topLeft.Y)' itemsPasted' GetTransitionModelItems(itemsPasted)' false); " is 137.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,UpdateLocationViewStatesByMetaData,The length of the statement  "                        this.ViewStateService.StoreViewState(itemsPasted[ii]' ShapeLocationViewStateKey' outmostEditor.panel.TranslatePoint(point' this.panel)); " is 136.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,UpdateLocationViewStatesToAvoidOverlap,The length of the statement  "                //Check to see if the first element in the input list needs offset. Generalize that information for all ModelItems in the input list. " is 133.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,UpdateLocationViewStatesToAvoidOverlap,The length of the statement  "                OffsetLocationViewStates(new Vector(offsetValue' offsetValue)' itemsPasted' GetTransitionModelItems(itemsPasted)' false); " is 121.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnTransitionCollectionChanged,The length of the statement  "            Debug.Assert(this.IsOutmostStateContainerEditor()' "Only the outmost editor should listen to the CollectionChanged events of transitions."); " is 140.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnEditingScopeCompleted,The length of the statement  "            Debug.Assert(this.IsOutmostStateContainerEditor()' "Only the outmost editor should listen to the EditingScopeCompleted events of the model tree."); " is 147.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DeleteConnectorModelItem,The length of the statement  "                StateContainerEditor.GetParentStateModelItemForTransition(connectorModelItem).Properties[StateDesigner.TransitionsPropertyName].Collection.Remove(connectorModelItem); " is 166.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,DeleteState,The length of the statement  "            if (clearInitialState && this.ModelItem.ItemType == typeof(StateMachine) && stateModelItem == this.ModelItem.Properties[StateMachineDesigner.InitialStatePropertyName].Value) " is 173.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateTransition,The length of the statement  "            Debug.Assert(srcDesigner is StateDesigner && destDesigner is StateDesigner' "The source and destination designers should both be StateDesigner"); " is 145.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateTransition,The length of the statement  "                PointCollection connectorViewState = new PointCollection(ConnectorRouter.Route(this.panel' sourceConnPoint' destConnPoint)); " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorGesture,The length of the statement  "            if (destConnectionPoint.PointType != ConnectionPointType.Outgoing && sourceConnectionPoint.PointType != ConnectionPointType.Incoming) " is 133.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorGesture,The length of the statement  "                        if (refTransitionModelItem != null && refTransitionModelItem.Properties[TransitionDesigner.ToPropertyName].Value == destStateModelItem) " is 135.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorGesture,The length of the statement  "                    else if (StateContainerEditor.IsDescendantStateOf(((StateDesigner)destConnectionPoint.ParentDesigner).ModelItem' ((StateDesigner)sourceConnectionPoint.ParentDesigner).ModelItem)) " is 178.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorGesture,The length of the statement  "                            PointCollection connectorViewState = new PointCollection(ConnectorRouter.Route(this.panel' sourceConnectionPoint' destConnectionPoint)); " is 136.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,StoreConnectorLocationViewState,The length of the statement  "            //Such location changed events are a result of changes already committed in the UI. Hence we do not want to react to such view state changes. " is 141.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,StoreConnectorLocationViewState,The length of the statement  "            this.StoreConnectorLocationViewState(StateContainerEditor.GetConnectorModelItem(connector)' connector.Points' isUndoableViewState); " is 131.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,GetOutgoingConnectors,The length of the statement  "                    outgoingConnectors.AddRange(connPoint.AttachedConnectors.Where(p => FreeFormPanel.GetSourceConnectionPoint(p).Equals(connPoint))); " is 130.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,GetIncomingConnectors,The length of the statement  "                    incomingConnectors.AddRange(connPoint.AttachedConnectors.Where(p => FreeFormPanel.GetDestinationConnectionPoint(p).Equals(connPoint))); " is 135.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,ConnectionPointHitTest,The length of the statement  "                    if (new Rect(panel.GetLocationRelativeToOutmostPanel(connPoint.Location) + connPoint.HitTestOffset' connPoint.HitTestSize).Contains(hitPoint)) " is 142.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,GetClosestConnectionPointNotOfType,The length of the statement  "                if (connPoint.PointType != illegalConnectionPointType && !connPoint.Equals(srcConnectionPoint) && connPoint.AttachedConnectors.Count == 0) " is 138.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,GetClosestSrcConnectionPoint,The length of the statement  "                srcConnectionPoint = GetClosestConnectionPointNotOfType(destConnectionPoint' StateContainerEditor.GetConnectionPoints(src)' ConnectionPointType.Incoming); " is 154.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,GetClosestDestConnectionPoint,The length of the statement  "                destConnectionPoint = GetClosestConnectionPointNotOfType(sourceConnectionPoint' StateContainerEditor.GetConnectionPoints(dest)' ConnectionPointType.Outgoing); " is 158.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsTransitionModelItemContainedByStateModelItems,The length of the statement  "                else if (IsTransitionModelItemContainedByStateModelItems(transitionModelItem' stateModelItem.Properties[StateContainerEditor.ChildStatesPropertyName].Collection)) " is 162.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsDescendantStateOf,The length of the statement  "            if (descendant != null && descendant.ItemType == typeof(State) && ancestor != null && ancestor.ItemType == typeof(State)) " is 121.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Populate,The length of the statement  "            // Keep track of the outmost editor' which may not be accessible by traversing the visual tree when the designer is deleted. " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Populate,The length of the statement  "            this.ModelItem.Properties[ChildStatesPropertyName].Collection.CollectionChanged += new NotifyCollectionChangedEventHandler(OnStateCollectionChanged); " is 149.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Populate,The length of the statement  "            modelTreeManager.EditingScopeCompleted += new EventHandler<EditingScopeEventArgs>(this.outmostStateContainerEditor.OnEditingScopeCompleted); " is 140.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Populate,The length of the statement  "                    transitions.CollectionChanged += new NotifyCollectionChangedEventHandler(this.outmostStateContainerEditor.OnTransitionCollectionChanged); " is 137.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Cleanup,The length of the statement  "            this.ModelItem.Properties[ChildStatesPropertyName].Collection.CollectionChanged -= new NotifyCollectionChangedEventHandler(OnStateCollectionChanged); " is 149.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Cleanup,The length of the statement  "            modelTreeManager.EditingScopeCompleted -= new EventHandler<EditingScopeEventArgs>(this.outmostStateContainerEditor.OnEditingScopeCompleted); " is 140.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Cleanup,The length of the statement  "                    transitions.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.outmostStateContainerEditor.OnTransitionCollectionChanged); " is 137.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddInitialNodeConnector,The length of the statement  "                this.AddConnector(this.initialNode' (UIElement)this.ModelItem.Properties[StateMachineDesigner.InitialStatePropertyName].Value.View' this.ModelItem); " is 148.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,RemoveStateVisual,The length of the statement  "            object locationOfShape = this.ViewStateService.RetrieveViewState(removedStateDesigner.ModelItem' StateContainerEditor.ShapeLocationViewStateKey); " is 145.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddTransitionVisual,The length of the statement  "            UIElement sourceDesigner = StateContainerEditor.GetParentStateModelItemForTransition(transitionModelItem).View as UIElement; " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddTransitionVisual,The length of the statement  "            UIElement destinationDesigner = transitionModelItem.Properties[TransitionDesigner.ToPropertyName].Value.View as UIElement; " is 122.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorByConnectorModelItemViewState,The length of the statement  "                        srcConnPoint = StateContainerEditor.GetClosestConnectionPointNotOfType(destConnPoint' srcConnectionPoints' ConnectionPointType.Incoming); " is 137.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectorByConnectorModelItemViewState,The length of the statement  "                        destConnPoint = StateContainerEditor.GetClosestConnectionPointNotOfType(srcConnPoint' destConnectionPoints' ConnectionPointType.Outgoing); " is 138.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddConnector,The length of the statement  "            Connector connector = CreateConnectorByConnectorModelItemViewState(sourceDesigner' destinationDesigner' connectorModelItem); " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddConnector,The length of the statement  "                GetEmptySrcDestConnectionPoints(sourceDesigner' destinationDesigner' out sourceConnectionPoint' out destinationConnectionPoint); " is 128.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddConnector,The length of the statement  "                    PointCollection connectorPoints = new PointCollection(ConnectorRouter.Route(this.panel' sourceConnectionPoint' destinationConnectionPoint)); " is 140.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,CreateConnectionPoint,The length of the statement  "            BindingOperations.SetBinding(connectionPoint' ConnectionPoint.LocationProperty' GetConnectionPointBinding(element as FrameworkElement' widthFraction' heightFraction)); " is 167.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The length of the statement  "                    connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType)); " is 121.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The length of the statement  "                    connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType)); " is 120.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The length of the statement  "                    connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType)); " is 122.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnChildElementMouseEnter,The length of the statement  "                    StateDesigner stateDesigner = StateContainerEditor.GetVisualAncestor<StateDesigner>(Mouse.DirectlyOver as DependencyObject); " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddConnectionPointsAdorner,The length of the statement  "                isSelected = (((Selection)this.Context.Items.GetValue<Selection>()).SelectedObjects as ICollection<ModelItem>).Contains(((WorkflowViewElement)element).ModelItem); " is 162.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddConnectionPointsAdorner,The length of the statement  "            ConnectionPointsAdorner connectionPointsAdorner = new ConnectionPointsAdorner(element' ConnectionPointsToShow(element)' isSelected); " is 132.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnChildElementSizeChanged,The length of the statement  "                // Such size changed events are a result of changes already committed in the UI. Hence we do not want to react to such view state changes. " is 138.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnConnectionPointMouseUp,The length of the statement  "                    ConnectorCreationResult result = CreateConnectorGesture(this.activeSrcConnectionPoint' destConnectionPoint' null' false); " is 121.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnFreeFormPanelLocationChanged,The length of the statement  "                PointCollection existingViewState = this.ViewStateService.RetrieveViewState(connectorModelItem' ConnectorLocationViewStateKey) as PointCollection; " is 146.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnFreeFormPanelLocationChanged,The length of the statement  "                    && existingViewState[0].Equals(movedConnector.Points[0]) && existingViewState[existingViewState.Count - 1].Equals(movedConnector.Points[movedConnector.Points.Count - 1])) " is 170.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnFreeFormPanelRequiredSizeChanged,The length of the statement  "                    this.ViewStateService.StoreViewState(this.ModelItem' StateContainerEditor.StateContainerWidthViewStateKey' e.NewRequiredSize.Width); " is 132.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnFreeFormPanelRequiredSizeChanged,The length of the statement  "                    this.ViewStateService.StoreViewState(this.ModelItem' StateContainerEditor.StateContainerHeightViewStateKey' e.NewRequiredSize.Height); " is 134.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridPreviewMouseMove,The length of the statement  "            else if (this.panel.connectorEditor != null && (this.panel.connectorEditor.IsConnectorEndBeingMoved || this.panel.connectorEditor.IsConnectorStartBeingMoved)) " is 158.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridPreviewMouseUp,The length of the statement  "            UIElement destElement = StateContainerEditor.GetVisualAncestor<WorkflowViewElement>(e.OriginalSource as DependencyObject); " is 122.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridDrop,The length of the statement  "                    PerformInternalMove(this.modelItemToUIElement[droppedModelItem] as WorkflowViewElement' e.GetPosition(this.panel)' anchorPoint); " is 128.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridDrag,The length of the statement  "                    (this.ModelItem.ItemType == typeof(StateMachine) && DragDropHelper.AllowDrop(e.Data' this.Context' typeof(State)' typeof(FinalState)))) " is 135.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,KeyboardMove,The length of the statement  "            WorkflowViewElement shapeToMove = (WorkflowViewElement)this.modelItemToUIElement[this.Context.Items.GetValue<Selection>().PrimarySelection]; " is 140.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,KeyboardMove,The length of the statement  "                    PerformInternalMove(shapeToMove' new Point(currentLocation.X' currentLocation.Y + StateContainerEditor.GridSize)' new Point(0' 0)); " is 131.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,KeyboardMove,The length of the statement  "                    PerformInternalMove(shapeToMove' new Point(currentLocation.X' currentLocation.Y - StateContainerEditor.GridSize)' new Point(0' 0)); " is 131.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,KeyboardMove,The length of the statement  "                    PerformInternalMove(shapeToMove' new Point(currentLocation.X + StateContainerEditor.GridSize' currentLocation.Y)' new Point(0' 0)); " is 131.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,KeyboardMove,The length of the statement  "                    PerformInternalMove(shapeToMove' new Point(currentLocation.X - StateContainerEditor.GridSize' currentLocation.Y)' new Point(0' 0)); " is 131.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsCreatingConnector,The length of the statement  "            return (outmostEditor.activeSrcConnectionPoint != null || (outmostEditor.panel.connectorEditor != null && outmostEditor.panel.connectorEditor.IsConnectorEndBeingMoved)); " is 169.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsCreatingConnectorFromInitialNode,The length of the statement  "            return (outmostEditor.activeSrcConnectionPoint != null && outmostEditor.activeSrcConnectionPoint.ParentDesigner is InitialNode) || " is 130.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsMovingStartOfConnectorFromInitialNode,The length of the statement  "            return (outmostEditor.panel.connectorEditor != null && outmostEditor.panel.connectorEditor.IsConnectorStartBeingMoved && " is 120.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsMovingStartOfConnectorForTransition,The length of the statement  "            return (outmostEditor.panel.connectorEditor != null && outmostEditor.panel.connectorEditor.IsConnectorStartBeingMoved && " is 120.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsCreatingConnectorFromAncestorToDescendantStates,The length of the statement  "                        StateContainerEditor.GetParentStateModelItemForTransition(StateContainerEditor.GetConnectorModelItem(outmostEditor.panel.connectorEditor.Connector)))) " is 150.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsCreatingConnectorFromAncestorToDescendantStates,The length of the statement  "                    if (StateContainerEditor.IsDescendantStateOf(StateContainerEditor.GetConnectorModelItem(outmostEditor.panel.connectorEditor.Connector).Properties[TransitionDesigner.ToPropertyName].Value' designer.ModelItem)) " is 208.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,ShouldInitialize,The length of the statement  "            return parent != null && parent.ModelItem != null && (parent.ModelItem.ItemType == typeof(StateMachine) && parent.ShowExpanded || " is 129.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Machine.Design;component/statecontainereditor.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The length of the statement  "            this.stateContainerGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridPreviewMouseMove); " is 130.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The length of the statement  "            this.stateContainerGrid.PreviewMouseUp += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseUp); " is 132.
Long Statement,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The length of the statement  "            this.stateContainerGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseDown); " is 136.
Long Statement,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,OnSetAsInitialCanExecute,The length of the statement  "            e.CanExecute = (this.ModelItem != this.stateMachineModelItem.Properties[StateMachineDesigner.InitialStatePropertyName].Value && " is 127.
Long Statement,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,OnSetAsInitialExecute,The length of the statement  "                this.stateMachineModelItem.Properties[StateMachineDesigner.InitialStatePropertyName].SetValue(this.ModelItem.GetCurrentValue()); " is 128.
Long Statement,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.OnSetAsInitialCanExecute); " is 147.
Long Statement,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnSetAsInitialExecute); " is 140.
Long Statement,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStateSpecificMenuItemLoaded); " is 129.
Long Statement,Machine.Design,StateMachineDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateMachineDesigner.xaml.cs,OnModelItemChanged,The length of the statement  "                // Make StateMachine designer always collapsed by default' but only if the user didn't explicitly specify collapsed or expanded. " is 128.
Long Statement,Machine.Design,StateMachineDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateMachineDesigner.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Machine.Design;component/statemachinedesigner.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Machine.Design,TransitionDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\TransitionDesigner.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Machine.Design;component/transitiondesigner.xaml"' System.UriKind.Relative); " is 122.
Long Statement,Machine.Design.FreeFormEditing,ConnectionPointsAdorner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPointsAdorner.cs,DrawConnectionPoint,The length of the statement  "            // actualLocation is the point on the Edge with respect to the coordinate system defined by the top left corner of the adorned element " is 134.
Long Statement,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Machine.Design;component/freeformediting/connector.xaml"' System.UriKind.Relative); " is 129.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,AddEditPoints,The length of the statement  "                if (this.editPoints.Count < 2 || !this.editPoints[this.editPoints.Count - 1].Equals(editedConnector.Points[editedConnector.Points.Count - 1])) " is 142.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,AddEditPoints,The length of the statement  "                    editPoints.Add(new EditPoint(EditPoint.EditPointTypes.ConnectionEditPoint' editedConnector.Points[editedConnector.Points.Count - 1])); " is 134.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,AddEditPoints,The length of the statement  "                        this.editPoints.Insert(this.editPoints.Count - 1' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' segments[i])); " is 126.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,GetPointsFromEditPoints,The length of the statement  "            //Connection end points will never be moved/removed in following two function calls. Hence passing null as pointsToRetain. " is 122.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveCoincidingEditPoints,The length of the statement  "            //Step2: We should make sure that the active edit point is always retained but those points which are coincidental are always removed " is 133.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveCoincidingEditPoints,The length of the statement  "                    Point location = (slope < 1) ? new Point(next.Location.X' current.Location.Y) : new Point(current.Location.X' next.Location.Y); " is 127.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveEditPointSegmentsWithinTolerance,The length of the statement  "                        next.Location = (slope < 1) ? new Point(next.Location.X' previous.Location.Y) : new Point(previous.Location.X' next.Location.Y); " is 128.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveEditPointSegmentsWithinTolerance,The length of the statement  "                            previous.Location = (slope < 1) ? new Point(previous.Location.X' next.Location.Y) : new Point(next.Location.X' previous.Location.Y); " is 132.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints(previous.Location' (next != null) ? next.Location : this.activeEditPoint.Location)) / 4; " is 171.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X + editPointOffset' previous.Location.Y) : new Point(previous.Location.X' previous.Location.Y + editPointOffset); " is 210.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    this.editPoints.InsertRange(activeEditPointIndex' new EditPoint[] { new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation)' previous }); " is 162.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints((previous != null) ? previous.Location : this.activeEditPoint.Location' next.Location)) / 4; " is 175.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(next.Location.X + editPointOffset' next.Location.Y) : new Point(next.Location.X' next.Location.Y + editPointOffset); " is 194.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    this.editPoints.InsertRange(activeEditPointIndex + 1' new EditPoint[] { next' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation) }); " is 162.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    Debug.Assert(this.editPoints[editPoints.Count - 1].Type == EditPoint.EditPointTypes.ConnectionEditPoint' "EditPoint type is wrong."); " is 133.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                    if (previous != null && previous.Type != EditPoint.EditPointTypes.ConnectionEditPoint && next != null && next.Type != EditPoint.EditPointTypes.ConnectionEditPoint) " is 163.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                        previous.Location = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X' newPoint.Y) : new Point(newPoint.X' previous.Location.Y); " is 150.
Long Statement,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The length of the statement  "                        next.Location = (orientation == Orientation.Horizontal) ? new Point(next.Location.X' newPoint.Y) : new Point(newPoint.X' next.Location.Y); " is 138.
Long Statement,Machine.Design.FreeFormEditing,EditPointAdorner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,OnRender,The length of the statement  "                    Pen renderPen = new Pen(new SolidColorBrush(WorkflowDesignerColors.WorkflowViewElementSelectedBorderColor)' FreeFormPanel.ConnectorEditorThickness); " is 148.
Long Statement,Machine.Design.FreeFormEditing,ConnectorLabelMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorLabelMarginConverter.cs,Convert,The length of the statement  "                    Point labelLocation = DesignerGeometryHelper.MidPointOfLineSegment(connectorPoints[longestSegmentIndex]' connectorPoints[longestSegmentIndex + 1]); " is 147.
Long Statement,Machine.Design.FreeFormEditing,ConnectorLabelVisibilityConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorLabelVisibilityConverter.cs,Convert,The length of the statement  "                if (DesignerGeometryHelper.LongestSegmentLength(connectorPoints' out maxSegmentStartPoint) > Connector.MinConnectorSegmentLengthForLabel) " is 137.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToArrowTransformConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowTransformConverter.cs,Convert,The length of the statement  "            RotateTransform rotateTransform = new RotateTransform(0' double.Parse(parameter.ToString()' CultureInfo.InvariantCulture)' double.Parse(parameter.ToString()' CultureInfo.InvariantCulture)); " is 189.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToSegmentsConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToSegmentsConverter.cs,Convert,The length of the statement  "                            Vector firstSegmentPointingVector = new Vector(pointCollection[i].X - pointCollection[i - 1].X' pointCollection[i].Y - pointCollection[i - 1].Y); " is 145.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToSegmentsConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToSegmentsConverter.cs,Convert,The length of the statement  "                            Vector secondSegmentPointingVector = new Vector(pointCollection[i + 1].X - pointCollection[i].X' pointCollection[i + 1].Y - pointCollection[i].Y); " is 146.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToSegmentsConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToSegmentsConverter.cs,Convert,The length of the statement  "                            Point turningPoint1 = Point.Add(pointCollection[i - 1]' Vector.Multiply(dist1 - RoundRadius' firstSegmentPointingVector)); " is 122.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToSegmentsConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToSegmentsConverter.cs,Convert,The length of the statement  "                            double crossProductZ = firstSegmentPointingVector.X * secondSegmentPointingVector.Y - firstSegmentPointingVector.Y * secondSegmentPointingVector.X; " is 147.
Long Statement,Machine.Design.FreeFormEditing,ConnectorPointsToSegmentsConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToSegmentsConverter.cs,Convert,The length of the statement  "                            retVal.Add(new ArcSegment(turningPoint2' new Size(RoundRadius' RoundRadius)' 0' false' crossProductZ > 0 ? SweepDirection.Clockwise : SweepDirection.Counterclockwise' true)); " is 174.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,The length of the statement  "            return Route(panel' FreeFormPanel.GetLocationRelativeToOutmostPanel(srcConnPoint)' end' FreeFormPanel.GetEdgeRelativeToOutmostPanel(srcConnPoint)' null); " is 153.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,The length of the statement  "                FreeFormPanel.GetLocationRelativeToOutmostPanel(destConnPoint)' FreeFormPanel.GetEdgeRelativeToOutmostPanel(srcConnPoint)' FreeFormPanel.GetEdgeRelativeToOutmostPanel(destConnPoint)); " is 183.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The length of the statement  "                    Size childSize = new Size(frameworkChild.DesiredSize.Width - margin.Left - margin.Right' frameworkChild.DesiredSize.Height - margin.Top - margin.Bottom); " is 153.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The length of the statement  "                    Rect rect = new Rect(Point.Add(panel.TranslatePoint(FreeFormPanel.GetLocation(child)' outmostPanel)' new Vector(margin.Left' margin.Top))' childSize); " is 150.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The length of the statement  "                    if (stateDesigner != null && stateDesigner.StateContainerEditor != null && stateDesigner.StateContainerEditor.Panel != null) " is 124.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,The length of the statement  "            segments = GetRoutedLineSegments(begin' end' new Size(connectorMargin' connectorMargin)' excludedRects.ToArray()' excludedLines.ToArray()); " is 139.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Route,The length of the statement  "                segments = GetRoutedLineSegments(begin' end' new Size(connectorMargin' connectorMargin)' excludedRects.ToArray()' new Point[] { }); " is 131.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The length of the statement  "                            ref escapePointsA' ref horizontalSegmentsA' ref verticalSegmentsA' ref horizontalSegmentsB' ref verticalSegmentsB' r1' margin' out intersectionFlag' out intersectionSegmentA' out intersectionSegmentB); " is 201.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The length of the statement  "                            ref escapePointsA' ref horizontalSegmentsA' ref verticalSegmentsA' ref horizontalSegmentsB' ref verticalSegmentsB' r2' margin' out intersectionFlag' out intersectionSegmentA' out intersectionSegmentB); " is 201.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The length of the statement  "                            ref escapePointsA' ref horizontalSegmentsA' ref verticalSegmentsA' ref horizontalSegmentsB' ref verticalSegmentsB' r3' margin' out intersectionFlag' out intersectionSegmentA' out intersectionSegmentB); " is 201.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeAlgorithm,The length of the statement  "                            ref escapePointsA' ref horizontalSegmentsA' ref verticalSegmentsA' ref horizontalSegmentsB' ref verticalSegmentsB' r4' margin' out intersectionFlag' out intersectionSegmentA' out intersectionSegmentB); " is 201.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The length of the statement  "            ConnectorSegment lesserCover = coverSet.GetCover(Z' (orientation == Orientation.Horizontal) ? DesignerEdges.Left : DesignerEdges.Bottom); " is 137.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The length of the statement  "            ConnectorSegment higherCover = coverSet.GetCover(Z' (orientation == Orientation.Horizontal) ? DesignerEdges.Right : DesignerEdges.Top); " is 135.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The length of the statement  "                    escapeLine.IsPointOnSegment(escapePoint) && !escapeLine.A.IsEqualTo(escapePoint) && !escapeLine.B.IsEqualTo(escapePoint) && " is 123.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,The length of the statement  "                        ref escapePointsA' ref horizontalEscapeSegmentsA' ref verticalEscapeSegmentsA' ref horizontalEscapeSegmentsB' ref verticalEscapeSegmentsB' ref orientationA' " is 156.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The length of the statement  "                    int steps = (int)Math.Max(Math.Abs(direction.X / margin.Width)' Math.Abs(direction.Y / margin.Height)); //one of the values will be null " is 136.
Long Statement,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The length of the statement  "                        ConnectorSegment b = ConnectorSegment.ConstructBoundSegment(coverSet' k' (a.Orientation == Orientation.Horizontal) ? Orientation.Vertical : Orientation.Horizontal); " is 164.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,ConstructBoundSegment,The length of the statement  "                return (orientation == Orientation.Horizontal) ? SegmentFromLeftToRightCover(coverSet' a) : SegmentFromBottomToTopCover(coverSet' a); " is 133.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Covers,The length of the statement  "                    (p.X.IsNoLessThan(Math.Min(this.point1.X' this.point2.X)) && p.X.IsNoGreaterThan(Math.Max(this.point1.X' this.point2.X))) :  " is 123.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Covers,The length of the statement  "                    (p.Y.IsNoLessThan(Math.Min(this.point1.Y' this.point2.Y)) && p.Y.IsNoGreaterThan(Math.Max(this.point1.Y' this.point2.Y))); " is 122.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,Overlaps,The length of the statement  "                    return this.IsPointOnSegment(segment.point1) || this.IsPointOnSegment(segment.point2) || segment.IsPointOnSegment(this.point1) || segment.IsPointOnSegment(this.point2); " is 168.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,ExtendPointOutwards,The length of the statement  "                return new Point((this.orientation == Orientation.Horizontal) ? k : p.X' (this.orientation == Orientation.Horizontal) ? p.Y : k); " is 129.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,IsPointOnSegment,The length of the statement  "                if ((this.orientation == Orientation.Horizontal && !p.Y.IsEqualTo(this.point1.Y)) || (this.orientation == Orientation.Vertical && !p.X.IsEqualTo(this.point1.X))) " is 161.
Long Statement,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,PerpendicularThroughPoint,The length of the statement  "                Orientation newOrientation = (this.orientation == Orientation.Horizontal) ? Orientation.Vertical : Orientation.Horizontal; " is 122.
Long Statement,Machine.Design.FreeFormEditing,CoverSet,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddCover,The length of the statement  "                List < ConnectorSegment > covers = (cover.Orientation == Orientation.Vertical) ? this.verticalCovers : this.horizontalCovers; " is 125.
Long Statement,Machine.Design.FreeFormEditing,DesignerGeometryHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\DesignerGeometryHelper.cs,LongestSegmentLength,The length of the statement  "                double length = Math.Abs((points[i].X == points[i + 1].X) ? points[i].Y - points[i + 1].Y : points[i].X - points[i + 1].X); " is 123.
Long Statement,Machine.Design.FreeFormEditing,FreeFormPanel,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\FreeFormPanel.cs,MeasureChildren,The length of the statement  "                        Point srcPoint = FreeFormPanel.GetLocationRelativeToOutmostPanel(FreeFormPanel.GetSourceConnectionPoint(connectorChild)); " is 121.
Long Statement,Machine.Design.FreeFormEditing,FreeFormPanel,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\FreeFormPanel.cs,MeasureChildren,The length of the statement  "                        Point destPoint = FreeFormPanel.GetLocationRelativeToOutmostPanel(FreeFormPanel.GetDestinationConnectionPoint(connectorChild)); " is 127.
Long Statement,Machine.Design.FreeFormEditing,FreeFormPanel,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\FreeFormPanel.cs,MeasureChildren,The length of the statement  "                            || (DesignerGeometryHelper.DistanceBetweenPoints(connectorChild.Points[connectorChild.Points.Count - 1]' destPoint) > 1)) " is 121.
Long Statement,Machine.Design.FreeFormEditing,FreeFormPanel,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\FreeFormPanel.cs,RoutePolyLine,The length of the statement  "            Point[] pts = ConnectorRouter.Route(this' FreeFormPanel.GetSourceConnectionPoint(connector)' FreeFormPanel.GetDestinationConnectionPoint(connector)); " is 149.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,IsDescendantStateOf,The conditional expression  "descendant != null && descendant.ItemType == typeof(State) && ancestor != null && ancestor.ItemType == typeof(State)"  is complex.
Complex Conditional,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnFreeFormPanelLocationChanged,The conditional expression  "existingViewState != null && existingViewState.Count > 0 && movedConnector.Points.Count > 0                      && existingViewState[0].Equals(movedConnector.Points[0]) && existingViewState[existingViewState.Count - 1].Equals(movedConnector.Points[movedConnector.Points.Count - 1])"  is complex.
Complex Conditional,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridDrag,The conditional expression  "modelItem != null && modelItem.ItemType == typeof(State) && this.ModelItem.ItemType == typeof(State) &&                      (bool)modelItem.Properties[StateDesigner.IsFinalPropertyName].Value.GetCurrentValue()"  is complex.
Complex Conditional,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridDrag,The conditional expression  "(this.ModelItem.ItemType == typeof(State) && DragDropHelper.AllowDrop(e.Data' this.Context' typeof(State))) ||                      (this.ModelItem.ItemType == typeof(StateMachine) && DragDropHelper.AllowDrop(e.Data' this.Context' typeof(State)' typeof(FinalState)))"  is complex.
Complex Conditional,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,OnStateContainerGridKeyDown,The conditional expression  "object.Equals(primarySelection' connectorModelItem) ||                      // Delete initial link                      primarySelection == null && connectorModelItem != null && connectorModelItem.ItemType != typeof(Transition)"  is complex.
Complex Conditional,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveCoincidingEditPoints,The conditional expression  "this.editPoints.Count < 2 ||                  this.editPoints[0].Type != EditPoint.EditPointTypes.ConnectionEditPoint ||                  this.editPoints[this.editPoints.Count - 1].Type != EditPoint.EditPointTypes.ConnectionEditPoint ||                  (this.activeEditPoint != null && this.activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)"  is complex.
Complex Conditional,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The conditional expression  "previous != null && previous.Type != EditPoint.EditPointTypes.ConnectionEditPoint && next != null && next.Type != EditPoint.EditPointTypes.ConnectionEditPoint"  is complex.
Complex Conditional,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddBoundPoint,The conditional expression  "p.X != int.MinValue && p.X != int.MaxValue && p.Y != int.MinValue && p.Y != int.MaxValue"  is complex.
Complex Conditional,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The conditional expression  "!coverSet.EscapeLineHasBeenUsed(escapePoint) &&                      escapeLine.IsPointOnSegment(escapePoint) && !escapeLine.A.IsEqualTo(escapePoint) && !escapeLine.B.IsEqualTo(escapePoint) &&                      coverSet.IsEscapePoint(Z' escapePoint' side)"  is complex.
Complex Conditional,Machine.Design.FreeFormEditing,ConnectorSegment,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,IsPointOnSegment,The conditional expression  "(this.orientation == Orientation.Horizontal && !p.Y.IsEqualTo(this.point1.Y)) || (this.orientation == Orientation.Vertical && !p.X.IsEqualTo(this.point1.X))"  is complex.
Magic Number,Machine.Design,InitialNode,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\InitialNode.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.startIcon = ((System.Windows.Controls.ContentControl)(target));              return;              case 2:              this.border = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,SnapVisualToGrid,The following statement contains a magic number: if (shapeAnchorPoint.X < 0 && shapeAnchorPoint.Y < 0)              {                  //shapeAnchorPoint is set to (-1' -1) in case where it does not make sense (eg. toolbox drop).                  location.X -= InitialFinalWidth/2;                  location.Y -= InitialFinalHeight/2;              }              else              {                  location.X -= shapeAnchorPoint.X;                  location.Y -= shapeAnchorPoint.Y;                  oldCenter = new Point(location.X + element.DesiredSize.Width / 2' location.Y + element.DesiredSize.Height / 2);              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,SnapVisualToGrid,The following statement contains a magic number: if (shapeAnchorPoint.X < 0 && shapeAnchorPoint.Y < 0)              {                  //shapeAnchorPoint is set to (-1' -1) in case where it does not make sense (eg. toolbox drop).                  location.X -= InitialFinalWidth/2;                  location.Y -= InitialFinalHeight/2;              }              else              {                  location.X -= shapeAnchorPoint.X;                  location.Y -= shapeAnchorPoint.Y;                  oldCenter = new Point(location.X + element.DesiredSize.Width / 2' location.Y + element.DesiredSize.Height / 2);              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,SnapVisualToGrid,The following statement contains a magic number: if (shapeAnchorPoint.X < 0 && shapeAnchorPoint.Y < 0)              {                  //shapeAnchorPoint is set to (-1' -1) in case where it does not make sense (eg. toolbox drop).                  location.X -= InitialFinalWidth/2;                  location.Y -= InitialFinalHeight/2;              }              else              {                  location.X -= shapeAnchorPoint.X;                  location.Y -= shapeAnchorPoint.Y;                  oldCenter = new Point(location.X + element.DesiredSize.Width / 2' location.Y + element.DesiredSize.Height / 2);              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,SnapVisualToGrid,The following statement contains a magic number: if (shapeAnchorPoint.X < 0 && shapeAnchorPoint.Y < 0)              {                  //shapeAnchorPoint is set to (-1' -1) in case where it does not make sense (eg. toolbox drop).                  location.X -= InitialFinalWidth/2;                  location.Y -= InitialFinalHeight/2;              }              else              {                  location.X -= shapeAnchorPoint.X;                  location.Y -= shapeAnchorPoint.Y;                  oldCenter = new Point(location.X + element.DesiredSize.Width / 2' location.Y + element.DesiredSize.Height / 2);              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddInitialNode,The following statement contains a magic number: Point startPoint = new Point(panel.MinWidth / 2' startSymbolTopMargin + startHeight / 2);
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,AddInitialNode,The following statement contains a magic number: Point startPoint = new Point(panel.MinWidth / 2' startSymbolTopMargin + startHeight / 2);
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,PopulateConnectionPoints,The following statement contains a magic number: if (view is InitialNode)              {                                   connectionPoints.Add(CreateConnectionPoint(view' 0.5' 1.0' EdgeLocation.Bottom' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 0' 0.5' EdgeLocation.Left' ConnectionPointType.Outgoing));                  connectionPoints.Add(CreateConnectionPoint(view' 1.0' 0.5' EdgeLocation.Right' ConnectionPointType.Outgoing));              }              else if (view is StateDesigner)              {                  ConnectionPointType connectionPointType = ConnectionPointType.Default;                  double connectionPointNum = 3;                  double connectionPointRatio = 0.25;                  if (((StateDesigner)view).IsFinalState())                  {                      connectionPointType = ConnectionPointType.Incoming;                  }                                      for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' 1' ii * connectionPointRatio' EdgeLocation.Right' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' 0' ii * connectionPointRatio' EdgeLocation.Left' connectionPointType));                  }                                      if (!((StateDesigner)view).IsFinalState())                  {                      connectionPointNum = 5;                                         connectionPointRatio = 0.167;                  }                  for (int ii = 1; ii <= connectionPointNum; ii++)                  {                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 0' EdgeLocation.Top' connectionPointType));                      connectionPoints.Add(CreateConnectionPoint(view' ii * connectionPointRatio' 1' EdgeLocation.Bottom' connectionPointType));                  }              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateContainerEditor = ((Machine.Design.StateContainerEditor)(target));              return;              case 2:              this.stateContainerGrid = ((System.Windows.Controls.Grid)(target));                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseLeave);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseMove);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridPreviewMouseMove);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseUp += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseUp);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.KeyDown += new System.Windows.Input.KeyEventHandler(this.OnStateContainerGridKeyDown);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseDown);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragOver += new System.Windows.DragEventHandler(this.OnStateContainerGridDragOver);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragEnter += new System.Windows.DragEventHandler(this.OnStateContainerGridDragEnter);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.Drop += new System.Windows.DragEventHandler(this.OnStateContainerGridDrop);                            #line default              #line hidden              return;              case 3:              this.panel = ((Machine.Design.FreeFormEditing.FreeFormPanel)(target));              return;              }
Magic Number,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateContainerEditor = ((Machine.Design.StateContainerEditor)(target));              return;              case 2:              this.stateContainerGrid = ((System.Windows.Controls.Grid)(target));                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseLeave);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseMove);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridPreviewMouseMove);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseUp += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseUp);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.KeyDown += new System.Windows.Input.KeyEventHandler(this.OnStateContainerGridKeyDown);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseDown);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragOver += new System.Windows.DragEventHandler(this.OnStateContainerGridDragOver);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragEnter += new System.Windows.DragEventHandler(this.OnStateContainerGridDragEnter);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.Drop += new System.Windows.DragEventHandler(this.OnStateContainerGridDrop);                            #line default              #line hidden              return;              case 3:              this.panel = ((Machine.Design.FreeFormEditing.FreeFormPanel)(target));              return;              }
Magic Number,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateDesigner = ((Machine.Design.StateDesigner)(target));              return;              case 2:                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.OnSetAsInitialCanExecute);                            #line default              #line hidden                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnSetAsInitialExecute);                            #line default              #line hidden              return;              case 3:                            #line 20 "..\..\StateDesigner.xaml"              ((System.Windows.Controls.MenuItem)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStateSpecificMenuItemLoaded);                            #line default              #line hidden              return;              case 4:              this.stateContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Magic Number,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateDesigner = ((Machine.Design.StateDesigner)(target));              return;              case 2:                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.OnSetAsInitialCanExecute);                            #line default              #line hidden                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnSetAsInitialExecute);                            #line default              #line hidden              return;              case 3:                            #line 20 "..\..\StateDesigner.xaml"              ((System.Windows.Controls.MenuItem)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStateSpecificMenuItemLoaded);                            #line default              #line hidden              return;              case 4:              this.stateContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Magic Number,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateDesigner = ((Machine.Design.StateDesigner)(target));              return;              case 2:                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.OnSetAsInitialCanExecute);                            #line default              #line hidden                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnSetAsInitialExecute);                            #line default              #line hidden              return;              case 3:                            #line 20 "..\..\StateDesigner.xaml"              ((System.Windows.Controls.MenuItem)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStateSpecificMenuItemLoaded);                            #line default              #line hidden              return;              case 4:              this.stateContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Magic Number,Machine.Design,StateMachineDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateMachineDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateMachineDesigner = ((Machine.Design.StateMachineDesigner)(target));              return;              case 2:                            #line 45 "..\..\StateMachineDesigner.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 3:              this.stateMachineContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Magic Number,Machine.Design,StateMachineDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateMachineDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateMachineDesigner = ((Machine.Design.StateMachineDesigner)(target));              return;              case 2:                            #line 45 "..\..\StateMachineDesigner.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 3:              this.stateMachineContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Magic Number,Machine.Design,TransitionDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\TransitionDesigner.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.stateContentGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.conditionBox = ((System.Activities.Presentation.View.ExpressionTextBox)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,EdgeToDrawnMidPointOffset,The following statement contains a magic number: switch (this.EdgeLocation)              {                  case EdgeLocation.Left: return new Vector(-small / 2' 0);                  case EdgeLocation.Right: return new Vector(small / 2' 0);                  case EdgeLocation.Top: return new Vector(0' -small / 2);                  case EdgeLocation.Bottom: return new Vector(0' small / 2);              }
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,EdgeToDrawnMidPointOffset,The following statement contains a magic number: switch (this.EdgeLocation)              {                  case EdgeLocation.Left: return new Vector(-small / 2' 0);                  case EdgeLocation.Right: return new Vector(small / 2' 0);                  case EdgeLocation.Top: return new Vector(0' -small / 2);                  case EdgeLocation.Bottom: return new Vector(0' small / 2);              }
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,EdgeToDrawnMidPointOffset,The following statement contains a magic number: switch (this.EdgeLocation)              {                  case EdgeLocation.Left: return new Vector(-small / 2' 0);                  case EdgeLocation.Right: return new Vector(small / 2' 0);                  case EdgeLocation.Top: return new Vector(0' -small / 2);                  case EdgeLocation.Bottom: return new Vector(0' small / 2);              }
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,EdgeToDrawnMidPointOffset,The following statement contains a magic number: switch (this.EdgeLocation)              {                  case EdgeLocation.Left: return new Vector(-small / 2' 0);                  case EdgeLocation.Right: return new Vector(small / 2' 0);                  case EdgeLocation.Top: return new Vector(0' -small / 2);                  case EdgeLocation.Bottom: return new Vector(0' small / 2);              }
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,MidPointToTopLeftOffset,The following statement contains a magic number: return new Vector(-rectSize.Width / 2' -rectSize.Height / 2);
Magic Number,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,MidPointToTopLeftOffset,The following statement contains a magic number: return new Vector(-rectSize.Width / 2' -rectSize.Height / 2);
Magic Number,Machine.Design.FreeFormEditing,ConnectionPointConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPointConverter.cs,Convert,The following statement contains a magic number: Thickness margin = (Thickness)parameters[2];
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,AddEditPoints,The following statement contains a magic number: if (editPointType == EditPoint.EditPointTypes.ConnectionEditPoint)              {                  if (this.editPoints.Count == 0 || !this.editPoints[0].Location.Equals(editedConnector.Points[0]))                  {                      this.editPoints.Insert(0' new EditPoint(EditPoint.EditPointTypes.ConnectionEditPoint' editedConnector.Points[0]));                  }                    if (this.editPoints.Count < 2 || !this.editPoints[this.editPoints.Count - 1].Equals(editedConnector.Points[editedConnector.Points.Count - 1]))                  {                      editPoints.Add(new EditPoint(EditPoint.EditPointTypes.ConnectionEditPoint' editedConnector.Points[editedConnector.Points.Count - 1]));                  }              }              else if (editPointType == EditPoint.EditPointTypes.MultiSegmentEditPoint)              {                  if (this.editPoints.Count == 2)                  {                      List<Point> segments = new List<Point>(this.editedConnector.Points);                      if (segments.Count > 0)                      {                          segments.RemoveAt(0);                          segments.RemoveAt(segments.Count - 1);                      }                        for (int i = 0; i < segments.Count; i++)                      {                          this.editPoints.Insert(this.editPoints.Count - 1' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' segments[i]));                      }                  }                  else                  {                      Debug.Assert(false' "EditPoints.Count is not 2.");                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,AddEditPoints,The following statement contains a magic number: if (editPointType == EditPoint.EditPointTypes.ConnectionEditPoint)              {                  if (this.editPoints.Count == 0 || !this.editPoints[0].Location.Equals(editedConnector.Points[0]))                  {                      this.editPoints.Insert(0' new EditPoint(EditPoint.EditPointTypes.ConnectionEditPoint' editedConnector.Points[0]));                  }                    if (this.editPoints.Count < 2 || !this.editPoints[this.editPoints.Count - 1].Equals(editedConnector.Points[editedConnector.Points.Count - 1]))                  {                      editPoints.Add(new EditPoint(EditPoint.EditPointTypes.ConnectionEditPoint' editedConnector.Points[editedConnector.Points.Count - 1]));                  }              }              else if (editPointType == EditPoint.EditPointTypes.MultiSegmentEditPoint)              {                  if (this.editPoints.Count == 2)                  {                      List<Point> segments = new List<Point>(this.editedConnector.Points);                      if (segments.Count > 0)                      {                          segments.RemoveAt(0);                          segments.RemoveAt(segments.Count - 1);                      }                        for (int i = 0; i < segments.Count; i++)                      {                          this.editPoints.Insert(this.editPoints.Count - 1' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' segments[i]));                      }                  }                  else                  {                      Debug.Assert(false' "EditPoints.Count is not 2.");                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,RemoveCoincidingEditPoints,The following statement contains a magic number: if (this.editPoints.Count < 2 ||                  this.editPoints[0].Type != EditPoint.EditPointTypes.ConnectionEditPoint ||                  this.editPoints[this.editPoints.Count - 1].Type != EditPoint.EditPointTypes.ConnectionEditPoint ||                  (this.activeEditPoint != null && this.activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint))              {                  return;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The following statement contains a magic number: if (this.editPoints.Count < 2 ||                  this.editPoints[0].Type != EditPoint.EditPointTypes.ConnectionEditPoint ||                  this.editPoints[this.editPoints.Count - 1].Type != EditPoint.EditPointTypes.ConnectionEditPoint)              {                  Debug.Assert(false' "EditPoints are invalid");                  return;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The following statement contains a magic number: if (this.activeEditPoint != null)              {                  int activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                  EditPoint previous = (activeEditPointIndex > 0) ? this.editPoints[activeEditPointIndex - 1] : null;                  EditPoint next = (activeEditPointIndex < this.editPoints.Count - 1) ? this.editPoints[activeEditPointIndex + 1] : null;                    //Note that extra edit points are only added if we are connected to connection point                  if (previous != null && previous.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(previous.Location' this.activeEditPoint.Location);                      Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                        int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints(previous.Location' (next != null) ? next.Location : this.activeEditPoint.Location)) / 4;                      if (orientation == Orientation.Horizontal)                      {                          editPointOffset *= (previous.Location.X < this.activeEditPoint.Location.X) ? 1 : -1;                      }                      else                      {                          editPointOffset *= (previous.Location.Y < this.activeEditPoint.Location.Y) ? 1 : -1;                      }                        activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                      Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X + editPointOffset' previous.Location.Y) : new Point(previous.Location.X' previous.Location.Y + editPointOffset);                      previous = new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation);                      this.editPoints.InsertRange(activeEditPointIndex' new EditPoint[] { new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation)' previous });                  }                    if (next != null && next.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(this.activeEditPoint.Location' next.Location);                      Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                        int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints((previous != null) ? previous.Location : this.activeEditPoint.Location' next.Location)) / 4;                      if (orientation == Orientation.Horizontal)                      {                          editPointOffset *= (this.activeEditPoint.Location.X < next.Location.X) ? -1 : 1;                      }                      else                      {                          editPointOffset *= (this.activeEditPoint.Location.Y < next.Location.Y) ? -1 : 1;                      }                        activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                      Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(next.Location.X + editPointOffset' next.Location.Y) : new Point(next.Location.X' next.Location.Y + editPointOffset);                      next = new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation);                      this.editPoints.InsertRange(activeEditPointIndex + 1' new EditPoint[] { next' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation) });                  }                    if (this.activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      Debug.Assert(this.editPoints[0].Type == EditPoint.EditPointTypes.ConnectionEditPoint' "EditPoint type is wrong.");                      Debug.Assert(this.editPoints[editPoints.Count - 1].Type == EditPoint.EditPointTypes.ConnectionEditPoint' "EditPoint type is wrong.");                      this.activeEditPoint.Location = newPoint;                        Point begin' end;                      Debug.Assert(this.editPoints.Count > 0' "Some edit point should exist");                      begin = this.editPoints[0].Location;                      end = this.editPoints[this.editPoints.Count - 1].Location;                        //When we start editing the end point we need to clear the slate and start over                      List<EditPoint> newEditPoints = new List<EditPoint>();                      Point[] points = ConnectorRouter.Route(parentPanel' begin' end);                      if (points != null && points.Length > 1)                      {                          RemoveEditPoints(EditPoint.EditPointTypes.MultiSegmentEditPoint);                          for (int i = 1; i < points.Length - 1; ++i)                          {                              newEditPoints.Add(new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' points[i]));                          }                          this.editPoints.InsertRange(1' newEditPoints.ToArray());                      }                  }                  else if (this.activeEditPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)                  {                      if (previous != null && previous.Type != EditPoint.EditPointTypes.ConnectionEditPoint && next != null && next.Type != EditPoint.EditPointTypes.ConnectionEditPoint)                      {                          //Update the previous point                          double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(previous.Location' this.activeEditPoint.Location);                          Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                          previous.Location = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X' newPoint.Y) : new Point(newPoint.X' previous.Location.Y);                            //Update the next point                          slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(this.activeEditPoint.Location' next.Location);                          orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                          next.Location = (orientation == Orientation.Horizontal) ? new Point(next.Location.X' newPoint.Y) : new Point(newPoint.X' next.Location.Y);                            //Update the current point                          this.activeEditPoint.Location = newPoint;                      }                      else                      {                          Debug.Assert(false' "Should not be here. UpdateEditPoints failed.");                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,UpdateEditPoints,The following statement contains a magic number: if (this.activeEditPoint != null)              {                  int activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                  EditPoint previous = (activeEditPointIndex > 0) ? this.editPoints[activeEditPointIndex - 1] : null;                  EditPoint next = (activeEditPointIndex < this.editPoints.Count - 1) ? this.editPoints[activeEditPointIndex + 1] : null;                    //Note that extra edit points are only added if we are connected to connection point                  if (previous != null && previous.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(previous.Location' this.activeEditPoint.Location);                      Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                        int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints(previous.Location' (next != null) ? next.Location : this.activeEditPoint.Location)) / 4;                      if (orientation == Orientation.Horizontal)                      {                          editPointOffset *= (previous.Location.X < this.activeEditPoint.Location.X) ? 1 : -1;                      }                      else                      {                          editPointOffset *= (previous.Location.Y < this.activeEditPoint.Location.Y) ? 1 : -1;                      }                        activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                      Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X + editPointOffset' previous.Location.Y) : new Point(previous.Location.X' previous.Location.Y + editPointOffset);                      previous = new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation);                      this.editPoints.InsertRange(activeEditPointIndex' new EditPoint[] { new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation)' previous });                  }                    if (next != null && next.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(this.activeEditPoint.Location' next.Location);                      Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                        int editPointOffset = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints((previous != null) ? previous.Location : this.activeEditPoint.Location' next.Location)) / 4;                      if (orientation == Orientation.Horizontal)                      {                          editPointOffset *= (this.activeEditPoint.Location.X < next.Location.X) ? -1 : 1;                      }                      else                      {                          editPointOffset *= (this.activeEditPoint.Location.Y < next.Location.Y) ? -1 : 1;                      }                        activeEditPointIndex = this.editPoints.IndexOf(this.activeEditPoint);                      Point editPointLocation = (orientation == Orientation.Horizontal) ? new Point(next.Location.X + editPointOffset' next.Location.Y) : new Point(next.Location.X' next.Location.Y + editPointOffset);                      next = new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation);                      this.editPoints.InsertRange(activeEditPointIndex + 1' new EditPoint[] { next' new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' editPointLocation) });                  }                    if (this.activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)                  {                      Debug.Assert(this.editPoints[0].Type == EditPoint.EditPointTypes.ConnectionEditPoint' "EditPoint type is wrong.");                      Debug.Assert(this.editPoints[editPoints.Count - 1].Type == EditPoint.EditPointTypes.ConnectionEditPoint' "EditPoint type is wrong.");                      this.activeEditPoint.Location = newPoint;                        Point begin' end;                      Debug.Assert(this.editPoints.Count > 0' "Some edit point should exist");                      begin = this.editPoints[0].Location;                      end = this.editPoints[this.editPoints.Count - 1].Location;                        //When we start editing the end point we need to clear the slate and start over                      List<EditPoint> newEditPoints = new List<EditPoint>();                      Point[] points = ConnectorRouter.Route(parentPanel' begin' end);                      if (points != null && points.Length > 1)                      {                          RemoveEditPoints(EditPoint.EditPointTypes.MultiSegmentEditPoint);                          for (int i = 1; i < points.Length - 1; ++i)                          {                              newEditPoints.Add(new EditPoint(EditPoint.EditPointTypes.MultiSegmentEditPoint' points[i]));                          }                          this.editPoints.InsertRange(1' newEditPoints.ToArray());                      }                  }                  else if (this.activeEditPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)                  {                      if (previous != null && previous.Type != EditPoint.EditPointTypes.ConnectionEditPoint && next != null && next.Type != EditPoint.EditPointTypes.ConnectionEditPoint)                      {                          //Update the previous point                          double slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(previous.Location' this.activeEditPoint.Location);                          Orientation orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                          previous.Location = (orientation == Orientation.Horizontal) ? new Point(previous.Location.X' newPoint.Y) : new Point(newPoint.X' previous.Location.Y);                            //Update the next point                          slopeOfLine = DesignerGeometryHelper.SlopeOfLineSegment(this.activeEditPoint.Location' next.Location);                          orientation = (Math.Abs(slopeOfLine) < 1) ? Orientation.Horizontal : Orientation.Vertical;                          next.Location = (orientation == Orientation.Horizontal) ? new Point(next.Location.X' newPoint.Y) : new Point(newPoint.X' next.Location.Y);                            //Update the current point                          this.activeEditPoint.Location = newPoint;                      }                      else                      {                          Debug.Assert(false' "Should not be here. UpdateEditPoints failed.");                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorEditor.cs,ValidateEditPoints,The following statement contains a magic number: if (this.editPoints.Count < 2)              {                  return false;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorLabelMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorLabelMarginConverter.cs,Convert,The following statement contains a magic number: double labelBorderHeight = (double)values[2];
Magic Number,Machine.Design.FreeFormEditing,ConnectorLabelMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorLabelMarginConverter.cs,Convert,The following statement contains a magic number: if (connectorPoints != null)              {                  int longestSegmentIndex;                  DesignerGeometryHelper.LongestSegmentLength(connectorPoints' out longestSegmentIndex);                  if (longestSegmentIndex >= 0)                  {                      Point labelLocation = DesignerGeometryHelper.MidPointOfLineSegment(connectorPoints[longestSegmentIndex]' connectorPoints[longestSegmentIndex + 1]);                      labelLocation.X = (int)(labelLocation.X - labelBorderWidth / 2 + EPS);                      labelLocation.Y = (int)(labelLocation.Y - labelBorderHeight / 2 + EPS);                      margin.Top = labelLocation.Y;                      margin.Left = labelLocation.X;                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorLabelMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorLabelMarginConverter.cs,Convert,The following statement contains a magic number: if (connectorPoints != null)              {                  int longestSegmentIndex;                  DesignerGeometryHelper.LongestSegmentLength(connectorPoints' out longestSegmentIndex);                  if (longestSegmentIndex >= 0)                  {                      Point labelLocation = DesignerGeometryHelper.MidPointOfLineSegment(connectorPoints[longestSegmentIndex]' connectorPoints[longestSegmentIndex + 1]);                      labelLocation.X = (int)(labelLocation.X - labelBorderWidth / 2 + EPS);                      labelLocation.Y = (int)(labelLocation.Y - labelBorderHeight / 2 + EPS);                      margin.Top = labelLocation.Y;                      margin.Left = labelLocation.X;                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorPointsToArrowMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowMarginConverter.cs,Convert,The following statement contains a magic number: if (transform != null)              {                  switch ((int)transform.Angle)                  {                      case 0:                          margin.Left -= offset;                          break;                      case 90:                          margin.Top -= offset;                          break;                      case 180:                          margin.Left += offset;                          break;                      case 270:                          margin.Top += offset;                          break;                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorPointsToArrowMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowMarginConverter.cs,Convert,The following statement contains a magic number: if (transform != null)              {                  switch ((int)transform.Angle)                  {                      case 0:                          margin.Left -= offset;                          break;                      case 90:                          margin.Top -= offset;                          break;                      case 180:                          margin.Left += offset;                          break;                      case 270:                          margin.Top += offset;                          break;                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorPointsToArrowMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowMarginConverter.cs,Convert,The following statement contains a magic number: if (transform != null)              {                  switch ((int)transform.Angle)                  {                      case 0:                          margin.Left -= offset;                          break;                      case 90:                          margin.Top -= offset;                          break;                      case 180:                          margin.Left += offset;                          break;                      case 270:                          margin.Top += offset;                          break;                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorPointsToArrowTransformConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowTransformConverter.cs,GetArrowOrientation,The following statement contains a magic number: Point srcPoint = points[points.Count - 2];
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The following statement contains a magic number: foreach (UIElement child in panel.Children)              {                  if (!(child is Connector))                  {                      Thickness margin = new Thickness(0);                      FrameworkElement frameworkChild = child as FrameworkElement;                      if (frameworkChild != null)                      {                          margin = frameworkChild.Margin;                      }                      Size childSize = new Size(frameworkChild.DesiredSize.Width - margin.Left - margin.Right' frameworkChild.DesiredSize.Height - margin.Top - margin.Bottom);                      Rect rect = new Rect(Point.Add(panel.TranslatePoint(FreeFormPanel.GetLocation(child)' outmostPanel)' new Vector(margin.Left' margin.Top))' childSize);                      // We don't want to add containing rectangles to the exclusion list' otherwise the algorithm will fail to find a path                      Rect shrunk = new Rect(rect.X + 0.1' rect.Y + 0.1' rect.Width - 0.2' rect.Height - 0.2);                      if (!shrunk.Contains(begin) && !shrunk.Contains(end))                      {                          excludedRects.Add(rect);                      }                      StateDesigner stateDesigner = child as StateDesigner;                      if (stateDesigner != null && stateDesigner.StateContainerEditor != null && stateDesigner.StateContainerEditor.Panel != null)                      {                          AddExcludedRects(outmostPanel' stateDesigner.StateContainerEditor.Panel' begin' end' excludedRects);                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The following statement contains a magic number: foreach (UIElement child in panel.Children)              {                  if (!(child is Connector))                  {                      Thickness margin = new Thickness(0);                      FrameworkElement frameworkChild = child as FrameworkElement;                      if (frameworkChild != null)                      {                          margin = frameworkChild.Margin;                      }                      Size childSize = new Size(frameworkChild.DesiredSize.Width - margin.Left - margin.Right' frameworkChild.DesiredSize.Height - margin.Top - margin.Bottom);                      Rect rect = new Rect(Point.Add(panel.TranslatePoint(FreeFormPanel.GetLocation(child)' outmostPanel)' new Vector(margin.Left' margin.Top))' childSize);                      // We don't want to add containing rectangles to the exclusion list' otherwise the algorithm will fail to find a path                      Rect shrunk = new Rect(rect.X + 0.1' rect.Y + 0.1' rect.Width - 0.2' rect.Height - 0.2);                      if (!shrunk.Contains(begin) && !shrunk.Contains(end))                      {                          excludedRects.Add(rect);                      }                      StateDesigner stateDesigner = child as StateDesigner;                      if (stateDesigner != null && stateDesigner.StateContainerEditor != null && stateDesigner.StateContainerEditor.Panel != null)                      {                          AddExcludedRects(outmostPanel' stateDesigner.StateContainerEditor.Panel' begin' end' excludedRects);                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The following statement contains a magic number: foreach (UIElement child in panel.Children)              {                  if (!(child is Connector))                  {                      Thickness margin = new Thickness(0);                      FrameworkElement frameworkChild = child as FrameworkElement;                      if (frameworkChild != null)                      {                          margin = frameworkChild.Margin;                      }                      Size childSize = new Size(frameworkChild.DesiredSize.Width - margin.Left - margin.Right' frameworkChild.DesiredSize.Height - margin.Top - margin.Bottom);                      Rect rect = new Rect(Point.Add(panel.TranslatePoint(FreeFormPanel.GetLocation(child)' outmostPanel)' new Vector(margin.Left' margin.Top))' childSize);                      // We don't want to add containing rectangles to the exclusion list' otherwise the algorithm will fail to find a path                      Rect shrunk = new Rect(rect.X + 0.1' rect.Y + 0.1' rect.Width - 0.2' rect.Height - 0.2);                      if (!shrunk.Contains(begin) && !shrunk.Contains(end))                      {                          excludedRects.Add(rect);                      }                      StateDesigner stateDesigner = child as StateDesigner;                      if (stateDesigner != null && stateDesigner.StateContainerEditor != null && stateDesigner.StateContainerEditor.Panel != null)                      {                          AddExcludedRects(outmostPanel' stateDesigner.StateContainerEditor.Panel' begin' end' excludedRects);                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,AddExcludedRects,The following statement contains a magic number: foreach (UIElement child in panel.Children)              {                  if (!(child is Connector))                  {                      Thickness margin = new Thickness(0);                      FrameworkElement frameworkChild = child as FrameworkElement;                      if (frameworkChild != null)                      {                          margin = frameworkChild.Margin;                      }                      Size childSize = new Size(frameworkChild.DesiredSize.Width - margin.Left - margin.Right' frameworkChild.DesiredSize.Height - margin.Top - margin.Bottom);                      Rect rect = new Rect(Point.Add(panel.TranslatePoint(FreeFormPanel.GetLocation(child)' outmostPanel)' new Vector(margin.Left' margin.Top))' childSize);                      // We don't want to add containing rectangles to the exclusion list' otherwise the algorithm will fail to find a path                      Rect shrunk = new Rect(rect.X + 0.1' rect.Y + 0.1' rect.Width - 0.2' rect.Height - 0.2);                      if (!shrunk.Contains(begin) && !shrunk.Contains(end))                      {                          excludedRects.Add(rect);                      }                      StateDesigner stateDesigner = child as StateDesigner;                      if (stateDesigner != null && stateDesigner.StateContainerEditor != null && stateDesigner.StateContainerEditor.Panel != null)                      {                          AddExcludedRects(outmostPanel' stateDesigner.StateContainerEditor.Panel' begin' end' excludedRects);                      }                  }              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,RemoveRedundantPoints,The following statement contains a magic number: int index3 = 2;
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,EscapeProcessI,The following statement contains a magic number: List < DistanceFromPoint > extremitiesList = new List < DistanceFromPoint >(4);
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,The following statement contains a magic number: if ((linesToExclude.Length % 2) > 0)              {                  throw new ArgumentException("Error");              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The following statement contains a magic number: while (currentSegment < refinedPath.Count - 1)              {                  Point a1 = refinedPath[currentSegment];                  Point a2 = refinedPath[currentSegment + 1];                    ConnectorSegment a = ConnectorSegment.ConstructBoundSegment(coverSet' a1' a2);                    int intersectingSegment = currentSegment + 2;                  while (intersectingSegment < refinedPath.Count - 1)                  {                      Point b1 = refinedPath[intersectingSegment];                      Point b2 = refinedPath[intersectingSegment + 1];                      ConnectorSegment b = ConnectorSegment.ConstructBoundSegment(coverSet' b1' b2);                        Nullable < Point > intersection = a.Intersect(b);                      if (intersection != null)                      {                          newPath.Clear();                          for (int i = 0; i <= currentSegment; i++)                          {                              newPath.Add(refinedPath[i]);                          }                          newPath.Add((Point)intersection);                          for (int i = intersectingSegment + 1; i < refinedPath.Count; i++)                          {                              newPath.Add(refinedPath[i]);                          }                            List < Point > temp = refinedPath;                          refinedPath = newPath;                          newPath = temp;                          newPath.Clear();                            intersectingSegment = currentSegment + 2;                      }                      else                      {                          intersectingSegment++;                      }                  }                    currentSegment++;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The following statement contains a magic number: while (currentSegment < refinedPath.Count - 1)              {                  Point a1 = refinedPath[currentSegment];                  Point a2 = refinedPath[currentSegment + 1];                    ConnectorSegment a = ConnectorSegment.ConstructBoundSegment(coverSet' a1' a2);                    int intersectingSegment = currentSegment + 2;                  while (intersectingSegment < refinedPath.Count - 1)                  {                      Point b1 = refinedPath[intersectingSegment];                      Point b2 = refinedPath[intersectingSegment + 1];                      ConnectorSegment b = ConnectorSegment.ConstructBoundSegment(coverSet' b1' b2);                        Nullable < Point > intersection = a.Intersect(b);                      if (intersection != null)                      {                          newPath.Clear();                          for (int i = 0; i <= currentSegment; i++)                          {                              newPath.Add(refinedPath[i]);                          }                          newPath.Add((Point)intersection);                          for (int i = intersectingSegment + 1; i < refinedPath.Count; i++)                          {                              newPath.Add(refinedPath[i]);                          }                            List < Point > temp = refinedPath;                          refinedPath = newPath;                          newPath = temp;                          newPath.Clear();                            intersectingSegment = currentSegment + 2;                      }                      else                      {                          intersectingSegment++;                      }                  }                    currentSegment++;              }
Magic Number,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,SecondRefinementAlgorithm,The following statement contains a magic number: while (currentSegment < refinedPath.Count - 1)              {                  Point a1 = refinedPath[currentSegment];                  Point a2 = refinedPath[currentSegment + 1];                    bool intersected = false;                  ConnectorSegment a = ConnectorSegment.ConstructBoundSegment(coverSet' a1' a2);                  if (a != null)                  {                      Point direction = new Point(a2.X - a1.X' a2.Y - a1.Y);                        int steps = (int)Math.Max(Math.Abs(direction.X / margin.Width)' Math.Abs(direction.Y / margin.Height)); //one of the values will be null                      direction.X = (int)Math.Sign(direction.X);                      direction.Y = (int)Math.Sign(direction.Y);                        for (int i = 1; i <= steps; i++)                      {                          Point k = new Point(a1.X + i * margin.Width * direction.X' a1.Y + i * margin.Height * direction.Y);                          if (k.IsEqualTo(a2))                          {                              break;                          }                            ConnectorSegment b = ConnectorSegment.ConstructBoundSegment(coverSet' k' (a.Orientation == Orientation.Horizontal) ? Orientation.Vertical : Orientation.Horizontal);                          int intersectingSegment = currentSegment + 2;                          while (intersectingSegment < refinedPath.Count - 1 && !intersected)                          {                              Point c1 = refinedPath[intersectingSegment];                              Point c2 = refinedPath[intersectingSegment + 1];                              ConnectorSegment c = new ConnectorSegment(c1' c2);                                Nullable < Point > intersection = b.Intersect(c);                              if (intersection != null && c.IsPointOnSegment((Point)intersection))                              {                                  intersected = true;                                    newPath.Clear();                                  for (int j = 0; j <= currentSegment; j++)                                  {                                      newPath.Add(refinedPath[j]);                                  }                                  newPath.Add(k);                                  newPath.Add((Point)intersection);                                  for (int j = intersectingSegment + 1; j < refinedPath.Count; j++)                                  {                                      newPath.Add(refinedPath[j]);                                  }                                  List < Point > temp = refinedPath;                                  refinedPath = newPath;                                  newPath = temp;                                  newPath.Clear();                                  break;                              }                                intersectingSegment++;                          }                            if (intersected)                          {                              break;                          }                      }                  }                    if (!intersected)                  {                      currentSegment++;                  }              }
Magic Number,Machine.Design.FreeFormEditing,CoverSet,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,CoverSet,The following statement contains a magic number: for (int i = 0; i < linesToExclude.Length / 2; i++)                  {                      AddCover(new ConnectorSegment(linesToExclude[i * 2]' linesToExclude[(i * 2) + 1]));                  }
Magic Number,Machine.Design.FreeFormEditing,CoverSet,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,CoverSet,The following statement contains a magic number: for (int i = 0; i < linesToExclude.Length / 2; i++)                  {                      AddCover(new ConnectorSegment(linesToExclude[i * 2]' linesToExclude[(i * 2) + 1]));                  }
Magic Number,Machine.Design.FreeFormEditing,CoverSet,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,CoverSet,The following statement contains a magic number: for (int i = 0; i < linesToExclude.Length / 2; i++)                  {                      AddCover(new ConnectorSegment(linesToExclude[i * 2]' linesToExclude[(i * 2) + 1]));                  }
Magic Number,Machine.Design.FreeFormEditing,DesignerGeometryHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\DesignerGeometryHelper.cs,DistanceBetweenPoints,The following statement contains a magic number: double d = Math.Sqrt(Math.Pow(point2.X - point1.X' 2) + Math.Pow(point2.Y - point1.Y' 2));
Magic Number,Machine.Design.FreeFormEditing,DesignerGeometryHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\DesignerGeometryHelper.cs,DistanceBetweenPoints,The following statement contains a magic number: double d = Math.Sqrt(Math.Pow(point2.X - point1.X' 2) + Math.Pow(point2.Y - point1.Y' 2));
Magic Number,Machine.Design.FreeFormEditing,DesignerGeometryHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\DesignerGeometryHelper.cs,MidPointOfLineSegment,The following statement contains a magic number: return new Point(Math.Round((point1.X + point2.X) / 2)' Math.Round((point1.Y + point2.Y) / 2));
Magic Number,Machine.Design.FreeFormEditing,DesignerGeometryHelper,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\DesignerGeometryHelper.cs,MidPointOfLineSegment,The following statement contains a magic number: return new Point(Math.Round((point1.X + point2.X) / 2)' Math.Round((point1.Y + point2.Y) / 2));
Duplicate Code,Machine.Design.FreeFormEditing,ConnectorRouter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorRouter.cs,GetRoutedLineSegments,The method contains a code clone-set at the following line numbers (starting from the method definition): ((56' 83)' (95' 122))
Missing Default,Machine.Design,InitialNode,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\InitialNode.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.startIcon = ((System.Windows.Controls.ContentControl)(target));              return;              case 2:              this.border = ((System.Windows.Controls.Border)(target));              return;              }
Missing Default,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,ReportConnectorCreationError,The following switch statement is missing a default case: switch (result)              {                  case ConnectorCreationResult.CannotCreateTransitionToCompositeState:                      ShowMessageBox(SR.CannotCreateTransitionToCompositeState);                      break;                  case ConnectorCreationResult.CannotCreateTransitionFromAncestorToDescendant:                      ShowMessageBox(SR.CannotCreateTransitionFromAncestorToDescendant);                      break;                  case ConnectorCreationResult.CannotSetCompositeStateAsInitialState:                      ShowMessageBox(SR.CannotSetCompositeStateAsInitialState);                      break;                  case ConnectorCreationResult.CannotSetFinalStateAsInitialState:                      ShowMessageBox(SR.CannotSetFinalStateAsInitialState);                      break;                  case ConnectorCreationResult.OtherFailure:                      ShowMessageBox(SR.CannotCreateLink);                      break;              }
Missing Default,Machine.Design,StateContainerEditor,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateContainerEditor.CompositeView.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.stateContainerEditor = ((Machine.Design.StateContainerEditor)(target));              return;              case 2:              this.stateContainerGrid = ((System.Windows.Controls.Grid)(target));                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseLeave);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.MouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridMouseMove);                            #line default              #line hidden                            #line 27 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.OnStateContainerGridPreviewMouseMove);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseUp += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseUp);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.KeyDown += new System.Windows.Input.KeyEventHandler(this.OnStateContainerGridKeyDown);                            #line default              #line hidden                            #line 28 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnStateContainerGridPreviewMouseDown);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragOver += new System.Windows.DragEventHandler(this.OnStateContainerGridDragOver);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.DragEnter += new System.Windows.DragEventHandler(this.OnStateContainerGridDragEnter);                            #line default              #line hidden                            #line 29 "..\..\StateContainerEditor.xaml"              this.stateContainerGrid.Drop += new System.Windows.DragEventHandler(this.OnStateContainerGridDrop);                            #line default              #line hidden              return;              case 3:              this.panel = ((Machine.Design.FreeFormEditing.FreeFormPanel)(target));              return;              }
Missing Default,Machine.Design,StateDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateDesigner.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.stateDesigner = ((Machine.Design.StateDesigner)(target));              return;              case 2:                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.OnSetAsInitialCanExecute);                            #line default              #line hidden                            #line 15 "..\..\StateDesigner.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnSetAsInitialExecute);                            #line default              #line hidden              return;              case 3:                            #line 20 "..\..\StateDesigner.xaml"              ((System.Windows.Controls.MenuItem)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnStateSpecificMenuItemLoaded);                            #line default              #line hidden              return;              case 4:              this.stateContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Missing Default,Machine.Design,StateMachineDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\StateMachineDesigner.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.stateMachineDesigner = ((Machine.Design.StateMachineDesigner)(target));              return;              case 2:                            #line 45 "..\..\StateMachineDesigner.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 3:              this.stateMachineContentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Missing Default,Machine.Design,TransitionDesigner,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\TransitionDesigner.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.stateContentGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.conditionBox = ((System.Activities.Presentation.View.ExpressionTextBox)(target));              return;              }
Missing Default,Machine.Design.FreeFormEditing,ConnectionPoint,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectionPoint.cs,EdgeToDrawnMidPointOffset,The following switch statement is missing a default case: switch (this.EdgeLocation)              {                  case EdgeLocation.Left: return new Vector(-small / 2' 0);                  case EdgeLocation.Right: return new Vector(small / 2' 0);                  case EdgeLocation.Top: return new Vector(0' -small / 2);                  case EdgeLocation.Bottom: return new Vector(0' small / 2);              }
Missing Default,Machine.Design.FreeFormEditing,Connector,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\Connector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.root = ((Machine.Design.FreeFormEditing.Connector)(target));              return;              case 2:              this.rootGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.BottomLine = ((System.Windows.Shapes.Path)(target));              return;              case 4:              this.TopLine = ((System.Windows.Shapes.Path)(target));              return;              case 5:              this.startDotGrid = ((System.Windows.Controls.Grid)(target));              return;              case 6:              this.startDotForHitTest = ((System.Windows.Shapes.Path)(target));              return;              case 7:              this.startDot = ((System.Windows.Shapes.Path)(target));              return;              case 8:              this.arrowShape = ((System.Windows.Shapes.Rectangle)(target));              return;              case 9:              this.LayoutRoot = ((System.Windows.Controls.Border)(target));              return;              case 10:              this.labelTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,Machine.Design.FreeFormEditing,ConnectorPointsToArrowMarginConverter,C:\repos\ziyunhx_DocManage\Code\WorkFlow\Machine.Design\FreeFormEditing\ConnectorPointsToArrowMarginConverter.cs,Convert,The following switch statement is missing a default case: switch ((int)transform.Angle)                  {                      case 0:                          margin.Left -= offset;                          break;                      case 90:                          margin.Top -= offset;                          break;                      case 180:                          margin.Left += offset;                          break;                      case 270:                          margin.Top += offset;                          break;                  }
