Implementation smell,Namespace,Class,File,Method,Description
Complex Method,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,The length of the statement  "                var unpackedDirPath = Path.Combine(Path.GetDirectoryName(cdlcFilePath)' String.Format("{0}_Pc"' Path.GetFileNameWithoutExtension(cdlcFilePath))); " is 145.
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,The length of the statement  "                    var cdlcFileName = StringExtensions.GetValidShortFileName(info.SongInfo.Artist' info.SongInfo.SongDisplayName' cdlcVersion' ConfigRepository.Instance().GetBoolean("creator_useacronyms")); " is 187.
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The length of the statement  "            var unpackedDirPath = Path.Combine(Path.GetDirectoryName(cdlcFilePath)' String.Format("{0}_Pc"' Path.GetFileNameWithoutExtension(cdlcFilePath))); " is 145.
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The length of the statement  "                ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 152.
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The length of the statement  "                ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 154.
Long Statement,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The length of the statement  "                ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 154.
Empty Catch Block,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,The method has an empty catch block.
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAudio,The following statement contains a magic number: if (audioPath.Substring(audioPath.Length - 4).ToLower() == ".ogg")              {                  ExternalApps.Ogg2Wav(audioPath' wavPath);                  if (!File.Exists(oggPreviewPath))                  {                      ExternalApps.Ogg2Preview(audioPath' oggPreviewPath);                      ExternalApps.Ogg2Wav(oggPreviewPath' wavPreviewPath);                  }                  audioPath = wavPath;              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAudio,The following statement contains a magic number: if (audioPath.Substring(audioPath.Length - 4).ToLower() == ".wav")              {                  if (!File.Exists(wavPreviewPath))                  {                      ExternalApps.Wav2Ogg(audioPath' oggPath' 4);                      ExternalApps.Ogg2Preview(oggPath' oggPreviewPath);                      ExternalApps.Ogg2Wav(oggPreviewPath' wavPreviewPath);                  }                  Wwise.Wav2Wem(audioPath' wemPath' 4); // default audio quality = 4                  audioPath = wemPath;              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAudio,The following statement contains a magic number: if (audioPath.Substring(audioPath.Length - 4).ToLower() == ".wav")              {                  if (!File.Exists(wavPreviewPath))                  {                      ExternalApps.Wav2Ogg(audioPath' oggPath' 4);                      ExternalApps.Ogg2Preview(oggPath' oggPreviewPath);                      ExternalApps.Ogg2Wav(oggPreviewPath' wavPreviewPath);                  }                  Wwise.Wav2Wem(audioPath' wemPath' 4); // default audio quality = 4                  audioPath = wemPath;              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAudio,The following statement contains a magic number: if (audioPath.Substring(audioPath.Length - 4).ToLower() == ".wav")              {                  if (!File.Exists(wavPreviewPath))                  {                      ExternalApps.Wav2Ogg(audioPath' oggPath' 4);                      ExternalApps.Ogg2Preview(oggPath' oggPreviewPath);                      ExternalApps.Ogg2Wav(oggPreviewPath' wavPreviewPath);                  }                  Wwise.Wav2Wem(audioPath' wemPath' 4); // default audio quality = 4                  audioPath = wemPath;              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
Magic Number,convert2012,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\convert2012\Program.cs,ConvertAlbumArt,The following statement contains a magic number: try              {                  var albumArtPath = ddsFilesPath[0];                  Console.WriteLine(@"Converting album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' info.Name.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not convert: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                      dds.destinationFile = destAlbumArtPath;                  }                    // update package info with album art files                  info.ArtFiles = ddsFiles;              }              catch (Exception ex)              {                  Console.WriteLine(@"Could not convert album artwork in " + Path.GetFileName(cdlcFilePath) + @": " + ex.Message);              }
