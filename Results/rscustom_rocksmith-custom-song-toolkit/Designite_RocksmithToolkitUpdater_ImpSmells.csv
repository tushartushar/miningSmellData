Implementation smell,Namespace,Class,File,Method,Description
Long Method,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The method has 232 lines of code.
Complex Method,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,Cyclomatic complexity of the method is 18
Complex Method,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,CopyDirectory,Cyclomatic complexity of the method is 9
Long Parameter List,RocksmithToolkitUpdater,AssemblyCaller,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AssemblyCaller.cs,Call,The method has 5 parameters. Parameters: assemblyPath' typeName' method' paramTypes' methodParams
Long Parameter List,RocksmithToolkitUpdater,AssemblyCaller,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AssemblyCaller.cs,Call,The method has 6 parameters. Parameters: assemblyPath' typeName' method' paramTypes' createInstance' methodParams
Long Parameter List,RocksmithToolkitUpdater,AssemblyCaller,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AssemblyCaller.cs,PrivateCall,The method has 6 parameters. Parameters: assemblyPath' typeName' method' paramTypes' createInstance' methodParams
Long Statement,RocksmithToolkitUpdater,AssemblyCaller,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AssemblyCaller.cs,PrivateCall,The length of the statement  "                var bindingFlags = createInstance ? (BindingFlags.Public | BindingFlags.Instance) : (BindingFlags.Public | BindingFlags.Static); " is 128.
Long Statement,RocksmithToolkitUpdater,AssemblyCaller,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AssemblyCaller.cs,PrivateCall,The length of the statement  "                var methodInfo = (paramTypes == null) ? compiledType.GetMethod(method' bindingFlags) : compiledType.GetMethod(method' paramTypes); " is 130.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,ProgressChanged,The length of the statement  "            lblDownloaded.Text = String.Format("Downloaded: {0:0.00} MB's / Total: {1:0.00} MB's"' (e.BytesReceived / 1024d / 1024d)' (e.TotalBytesToReceive / 1024d / 1024d)); " is 163.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,ExtractFile,The length of the statement  "            AssemblyCaller.Call(Path.Combine(tempToolkitDir' APP_CSZIPLIB)' "ICSharpCode.SharpZipLib.Zip.FastZip"' "ExtractZip"' new Type[] { typeof(string)' typeof(string)' typeof(string) }' new object[] { srcPath' destDir' null }); " is 221.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,MergeXmlRepository,The length of the statement  "                replaceRepo = (bool)AssemblyCaller.CallStatic(Path.Combine(appExecDir' APP_RSLIB)' "RocksmithToolkitLib.XmlRepository.ConfigRepository"' "GetBoolean"' "general_replacerepo"); " is 174.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,MergeXmlRepository,The length of the statement  "                var xmlConfigVersion = (string)AssemblyCaller.CallStatic(Path.Combine(appExecDir' APP_RSLIB)' "RocksmithToolkitLib.XmlRepository.ConfigRepository"' "GetString"' "general_configversion"); " is 186.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,MergeXmlRepository,The length of the statement  "                var generalConfigVersion = (string)AssemblyCaller.CallStatic(Path.Combine(localToolkitDir' APP_RSGUI)' "RocksmithToolkitGUI.Config.GeneralConfig"' "GetConfigVersion"' null); " is 173.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,MergeXmlRepository,The length of the statement  "                        AssemblyCaller.CallStatic(Path.Combine(appExecDir' APP_RSLIB)' String.Format("RocksmithToolkitLib.XmlRepository.{0}"' repo.Key)' "Merge"' srcPath' destPath); " is 157.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,RollBack,The length of the statement  "            var updaterPath = Path.Combine(srcDir' appExecFile.Equals(APP_UPDATER' StringComparison.InvariantCultureIgnoreCase) ? APP_UPDATER : APP_UPDATING); " is 146.
Long Statement,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AutoUpdaterForm)); " is 135.
Empty Catch Block,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The method has an empty catch block.
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: this.Location = new Point(100' 100);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: this.Location = new Point(100' 100);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (args[0].Equals("?"))              {                  StringBuilder sb = new StringBuilder();                  sb.AppendLine("Song Creator Toolkit for Rocksmith");                  sb.AppendLine("- commonly known as' 'the toolkit'");                  sb.AppendLine("");                  sb.AppendLine("You are probably seeing this informative message");                  sb.AppendLine("because you started the RocksmithToolkitUpdater.exe");                  sb.AppendLine("application by double clicking on it directly.");                  sb.AppendLine("");                  sb.AppendLine("- Normal Usage:");                  sb.AppendLine("  AutoUpdater is normally run programmatically by the");                  sb.AppendLine("  toolkit to automatically update the toolkit files.");                  sb.AppendLine("");                  sb.AppendLine("- Alternate Usage:");                  sb.AppendLine("  AutoUpdater can be run by double clicking on the");                  sb.AppendLine("  application.  This will force the toolkit to be");                  sb.AppendLine("  updated to the latest available online revision.");                  sb.AppendLine("");                  //sb.AppendLine("- WARNING:");                  //sb.AppendLine("  All user customized toolkit settings are overwritten");                  //sb.AppendLine("  if AutoUpdater is run in the Alternate Usage mode.");                  //sb.AppendLine("  A warning will popup during update to remind you.");                  //sb.AppendLine("");                  sb.AppendLine("Continue running AutoUpdater in Alternate Usage mode?   ");                    if (DialogResult.No == MessageBox.Show(sb.ToString()' "AutoUpdater"' MessageBoxButtons.YesNo' MessageBoxIcon.Information))                  {                      Environment.Exit(0);                  }                    // confirm toolkit process is not running before continuing                  Thread.Sleep(500);                  Process[] processesByName = Process.GetProcessesByName("RocksmithToolkitGUI");                  if (processesByName.Length != 0)                  {                      MessageBox.Show("<ERROR> Detected that RocksmithToolkitGUI is running ..." + Environment.NewLine + "The toolkit must be closed before running the AutoUpdater.  "' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.OK' MessageBoxIcon.Error);                        Environment.Exit(2);                  }              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (args[0].Equals("?"))              {                  StringBuilder sb = new StringBuilder();                  sb.AppendLine("Song Creator Toolkit for Rocksmith");                  sb.AppendLine("- commonly known as' 'the toolkit'");                  sb.AppendLine("");                  sb.AppendLine("You are probably seeing this informative message");                  sb.AppendLine("because you started the RocksmithToolkitUpdater.exe");                  sb.AppendLine("application by double clicking on it directly.");                  sb.AppendLine("");                  sb.AppendLine("- Normal Usage:");                  sb.AppendLine("  AutoUpdater is normally run programmatically by the");                  sb.AppendLine("  toolkit to automatically update the toolkit files.");                  sb.AppendLine("");                  sb.AppendLine("- Alternate Usage:");                  sb.AppendLine("  AutoUpdater can be run by double clicking on the");                  sb.AppendLine("  application.  This will force the toolkit to be");                  sb.AppendLine("  updated to the latest available online revision.");                  sb.AppendLine("");                  //sb.AppendLine("- WARNING:");                  //sb.AppendLine("  All user customized toolkit settings are overwritten");                  //sb.AppendLine("  if AutoUpdater is run in the Alternate Usage mode.");                  //sb.AppendLine("  A warning will popup during update to remind you.");                  //sb.AppendLine("");                  sb.AppendLine("Continue running AutoUpdater in Alternate Usage mode?   ");                    if (DialogResult.No == MessageBox.Show(sb.ToString()' "AutoUpdater"' MessageBoxButtons.YesNo' MessageBoxIcon.Information))                  {                      Environment.Exit(0);                  }                    // confirm toolkit process is not running before continuing                  Thread.Sleep(500);                  Process[] processesByName = Process.GetProcessesByName("RocksmithToolkitGUI");                  if (processesByName.Length != 0)                  {                      MessageBox.Show("<ERROR> Detected that RocksmithToolkitGUI is running ..." + Environment.NewLine + "The toolkit must be closed before running the AutoUpdater.  "' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.OK' MessageBoxIcon.Error);                        Environment.Exit(2);                  }              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (args.Length == 2 && appExecFile.Equals(APP_UPDATING' StringComparison.InvariantCultureIgnoreCase) || appExecFile.Equals(APP_RSGUI' StringComparison.InvariantCultureIgnoreCase))              {                  localToolkitDir = args[0];                  tempToolkitDir = args[1];              }              // running RocksmithToolkitUpdater.exe (Alternate Usage Mode) or developer running project in VS IDE Debug mode              else if (appExecFile.Equals(APP_UPDATER' StringComparison.InvariantCultureIgnoreCase))              {                  // the user double clicked on RocksmithToolkitUpdater.exe (w/o cmd line args)                  localToolkitDir = appExecDir;                  tempToolkitDir = Path.Combine(Path.GetTempPath()' "RocksmithToolkit");                    if (Directory.Exists(tempToolkitDir))                      Directory.Delete(tempToolkitDir' true);                    Directory.CreateDirectory(tempToolkitDir);                    // copy required files for debugging the AutoUpdater as a standalone project in VS IDE Debug mode                  if (isInDesignMode)                  {                      try                      {                          var rootBinDebugDir = Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.FullName' "RocksmithTookitGUI\\bin\\Debug");                          File.Copy(Path.Combine(rootBinDebugDir' APP_CSZIPLIB)' Path.Combine(appExecDir' APP_CSZIPLIB)' true);                          File.Copy(Path.Combine(rootBinDebugDir' APP_RSLIB)' Path.Combine(appExecDir' APP_RSLIB)' true);                          File.Copy(Path.Combine(rootBinDebugDir' APP_RSGUI)' Path.Combine(appExecDir' APP_RSGUI)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_CONFIG)' Path.Combine(appExecDir' REPO_CONFIG)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_SONGAPPID)' Path.Combine(appExecDir' REPO_SONGAPPID)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_TUNINGDEF)' Path.Combine(appExecDir' REPO_TUNINGDEF)' true);                      }                      catch (Exception ex)                      {                          MessageBox.Show("<ERROR> Can not find required file(s) to run AutoUpdater project in VS IDE Debug mode.  " + Environment.NewLine + "Make sure the RocksmithToolkitGUI project has been run in VS IDE Debug mode first. " + Environment.NewLine + Environment.NewLine +                               ex.Message' "DEBUG ME");                            Environment.Exit(1);                      }                  }                  else                  {                      // use some whacky' hacky' trickery in Alternate Mode                      // make a copy of AutoUpdater to prevent locking the process during update                      var updaterAppPath = Path.Combine(localToolkitDir' APP_UPDATER);                      var updatingAppPath = Path.Combine(tempToolkitDir' APP_UPDATING);                      File.Copy(updaterAppPath' updatingAppPath' true);                      var cmdArgs = String.Format("\"{0}\" \"{1}\""' localToolkitDir' tempToolkitDir);                      var startInfo = new ProcessStartInfo                      {                          FileName = updatingAppPath'                          Arguments = cmdArgs'                          UseShellExecute = false'                          CreateNoWindow = true' // hide command window                      };                        using (var updater = new Process())                      {                          updater.StartInfo = startInfo;                          updater.Start();                      }                        Thread.Sleep(500);                      // Kill current process now that AutoUpdater process is started                      Environment.Exit(0);                  }              }              else              {                  MessageBox.Show("<ERROR> Unexpected updater usage ..." + Environment.NewLine + "appExecFile = " + appExecFile' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.OK' MessageBoxIcon.Error);                    Environment.Exit(1);              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (args.Length == 2 && appExecFile.Equals(APP_UPDATING' StringComparison.InvariantCultureIgnoreCase) || appExecFile.Equals(APP_RSGUI' StringComparison.InvariantCultureIgnoreCase))              {                  localToolkitDir = args[0];                  tempToolkitDir = args[1];              }              // running RocksmithToolkitUpdater.exe (Alternate Usage Mode) or developer running project in VS IDE Debug mode              else if (appExecFile.Equals(APP_UPDATER' StringComparison.InvariantCultureIgnoreCase))              {                  // the user double clicked on RocksmithToolkitUpdater.exe (w/o cmd line args)                  localToolkitDir = appExecDir;                  tempToolkitDir = Path.Combine(Path.GetTempPath()' "RocksmithToolkit");                    if (Directory.Exists(tempToolkitDir))                      Directory.Delete(tempToolkitDir' true);                    Directory.CreateDirectory(tempToolkitDir);                    // copy required files for debugging the AutoUpdater as a standalone project in VS IDE Debug mode                  if (isInDesignMode)                  {                      try                      {                          var rootBinDebugDir = Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.FullName' "RocksmithTookitGUI\\bin\\Debug");                          File.Copy(Path.Combine(rootBinDebugDir' APP_CSZIPLIB)' Path.Combine(appExecDir' APP_CSZIPLIB)' true);                          File.Copy(Path.Combine(rootBinDebugDir' APP_RSLIB)' Path.Combine(appExecDir' APP_RSLIB)' true);                          File.Copy(Path.Combine(rootBinDebugDir' APP_RSGUI)' Path.Combine(appExecDir' APP_RSGUI)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_CONFIG)' Path.Combine(appExecDir' REPO_CONFIG)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_SONGAPPID)' Path.Combine(appExecDir' REPO_SONGAPPID)' true);                          File.Copy(Path.Combine(rootBinDebugDir' REPO_TUNINGDEF)' Path.Combine(appExecDir' REPO_TUNINGDEF)' true);                      }                      catch (Exception ex)                      {                          MessageBox.Show("<ERROR> Can not find required file(s) to run AutoUpdater project in VS IDE Debug mode.  " + Environment.NewLine + "Make sure the RocksmithToolkitGUI project has been run in VS IDE Debug mode first. " + Environment.NewLine + Environment.NewLine +                               ex.Message' "DEBUG ME");                            Environment.Exit(1);                      }                  }                  else                  {                      // use some whacky' hacky' trickery in Alternate Mode                      // make a copy of AutoUpdater to prevent locking the process during update                      var updaterAppPath = Path.Combine(localToolkitDir' APP_UPDATER);                      var updatingAppPath = Path.Combine(tempToolkitDir' APP_UPDATING);                      File.Copy(updaterAppPath' updatingAppPath' true);                      var cmdArgs = String.Format("\"{0}\" \"{1}\""' localToolkitDir' tempToolkitDir);                      var startInfo = new ProcessStartInfo                      {                          FileName = updatingAppPath'                          Arguments = cmdArgs'                          UseShellExecute = false'                          CreateNoWindow = true' // hide command window                      };                        using (var updater = new Process())                      {                          updater.StartInfo = startInfo;                          updater.Start();                      }                        Thread.Sleep(500);                      // Kill current process now that AutoUpdater process is started                      Environment.Exit(0);                  }              }              else              {                  MessageBox.Show("<ERROR> Unexpected updater usage ..." + Environment.NewLine + "appExecFile = " + appExecFile' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.OK' MessageBoxIcon.Error);                    Environment.Exit(1);              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (dlStatus == DownloadStatus.SUCCESS && File.Exists(latestZipPath))              {                  // bulldoze the local process directory                    if (args.Length == 2 && appExecFile.Equals(APP_UPDATING' StringComparison.InvariantCultureIgnoreCase))                  {                      var lockedLocalFiles = DeleteDirectory(localToolkitDir);                      if (lockedLocalFiles.Any())                      {                          ShowCurrentOperation("<ERROR> Local toolkit directory cleanup failed ...");                          ShowLockedFiles(lockedLocalFiles);                          Environment.Exit(1);                      }                  }                    if (isInDesignMode)                      MessageBox.Show("Check purged directory: " + localToolkitDir' "DEBUG ME");                    try                  {                      // extract latest toolkit revision to the original process directory                      ExtractFile(latestZipPath' localToolkitDir);                  }                  catch (Exception ex)                  {                      if (MessageBox.Show("<ERROR> Could not unzip file: " + Path.GetFileName(latestZipPath) + Environment.NewLine + "The AutoUpdater can not continue." + Environment.NewLine + "Do you want to roll back the installation process?" + Environment.NewLine + ex.Message' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.YesNo' MessageBoxIcon.Error) == DialogResult.No)                      {                          Environment.Exit(1);                      }                        // rollback the process to its original state                      RollBack(tempToolkitDir' localToolkitDir);                      RestartToolkitGUI();                  }                    if (isInDesignMode)                      MessageBox.Show("Check unzipped files: " + localToolkitDir' "DEBUG ME");                    try                  {                      // merge xml repo files                      MergeXmlRepository(tempToolkitDir' localToolkitDir);                  }                  catch (Exception ex)                  {                      MessageBox.Show("<ERROR> Could not merge repositories ... " + Environment.NewLine + ex.Message' "RocksmithToolkit AutoUpdater"' MessageBoxButtons.OK' MessageBoxIcon.Error);                  }                    // merge cgm inlay files                  var cgmFiles = Directory.EnumerateFiles(Path.Combine(tempToolkitDir' "cgm")' "*"' SearchOption.AllDirectories);                  foreach (var cgmFile in cgmFiles)                  {                      try                      {                          File.Copy(cgmFile' cgmFile.Replace(tempToolkitDir' localToolkitDir));                      }                      catch                      {                          /* Do nothing */                      }                  }                    // TODO: merge custom/user dds xml/cfg files                    // cleanup tempToolkitDir                  var lockedTempFiles = DeleteDirectory(tempToolkitDir);                    // debug locked files                  if (isInDesignMode && lockedTempFiles.Any())                  {                      ShowCurrentOperation("<ERROR> Temp toolkit directory cleanup failed ...");                      ShowLockedFiles(lockedTempFiles);                  }              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,AutoUpdaterForm,The following statement contains a magic number: if (!isInDesignMode)              {                  if (File.Exists(latestZipPath))                      File.Delete(latestZipPath);                    ShowCurrentOperation("Please wait ... Restarting ToolkitGUI ...");                  Thread.Sleep(3000); // settle down before restart                  RestartToolkitGUI();              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,DownloadFile,The following statement contains a magic number: for (int i = 0; i < attempts; i++)              {                  dlStatus = DownloadStatus.WAIT;                  var webClient = new WebClient();                  webClient.DownloadFileCompleted += Completed;                  webClient.DownloadProgressChanged += ProgressChanged;                    sw.Start();                  webClient.DownloadFileAsync(downloadUri' destPath);                    while (dlStatus == DownloadStatus.WAIT)                  {                      Application.DoEvents();                      Thread.Sleep(100);                  }                    webClient.Dispose();                    if (dlStatus == DownloadStatus.SUCCESS || dlStatus == DownloadStatus.CANCEL)                      return;              }
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,Completed,The following statement contains a magic number: if (e.Cancelled != true && e.Error == null)              {                  dlStatus = DownloadStatus.SUCCESS;                  ShowCurrentOperation("Download was successful ...");                  pbUpdate.Style = ProgressBarStyle.Marquee;                  pbUpdate.Refresh();              }              else if (e.Error != null)              {                  dlStatus = DownloadStatus.ERROR;                  lastError = e.Error.Message;                  ShowCurrentOperation("<ERROR> Check internet connection ...");                  Thread.Sleep(250);              }              else if (e.Cancelled == true)              {                  dlStatus = DownloadStatus.CANCEL;                  ShowCurrentOperation("Download cancelled ...");                  MessageBox.Show("Download has been canceled.");              }              else                  dlStatus = DownloadStatus.UNKNOWN;
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,CopyDirectory,The following statement contains a magic number: var step = (int)Math.Floor(100.0 / filePaths.Count());
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,DeleteDirectory,The following statement contains a magic number: var step = (int)Math.Floor(100.0 / filePaths.Count());
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Location = new System.Drawing.Point(12' 8);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Location = new System.Drawing.Point(12' 8);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size(77' 71);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size(77' 71);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbUpdate.Location = new System.Drawing.Point(99' 27);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbUpdate.Location = new System.Drawing.Point(99' 27);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbUpdate.Size = new System.Drawing.Size(334' 26);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.pbUpdate.Size = new System.Drawing.Size(334' 26);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentOperation.Location = new System.Drawing.Point(96' 8);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentOperation.Location = new System.Drawing.Point(96' 8);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentOperation.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentOperation.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentOperation.TabIndex = 2;
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Location = new System.Drawing.Point(96' 58);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Location = new System.Drawing.Point(96' 58);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.TabIndex = 3;
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDownloaded.Location = new System.Drawing.Point(215' 58);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDownloaded.Location = new System.Drawing.Point(215' 58);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDownloaded.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDownloaded.Size = new System.Drawing.Size(16' 13);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDownloaded.TabIndex = 5;
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(445' 83);
Magic Number,RocksmithToolkitUpdater,AutoUpdaterForm,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitUpdater\AutoUpdaterForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(445' 83);
