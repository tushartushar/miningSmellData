Implementation smell,Namespace,Class,File,Method,Description
Long Method,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The method has 103 lines of code.
Complex Method,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,Cyclomatic complexity of the method is 21
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,GetOptions,The length of the statement  "                { "i|input|sng="' "The input SNG file(s) or directory [*.sng] (multiple allowed' use ; to split paths)"' v => outputArguments.Input = v.Split( new[]{';'}' 2) }'" is 160.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,GetOptions,The length of the statement  "                { "m|manifest="' "The input manifest arrangement file [*.json] (multiple allowed' use ; to split paths in same order of input (SNG) files)"' v => outputArguments.Manifest = v.Split( new[]{';'}' 2) }'" is 199.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,GetOptions,The length of the statement  "                { "a|type|arrangement="' "Arrangement type of the SNG [Guitar' Bass' Vocal]"' v => outputArguments.SetArrangementType(v) }'" is 123.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                    Console.WriteLine("No manifest file was entered. The song xml file will be generated without song informations like song title' album' artist' tone names' etc.");" is 162.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                        var outputFile = Path.Combine(Path.GetDirectoryName(inputFile)' String.Format("{0}_{1}.sng"' Path.GetFileNameWithoutExtension(inputFile)' (arguments.Unpack) ? "decrypted" : "encrypted"));" is 187.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                        if (arguments.ArrangementType != ArrangementType.Vocal && arguments.Manifest != null && arguments.Manifest.Length > indexCount)" is 127.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                            att = Manifest2014<Attributes2014>.LoadFromFile(arguments.Manifest[indexCount]).Entries.ToArray()[0].Value.ToArray()[0].Value;" is 126.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                        var outputFile = Path.Combine(Path.GetDirectoryName(inputFile)' String.Format("{0}.xml"' Path.GetFileNameWithoutExtension(inputFile)));" is 135.
Long Statement,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The length of the statement  "                        var outputFile = Path.Combine(Path.GetDirectoryName(inputFile)' String.Format("{0}.sng"' Path.GetFileNameWithoutExtension(inputFile)));" is 135.
Complex Conditional,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,Main,The conditional expression  "!arguments.Pack && !arguments.Unpack && !arguments.Sng2Xml && !arguments.Xml2Sng"  is complex.
Magic Number,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,GetOptions,The following statement contains a magic number: return new OptionSet             {                 { "h|?|help"' "Show this help message and exit"' v => outputArguments.ShowHelp = v != null }'                 { "p|pack"' "Pack and encrypt a SNG file"' v => { if (v != null) outputArguments.Pack = true; }}'                 { "u|unpack"' "Unpack and decrypt a SNG file"' v => { if (v != null) outputArguments.Unpack = true; }}'                 { "x|sng2xml"' "Generate a song Xml from a SNG file"' v => { if (v != null) outputArguments.Sng2Xml = true; }}'                 { "s|xml2sng"' "Generate a song file (SNG) from a Xml file"' v => { if (v != null) outputArguments.Xml2Sng = true; }}'                 { "i|input|sng="' "The input SNG file(s) or directory [*.sng] (multiple allowed' use ; to split paths)"' v => outputArguments.Input = v.Split( new[]{';'}' 2) }'                 { "m|manifest="' "The input manifest arrangement file [*.json] (multiple allowed' use ; to split paths in same order of input (SNG) files)"' v => outputArguments.Manifest = v.Split( new[]{';'}' 2) }'                 { "a|type|arrangement="' "Arrangement type of the SNG [Guitar' Bass' Vocal]"' v => outputArguments.SetArrangementType(v) }'                 { "f|platform="' "Platform to pack/unpack SNG [Pc' Mac' XBox360' PS3]"' v => outputArguments.SetPlatform(v) }             };
Magic Number,sng2014,Program,C:\research\architectureSmells\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\sng2014\Program.cs,GetOptions,The following statement contains a magic number: return new OptionSet             {                 { "h|?|help"' "Show this help message and exit"' v => outputArguments.ShowHelp = v != null }'                 { "p|pack"' "Pack and encrypt a SNG file"' v => { if (v != null) outputArguments.Pack = true; }}'                 { "u|unpack"' "Unpack and decrypt a SNG file"' v => { if (v != null) outputArguments.Unpack = true; }}'                 { "x|sng2xml"' "Generate a song Xml from a SNG file"' v => { if (v != null) outputArguments.Sng2Xml = true; }}'                 { "s|xml2sng"' "Generate a song file (SNG) from a Xml file"' v => { if (v != null) outputArguments.Xml2Sng = true; }}'                 { "i|input|sng="' "The input SNG file(s) or directory [*.sng] (multiple allowed' use ; to split paths)"' v => outputArguments.Input = v.Split( new[]{';'}' 2) }'                 { "m|manifest="' "The input manifest arrangement file [*.json] (multiple allowed' use ; to split paths in same order of input (SNG) files)"' v => outputArguments.Manifest = v.Split( new[]{';'}' 2) }'                 { "a|type|arrangement="' "Arrangement type of the SNG [Guitar' Bass' Vocal]"' v => outputArguments.SetArrangementType(v) }'                 { "f|platform="' "Platform to pack/unpack SNG [Pc' Mac' XBox360' PS3]"' v => outputArguments.SetPlatform(v) }             };
