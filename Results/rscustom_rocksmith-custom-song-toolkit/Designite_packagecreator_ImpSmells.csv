Implementation smell,Namespace,Class,File,Method,Description
Long Method,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The method has 132 lines of code.
Complex Method,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,Cyclomatic complexity of the method is 13
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,GetOptions,The length of the statement  "                { "-|--------------"' "Alternate Command Line Usage is shown below:\r\n"' v => { if (v != null) outputArguments.Package = true; }}' " is 131.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,GetOptions,The length of the statement  "                { "i|input="' "Input directory (multiple allowed' use ; to split paths)"' v => outputArguments.Input = v.Split( new[]{';'}' 2) }' " is 129.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                    if ((arguments.Platform.platform == GamePlatform.None && arguments.Platform.version != GameVersion.None) || (arguments.Platform.platform != GamePlatform.None && arguments.Platform.version == GameVersion.None)) " is 209.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                        ShowHelpfulError("'platform' argument requires 'version' and vice-versa to define platform.\r\nUse this option only if you have problem with platform auto identifier"); " is 168.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                    Console.WriteLine(@"Parsing Input Directory (" + (i + 1) + @"/" + songCount + @") for CDLC Package Data: " + Path.GetFileName(srcDirs[i])); " is 139.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                        packageData.PreviewVolume = packageData.PreviewVolume == 0 ? Convert.ToInt16(arguments.Decibels) : packageData.PreviewVolume; " is 125.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                        var fileName = StringExtensions.GetValidShortFileName(artist' title' arguments.Revision.Replace("."' "_")' ConfigRepository.Instance().GetBoolean("creator_useacronyms")); " is 170.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                        DLCPackageCreator.Generate(destPath' packageData' new Platform(arguments.Platform.platform' arguments.Platform.version)); " is 121.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The length of the statement  "                        Console.WriteLine(String.Format("Packaging error!\nDirectory: {0}\n{1}\n{2}"' srcDirs[i]' ex.Message' ex.InnerException)); " is 122.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The length of the statement  "                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 152.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The length of the statement  "                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 154.
Long Statement,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The length of the statement  "                    ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") }); " is 154.
Complex Conditional,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The conditional expression  "(arguments.Platform.platform == GamePlatform.None && arguments.Platform.version != GameVersion.None) || (arguments.Platform.platform != GamePlatform.None && arguments.Platform.version == GameVersion.None)"  is complex.
Empty Catch Block,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The method has an empty catch block.
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,GetOptions,The following statement contains a magic number: return new OptionSet              {                  { "p|PackageCreator"' "Usage: Drag/Drop a root directory " +                    "that contains songname subfolders that each contain CDLC ready files onto the executable application icon:\r\n" +                    "RS2014 *.json [lead' rhythm' combos' bass]\r\n"+                    "RS2014 *.xml [lead' rhythm' combos' bass]\r\n"+                    "RS2014 Vocals.xml and Vocals.json (optional)\r\nAlbumArt256.dds\r\n" +                     "Wwise 2013 Audio.wem\r\nWwise 2013 Audio_preview.wem\r\n"' v => { if (v != null) outputArguments.Package = true; }}'                  { "-|--------------"' "Alternate Command Line Usage is shown below:\r\n"' v => { if (v != null) outputArguments.Package = true; }}'                  { "h|?|help"' "Show this help message and exit"' v => outputArguments.ShowHelp = v != null }'                  { "i|input="' "Input directory (multiple allowed' use ; to split paths)"' v => outputArguments.Input = v.Split( new[]{';'}' 2) }'                  { "o|output="' "Output directory"' v => outputArguments.Output = v }'                  { "f|platform="' "Package Platform [Pc' Mac' XBox360' PS3]"' v => outputArguments.SetPlatform(v) }'                  { "v|version="' "Rocksmith Game Version [RS2014]"' v => outputArguments.SetVersion(v) }'                  { "a|appid="' "Rocksmith APP ID"' v => { if (v != null) outputArguments.AppId = v; }}'                  { "r|revision="' "CDLC Revision [1 to 9' or 1.0 to 9.9]"' v => { if (v != null) outputArguments.Revision = v; }}'                  { "q|quality="' "Audio Quality [4 to 9]"' v => { if (v != null) outputArguments.Quality = v; }}'                  { "d|decibels="' "Audio Volume [HIGHER -1' AVERAGE -12' -16 LOWER]"' v => outputArguments.Output = v }              };
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,Main,The following statement contains a magic number: try              {                  // drag/drop a directory onto executable application                  if (arguments.Input == null && args.GetLength(0) != 0)                  {                      try                      {                          if (args[0].IsDirectory())                          {                              srcDirs = args;                              if (srcDirs.Length == 1)                              {                                  srcDirs = Directory.GetDirectories(srcDirs[0]);                                  arguments.Output = Path.GetDirectoryName(srcDirs[0]);                              }                              else                                  arguments.Output = Path.GetDirectoryName(args[0]);                          }                      }                      catch (Exception ex)                      {                          ShowHelpfulError(ex.Message + "  Check that RootFolder structure has SubFolder(s).");                          return 1; // failure                      }                  }                  else // command line error checking                   {                      if (arguments.ShowHelp || args.GetLength(0) == 0)                      {                          options.WriteOptionDescriptions(Console.Out);                          Console.ReadLine();                          return -1; // neither success or failure                      }                        if (!arguments.Package)                      {                          ShowHelpfulError("Must specify the primary command as 'package'");                          return 1;                      }                        if (arguments.Package)                      {                          if ((arguments.Input == null && arguments.Input.Length <= 0) || !arguments.Input[0].IsDirectory())                          {                              ShowHelpfulError("Must specify and 'input' directory.");                              return 1;                          }                            if (string.IsNullOrEmpty(arguments.Output))                          {                              ShowHelpfulError("Must specify an 'output' directory.");                              return 1;                          }                      }                        if ((arguments.Platform.platform == GamePlatform.None && arguments.Platform.version != GameVersion.None) || (arguments.Platform.platform != GamePlatform.None && arguments.Platform.version == GameVersion.None))                      {                          ShowHelpfulError("'platform' argument requires 'version' and vice-versa to define platform.\r\nUse this option only if you have problem with platform auto identifier");                          return 1;                      }                        srcDirs = arguments.Input;                  }                    Console.WriteLine(@"Initializing Package Creator CLI ...");                  Console.WriteLine("");                    var songCount = srcDirs.Length;                  for (int i = 0; i < songCount; i++)                  {                      Console.WriteLine(@"Parsing Input Directory (" + (i + 1) + @"/" + songCount + @") for CDLC Package Data: " + Path.GetFileName(srcDirs[i]));                        try                      {                          // get package data                          DLCPackageData packageData = DLCPackageData.LoadFromFolder(srcDirs[i]' arguments.Platform' arguments.Platform' false);                          packageData.AppId = arguments.AppId;                          packageData.ToolkitInfo.PackageVersion = arguments.Revision;                          packageData.Name = Path.GetFileName(srcDirs[i]).GetValidFileName();                          packageData.Volume = packageData.Volume == 0 ? Convert.ToInt16(arguments.Decibels) : packageData.Volume;                          packageData.PreviewVolume = packageData.PreviewVolume == 0 ? Convert.ToInt16(arguments.Decibels) : packageData.PreviewVolume;                            // check Album Artwork                          if (arguments.Platform.version == GameVersion.RS2014)                              CheckAlbumArt(srcDirs[i]' packageData.Name);                            // generate CDLC file name                          var artist = packageData.SongInfo.ArtistSort;                          var title = packageData.SongInfo.SongDisplayNameSort;                          // var destDir = Path.Combine(arguments.Output' Path.GetFileName(srcDirs[i]).GetValidName());                          var fileName = StringExtensions.GetValidShortFileName(artist' title' arguments.Revision.Replace("."' "_")' ConfigRepository.Instance().GetBoolean("creator_useacronyms"));                          var destPath = Path.Combine(arguments.Output' fileName);                          var fullFileName = String.Format("{0}{1}.psarc"' fileName' DLCPackageCreator.GetPathName(arguments.Platform)[2]);                          Console.WriteLine(@"Packing: " + Path.GetFileName(fullFileName));                          Console.WriteLine("");                          // pack the data                          DLCPackageCreator.Generate(destPath' packageData' new Platform(arguments.Platform.platform' arguments.Platform.version));                          packageData.CleanCache();                      }                      catch (Exception ex)                      {                          Console.WriteLine("");                          Console.WriteLine(String.Format("Packaging error!\nDirectory: {0}\n{1}\n{2}"' srcDirs[i]' ex.Message' ex.InnerException));                          Console.ReadLine();                      }                  }                    Console.WriteLine(@"All Finished");                  Console.WriteLine(@"Press any key to continue ...");                  Console.ReadLine();                  return 0; // success              }              catch (Exception ex)              {                  ShowHelpfulError(ex.Message);                  return 1; // failure              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
Magic Number,packagecreator,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\packagecreator\Program.cs,CheckAlbumArt,The following statement contains a magic number: try              {                  bool is64 = false' is128 = false' is256 = false;                  string albumArtPath = String.Empty;                    foreach (var ddsFile in ddsFilesPath)                  {                      if (ddsFile.Contains("_64"))                          is64 = true;                      if (ddsFile.Contains("_128"))                          is128 = true;                      if (ddsFile.Contains("_256"))                      {                          is256 = true;                          albumArtPath = ddsFile;                      }                  }                    // do not update psarc if album artwork if already valid                  if (is64 && is128 && is256)                  {                      Console.WriteLine(@"Artwork is valid.");                      Console.WriteLine("");                      return;                  }                    if (String.IsNullOrEmpty(albumArtPath))                      albumArtPath = ddsFilesPath[0];                    Console.WriteLine(@"Repairing album artwork using: " + Path.GetFileName(albumArtPath));                  var ddsFiles = new List<DDSConvertedFile>();                    if (!albumArtPath.Contains("_64"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 64' sizeY = 64' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_128"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 128' sizeY = 128' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                  if (!albumArtPath.Contains("_256"))                      ddsFiles.Add(new DDSConvertedFile() { sizeX = 256' sizeY = 256' sourceFile = albumArtPath' destinationFile = GeneralExtensions.GetTempFileName(".dds") });                    // Convert to correct dds file sizes                  DLCPackageCreator.ToDDS(ddsFiles);                    var albumArtDir = Path.GetDirectoryName(albumArtPath);                  var albumArtName = String.Format("album_{0}"' dlcName.ToLower().Replace("_"' "").GetValidFileName());                  var ddsPartialPath = Path.Combine(albumArtDir' albumArtName);                    foreach (var dds in ddsFiles)                  {                      var destAlbumArtPath = String.Format("{0}_{1}.dds"' ddsPartialPath' dds.sizeX);                      if (!File.Exists(dds.destinationFile))                          Console.WriteLine(@"Could not repair: " + destAlbumArtPath);                        File.Copy(dds.destinationFile' destAlbumArtPath);                      // delete temp artwork file                      File.Delete(dds.destinationFile);                  }              }              catch (Exception ex)              {                  Console.WriteLine("Exception: " + ex.Message);                  Console.ReadLine();              }
