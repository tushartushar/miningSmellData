Implementation smell,Namespace,Class,File,Method,Description
Long Method,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The method has 124 lines of code.
Complex Method,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The length of the statement  "                    ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ..."); " is 139.
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The length of the statement  "                    ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ..."); " is 152.
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The length of the statement  "                    ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ..."); " is 139.
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The length of the statement  "                    ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ..."); " is 147.
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The length of the statement  "                ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ..."); " is 152.
Long Statement,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,ProjectVersion,The length of the statement  "            return String.Format("{0}.{1}.{2}"' Assembly.GetExecutingAssembly().GetName().Version.Major' Assembly.GetExecutingAssembly().GetName().Version.Minor' Assembly.GetExecutingAssembly().GetName().Version.Build); " is 207.
Empty Catch Block,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The method has an empty catch block.
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2)                  args = new string[] { "?" };
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,Main,The following statement contains a magic number: if (args.Length == 2) // read or restore              {                  if (action != "read" && action != "restore")                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    var srcPath = args[1];                    if (!srcPath.ToLower().Contains("localprofiles.json"))                      ShowHelpfulError("<ERROR> [file] is not 'localprofiles.json'" + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (action == "read")                  {                      var destDir = Path.GetDirectoryName(srcPath);                      var profileId = BitConverter.ToString(GetProfileId(srcPath));                      var nullFileName = String.Format("PID {0}"' profileId);                      var nullFilePath = Path.Combine(destDir' nullFileName);                      Clipboard.SetText(profileId);                        using (TextWriter tw = new StreamWriter(nullFilePath' false))                          tw.Close();                        Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   The PID is: " + profileId);                      Console.WriteLine("   The PID was saved to the Clipboard for later use.");                      Console.WriteLine("   For reference created a null file named: " + nullFileName);                        var destPath = String.Format("{0}{1}"' srcPath' backupExt);                      if (!File.Exists(destPath)) // make backup of original                      {                          File.Copy(srcPath' destPath);                          Console.WriteLine(" - User Profile File: " + srcPath);                          Console.WriteLine("   Copied To: " + destPath);                      }                  }                  else if (action == "restore" && srcPath.ToLower().EndsWith(backupExt))                  {                      var destPath = Path.Combine(Path.GetDirectoryName(srcPath)' Path.GetFileNameWithoutExtension(srcPath));                      File.Copy(srcPath' destPath' true);                      Console.WriteLine(" - User Profile File: " + srcPath);                      Console.WriteLine("   Restored To: " + destPath);                  }                  else                      ShowHelpfulError("<ERROR> Invalid syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");              }              else if (args.Length > 2) // write              {                  if (action != "write")                      ShowHelpfulError("<ERROR> Invalid 'write' syntax usage." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");                    if (args[1].Length != 11)                      ShowHelpfulError("<ERROR> The PID must be input as a formatted string: '00-00-00-00' ...");                    var profileId = String2Byte(args[1]);                  var little = BigEndianBitConverter.Little;                    for (int i = 2; i < args.Length; i++)                  {                      using (FileStream outStream = new FileStream(args[i]' FileMode.Open' FileAccess.ReadWrite))                      using (var bw = new EndianBinaryWriter(little' outStream))                      {                          bw.BaseStream.Position = 8;                          bw.Write(profileId);                      }                        Console.WriteLine(" - Changed User Profile File: " + args[i]);                      Console.WriteLine("   PID To: " + args[1]);                        if (args.Length > 3 && i < args.Length - 1)                          Console.WriteLine();                  }              }              else                  ShowHelpfulError("<ERROR> Encountered unexpected CLI syntax." + Environment.NewLine + "Type 'transferprofile.exe help' for additional information ...");
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,GetProfileId,The following statement contains a magic number: using (var inputFS = File.OpenRead(filePath))              using (EndianBinaryReader br = new EndianBinaryReader(little' inputFS))              {                  // move to the correct location                  br.ReadBytes(8);                  // read raw PID data                  var profileId1 = br.ReadBytes(4);                  return profileId1;              }
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,GetProfileId,The following statement contains a magic number: using (var inputFS = File.OpenRead(filePath))              using (EndianBinaryReader br = new EndianBinaryReader(little' inputFS))              {                  // move to the correct location                  br.ReadBytes(8);                  // read raw PID data                  var profileId1 = br.ReadBytes(4);                  return profileId1;              }
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,String2Byte,The following statement contains a magic number: if (dataString.Length != 11) return null;
Magic Number,transferprofile,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\transferprofile\Program.cs,String2Byte,The following statement contains a magic number: return dataString.Split('-').Select(x => Convert.ToByte(x' 16)).ToArray();
