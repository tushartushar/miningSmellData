Implementation smell,Namespace,Class,File,Method,Description
Long Method,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The method has 152 lines of code.
Complex Method,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,Cyclomatic complexity of the method is 14
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,GetOptions,The length of the statement  "                { "s|sourceplatform="' "Source platform (valid values: Pc' Mac' XBox360 or PS3)"' v => outputArguments.SourcePlatform = GetPlatform(v) }' " is 137.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,GetOptions,The length of the statement  "                { "t|targetplatform="' "Target platform (valid values: Pc' Mac' XBox360 or PS3)"' v => outputArguments.TargetPlatform = GetPlatform(v) }' " is 137.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,GetOptions,The length of the statement  "                { "v|verbose"' "Show verbose conversion output (default is false)"' v => { if (v != null) outputArguments.Verbose = true; }} " is 124.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                var sourcePackages = (arguments.Input.IsDirectory()) ? Directory.EnumerateFiles(arguments.Input' packageFilter' SearchOption.TopDirectoryOnly) : new string[] { arguments.Input }; " is 178.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                        Console.WriteLine(String.Format("Processing DLC [" + dlcCount + " / " + sourcePackages.Count() + "] '{0}' ..."' Path.GetFileName(sourcePackage))); " is 146.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                        var alertMessage = String.Format("Source package '{0}' seems to be not {1} platform' the conversion can't be work."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform); " is 185.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                        var output = DLCPackageConverter.Convert(sourcePackage' arguments.SourcePlatform' arguments.TargetPlatform' arguments.AppId); " is 125.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                            Console.WriteLine(String.Format("DLC {0} converted from '{1}' to '{2}'."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform' arguments.TargetPlatform.platform)); " is 178.
Long Statement,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The length of the statement  "                        Console.WriteLine(String.Format("ERROR: Couldn't convert DLC because of error '{0}' - skip file '{1}'"' e.Message' Path.GetFileName(sourcePackage))); " is 149.
Empty Catch Block,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The method has an empty catch block.
Magic Number,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The following statement contains a magic number: try              {                  Console.SetWindowSize(85' 40);                  Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Green;              }              catch {/* DO NOTHING */}
Magic Number,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The following statement contains a magic number: try              {                  options.Parse(args);                  if (arguments.ShowHelp)                  {                      options.WriteOptionDescriptions(Console.Out);                      Console.WriteLine("");                      Console.WriteLine("Press any key to close window ...");                      Console.ReadLine();                      return 0;                  }                    // VALIDATIONS                  if (arguments.SourcePlatform == null || arguments.SourcePlatform.platform == GamePlatform.None)                  {                      ShowHelpfulError("Must specify a 'source platform'' valid values: Pc|Mac|XBox360|PS3.");                      return 1;                  }                    if (arguments.TargetPlatform == null || arguments.TargetPlatform.platform == GamePlatform.None)                  {                      ShowHelpfulError("Must specify a 'target platform'' valid values: Pc|Mac|XBox360|PS3.");                      return 1;                  }                    if (string.IsNullOrEmpty(arguments.Input))                  {                      ShowHelpfulError("Must specify an 'input' file or directory.");                      return 1;                  }                    if ((!arguments.TargetPlatform.IsConsole) && String.IsNullOrEmpty(arguments.AppId))                  {                      ShowHelpfulError("'appid' is required for 'Pc' or 'Mac' target platform.");                      return 1;                  }                      // CONVERSION                  var packageFilter = "*.psarc";                  if (arguments.SourcePlatform.platform == GamePlatform.XBox360)                      packageFilter = "*.*";                  else if (arguments.SourcePlatform.platform == GamePlatform.PS3)                      packageFilter = "*.edat";                    var sourcePackages = (arguments.Input.IsDirectory()) ? Directory.EnumerateFiles(arguments.Input' packageFilter' SearchOption.TopDirectoryOnly) : new string[] { arguments.Input };                    Console.WriteLine(String.Format("Found '{0}' DLCs in '{1}'"' sourcePackages.Count()' arguments.Input));                  int dlcCount = 1;                  int dlcSuccessfulCount = 0;                  List<string> dlcErrorList = new List<string>();                  foreach (var sourcePackage in sourcePackages)                  {                      try                      {                          Console.WriteLine("-----------------------------------------------------------------");                          Console.WriteLine(String.Format("Processing DLC [" + dlcCount + " / " + sourcePackages.Count() + "] '{0}' ..."' Path.GetFileName(sourcePackage)));                            var alertMessage = String.Format("Source package '{0}' seems to be not {1} platform' the conversion can't be work."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform);                          if (arguments.SourcePlatform.platform != GamePlatform.PS3)                          {                              if (!Path.GetFileNameWithoutExtension(sourcePackage).EndsWith(arguments.SourcePlatform.GetPathName()[2]))                              {                                  Console.WriteLine(alertMessage);                                  Console.WriteLine("Force try to convert this package? [Y] Yes' [N] No.");                                  ConsoleKeyInfo key = Console.ReadKey(true);                                  if (key.Key == ConsoleKey.Y)                                      Console.WriteLine("Ok' trying convert...");                                  else                                      continue;                              }                          }                          else if (arguments.SourcePlatform.platform == GamePlatform.PS3)                          {                              if (!(Path.GetFileNameWithoutExtension(sourcePackage).EndsWith(arguments.SourcePlatform.GetPathName()[2] + ".psarc")))                              {                                  Console.WriteLine(alertMessage);                                  Console.WriteLine("Force try to convert this package? [Y] Yes' [N] No.");                                  ConsoleKeyInfo key = Console.ReadKey(true);                                  if (key.Key == ConsoleKey.Y)                                      Console.WriteLine("Ok' trying convert...");                                  else                                      continue;                              }                          }                            // hide console output from DLCPackageConverter library                          var tw = Console.Out;                          if (!arguments.Verbose)                              Console.SetOut(TextWriter.Null);                            // CONVERT                          var output = DLCPackageConverter.Convert(sourcePackage' arguments.SourcePlatform' arguments.TargetPlatform' arguments.AppId);                            // show console output again                          Console.SetOut(tw);                            if (!String.IsNullOrEmpty(output))                          {                              // This should not happen..                              Console.WriteLine(output);                          }                          else                          {                              Console.WriteLine(String.Format("DLC {0} converted from '{1}' to '{2}'."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform' arguments.TargetPlatform.platform));                          }                            dlcSuccessfulCount++;                      }                      catch (Exception e)                      {                          Console.WriteLine(String.Format("ERROR: Couldn't convert DLC because of error '{0}' - skip file '{1}'"' e.Message' Path.GetFileName(sourcePackage)));                          dlcErrorList.Add(Path.GetFullPath(sourcePackage));                      }                      finally                      {                          Console.WriteLine("-----------------------------------------------------------------");                          dlcCount++;                      }                  }                    Console.WriteLine(String.Format("'{0}' DLCs successful processed."' dlcSuccessfulCount));                  if (dlcErrorList.Count > 0)                  {                      Console.WriteLine(String.Format("'{0}' DLCs processed with errors:"' dlcErrorList.Count));                      dlcErrorList.ForEach(delegate(String fileName)                      {                          Console.WriteLine(fileName);                      });                  }                }              catch (Exception ex)              {                  ShowHelpfulError(ex.Message);                  return 1;              }
Magic Number,cdlcconverter,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\cdlcconverter\Program.cs,Main,The following statement contains a magic number: try              {                  options.Parse(args);                  if (arguments.ShowHelp)                  {                      options.WriteOptionDescriptions(Console.Out);                      Console.WriteLine("");                      Console.WriteLine("Press any key to close window ...");                      Console.ReadLine();                      return 0;                  }                    // VALIDATIONS                  if (arguments.SourcePlatform == null || arguments.SourcePlatform.platform == GamePlatform.None)                  {                      ShowHelpfulError("Must specify a 'source platform'' valid values: Pc|Mac|XBox360|PS3.");                      return 1;                  }                    if (arguments.TargetPlatform == null || arguments.TargetPlatform.platform == GamePlatform.None)                  {                      ShowHelpfulError("Must specify a 'target platform'' valid values: Pc|Mac|XBox360|PS3.");                      return 1;                  }                    if (string.IsNullOrEmpty(arguments.Input))                  {                      ShowHelpfulError("Must specify an 'input' file or directory.");                      return 1;                  }                    if ((!arguments.TargetPlatform.IsConsole) && String.IsNullOrEmpty(arguments.AppId))                  {                      ShowHelpfulError("'appid' is required for 'Pc' or 'Mac' target platform.");                      return 1;                  }                      // CONVERSION                  var packageFilter = "*.psarc";                  if (arguments.SourcePlatform.platform == GamePlatform.XBox360)                      packageFilter = "*.*";                  else if (arguments.SourcePlatform.platform == GamePlatform.PS3)                      packageFilter = "*.edat";                    var sourcePackages = (arguments.Input.IsDirectory()) ? Directory.EnumerateFiles(arguments.Input' packageFilter' SearchOption.TopDirectoryOnly) : new string[] { arguments.Input };                    Console.WriteLine(String.Format("Found '{0}' DLCs in '{1}'"' sourcePackages.Count()' arguments.Input));                  int dlcCount = 1;                  int dlcSuccessfulCount = 0;                  List<string> dlcErrorList = new List<string>();                  foreach (var sourcePackage in sourcePackages)                  {                      try                      {                          Console.WriteLine("-----------------------------------------------------------------");                          Console.WriteLine(String.Format("Processing DLC [" + dlcCount + " / " + sourcePackages.Count() + "] '{0}' ..."' Path.GetFileName(sourcePackage)));                            var alertMessage = String.Format("Source package '{0}' seems to be not {1} platform' the conversion can't be work."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform);                          if (arguments.SourcePlatform.platform != GamePlatform.PS3)                          {                              if (!Path.GetFileNameWithoutExtension(sourcePackage).EndsWith(arguments.SourcePlatform.GetPathName()[2]))                              {                                  Console.WriteLine(alertMessage);                                  Console.WriteLine("Force try to convert this package? [Y] Yes' [N] No.");                                  ConsoleKeyInfo key = Console.ReadKey(true);                                  if (key.Key == ConsoleKey.Y)                                      Console.WriteLine("Ok' trying convert...");                                  else                                      continue;                              }                          }                          else if (arguments.SourcePlatform.platform == GamePlatform.PS3)                          {                              if (!(Path.GetFileNameWithoutExtension(sourcePackage).EndsWith(arguments.SourcePlatform.GetPathName()[2] + ".psarc")))                              {                                  Console.WriteLine(alertMessage);                                  Console.WriteLine("Force try to convert this package? [Y] Yes' [N] No.");                                  ConsoleKeyInfo key = Console.ReadKey(true);                                  if (key.Key == ConsoleKey.Y)                                      Console.WriteLine("Ok' trying convert...");                                  else                                      continue;                              }                          }                            // hide console output from DLCPackageConverter library                          var tw = Console.Out;                          if (!arguments.Verbose)                              Console.SetOut(TextWriter.Null);                            // CONVERT                          var output = DLCPackageConverter.Convert(sourcePackage' arguments.SourcePlatform' arguments.TargetPlatform' arguments.AppId);                            // show console output again                          Console.SetOut(tw);                            if (!String.IsNullOrEmpty(output))                          {                              // This should not happen..                              Console.WriteLine(output);                          }                          else                          {                              Console.WriteLine(String.Format("DLC {0} converted from '{1}' to '{2}'."' Path.GetFileName(sourcePackage)' arguments.SourcePlatform.platform' arguments.TargetPlatform.platform));                          }                            dlcSuccessfulCount++;                      }                      catch (Exception e)                      {                          Console.WriteLine(String.Format("ERROR: Couldn't convert DLC because of error '{0}' - skip file '{1}'"' e.Message' Path.GetFileName(sourcePackage)));                          dlcErrorList.Add(Path.GetFullPath(sourcePackage));                      }                      finally                      {                          Console.WriteLine("-----------------------------------------------------------------");                          dlcCount++;                      }                  }                    Console.WriteLine(String.Format("'{0}' DLCs successful processed."' dlcSuccessfulCount));                  if (dlcErrorList.Count > 0)                  {                      Console.WriteLine(String.Format("'{0}' DLCs processed with errors:"' dlcErrorList.Count));                      dlcErrorList.ForEach(delegate(String fileName)                      {                          Console.WriteLine(fileName);                      });                  }                }              catch (Exception ex)              {                  ShowHelpfulError(ex.Message);                  return 1;              }
