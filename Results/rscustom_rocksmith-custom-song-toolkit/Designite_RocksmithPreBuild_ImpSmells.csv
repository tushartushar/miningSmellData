Implementation smell,Namespace,Class,File,Method,Description
Long Method,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The method has 272 lines of code.
Complex Method,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,Cyclomatic complexity of the method is 26
Complex Method,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,ConvertVsProject,Cyclomatic complexity of the method is 10
Long Statement,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The length of the statement  "            string[] applicationProjectNames = new string[] { "RocksmithToolkitLib"' "RocksmithTookitGUI"' "RocksmithToolkitUpdater" }; " is 123.
Long Statement,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,ConvertVsProject,The length of the statement  "                            lines[idx] = "<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"4.0\">"; " is 133.
Long Statement,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,ProjectVersion,The length of the statement  "            return String.Format("{0}.{1}.{2}"' Assembly.GetExecutingAssembly().GetName().Version.Major' Assembly.GetExecutingAssembly().GetName().Version.Minor' Assembly.GetExecutingAssembly().GetName().Version.Build); " is 207.
Complex Conditional,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The conditional expression  "!args.Any() || args.Length != 3 || args[0].ToUpper().Contains("HELP") || args[0].Contains("?")"  is complex.
Magic Number,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The following statement contains a magic number: if (!args.Any() || args.Length != 3 || args[0].ToUpper().Contains("HELP") || args[0].Contains("?"))              {                  Console.WriteLine("");                  Console.WriteLine(" CLI RocksmithPreBuild.exe");                  Console.WriteLine("");                  Console.WriteLine(" - Version: " + ProjectVersion());                  Console.WriteLine("   Copyright (C) 2017 CST Developers' Cozy1");                  Console.WriteLine("");                  Console.WriteLine(" - Purpose: FOR DEVELOPER USE ONLY");                  Console.WriteLine("            Updates 'AssemblyInfo.cs' and 'PatchAssemblyVersion.ps1' files");                  Console.WriteLine("");                  Console.WriteLine(" - Syntax:  RocksmithPostBuild.exe [arg0] [arg1] [arg2]");                  Console.WriteLine("            arg0 = 'PREBUILDER' or 'CONVERT'");                  Console.WriteLine("            [arg1] and [arg2] for read/write to 'PatchAssemblyVersion.ps1' file");                  Console.WriteLine("            arg1 = 'READ' [AssemblyVersion Read Mode] ");                  Console.WriteLine("            arg2 = 'READ' [AssemblyConfiguration Read Mode]");                  Console.WriteLine("            arg1 = '2.8.3.0' [AssemblyVersion Write Mode]");                  Console.WriteLine("            arg2 = 'BETA' or 'RELEASE' [AssemblyConfiguration Write Mode]");                  Console.WriteLine("            'RELEASE' is converted to an empty/null string for use in the app");                  Console.WriteLine("");                  Console.WriteLine(" - Usage:   Run CLI RocksmithPreBuilder.exe with arguments from inside");                  Console.WriteLine("            the VS2010 DEBUG MODE pre-build event in RocksmithToolkitLib");                  Console.WriteLine("            e.g. cmd /c \"RocksmithPreBuild.exe PREBUILD 2.8.3.0 RELEASE\"");                  Console.WriteLine("");                  Console.WriteLine("Press any key to continue");                  if (DebugMode) Console.Read();                    Environment.Exit(1);              }
Magic Number,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The following statement contains a magic number: assemblyInformationVersion = lines[0].Substring(0' 8);
Magic Number,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The following statement contains a magic number: if (lines.Any())              {                  // $Assembly_Version = "0.0.0.0"                   line = lines.Where(str => str.Contains("$Assembly_Version")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[1].ToUpper() == "READ")                          {                              assemblyVersion = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Version: " + assemblyVersion);                          }                          else                          {                              assemblyVersion = args[1];                              lines[idx] = "$Assembly_Version = \"" + assemblyVersion + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Version: " + assemblyVersion);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Version' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    // $Assembly_Configuration = "BETA"                   line = lines.Where(str => str.Contains("$Assembly_Configuration")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[2].ToUpper() == "READ")                          {                              assemblyConfiguration = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Configuration: " + assemblyConfiguration);                          }                          else                          {                              // convert configuration term 'RELEASE' to empty (blank)                              if (args[2].ToUpper() == "RELEASE")                                  assemblyConfiguration = "";                              else                                  assemblyConfiguration = (args[2]);                                lines[idx] = "$Assembly_Configuration = \"" + assemblyConfiguration + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Configuration: " + assemblyConfiguration);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Configuration' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    Console.WriteLine("");              }
Magic Number,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The following statement contains a magic number: if (lines.Any())              {                  // $Assembly_Version = "0.0.0.0"                   line = lines.Where(str => str.Contains("$Assembly_Version")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[1].ToUpper() == "READ")                          {                              assemblyVersion = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Version: " + assemblyVersion);                          }                          else                          {                              assemblyVersion = args[1];                              lines[idx] = "$Assembly_Version = \"" + assemblyVersion + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Version: " + assemblyVersion);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Version' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    // $Assembly_Configuration = "BETA"                   line = lines.Where(str => str.Contains("$Assembly_Configuration")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[2].ToUpper() == "READ")                          {                              assemblyConfiguration = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Configuration: " + assemblyConfiguration);                          }                          else                          {                              // convert configuration term 'RELEASE' to empty (blank)                              if (args[2].ToUpper() == "RELEASE")                                  assemblyConfiguration = "";                              else                                  assemblyConfiguration = (args[2]);                                lines[idx] = "$Assembly_Configuration = \"" + assemblyConfiguration + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Configuration: " + assemblyConfiguration);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Configuration' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    Console.WriteLine("");              }
Magic Number,RocksmithPreBuild,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithPreBuild\Program.cs,Main,The following statement contains a magic number: if (lines.Any())              {                  // $Assembly_Version = "0.0.0.0"                   line = lines.Where(str => str.Contains("$Assembly_Version")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[1].ToUpper() == "READ")                          {                              assemblyVersion = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Version: " + assemblyVersion);                          }                          else                          {                              assemblyVersion = args[1];                              lines[idx] = "$Assembly_Version = \"" + assemblyVersion + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Version: " + assemblyVersion);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Version' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    // $Assembly_Configuration = "BETA"                   line = lines.Where(str => str.Contains("$Assembly_Configuration")).FirstOrDefault();                  if (!string.IsNullOrEmpty(line))                  {                      var idx = lines.IndexOf(line);                      if (idx > -1)                      {                          Console.ForegroundColor = ConsoleColor.Cyan;                          if (args[2].ToUpper() == "READ")                          {                              assemblyConfiguration = GetStringInBetween("\""' "\""' line);                              Console.WriteLine(" - Read $Assembly_Configuration: " + assemblyConfiguration);                          }                          else                          {                              // convert configuration term 'RELEASE' to empty (blank)                              if (args[2].ToUpper() == "RELEASE")                                  assemblyConfiguration = "";                              else                                  assemblyConfiguration = (args[2]);                                lines[idx] = "$Assembly_Configuration = \"" + assemblyConfiguration + "\"";                              File.WriteAllLines(patchAssemblyVersionPath' lines.ToArray());                              Console.WriteLine(" - Updated $Assembly_Configuration: " + assemblyConfiguration);                          }                            Console.ForegroundColor = ConsoleColor.Green;                      }                      else                      {                          Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(" - <ERROR> Could not find '$Assembly_Configuration' ...");                          Console.WriteLine(patchAssemblyVersionPath);                          Console.ForegroundColor = ConsoleColor.Green;                      }                  }                    Console.WriteLine("");              }
