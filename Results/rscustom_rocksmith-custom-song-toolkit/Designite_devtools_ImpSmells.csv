Implementation smell,Namespace,Class,File,Method,Description
Magic Number,devtools,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\devtools\Program.cs,RemoveCrapFromDecryptedFiles,The following statement contains a magic number: foreach (string file in Directory.EnumerateFiles(directory))              {                  try                  {                      string dirtyXml = File.ReadAllText(file);                      int index = dirtyXml.IndexOf("</vocals>");                      if (index >0) {                          index += 9;                      } else                      {                          index = dirtyXml.IndexOf(@"</song>") + 7;                          if (index == 6)                          {                              continue;                          }                      }                      File.WriteAllText(file' dirtyXml.Substring(0' index));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }              }
Magic Number,devtools,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\devtools\Program.cs,RemoveCrapFromDecryptedFiles,The following statement contains a magic number: foreach (string file in Directory.EnumerateFiles(directory))              {                  try                  {                      string dirtyXml = File.ReadAllText(file);                      int index = dirtyXml.IndexOf("</vocals>");                      if (index >0) {                          index += 9;                      } else                      {                          index = dirtyXml.IndexOf(@"</song>") + 7;                          if (index == 6)                          {                              continue;                          }                      }                      File.WriteAllText(file' dirtyXml.Substring(0' index));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }              }
Magic Number,devtools,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\devtools\Program.cs,RemoveCrapFromDecryptedFiles,The following statement contains a magic number: foreach (string file in Directory.EnumerateFiles(directory))              {                  try                  {                      string dirtyXml = File.ReadAllText(file);                      int index = dirtyXml.IndexOf("</vocals>");                      if (index >0) {                          index += 9;                      } else                      {                          index = dirtyXml.IndexOf(@"</song>") + 7;                          if (index == 6)                          {                              continue;                          }                      }                      File.WriteAllText(file' dirtyXml.Substring(0' index));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }              }
Magic Number,devtools,Program,C:\repos\rscustom_rocksmith-custom-song-toolkit\RocksmithToolkitCLI\devtools\Program.cs,RenameRsXmlFiles,The following statement contains a magic number: foreach (string file in Directory.EnumerateFiles(directory))              {                  string newName = null;                  try                  {                      try                      {                          using (var reader = new StreamReader(file))                          {                                var serializer = new XmlSerializer(typeof(Vocals));                              var vocals = (Vocals)serializer.Deserialize(reader);                              newName = "Vocals-";                              foreach (var vocal in vocals.Vocal)                              {                                  if (newName.Length > 50)                                  {                                      break;                                  }                                  newName += vocal.Lyric;                              }                          }                      }                      catch(Exception e)                      {                          if (e.InnerException == null || !"<song xmlns=''> was not expected.".Equals(e.InnerException.Message))                          {                              throw;                          }                          using (var reader = new StreamReader(file))                          {                              var serializer = new XmlSerializer(typeof(Song));                              var song = (Song)serializer.Deserialize(reader);                              newName = string.Format("{0} - {1}"' song.Title' song.Arrangement);                          }                      }                      if (newName != null)                      {                          newName = newName.Replace('.'' ' ').Replace('?'' ' ') + ".xml";                          if (newName != Path.GetFileName(file))                          {                              File.Move(file' Path.Combine(directory' newName));                          }                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }              }
