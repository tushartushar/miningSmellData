Implementation smell,Namespace,Class,File,Method,Description
Long Method,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Reduce,The method has 117 lines of code.
Complex Method,Intelligencia.UrlRewriter.Parsers,RewriteActionParserBase,C:\repos\sethyates_urlrewriter\src\Parsers\RewriteActionParserBase.cs,ParseConditions,Cyclomatic complexity of the method is 10
Long Statement,Intelligencia.UrlRewriter,XmlNodeExtensions,C:\repos\sethyates_urlrewriter\src\Extensions\XmlNodeExtensions.cs,GetRequiredAttribute,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.AttributeCannotBeBlank' attributeName)' node); " is 122.
Long Statement,Intelligencia.UrlRewriter,XmlNodeExtensions,C:\repos\sethyates_urlrewriter\src\Extensions\XmlNodeExtensions.cs,GetBooleanAttribute,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.InvalidBooleanAttribute' attributeName)' node); " is 123.
Long Statement,Intelligencia.UrlRewriter,XmlNodeExtensions,C:\repos\sethyates_urlrewriter\src\Extensions\XmlNodeExtensions.cs,GetIntegerAttribute,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.InvalidIntegerAttribute' attributeName)' node); " is 123.
Long Statement,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Rewrite,The length of the statement  "                    _configuration.Logger.Info(MessageProvider.FormatString(Message.RedirectingXtoY' _httpContext.RawUrl' context.Location)); " is 121.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfiguration,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfiguration.cs,LoadFromConfig,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.MissingConfigFileSection' Constants.RewriterNode)' section); " is 136.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadRegisterTransform,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ElementNoElements' Constants.ElementRegister)' node); " is 129.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadRegisterTransform,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.InvalidTypeSpecified' type' typeof(IRewriteTransform))' node); " is 138.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadRegisterLogger,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ElementNoElements' Constants.ElementRegister)' node); " is 129.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadRegisterParser,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ElementNoElements' Constants.ElementRegister)' node); " is 129.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadErrorHandler,The length of the statement  "                throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.AttributeRequired' Constants.AttrUrl)' node); " is 121.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadErrorHandler,The length of the statement  "                    throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.InvalidTypeSpecified' typeNode.Value' typeof(IRewriteErrorHandler))' node); " is 151.
Long Statement,Intelligencia.UrlRewriter.Configuration,RewriterConfigurationReader,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfigurationReader.cs,ReadMapping,The length of the statement  "                        throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ElementNotAllowed' mapNode.LocalName)' node); " is 121.
Long Statement,Intelligencia.UrlRewriter.Logging,DebugLogger,C:\repos\sethyates_urlrewriter\src\Logging\DebugLogger.cs,Error,The length of the statement  "                System.Diagnostics.Debug.WriteLine(String.Format("Exception: {0}\r\nError Message: {1}"' exception.GetType()' exception.Message)); " is 130.
Long Statement,Intelligencia.UrlRewriter.Logging,DebugLogger,C:\repos\sethyates_urlrewriter\src\Logging\DebugLogger.cs,Fatal,The length of the statement  "                System.Diagnostics.Debug.WriteLine(String.Format("Exception: {0}\r\nError Message: {1}"' exception.GetType()' exception.Message)); " is 130.
Long Statement,Intelligencia.UrlRewriter.Parsers,IfConditionActionParser,C:\repos\sethyates_urlrewriter\src\Parsers\IfConditionActionParser.cs,ReadActions,The length of the statement  "                            throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ElementNotAllowed' node.FirstChild.Name)' node); " is 124.
Long Statement,Intelligencia.UrlRewriter.Parsers,RewriteActionParser,C:\repos\sethyates_urlrewriter\src\Parsers\RewriteActionParser.cs,ParseProcessing,The length of the statement  "                    throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.ValueOfProcessingAttribute' processing' Constants.AttrValueContinue' Constants.AttrValueRestart' Constants.AttrValueStop)' node); " is 205.
Long Statement,Intelligencia.UrlRewriter.Utilities,TypeHelper,C:\repos\sethyates_urlrewriter\src\Utilities\TypeHelper.cs,Activate,The length of the statement  "                throw new ArgumentOutOfRangeException("fullTypeName"' fullTypeName' MessageProvider.FormatString(Message.FullTypeNameRequiresAssemblyName)); " is 140.
Long Statement,Intelligencia.UrlRewriter.Utilities,TypeHelper,C:\repos\sethyates_urlrewriter\src\Utilities\TypeHelper.cs,Activate,The length of the statement  "                throw new ArgumentOutOfRangeException("assemblyName"' assemblyName' MessageProvider.FormatString(Message.AssemblyNameRequired)); " is 128.
Magic Number,Intelligencia.UrlRewriter.Actions,SetStatusAction,C:\repos\sethyates_urlrewriter\src\Actions\SetStatusAction.cs,Execute,The following statement contains a magic number: return ((int)StatusCode >= 300)                      ? RewriteProcessing.StopProcessing                      : RewriteProcessing.ContinueProcessing;
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Rewrite,The following statement contains a magic number: if ((context.Location != originalUrl) && ((int)context.StatusCode < 400))              {                  if ((int)context.StatusCode < 300)                  {                      // Successful status if less than 300                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RewritingXtoY' _httpContext.RawUrl' context.Location));                        // To verify that the URL exists on this server:                      //  VerifyResultExists(context);                        // To ensure that directories are rewritten to their default document:                      //  HandleDefaultDocument(context);                        _httpContext.RewritePath(context.Location);                  }                  else                  {                      // Redirection                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RedirectingXtoY' _httpContext.RawUrl' context.Location));                        _httpContext.SetRedirectLocation(context.Location);                  }              }              else if ((int)context.StatusCode >= 400)              {                  HandleError(context);              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Rewrite,The following statement contains a magic number: if ((context.Location != originalUrl) && ((int)context.StatusCode < 400))              {                  if ((int)context.StatusCode < 300)                  {                      // Successful status if less than 300                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RewritingXtoY' _httpContext.RawUrl' context.Location));                        // To verify that the URL exists on this server:                      //  VerifyResultExists(context);                        // To ensure that directories are rewritten to their default document:                      //  HandleDefaultDocument(context);                        _httpContext.RewritePath(context.Location);                  }                  else                  {                      // Redirection                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RedirectingXtoY' _httpContext.RawUrl' context.Location));                        _httpContext.SetRedirectLocation(context.Location);                  }              }              else if ((int)context.StatusCode >= 400)              {                  HandleError(context);              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Rewrite,The following statement contains a magic number: if ((context.Location != originalUrl) && ((int)context.StatusCode < 400))              {                  if ((int)context.StatusCode < 300)                  {                      // Successful status if less than 300                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RewritingXtoY' _httpContext.RawUrl' context.Location));                        // To verify that the URL exists on this server:                      //  VerifyResultExists(context);                        // To ensure that directories are rewritten to their default document:                      //  HandleDefaultDocument(context);                        _httpContext.RewritePath(context.Location);                  }                  else                  {                      // Redirection                      _configuration.Logger.Info(MessageProvider.FormatString(Message.RedirectingXtoY' _httpContext.RawUrl' context.Location));                        _httpContext.SetRedirectLocation(context.Location);                  }              }              else if ((int)context.StatusCode >= 400)              {                  HandleError(context);              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,VerifyResultExists,The following statement contains a magic number: if ((String.Compare(context.Location' _httpContext.RawUrl) != 0) && ((int)context.StatusCode < 300))              {                  Uri uri = new Uri(_httpContext.RequestUrl' context.Location);                  if (uri.Host == _httpContext.RequestUrl.Host)                  {                      string filename = _httpContext.MapPath(uri.AbsolutePath);                      if (!File.Exists(filename))                      {                          _configuration.Logger.Debug(MessageProvider.FormatString(Message.ResultNotFound' filename));                          context.StatusCode = HttpStatusCode.NotFound;                      }                      else                      {                          HandleDefaultDocument(context);                      }                  }              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Reduce,The following statement contains a magic number: if (Char.IsDigit(ch))              {                  string num = ch.ToString();                  if (Char.IsDigit((char)reader.Peek()))                  {                      ch = (char)reader.Read();                      num += ch.ToString();                  }                  if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[Convert.ToInt32(num)];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '<')              {                  string expr;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '>' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[expr];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '{')              {                  string expr;                  bool isMap = false;                  bool isFunction = false;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '}' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              if (ch == ':')                              {                                  isMap = true;                              }                              else if (ch == '(')                              {                                  isFunction = true;                              }                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (isMap)                  {                      Match match = Regex.Match(expr' @"^([^\:]+)\:([^\|]+)(\|(.+))?$");                      string mapName = match.Groups[1].Value;                      string mapArgument = match.Groups[2].Value;                      string mapDefault = match.Groups[4].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(mapName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.MappingNotFound' mapName));                      }                        result = tx.ApplyTransform(mapArgument) ?? mapDefault;                  }                  else if (isFunction)                  {                      Match match = Regex.Match(expr' @"^([^\(]+)\((.+)\)$");                      string functionName = match.Groups[1].Value;                      string functionArgument = match.Groups[2].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(functionName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.TransformFunctionNotFound' functionName));                      }                        result = tx.ApplyTransform(functionArgument);                  }                  else                  {                      result = context.Properties[expr];                  }              }              else              {                  result = ch.ToString();              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Reduce,The following statement contains a magic number: if (Char.IsDigit(ch))              {                  string num = ch.ToString();                  if (Char.IsDigit((char)reader.Peek()))                  {                      ch = (char)reader.Read();                      num += ch.ToString();                  }                  if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[Convert.ToInt32(num)];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '<')              {                  string expr;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '>' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[expr];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '{')              {                  string expr;                  bool isMap = false;                  bool isFunction = false;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '}' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              if (ch == ':')                              {                                  isMap = true;                              }                              else if (ch == '(')                              {                                  isFunction = true;                              }                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (isMap)                  {                      Match match = Regex.Match(expr' @"^([^\:]+)\:([^\|]+)(\|(.+))?$");                      string mapName = match.Groups[1].Value;                      string mapArgument = match.Groups[2].Value;                      string mapDefault = match.Groups[4].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(mapName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.MappingNotFound' mapName));                      }                        result = tx.ApplyTransform(mapArgument) ?? mapDefault;                  }                  else if (isFunction)                  {                      Match match = Regex.Match(expr' @"^([^\(]+)\((.+)\)$");                      string functionName = match.Groups[1].Value;                      string functionArgument = match.Groups[2].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(functionName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.TransformFunctionNotFound' functionName));                      }                        result = tx.ApplyTransform(functionArgument);                  }                  else                  {                      result = context.Properties[expr];                  }              }              else              {                  result = ch.ToString();              }
Magic Number,Intelligencia.UrlRewriter,RewriterEngine,C:\repos\sethyates_urlrewriter\src\RewriterEngine.cs,Reduce,The following statement contains a magic number: if (Char.IsDigit(ch))              {                  string num = ch.ToString();                  if (Char.IsDigit((char)reader.Peek()))                  {                      ch = (char)reader.Read();                      num += ch.ToString();                  }                  if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[Convert.ToInt32(num)];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '<')              {                  string expr;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '>' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (context.LastMatch != null)                  {                      Group group = context.LastMatch.Groups[expr];                      result = (group == null) ? String.Empty : group.Value;                  }                  else                  {                      result = String.Empty;                  }              }              else if (ch == '{')              {                  string expr;                  bool isMap = false;                  bool isFunction = false;                    using (StringWriter writer = new StringWriter())                  {                      ch = (char)reader.Read();                      while (ch != '}' && ch != EndChar)                      {                          if (ch == '$')                          {                              writer.Write(Reduce(context' reader));                          }                          else                          {                              if (ch == ':')                              {                                  isMap = true;                              }                              else if (ch == '(')                              {                                  isFunction = true;                              }                              writer.Write(ch);                          }                          ch = (char)reader.Read();                      }                        expr = writer.GetStringBuilder().ToString();                  }                    if (isMap)                  {                      Match match = Regex.Match(expr' @"^([^\:]+)\:([^\|]+)(\|(.+))?$");                      string mapName = match.Groups[1].Value;                      string mapArgument = match.Groups[2].Value;                      string mapDefault = match.Groups[4].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(mapName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.MappingNotFound' mapName));                      }                        result = tx.ApplyTransform(mapArgument) ?? mapDefault;                  }                  else if (isFunction)                  {                      Match match = Regex.Match(expr' @"^([^\(]+)\((.+)\)$");                      string functionName = match.Groups[1].Value;                      string functionArgument = match.Groups[2].Value;                        IRewriteTransform tx = _configuration.TransformFactory.GetTransform(functionName);                      if (tx == null)                      {                          throw new ConfigurationErrorsException(MessageProvider.FormatString(Message.TransformFunctionNotFound' functionName));                      }                        result = tx.ApplyTransform(functionArgument);                  }                  else                  {                      result = context.Properties[expr];                  }              }              else              {                  result = ch.ToString();              }
Magic Number,Intelligencia.UrlRewriter.Configuration,RewriterConfiguration,C:\repos\sethyates_urlrewriter\src\Configuration\RewriterConfiguration.cs,RewriterConfiguration,The following statement contains a magic number: _xPoweredBy = MessageProvider.FormatString(Message.ProductName' Assembly.GetExecutingAssembly().GetName().Version.ToString(3));
Magic Number,Intelligencia.UrlRewriter.Utilities,TypeHelper,C:\repos\sethyates_urlrewriter\src\Utilities\TypeHelper.cs,Activate,The following statement contains a magic number: string[] components = fullTypeName.Split(new char[] { ''' }' 2);
Magic Number,Intelligencia.UrlRewriter.Utilities,TypeHelper,C:\repos\sethyates_urlrewriter\src\Utilities\TypeHelper.cs,Activate,The following statement contains a magic number: if (components.Length != 2)              {                  throw new ArgumentOutOfRangeException("fullTypeName"' fullTypeName' MessageProvider.FormatString(Message.FullTypeNameRequiresAssemblyName));              }
