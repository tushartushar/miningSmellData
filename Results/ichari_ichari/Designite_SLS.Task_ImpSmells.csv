Implementation smell,Namespace,Class,File,Method,Description
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has 125 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has 125 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has 125 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has 125 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has 150 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has 150 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has 155 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has 155 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has 285 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has 285 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has 285 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has 285 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has 235 lines of code.
Long Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has 235 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The method has 106 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The method has 159 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The method has 106 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The method has 159 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The method has 136 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The method has 195 lines of code.
Long Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The method has 119 lines of code.
Long Method,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The method has 137 lines of code.
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,Cyclomatic complexity of the method is 9
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,Cyclomatic complexity of the method is 9
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,Cyclomatic complexity of the method is 25
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,Cyclomatic complexity of the method is 25
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,Cyclomatic complexity of the method is 25
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,Cyclomatic complexity of the method is 25
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,Cyclomatic complexity of the method is 30
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,Cyclomatic complexity of the method is 30
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,Cyclomatic complexity of the method is 31
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,Cyclomatic complexity of the method is 31
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,Cyclomatic complexity of the method is 9
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,Cyclomatic complexity of the method is 9
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,Cyclomatic complexity of the method is 57
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,Cyclomatic complexity of the method is 57
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,Cyclomatic complexity of the method is 57
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,Cyclomatic complexity of the method is 57
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,Cyclomatic complexity of the method is 47
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,Cyclomatic complexity of the method is 47
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,Cyclomatic complexity of the method is 8
Complex Method,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,Log,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Log.cs,Log,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,Cyclomatic complexity of the method is 10
Complex Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,Cyclomatic complexity of the method is 18
Complex Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,Cyclomatic complexity of the method is 27
Complex Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,WriteTickets,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,Cyclomatic complexity of the method is 9
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,Cyclomatic complexity of the method is 11
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,Cyclomatic complexity of the method is 10
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,Cyclomatic complexity of the method is 18
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,Cyclomatic complexity of the method is 27
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,Cyclomatic complexity of the method is 24
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,Cyclomatic complexity of the method is 28
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,Cyclomatic complexity of the method is 8
Complex Method,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,Cyclomatic complexity of the method is 15
Complex Method,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,Cyclomatic complexity of the method is 18
Complex Method,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,GetLotteryNumber,Cyclomatic complexity of the method is 10
Complex Method,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,Cyclomatic complexity of the method is 13
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_AccumulateMember,The method has 6 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMember,The method has 6 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoney,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScale,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegPayMember,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentMonthMemberRecWebSitePayMoney,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsSendNotification,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_MonthPayMoneyShopBonusScale,The method has 6 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_MonthShopPayMoney,The method has 6 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_UnionSitePayMoney,The method has 5 parameters.
Long Parameter List,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_WebSitePayMoney,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has 14 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has 15 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has 21 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has 22 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has 21 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has 22 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has 40 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has 41 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has 40 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has 41 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has 18 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has 19 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has 18 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has 19 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeHotBetAdd,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeHotBetAdd,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has 20 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has 21 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has 21 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has 22 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has 27 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has 28 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has 25 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has 26 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has 26 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has 27 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has 15 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has 16 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has 14 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has 27 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has 28 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has 27 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has 28 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has 31 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has 32 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has 32 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has 33 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has 59 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has 60 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has 59 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has 60 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has 14 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has 19 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has 20 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has 17 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has 18 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has 17 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has 18 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has 51 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has 52 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchBasketReceive,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchBasketReceive,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has 15 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has 16 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has 16 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has 17 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_PassRateBasketAdd,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_PassRateBasketAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedScore,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeWinCalculatedScore,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteNotificationTemplate,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteNotificationTemplate,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has 28 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has 29 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has 25 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has 26 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has 16 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has 17 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has 16 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has 17 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has 23 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has 24 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has 21 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has 22 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has 18 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has 19 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has 22 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has 23 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has 39 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has 40 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has 30 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has 31 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has 11 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has 12 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has 37 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has 38 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has 37 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has 38 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has 6 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has 13 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has 14 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has 9 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has 10 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The method has 7 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The method has 8 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSystemLog,The method has 5 parameters.
Long Parameter List,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSystemLog,The method has 6 parameters.
Long Parameter List,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The method has 6 parameters.
Long Parameter List,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,InitiateScheme,The method has 16 parameters.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_AccumulateMember,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_AccumulateMember"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 519.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CalculationFollowSchemesMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CalculationFollowSchemesMoney"' new MSSQL.Parameter ("RemainingMoney"' SqlDbType.Money' 0' ParameterDirection.Input' RemainingMoney)' new MSSQL.Parameter ("RemainingShare"' SqlDbType.Int' 0' ParameterDirection.Input' RemainingShare)' new MSSQL.Parameter ("FollowSchemesMoney"' SqlDbType.Money' 0' ParameterDirection.Input' FollowSchemesMoney)); " is 404.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_ComparisonLotteryList,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_ComparisonLotteryList"' new MSSQL.Parameter ("ParentLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' ParentLotteryList)' new MSSQL.Parameter ("SubLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' SubLotteryList)); " is 298.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CpsGetCommenderPromoteCpsBonusScale,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CpsGetCommenderPromoteCpsBonusScale"' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)); " is 288.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CpsGetCommenderPromoteMemberBonusScale,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CpsGetCommenderPromoteMemberBonusScale"' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)); " is 291.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CpsGetCpsBonusScale,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CpsGetCpsBonusScale"' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)); " is 260.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CpsMemberAccumulateBuyerMember,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CpsMemberAccumulateBuyerMember"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 267.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CpsMemberAccumulateWebSite,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CpsMemberAccumulateWebSite"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 263.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMember,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMember"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 523.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoney"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 444.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScale,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScale"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 454.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScale_all,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScale_all"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)); " is 378.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScale_today,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScale_today"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)); " is 380.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScaleSite,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScaleSite"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)); " is 378.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScaleSite_all,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScaleSite_all"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)); " is 382.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegMemberPayMoneyBonusScaleSite_today,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegMemberPayMoneyBonusScaleSite_today"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)); " is 384.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentDateRegPayMember,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentDateRegPayMember"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 439.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_CurrentMonthMemberRecWebSitePayMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_CurrentMonthMemberRecWebSitePayMoney"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CurrentDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' CurrentDate)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 452.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_DateTimeToYYMMDD,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_DateTimeToYYMMDD"' new MSSQL.Parameter ("Dt"' SqlDbType.DateTime' 0' ParameterDirection.Input' Dt)); " is 160.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_DateTimeToYYMMDDHHMMSS,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_DateTimeToYYMMDDHHMMSS"' new MSSQL.Parameter ("Dt"' SqlDbType.DateTime' 0' ParameterDirection.Input' Dt)); " is 166.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetBankTypeName,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetBankTypeName"' new MSSQL.Parameter ("BankTypeID"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankTypeID)); " is 175.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetBonusScaleByCommenderID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetBonusScaleByCommenderID"' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)); " is 186.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetDayByDateTime,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetDayByDateTime"' new MSSQL.Parameter ("rq"' SqlDbType.VarChar' 0' ParameterDirection.Input' rq)' new MSSQL.Parameter ("dt"' SqlDbType.DateTime' 0' ParameterDirection.Input' dt)); " is 240.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetDetailsOperatorType,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetDetailsOperatorType"' new MSSQL.Parameter ("OperatorType"' SqlDbType.VarChar' 0' ParameterDirection.Input' OperatorType)); " is 185.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsAdministrator,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsAdministrator"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 255.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsSendNotification,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsSendNotification"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("NotificationCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' NotificationCode)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 455.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsuseChaseExecuteTime,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsuseChaseExecuteTime"' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)); " is 176.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsuseCount,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsuseCount"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 166.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsuseEndTime,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsuseEndTime"' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)); " is 167.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsuseStartTime,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsuseStartTime"' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)); " is 169.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetIsuseSystemEndTime,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetIsuseSystemEndTime"' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)); " is 265.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryCanChaseIsuses,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_GetLotteryCanChaseIsuses") + "(@LotteryID' @PlayType)"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("PlayType"' SqlDbType.Int' 0' ParameterDirection.Input' PlayType)); " is 320.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryCode,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryCode"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 167.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryIntervalType,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryIntervalType"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 175.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryIsUsed,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryIsUsed"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 256.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryName,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryName"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 167.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryPrintOutType,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryPrintOutType"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 175.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryType2Name,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryType2Name"' new MSSQL.Parameter ("Type2"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type2)); " is 169.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetLotteryWinNumberExemple,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetLotteryWinNumberExemple"' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 179.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetManagers,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_GetManagers") + "(@SiteID)"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 202.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetMaxMultiple,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetMaxMultiple"' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)); " is 258.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetOptions,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetOptions"' new MSSQL.Parameter ("Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' Key)); " is 155.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetPlaceFromIPAddress,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetPlaceFromIPAddress"' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)); " is 178.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetPlayTypeName,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetPlayTypeName"' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)); " is 170.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetProvinceCity,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetProvinceCity"' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)); " is 162.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSchemeInitiateUserID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSchemeInitiateUserID"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)); " is 264.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSchemeOpenUsers,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSchemeOpenUsers"' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)); " is 172.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetScoringDetailsOperatorType,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetScoringDetailsOperatorType"' new MSSQL.Parameter ("OperatorType"' SqlDbType.VarChar' 0' ParameterDirection.Input' OperatorType)); " is 192.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteAdministrator,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_GetSiteAdministrator") + "(@SiteID)"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 211.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteAdministrators,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_GetSiteAdministrators") + "(@SiteID)"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 212.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteOwnerUserID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSiteOwnerUserID"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 168.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteParentID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSiteParentID"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 165.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteSendNotificationTypes,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSiteSendNotificationTypes"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)); " is 267.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSiteUrls,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSiteUrls"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 161.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetSystemEndAheadMinute,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetSystemEndAheadMinute"' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)); " is 178.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryList,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryList"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 168.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryListQuickBuy,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryListQuickBuy"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 176.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryListRestrictions,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryListRestrictions"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 180.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryNameList,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryNameList"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 172.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryNameListQuickBuy,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryNameListQuickBuy"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 180.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUsedLotteryNameListRestrictions,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUsedLotteryNameListRestrictions"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 184.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserAcceptNotificationTypes,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserAcceptNotificationTypes"' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)); " is 269.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserCommenderID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserCommenderID"' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 168.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserCompetencesList,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserCompetencesList"' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 172.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserIDByName,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserIDByName"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)); " is 249.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserNameByID,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserNameByID"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)); " is 244.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetUserOwnerSitesList,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_GetUserOwnerSitesList"' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 171.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_GetWinLotteryNumber,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_GetWinLotteryNumber") + "(@SiteID' @LotteryID)"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)); " is 312.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_IPAddressToInt64,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_IPAddressToInt64"' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)); " is 173.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_IsDivisibility,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_IsDivisibility"' new MSSQL.Parameter ("Dividend"' SqlDbType.Float' 0' ParameterDirection.Input' Dividend)' new MSSQL.Parameter ("Divisor"' SqlDbType.Float' 0' ParameterDirection.Input' Divisor)); " is 255.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_MonthPayMoneyShopBonusScale,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_MonthPayMoneyShopBonusScale"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 530.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_MonthShopPayMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_MonthShopPayMoney"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 520.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_PadLeft,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_PadLeft"' new MSSQL.Parameter ("str"' SqlDbType.VarChar' 0' ParameterDirection.Input' str)' new MSSQL.Parameter ("FillChar"' SqlDbType.Char' 0' ParameterDirection.Input' FillChar)' new MSSQL.Parameter ("Len"' SqlDbType.Int' 0' ParameterDirection.Input' Len)); " is 319.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_SplitString,The length of the statement  "	return MSSQL.Select (ConnectionString' "select * from " + MSSQL.GetObjectFullName ("F_SplitString") + "(@SplitString' @Separator)"' new MSSQL.Parameter ("SplitString"' SqlDbType.VarChar' 0' ParameterDirection.Input' SplitString)' new MSSQL.Parameter ("Separator"' SqlDbType.VarChar' 0' ParameterDirection.Input' Separator)); " is 324.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_UnionSitePayMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_UnionSitePayMoney"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)); " is 440.
Long Statement,DAL,Functions,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,F_WebSitePayMoney,The length of the statement  "	object Result = MSSQL.ExecuteFunction (ConnectionString' "F_WebSitePayMoney"' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartDate)' new MSSQL.Parameter ("EndDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndDate)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)); " is 518.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_AcceptUserHongbaoPromotion"' ref Outputs' new MSSQL.Parameter ("FromUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FromUserID)' new MSSQL.Parameter ("ToUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ToUserID)' new MSSQL.Parameter ("UserHongbaoPromotionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserHongbaoPromotionID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 631.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_AcceptUserHongbaoPromotion"' ref ds' ref Outputs' new MSSQL.Parameter ("FromUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FromUserID)' new MSSQL.Parameter ("ToUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ToUserID)' new MSSQL.Parameter ("UserHongbaoPromotionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserHongbaoPromotionID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 640.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_AdvertisementsEdit"' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.Int' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 728.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_AdvertisementsEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.Int' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 737.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Analysis_3D_Miss"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 315.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Analysis_3D_Miss"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 324.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Analysis_SHSSL_HotAndCoolAndMiss"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 331.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Analysis_SHSSL_HotAndCoolAndMiss"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 340.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Analysis_SHSSL_WinUsersList"' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 416.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Analysis_SHSSL_WinUsersList"' ref ds' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescptrion"' SqlDbType.NVarChar' 200' ParameterDirection.Output' ReturnDescptrion)); " is 425.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketDXFdg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("Big"' SqlDbType.Float' 0' ParameterDirection.Input' Big)' new MSSQL.Parameter ("Small"' SqlDbType.Float' 0' ParameterDirection.Input' Small)' new MSSQL.Parameter ("BigSmallscore"' SqlDbType.Float' 0' ParameterDirection.Input' BigSmallscore)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1136.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketDXFdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("Big"' SqlDbType.Float' 0' ParameterDirection.Input' Big)' new MSSQL.Parameter ("Small"' SqlDbType.Float' 0' ParameterDirection.Input' Small)' new MSSQL.Parameter ("BigSmallscore"' SqlDbType.Float' 0' ParameterDirection.Input' BigSmallscore)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1145.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketDXFgg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("Big"' SqlDbType.Float' 0' ParameterDirection.Input' Big)' new MSSQL.Parameter ("Small"' SqlDbType.Float' 0' ParameterDirection.Input' Small)' new MSSQL.Parameter ("BigSmallscore"' SqlDbType.Float' 0' ParameterDirection.Input' BigSmallscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1136.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketDXFgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("Big"' SqlDbType.Float' 0' ParameterDirection.Input' Big)' new MSSQL.Parameter ("Small"' SqlDbType.Float' 0' ParameterDirection.Input' Small)' new MSSQL.Parameter ("BigSmallscore"' SqlDbType.Float' 0' ParameterDirection.Input' BigSmallscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1145.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketRfSfdg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("LetMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainLose)' new MSSQL.Parameter ("LetMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainWin)' new MSSQL.Parameter ("LetScoreMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetScoreMainLose)' new MSSQL.Parameter ("LetScoreMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetScoreMainWin)' new MSSQL.Parameter ("letscore"' SqlDbType.Float' 0' ParameterDirection.Input' letscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1363.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketRfSfdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("LetMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainLose)' new MSSQL.Parameter ("LetMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainWin)' new MSSQL.Parameter ("LetScoreMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetScoreMainLose)' new MSSQL.Parameter ("LetScoreMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetScoreMainWin)' new MSSQL.Parameter ("letscore"' SqlDbType.Float' 0' ParameterDirection.Input' letscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1372.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketRfSfgg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("LetMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainLose)' new MSSQL.Parameter ("LetMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainWin)' new MSSQL.Parameter ("letscore"' SqlDbType.Float' 0' ParameterDirection.Input' letscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1153.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketRfSfgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("LetMainLose"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainLose)' new MSSQL.Parameter ("LetMainWin"' SqlDbType.Float' 0' ParameterDirection.Input' LetMainWin)' new MSSQL.Parameter ("letscore"' SqlDbType.Float' 0' ParameterDirection.Input' letscore)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1162.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketSfcdg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("DifferGuest1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest1_5)' new MSSQL.Parameter ("DifferGuest6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest6_10)' new MSSQL.Parameter ("DifferGuest11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest11_15)' new MSSQL.Parameter ("DifferGuest16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest16_20)' new MSSQL.Parameter ("DifferGuest21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest21_25)' new MSSQL.Parameter ("DifferGuest26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest26)' new MSSQL.Parameter ("DifferMain1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain1_5)' new MSSQL.Parameter ("DifferMain6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain6_10)' new MSSQL.Parameter ("DifferMain11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain11_15)' new MSSQL.Parameter ("DifferMain16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain16_20)' new MSSQL.Parameter ("DifferMain21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain21_25)' new MSSQL.Parameter ("DifferMain26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain26)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 2108.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketSfcdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("DifferGuest1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest1_5)' new MSSQL.Parameter ("DifferGuest6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest6_10)' new MSSQL.Parameter ("DifferGuest11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest11_15)' new MSSQL.Parameter ("DifferGuest16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest16_20)' new MSSQL.Parameter ("DifferGuest21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest21_25)' new MSSQL.Parameter ("DifferGuest26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest26)' new MSSQL.Parameter ("DifferMain1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain1_5)' new MSSQL.Parameter ("DifferMain6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain6_10)' new MSSQL.Parameter ("DifferMain11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain11_15)' new MSSQL.Parameter ("DifferMain16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain16_20)' new MSSQL.Parameter ("DifferMain21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain21_25)' new MSSQL.Parameter ("DifferMain26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain26)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 2117.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketSfcgg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("DifferGuest1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest1_5)' new MSSQL.Parameter ("DifferGuest6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest6_10)' new MSSQL.Parameter ("DifferGuest11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest11_15)' new MSSQL.Parameter ("DifferGuest16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest16_20)' new MSSQL.Parameter ("DifferGuest21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest21_25)' new MSSQL.Parameter ("DifferGuest26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest26)' new MSSQL.Parameter ("DifferMain1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain1_5)' new MSSQL.Parameter ("DifferMain6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain6_10)' new MSSQL.Parameter ("DifferMain11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain11_15)' new MSSQL.Parameter ("DifferMain16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain16_20)' new MSSQL.Parameter ("DifferMain21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain21_25)' new MSSQL.Parameter ("DifferMain26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain26)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 2108.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketSfcgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("DifferGuest1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest1_5)' new MSSQL.Parameter ("DifferGuest6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest6_10)' new MSSQL.Parameter ("DifferGuest11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest11_15)' new MSSQL.Parameter ("DifferGuest16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest16_20)' new MSSQL.Parameter ("DifferGuest21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest21_25)' new MSSQL.Parameter ("DifferGuest26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferGuest26)' new MSSQL.Parameter ("DifferMain1_5"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain1_5)' new MSSQL.Parameter ("DifferMain6_10"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain6_10)' new MSSQL.Parameter ("DifferMain11_15"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain11_15)' new MSSQL.Parameter ("DifferMain16_20"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain16_20)' new MSSQL.Parameter ("DifferMain21_25"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain21_25)' new MSSQL.Parameter ("DifferMain26"' SqlDbType.Float' 0' ParameterDirection.Input' DifferMain26)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 2117.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketSfdg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("MainWin"' SqlDbType.Float' 0' ParameterDirection.Input' MainWin)' new MSSQL.Parameter ("Mainlose"' SqlDbType.Float' 0' ParameterDirection.Input' Mainlose)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1049.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketSfdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("MainWin"' SqlDbType.Float' 0' ParameterDirection.Input' MainWin)' new MSSQL.Parameter ("Mainlose"' SqlDbType.Float' 0' ParameterDirection.Input' Mainlose)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1058.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_BasketSfgg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("MainWin"' SqlDbType.Float' 0' ParameterDirection.Input' MainWin)' new MSSQL.Parameter ("Mainlose"' SqlDbType.Float' 0' ParameterDirection.Input' Mainlose)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1049.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_BasketSfgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellTime)' new MSSQL.Parameter ("MainWin"' SqlDbType.Float' 0' ParameterDirection.Input' MainWin)' new MSSQL.Parameter ("Mainlose"' SqlDbType.Float' 0' ParameterDirection.Input' Mainlose)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1058.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Bfdg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("S1_0"' SqlDbType.Float' 0' ParameterDirection.Input' S1_0)' new MSSQL.Parameter ("S2_0"' SqlDbType.Float' 0' ParameterDirection.Input' S2_0)' new MSSQL.Parameter ("S2_1"' SqlDbType.Float' 0' ParameterDirection.Input' S2_1)' new MSSQL.Parameter ("S3_0"' SqlDbType.Float' 0' ParameterDirection.Input' S3_0)' new MSSQL.Parameter ("S3_1"' SqlDbType.Float' 0' ParameterDirection.Input' S3_1)' new MSSQL.Parameter ("S3_2"' SqlDbType.Float' 0' ParameterDirection.Input' S3_2)' new MSSQL.Parameter ("S4_0"' SqlDbType.Float' 0' ParameterDirection.Input' S4_0)' new MSSQL.Parameter ("S4_1"' SqlDbType.Float' 0' ParameterDirection.Input' S4_1)' new MSSQL.Parameter ("S4_2"' SqlDbType.Float' 0' ParameterDirection.Input' S4_2)' new MSSQL.Parameter ("S5_0"' SqlDbType.Float' 0' ParameterDirection.Input' S5_0)' new MSSQL.Parameter ("S5_1"' SqlDbType.Float' 0' ParameterDirection.Input' S5_1)' new MSSQL.Parameter ("S5_2"' SqlDbType.Float' 0' ParameterDirection.Input' S5_2)' new MSSQL.Parameter ("SOther"' SqlDbType.Float' 0' ParameterDirection.Input' SOther)' new MSSQL.Parameter ("P0_0"' SqlDbType.Float' 0' ParameterDirection.Input' P0_0)' new MSSQL.Parameter ("P1_1"' SqlDbType.Float' 0' ParameterDirection.Input' P1_1)' new MSSQL.Parameter ("P2_2"' SqlDbType.Float' 0' ParameterDirection.Input' P2_2)' new MSSQL.Parameter ("P3_3"' SqlDbType.Float' 0' ParameterDirection.Input' P3_3)' new MSSQL.Parameter ("POther"' SqlDbType.Float' 0' ParameterDirection.Input' POther)' new MSSQL.Parameter ("F0_1"' SqlDbType.Float' 0' ParameterDirection.Input' F0_1)' new MSSQL.Parameter ("F0_2"' SqlDbType.Float' 0' ParameterDirection.Input' F0_2)' new MSSQL.Parameter ("F1_2"' SqlDbType.Float' 0' ParameterDirection.Input' F1_2)' new MSSQL.Parameter ("F0_3"' SqlDbType.Float' 0' ParameterDirection.Input' F0_3)' new MSSQL.Parameter ("F1_3"' SqlDbType.Float' 0' ParameterDirection.Input' F1_3)' new MSSQL.Parameter ("F2_3"' SqlDbType.Float' 0' ParameterDirection.Input' F2_3)' new MSSQL.Parameter ("F0_4"' SqlDbType.Float' 0' ParameterDirection.Input' F0_4)' new MSSQL.Parameter ("F1_4"' SqlDbType.Float' 0' ParameterDirection.Input' F1_4)' new MSSQL.Parameter ("F2_4"' SqlDbType.Float' 0' ParameterDirection.Input' F2_4)' new MSSQL.Parameter ("F0_5"' SqlDbType.Float' 0' ParameterDirection.Input' F0_5)' new MSSQL.Parameter ("F1_5"' SqlDbType.Float' 0' ParameterDirection.Input' F1_5)' new MSSQL.Parameter ("F2_5"' SqlDbType.Float' 0' ParameterDirection.Input' F2_5)' new MSSQL.Parameter ("FOther"' SqlDbType.Float' 0' ParameterDirection.Input' FOther)' new MSSQL.Parameter ("ReurnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReurnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 3417.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Bfdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("S1_0"' SqlDbType.Float' 0' ParameterDirection.Input' S1_0)' new MSSQL.Parameter ("S2_0"' SqlDbType.Float' 0' ParameterDirection.Input' S2_0)' new MSSQL.Parameter ("S2_1"' SqlDbType.Float' 0' ParameterDirection.Input' S2_1)' new MSSQL.Parameter ("S3_0"' SqlDbType.Float' 0' ParameterDirection.Input' S3_0)' new MSSQL.Parameter ("S3_1"' SqlDbType.Float' 0' ParameterDirection.Input' S3_1)' new MSSQL.Parameter ("S3_2"' SqlDbType.Float' 0' ParameterDirection.Input' S3_2)' new MSSQL.Parameter ("S4_0"' SqlDbType.Float' 0' ParameterDirection.Input' S4_0)' new MSSQL.Parameter ("S4_1"' SqlDbType.Float' 0' ParameterDirection.Input' S4_1)' new MSSQL.Parameter ("S4_2"' SqlDbType.Float' 0' ParameterDirection.Input' S4_2)' new MSSQL.Parameter ("S5_0"' SqlDbType.Float' 0' ParameterDirection.Input' S5_0)' new MSSQL.Parameter ("S5_1"' SqlDbType.Float' 0' ParameterDirection.Input' S5_1)' new MSSQL.Parameter ("S5_2"' SqlDbType.Float' 0' ParameterDirection.Input' S5_2)' new MSSQL.Parameter ("SOther"' SqlDbType.Float' 0' ParameterDirection.Input' SOther)' new MSSQL.Parameter ("P0_0"' SqlDbType.Float' 0' ParameterDirection.Input' P0_0)' new MSSQL.Parameter ("P1_1"' SqlDbType.Float' 0' ParameterDirection.Input' P1_1)' new MSSQL.Parameter ("P2_2"' SqlDbType.Float' 0' ParameterDirection.Input' P2_2)' new MSSQL.Parameter ("P3_3"' SqlDbType.Float' 0' ParameterDirection.Input' P3_3)' new MSSQL.Parameter ("POther"' SqlDbType.Float' 0' ParameterDirection.Input' POther)' new MSSQL.Parameter ("F0_1"' SqlDbType.Float' 0' ParameterDirection.Input' F0_1)' new MSSQL.Parameter ("F0_2"' SqlDbType.Float' 0' ParameterDirection.Input' F0_2)' new MSSQL.Parameter ("F1_2"' SqlDbType.Float' 0' ParameterDirection.Input' F1_2)' new MSSQL.Parameter ("F0_3"' SqlDbType.Float' 0' ParameterDirection.Input' F0_3)' new MSSQL.Parameter ("F1_3"' SqlDbType.Float' 0' ParameterDirection.Input' F1_3)' new MSSQL.Parameter ("F2_3"' SqlDbType.Float' 0' ParameterDirection.Input' F2_3)' new MSSQL.Parameter ("F0_4"' SqlDbType.Float' 0' ParameterDirection.Input' F0_4)' new MSSQL.Parameter ("F1_4"' SqlDbType.Float' 0' ParameterDirection.Input' F1_4)' new MSSQL.Parameter ("F2_4"' SqlDbType.Float' 0' ParameterDirection.Input' F2_4)' new MSSQL.Parameter ("F0_5"' SqlDbType.Float' 0' ParameterDirection.Input' F0_5)' new MSSQL.Parameter ("F1_5"' SqlDbType.Float' 0' ParameterDirection.Input' F1_5)' new MSSQL.Parameter ("F2_5"' SqlDbType.Float' 0' ParameterDirection.Input' F2_5)' new MSSQL.Parameter ("FOther"' SqlDbType.Float' 0' ParameterDirection.Input' FOther)' new MSSQL.Parameter ("ReurnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReurnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 3426.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Bfgg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("S1_0"' SqlDbType.Float' 0' ParameterDirection.Input' S1_0)' new MSSQL.Parameter ("S2_0"' SqlDbType.Float' 0' ParameterDirection.Input' S2_0)' new MSSQL.Parameter ("S2_1"' SqlDbType.Float' 0' ParameterDirection.Input' S2_1)' new MSSQL.Parameter ("S3_0"' SqlDbType.Float' 0' ParameterDirection.Input' S3_0)' new MSSQL.Parameter ("S3_1"' SqlDbType.Float' 0' ParameterDirection.Input' S3_1)' new MSSQL.Parameter ("S3_2"' SqlDbType.Float' 0' ParameterDirection.Input' S3_2)' new MSSQL.Parameter ("S4_0"' SqlDbType.Float' 0' ParameterDirection.Input' S4_0)' new MSSQL.Parameter ("S4_1"' SqlDbType.Float' 0' ParameterDirection.Input' S4_1)' new MSSQL.Parameter ("S4_2"' SqlDbType.Float' 0' ParameterDirection.Input' S4_2)' new MSSQL.Parameter ("S5_0"' SqlDbType.Float' 0' ParameterDirection.Input' S5_0)' new MSSQL.Parameter ("S5_1"' SqlDbType.Float' 0' ParameterDirection.Input' S5_1)' new MSSQL.Parameter ("S5_2"' SqlDbType.Float' 0' ParameterDirection.Input' S5_2)' new MSSQL.Parameter ("SOther"' SqlDbType.Float' 0' ParameterDirection.Input' SOther)' new MSSQL.Parameter ("P0_0"' SqlDbType.Float' 0' ParameterDirection.Input' P0_0)' new MSSQL.Parameter ("P1_1"' SqlDbType.Float' 0' ParameterDirection.Input' P1_1)' new MSSQL.Parameter ("P2_2"' SqlDbType.Float' 0' ParameterDirection.Input' P2_2)' new MSSQL.Parameter ("P3_3"' SqlDbType.Float' 0' ParameterDirection.Input' P3_3)' new MSSQL.Parameter ("POther"' SqlDbType.Float' 0' ParameterDirection.Input' POther)' new MSSQL.Parameter ("F0_1"' SqlDbType.Float' 0' ParameterDirection.Input' F0_1)' new MSSQL.Parameter ("F0_2"' SqlDbType.Float' 0' ParameterDirection.Input' F0_2)' new MSSQL.Parameter ("F1_2"' SqlDbType.Float' 0' ParameterDirection.Input' F1_2)' new MSSQL.Parameter ("F0_3"' SqlDbType.Float' 0' ParameterDirection.Input' F0_3)' new MSSQL.Parameter ("F1_3"' SqlDbType.Float' 0' ParameterDirection.Input' F1_3)' new MSSQL.Parameter ("F2_3"' SqlDbType.Float' 0' ParameterDirection.Input' F2_3)' new MSSQL.Parameter ("F0_4"' SqlDbType.Float' 0' ParameterDirection.Input' F0_4)' new MSSQL.Parameter ("F1_4"' SqlDbType.Float' 0' ParameterDirection.Input' F1_4)' new MSSQL.Parameter ("F2_4"' SqlDbType.Float' 0' ParameterDirection.Input' F2_4)' new MSSQL.Parameter ("F0_5"' SqlDbType.Float' 0' ParameterDirection.Input' F0_5)' new MSSQL.Parameter ("F1_5"' SqlDbType.Float' 0' ParameterDirection.Input' F1_5)' new MSSQL.Parameter ("F2_5"' SqlDbType.Float' 0' ParameterDirection.Input' F2_5)' new MSSQL.Parameter ("FOther"' SqlDbType.Float' 0' ParameterDirection.Input' FOther)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 3419.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Bfgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("S1_0"' SqlDbType.Float' 0' ParameterDirection.Input' S1_0)' new MSSQL.Parameter ("S2_0"' SqlDbType.Float' 0' ParameterDirection.Input' S2_0)' new MSSQL.Parameter ("S2_1"' SqlDbType.Float' 0' ParameterDirection.Input' S2_1)' new MSSQL.Parameter ("S3_0"' SqlDbType.Float' 0' ParameterDirection.Input' S3_0)' new MSSQL.Parameter ("S3_1"' SqlDbType.Float' 0' ParameterDirection.Input' S3_1)' new MSSQL.Parameter ("S3_2"' SqlDbType.Float' 0' ParameterDirection.Input' S3_2)' new MSSQL.Parameter ("S4_0"' SqlDbType.Float' 0' ParameterDirection.Input' S4_0)' new MSSQL.Parameter ("S4_1"' SqlDbType.Float' 0' ParameterDirection.Input' S4_1)' new MSSQL.Parameter ("S4_2"' SqlDbType.Float' 0' ParameterDirection.Input' S4_2)' new MSSQL.Parameter ("S5_0"' SqlDbType.Float' 0' ParameterDirection.Input' S5_0)' new MSSQL.Parameter ("S5_1"' SqlDbType.Float' 0' ParameterDirection.Input' S5_1)' new MSSQL.Parameter ("S5_2"' SqlDbType.Float' 0' ParameterDirection.Input' S5_2)' new MSSQL.Parameter ("SOther"' SqlDbType.Float' 0' ParameterDirection.Input' SOther)' new MSSQL.Parameter ("P0_0"' SqlDbType.Float' 0' ParameterDirection.Input' P0_0)' new MSSQL.Parameter ("P1_1"' SqlDbType.Float' 0' ParameterDirection.Input' P1_1)' new MSSQL.Parameter ("P2_2"' SqlDbType.Float' 0' ParameterDirection.Input' P2_2)' new MSSQL.Parameter ("P3_3"' SqlDbType.Float' 0' ParameterDirection.Input' P3_3)' new MSSQL.Parameter ("POther"' SqlDbType.Float' 0' ParameterDirection.Input' POther)' new MSSQL.Parameter ("F0_1"' SqlDbType.Float' 0' ParameterDirection.Input' F0_1)' new MSSQL.Parameter ("F0_2"' SqlDbType.Float' 0' ParameterDirection.Input' F0_2)' new MSSQL.Parameter ("F1_2"' SqlDbType.Float' 0' ParameterDirection.Input' F1_2)' new MSSQL.Parameter ("F0_3"' SqlDbType.Float' 0' ParameterDirection.Input' F0_3)' new MSSQL.Parameter ("F1_3"' SqlDbType.Float' 0' ParameterDirection.Input' F1_3)' new MSSQL.Parameter ("F2_3"' SqlDbType.Float' 0' ParameterDirection.Input' F2_3)' new MSSQL.Parameter ("F0_4"' SqlDbType.Float' 0' ParameterDirection.Input' F0_4)' new MSSQL.Parameter ("F1_4"' SqlDbType.Float' 0' ParameterDirection.Input' F1_4)' new MSSQL.Parameter ("F2_4"' SqlDbType.Float' 0' ParameterDirection.Input' F2_4)' new MSSQL.Parameter ("F0_5"' SqlDbType.Float' 0' ParameterDirection.Input' F0_5)' new MSSQL.Parameter ("F1_5"' SqlDbType.Float' 0' ParameterDirection.Input' F1_5)' new MSSQL.Parameter ("F2_5"' SqlDbType.Float' 0' ParameterDirection.Input' F2_5)' new MSSQL.Parameter ("FOther"' SqlDbType.Float' 0' ParameterDirection.Input' FOther)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 3428.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Bqcdg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("SS"' SqlDbType.Float' 0' ParameterDirection.Input' SS)' new MSSQL.Parameter ("SP"' SqlDbType.Float' 0' ParameterDirection.Input' SP)' new MSSQL.Parameter ("SF"' SqlDbType.Float' 0' ParameterDirection.Input' SF)' new MSSQL.Parameter ("PS"' SqlDbType.Float' 0' ParameterDirection.Input' PS)' new MSSQL.Parameter ("PP"' SqlDbType.Float' 0' ParameterDirection.Input' PP)' new MSSQL.Parameter ("PF"' SqlDbType.Float' 0' ParameterDirection.Input' PF)' new MSSQL.Parameter ("FS"' SqlDbType.Float' 0' ParameterDirection.Input' FS)' new MSSQL.Parameter ("FP"' SqlDbType.Float' 0' ParameterDirection.Input' FP)' new MSSQL.Parameter ("FF"' SqlDbType.Float' 0' ParameterDirection.Input' FF)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1568.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Bqcdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("SS"' SqlDbType.Float' 0' ParameterDirection.Input' SS)' new MSSQL.Parameter ("SP"' SqlDbType.Float' 0' ParameterDirection.Input' SP)' new MSSQL.Parameter ("SF"' SqlDbType.Float' 0' ParameterDirection.Input' SF)' new MSSQL.Parameter ("PS"' SqlDbType.Float' 0' ParameterDirection.Input' PS)' new MSSQL.Parameter ("PP"' SqlDbType.Float' 0' ParameterDirection.Input' PP)' new MSSQL.Parameter ("PF"' SqlDbType.Float' 0' ParameterDirection.Input' PF)' new MSSQL.Parameter ("FS"' SqlDbType.Float' 0' ParameterDirection.Input' FS)' new MSSQL.Parameter ("FP"' SqlDbType.Float' 0' ParameterDirection.Input' FP)' new MSSQL.Parameter ("FF"' SqlDbType.Float' 0' ParameterDirection.Input' FF)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1577.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Bqcgg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("SS"' SqlDbType.Float' 0' ParameterDirection.Input' SS)' new MSSQL.Parameter ("SP"' SqlDbType.Float' 0' ParameterDirection.Input' SP)' new MSSQL.Parameter ("SF"' SqlDbType.Float' 0' ParameterDirection.Input' SF)' new MSSQL.Parameter ("PS"' SqlDbType.Float' 0' ParameterDirection.Input' PS)' new MSSQL.Parameter ("PP"' SqlDbType.Float' 0' ParameterDirection.Input' PP)' new MSSQL.Parameter ("PF"' SqlDbType.Float' 0' ParameterDirection.Input' PF)' new MSSQL.Parameter ("FS"' SqlDbType.Float' 0' ParameterDirection.Input' FS)' new MSSQL.Parameter ("FP"' SqlDbType.Float' 0' ParameterDirection.Input' FP)' new MSSQL.Parameter ("FF"' SqlDbType.Float' 0' ParameterDirection.Input' FF)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1568.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Bqcgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("SS"' SqlDbType.Float' 0' ParameterDirection.Input' SS)' new MSSQL.Parameter ("SP"' SqlDbType.Float' 0' ParameterDirection.Input' SP)' new MSSQL.Parameter ("SF"' SqlDbType.Float' 0' ParameterDirection.Input' SF)' new MSSQL.Parameter ("PS"' SqlDbType.Float' 0' ParameterDirection.Input' PS)' new MSSQL.Parameter ("PP"' SqlDbType.Float' 0' ParameterDirection.Input' PP)' new MSSQL.Parameter ("PF"' SqlDbType.Float' 0' ParameterDirection.Input' PF)' new MSSQL.Parameter ("FS"' SqlDbType.Float' 0' ParameterDirection.Input' FS)' new MSSQL.Parameter ("FP"' SqlDbType.Float' 0' ParameterDirection.Input' FP)' new MSSQL.Parameter ("FF"' SqlDbType.Float' 0' ParameterDirection.Input' FF)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1577.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CalculateScore"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 314.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CalculateScore"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 323.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CanExpenseBonus"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 315.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CanExpenseBonus"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 324.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordAdd"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("Period"' SqlDbType.Int' 0' ParameterDirection.Input' Period)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Count"' SqlDbType.Int' 0' ParameterDirection.Input' Count)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 651.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("Period"' SqlDbType.Int' 0' ParameterDirection.Input' Period)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Count"' SqlDbType.Int' 0' ParameterDirection.Input' Count)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 660.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordAgentAddMoney"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("Amount"' SqlDbType.Money' 0' ParameterDirection.Input' Amount)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 584.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordAgentAddMoney"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("Amount"' SqlDbType.Money' 0' ParameterDirection.Input' Amount)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 593.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordExchange"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardsXml"' SqlDbType.NText' 0' ParameterDirection.Input' CardsXml)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 496.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordExchange"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardsXml"' SqlDbType.NText' 0' ParameterDirection.Input' CardsXml)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 505.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordGet"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' DateTime)' new MSSQL.Parameter ("Period"' SqlDbType.DateTime' 8' ParameterDirection.Output' Period)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 8' ParameterDirection.Output' Money)' new MSSQL.Parameter ("State"' SqlDbType.SmallInt' 2' ParameterDirection.Output' State)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("UseDateTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' UseDateTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1049.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordGet"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' DateTime)' new MSSQL.Parameter ("Period"' SqlDbType.DateTime' 8' ParameterDirection.Output' Period)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 8' ParameterDirection.Output' Money)' new MSSQL.Parameter ("State"' SqlDbType.SmallInt' 2' ParameterDirection.Output' State)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("UseDateTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' UseDateTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1058.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordSetPeriod"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("Period"' SqlDbType.DateTime' 0' ParameterDirection.Input' Period)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 599.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordSetPeriod"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("Period"' SqlDbType.DateTime' 0' ParameterDirection.Input' Period)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 608.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordTryErrorAdd"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Number"' SqlDbType.VarChar' 0' ParameterDirection.Input' Number)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 498.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordTryErrorAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Number"' SqlDbType.VarChar' 0' ParameterDirection.Input' Number)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 507.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordTryErrorFreeze"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Freeze"' SqlDbType.Int' 4' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 585.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordTryErrorFreeze"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Freeze"' SqlDbType.Int' 4' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 594.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CardPasswordUse"' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("Number"' SqlDbType.VarChar' 0' ParameterDirection.Input' Number)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 766.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CardPasswordUse"' ref ds' ref Outputs' new MSSQL.Parameter ("AgentID"' SqlDbType.Int' 0' ParameterDirection.Input' AgentID)' new MSSQL.Parameter ("CardPasswordID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CardPasswordID)' new MSSQL.Parameter ("Number"' SqlDbType.VarChar' 0' ParameterDirection.Input' Number)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 775.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeBetRedAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ChallengeBetRedAdd"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeBetRedAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ChallengeBetRedAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeHotBetAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ChallengeHotBetAdd"' ref Outputs' new MSSQL.Parameter ("MatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MatchID)' new MSSQL.Parameter ("WinCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' WinCount)' new MSSQL.Parameter ("DrawCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' DrawCount)' new MSSQL.Parameter ("LostCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' LostCount)); " is 476.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChallengeHotBetAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ChallengeHotBetAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MatchID)' new MSSQL.Parameter ("WinCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' WinCount)' new MSSQL.Parameter ("DrawCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' DrawCount)' new MSSQL.Parameter ("LostCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' LostCount)); " is 485.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ChasesAdd"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Price"' SqlDbType.Int' 0' ParameterDirection.Input' Price)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("IsuseCount"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseCount)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Nums"' SqlDbType.Int' 0' ParameterDirection.Input' Nums)' new MSSQL.Parameter ("BetType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BetType)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("StopTypeWhenWin"' SqlDbType.SmallInt' 0' ParameterDirection.Input' StopTypeWhenWin)' new MSSQL.Parameter ("StopTypeWhenMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopTypeWhenMoney)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("ChaseXML"' SqlDbType.VarChar' 0' ParameterDirection.Input' ChaseXML)' new MSSQL.Parameter ("ChaseID"' SqlDbType.Int' 4' ParameterDirection.Output' ChaseID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 1852.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ChasesAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Price"' SqlDbType.Int' 0' ParameterDirection.Input' Price)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("IsuseCount"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseCount)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Nums"' SqlDbType.Int' 0' ParameterDirection.Input' Nums)' new MSSQL.Parameter ("BetType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BetType)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("StopTypeWhenWin"' SqlDbType.SmallInt' 0' ParameterDirection.Input' StopTypeWhenWin)' new MSSQL.Parameter ("StopTypeWhenMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopTypeWhenMoney)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("ChaseXML"' SqlDbType.VarChar' 0' ParameterDirection.Input' ChaseXML)' new MSSQL.Parameter ("ChaseID"' SqlDbType.Int' 4' ParameterDirection.Output' ChaseID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 1861.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ChaseStopWhenWin"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 497.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ChaseStopWhenWin"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 506.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ChaseTaskStopWhenWin"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 588.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ChaseTaskStopWhenWin"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 597.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CheckChaseTasks"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 315.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CheckChaseTasks"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 324.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ClearSystemLog"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 582.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ClearSystemLog"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 591.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CompensationRateAdd"' ref Outputs' new MSSQL.Parameter ("OkoooMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OkoooMatchID)' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 595.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CompensationRateAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("OkoooMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OkoooMatchID)' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 604.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CompensationRateEdit"' ref Outputs' new MSSQL.Parameter ("OkoooMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OkoooMatchID)' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Average99_S"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_S)' new MSSQL.Parameter ("Average99_P"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_P)' new MSSQL.Parameter ("Average99_F"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_F)' new MSSQL.Parameter ("Willhill_S"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_S)' new MSSQL.Parameter ("Willhill_P"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_P)' new MSSQL.Parameter ("Willhill_F"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_F)' new MSSQL.Parameter ("Lad_S"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_S)' new MSSQL.Parameter ("Lad_P"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_P)' new MSSQL.Parameter ("Lad_F"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_F)' new MSSQL.Parameter ("Bet365_S"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_S)' new MSSQL.Parameter ("Bet365_P"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_P)' new MSSQL.Parameter ("Bet365_F"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_F)' new MSSQL.Parameter ("Macau_S"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_S)' new MSSQL.Parameter ("Macau_P"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_P)' new MSSQL.Parameter ("Macau_F"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_F)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1952.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CompensationRateEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("OkoooMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OkoooMatchID)' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Average99_S"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_S)' new MSSQL.Parameter ("Average99_P"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_P)' new MSSQL.Parameter ("Average99_F"' SqlDbType.Float' 0' ParameterDirection.Input' Average99_F)' new MSSQL.Parameter ("Willhill_S"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_S)' new MSSQL.Parameter ("Willhill_P"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_P)' new MSSQL.Parameter ("Willhill_F"' SqlDbType.Float' 0' ParameterDirection.Input' Willhill_F)' new MSSQL.Parameter ("Lad_S"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_S)' new MSSQL.Parameter ("Lad_P"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_P)' new MSSQL.Parameter ("Lad_F"' SqlDbType.Float' 0' ParameterDirection.Input' Lad_F)' new MSSQL.Parameter ("Bet365_S"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_S)' new MSSQL.Parameter ("Bet365_P"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_P)' new MSSQL.Parameter ("Bet365_F"' SqlDbType.Float' 0' ParameterDirection.Input' Bet365_F)' new MSSQL.Parameter ("Macau_S"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_S)' new MSSQL.Parameter ("Macau_P"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_P)' new MSSQL.Parameter ("Macau_F"' SqlDbType.Float' 0' ParameterDirection.Input' Macau_F)' new MSSQL.Parameter ("RetrunValue"' SqlDbType.Int' 4' ParameterDirection.Output' RetrunValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1961.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("CommendID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommendID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2471.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("CommendID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommendID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2480.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsAdminAccountByMonth"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 409.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsAdminAccountByMonth"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 418.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsCalculateAllowBonus"' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 484.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsCalculateAllowBonus"' ref ds' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 493.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsCalculateBonus"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 317.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsCalculateBonus"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 326.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsDistill"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1052.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsDistill"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1061.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsDistillAccept"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("PayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayName)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("PayCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayCardNumber)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1056.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsDistillAccept"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("PayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayName)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("PayCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayCardNumber)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1065.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsDistillNoAccept"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 776.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsDistillNoAccept"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 785.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsDistillQuash"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 582.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsDistillQuash"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 591.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("UrlName"' SqlDbType.VarChar' 0' ParameterDirection.Input' UrlName)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("IsShow"' SqlDbType.Bit' 0' ParameterDirection.Input' IsShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2286.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("UrlName"' SqlDbType.VarChar' 0' ParameterDirection.Input' UrlName)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("IsShow"' SqlDbType.Bit' 0' ParameterDirection.Input' IsShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2295.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetCommenderBuyDetailByDate"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 696.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetCommenderBuyDetailByDate"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 705.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetCommendMemberBuyDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("MemberID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MemberID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 785.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetCommendMemberBuyDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("MemberID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MemberID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 794.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetCommendMemberList"' ref Outputs' new MSSQL.Parameter ("CommmenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommmenderID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 422.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetCommendMemberList"' ref ds' ref Outputs' new MSSQL.Parameter ("CommmenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommmenderID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 431.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetCommendSiteBuyDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("MemberID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MemberID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 868.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetCommendSiteBuyDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("MemberID"' SqlDbType.BigInt' 0' ParameterDirection.Input' MemberID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 877.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetDayBuyDetailByType"' ref Outputs' new MSSQL.Parameter ("DayDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' DayDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 415.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetDayBuyDetailByType"' ref ds' ref Outputs' new MSSQL.Parameter ("DayDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' DayDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 424.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetIncomeListByMonth"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 495.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetIncomeListByMonth"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 504.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetPerDayTradeSumOfMonthByType"' ref Outputs' new MSSQL.Parameter ("MonthDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MonthDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 428.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetPerDayTradeSumOfMonthByType"' ref ds' ref Outputs' new MSSQL.Parameter ("MonthDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MonthDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 437.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetUnionPidTradeSum"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("PID"' SqlDbType.VarChar' 0' ParameterDirection.Input' PID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 576.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetUnionPidTradeSum"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("PID"' SqlDbType.VarChar' 0' ParameterDirection.Input' PID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 585.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsGetUserBonusScaleList"' ref Outputs' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 421.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsGetUserBonusScaleList"' ref ds' ref Outputs' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 430.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsMemRecommendWebsiteList"' ref Outputs' new MSSQL.Parameter ("userid"' SqlDbType.BigInt' 0' ParameterDirection.Input' userid)' new MSSQL.Parameter ("siteid"' SqlDbType.BigInt' 0' ParameterDirection.Input' siteid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 500.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsMemRecommendWebsiteList"' ref ds' ref Outputs' new MSSQL.Parameter ("userid"' SqlDbType.BigInt' 0' ParameterDirection.Input' userid)' new MSSQL.Parameter ("siteid"' SqlDbType.BigInt' 0' ParameterDirection.Input' siteid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 509.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsPromoterList"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 402.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsPromoterList"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 411.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsSetBonusScaleSetting"' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("UnionBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' UnionBonusScale)' new MSSQL.Parameter ("SiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SiteBonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 622.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsSetBonusScaleSetting"' ref ds' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("UnionBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' UnionBonusScale)' new MSSQL.Parameter ("SiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SiteBonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 631.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsSetBonusScaleType"' ref Outputs' new MSSQL.Parameter ("OperateType"' SqlDbType.Int' 0' ParameterDirection.Input' OperateType)' new MSSQL.Parameter ("TypeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("Name"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("ParentTypeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentTypeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 685.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsSetBonusScaleType"' ref ds' ref Outputs' new MSSQL.Parameter ("OperateType"' SqlDbType.Int' 0' ParameterDirection.Input' OperateType)' new MSSQL.Parameter ("TypeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("Name"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("ParentTypeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentTypeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 694.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsSetUserBonusScale"' ref Outputs' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 604.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsSetUserBonusScale"' ref ds' ref Outputs' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 613.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsTry"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentID)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("CommendID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommendID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2398.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsTry"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 0' ParameterDirection.Input' DomainName)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ParentID)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("CommendID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommendID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2407.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CpsTryHandle"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("TryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' TryID)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("HandleResult"' SqlDbType.SmallInt' 0' ParameterDirection.Input' HandleResult)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("IsIntimeBonus"' SqlDbType.Bit' 0' ParameterDirection.Input' IsIntimeBonus)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 939.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CpsTryHandle"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("TryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' TryID)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("HandleResult"' SqlDbType.SmallInt' 0' ParameterDirection.Input' HandleResult)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("IsIntimeBonus"' SqlDbType.Bit' 0' ParameterDirection.Input' IsIntimeBonus)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 948.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CustomFollowSchemesAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FollowSchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FollowSchemeID)' new MSSQL.Parameter ("MoneyStart"' SqlDbType.Money' 0' ParameterDirection.Input' MoneyStart)' new MSSQL.Parameter ("MoneyEnd"' SqlDbType.Money' 0' ParameterDirection.Input' MoneyEnd)' new MSSQL.Parameter ("BuyShareStart"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShareStart)' new MSSQL.Parameter ("BuyShareEnd"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShareEnd)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1060.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CustomFollowSchemesAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FollowSchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FollowSchemeID)' new MSSQL.Parameter ("MoneyStart"' SqlDbType.Money' 0' ParameterDirection.Input' MoneyStart)' new MSSQL.Parameter ("MoneyEnd"' SqlDbType.Money' 0' ParameterDirection.Input' MoneyEnd)' new MSSQL.Parameter ("BuyShareStart"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShareStart)' new MSSQL.Parameter ("BuyShareEnd"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShareEnd)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1069.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_CustomFollowSchemesDelete"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FollowSchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FollowSchemeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 602.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_CustomFollowSchemesDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FollowSchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' FollowSchemeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 611.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Distill"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillType"' SqlDbType.Int' 0' ParameterDirection.Input' DistillType)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("IsCps"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCps)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1413.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Distill"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillType"' SqlDbType.Int' 0' ParameterDirection.Input' DistillType)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("IsCps"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCps)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1422.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_DistillAccept"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("PayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayName)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("PayCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayCardNumber)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1241.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_DistillAccept"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("PayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayName)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("PayCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayCardNumber)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1250.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_DistillNoAccept"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 773.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_DistillNoAccept"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 782.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_DistillPaySuccess"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 775.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_DistillPaySuccess"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 784.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_DistillQuash"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 579.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_DistillQuash"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 588.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ElectronTicketWin"' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("BonusXML"' SqlDbType.NText' 0' ParameterDirection.Input' BonusXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 496.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ElectronTicketWin"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("BonusXML"' SqlDbType.NText' 0' ParameterDirection.Input' BonusXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 505.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ExecChases"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 310.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ExecChases"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 319.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ExecChaseTaskDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskDetailID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 515.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ExecChaseTaskDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskDetailID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 524.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ExecChaseTasks"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 314.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ExecChaseTasks"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 323.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_FootballLeagueTypeAdd"' ref Outputs' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Code"' SqlDbType.VarChar' 0' ParameterDirection.Input' Code)' new MSSQL.Parameter ("MarkersColor"' SqlDbType.VarChar' 0' ParameterDirection.Input' MarkersColor)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isUse"' SqlDbType.Bit' 0' ParameterDirection.Input' isUse)' new MSSQL.Parameter ("FootballLeagueTypeID"' SqlDbType.Int' 4' ParameterDirection.Output' FootballLeagueTypeID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 869.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_FootballLeagueTypeAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Code"' SqlDbType.VarChar' 0' ParameterDirection.Input' Code)' new MSSQL.Parameter ("MarkersColor"' SqlDbType.VarChar' 0' ParameterDirection.Input' MarkersColor)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isUse"' SqlDbType.Bit' 0' ParameterDirection.Input' isUse)' new MSSQL.Parameter ("FootballLeagueTypeID"' SqlDbType.Int' 4' ParameterDirection.Output' FootballLeagueTypeID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 878.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_FootballLeagueTypeEdit"' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.Int' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Code"' SqlDbType.VarChar' 0' ParameterDirection.Input' Code)' new MSSQL.Parameter ("MarkersColor"' SqlDbType.VarChar' 0' ParameterDirection.Input' MarkersColor)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isUse"' SqlDbType.Bit' 0' ParameterDirection.Input' isUse)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 928.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_FootballLeagueTypeEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.Int' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("Code"' SqlDbType.VarChar' 0' ParameterDirection.Input' Code)' new MSSQL.Parameter ("MarkersColor"' SqlDbType.VarChar' 0' ParameterDirection.Input' MarkersColor)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isUse"' SqlDbType.Bit' 0' ParameterDirection.Input' isUse)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 937.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_FriendshipLinkAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LinkName"' SqlDbType.VarChar' 0' ParameterDirection.Input' LinkName)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewFriendshipLinkID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewFriendshipLinkID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 853.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_FriendshipLinkAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LinkName"' SqlDbType.VarChar' 0' ParameterDirection.Input' LinkName)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewFriendshipLinkID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewFriendshipLinkID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 862.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_FriendshipLinkDelete"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 486.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_FriendshipLinkDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 495.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_FriendshipLinkEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("LinkName"' SqlDbType.VarChar' 0' ParameterDirection.Input' LinkName)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 914.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_FriendshipLinkEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("LinkName"' SqlDbType.VarChar' 0' ParameterDirection.Input' LinkName)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("Order"' SqlDbType.Int' 0' ParameterDirection.Input' Order)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 923.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetAccount"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 559.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetAccount"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 568.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetAccounts"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 584.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetAccounts"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 593.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccount"' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 560.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccount"' ref ds' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 569.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountByPid"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("pid"' SqlDbType.VarChar' 0' ParameterDirection.Input' pid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 760.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountByPid"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("pid"' SqlDbType.VarChar' 0' ParameterDirection.Input' pid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 769.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 655.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 664.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountDetailWithUser"' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("KeyWord"' SqlDbType.VarChar' 0' ParameterDirection.Input' KeyWord)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 688.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountDetailWithUser"' ref ds' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("KeyWord"' SqlDbType.VarChar' 0' ParameterDirection.Input' KeyWord)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 697.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountRevenue"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 680.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountRevenue"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 689.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountRevenue_center"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 687.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountRevenue_center"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 696.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountRevenueSite"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 684.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountRevenueSite"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 693.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountRevenueSite_center"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 691.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountRevenueSite_center"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 700.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountWithCpsID"' ref Outputs' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 593.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountWithCpsID"' ref ds' ref Outputs' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 602.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountWithCpsUser"' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("KeyWord"' SqlDbType.VarChar' 0' ParameterDirection.Input' KeyWord)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 685.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountWithCpsUser"' ref ds' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("KeyWord"' SqlDbType.VarChar' 0' ParameterDirection.Input' KeyWord)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 694.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsAccountWithMonth"' ref Outputs' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("UserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserName)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 685.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsAccountWithMonth"' ref ds' ref Outputs' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("UserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserName)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 694.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsBuyDetailByDate"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 675.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsBuyDetailByDate"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 684.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsByDay"' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 396.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsByDay"' ref ds' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 405.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsInformationByID"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("Datetime"' SqlDbType.DateTime' 8' ParameterDirection.Output' Datetime)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 100' ParameterDirection.Output' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 30' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 120' ParameterDirection.Output' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 200' ParameterDirection.Output' DomainName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2532.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsInformationByID"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("Datetime"' SqlDbType.DateTime' 8' ParameterDirection.Output' Datetime)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 100' ParameterDirection.Output' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 30' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 120' ParameterDirection.Output' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 200' ParameterDirection.Output' DomainName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2541.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsInformationByOwnerUserID"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("Datetime"' SqlDbType.DateTime' 8' ParameterDirection.Output' Datetime)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 100' ParameterDirection.Output' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 30' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 120' ParameterDirection.Output' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 200' ParameterDirection.Output' DomainName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2541.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsInformationByOwnerUserID"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("Datetime"' SqlDbType.DateTime' 8' ParameterDirection.Output' Datetime)' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 100' ParameterDirection.Output' Url)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 30' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("MD5Key"' SqlDbType.VarChar' 120' ParameterDirection.Output' MD5Key)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Type)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("DomainName"' SqlDbType.VarChar' 200' ParameterDirection.Output' DomainName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2550.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsLinkList"' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 585.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsLinkList"' ref ds' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 594.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsList"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 310.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsList"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 319.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsMemberBuyDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 762.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsMemberBuyDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 771.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsMemberList"' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 583.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsMemberList"' ref ds' ref Outputs' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 592.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsPIDBuyDetailByDate"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("PID"' SqlDbType.VarChar' 0' ParameterDirection.Input' PID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 760.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsPIDBuyDetailByDate"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("PID"' SqlDbType.VarChar' 0' ParameterDirection.Input' PID)' new MSSQL.Parameter ("FromTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromTime)' new MSSQL.Parameter ("ToTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 769.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsPopularizeAccount"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 763.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsPopularizeAccount"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 772.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsPopularizeAccountRevenue"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 770.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsPopularizeAccountRevenue"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("type"' SqlDbType.Int' 0' ParameterDirection.Input' type)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 779.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsUnionBusinessList"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 323.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsUnionBusinessList"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 332.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetCpsWebSiteList"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 317.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetCpsWebSiteList"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 326.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetDistillMoneyAndAddMoney"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("DistillType"' SqlDbType.Int' 0' ParameterDirection.Input' DistillType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 689.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetDistillMoneyAndAddMoney"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("DistillType"' SqlDbType.Int' 0' ParameterDirection.Input' DistillType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 698.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetDistillStatisticByAccount"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("AccountName"' SqlDbType.NVarChar' 0' ParameterDirection.Input' AccountName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 696.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetDistillStatisticByAccount"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("AccountName"' SqlDbType.NVarChar' 0' ParameterDirection.Input' AccountName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 705.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetDistillStatisticByDistillType"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 601.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetDistillStatisticByDistillType"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("FromDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' FromDate)' new MSSQL.Parameter ("ToDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' ToDate)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 610.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetFinanceAddMoney"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 654.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetFinanceAddMoney"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 663.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetFriendsInitiateSchemes"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotterID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotterID)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 679.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetFriendsInitiateSchemes"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotterID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotterID)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 688.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetFriendsWinInfo"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SnsName"' SqlDbType.VarChar' 0' ParameterDirection.Input' SnsName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 494.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetFriendsWinInfo"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SnsName"' SqlDbType.VarChar' 0' ParameterDirection.Input' SnsName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 503.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetIsuseSalesAmount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetIsuseSalesAmount"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 198.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetIsuseSalesAmount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetIsuseSalesAmount"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)); " is 207.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetLoginCount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetLoginCount"' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)); " is 267.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetLoginCount,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetLoginCount"' ref ds' ref Outputs' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)); " is 276.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetNewPayNumber"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("PayType"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayType)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("NewPayNumber"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewPayNumber)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 772.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetNewPayNumber"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("PayType"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayType)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("NewPayNumber"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewPayNumber)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 781.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetPromoterInfoByIDList"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserIDList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserIDList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 506.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetPromoterInfoByIDList"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserIDList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserIDList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 515.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetSiteInformationByID"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 20' ParameterDirection.Output' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 4' ParameterDirection.Output' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 100' ParameterDirection.Output' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 8000' ParameterDirection.Output' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("PageTitle"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageTitle)' new MSSQL.Parameter ("PageKeywords"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageKeywords)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3027.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetSiteInformationByID"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 20' ParameterDirection.Output' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 4' ParameterDirection.Output' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 100' ParameterDirection.Output' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 8000' ParameterDirection.Output' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("PageTitle"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageTitle)' new MSSQL.Parameter ("PageKeywords"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageKeywords)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3036.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetSiteInformationByUrl"' ref Outputs' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SiteID)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 20' ParameterDirection.Output' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 4' ParameterDirection.Output' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 100' ParameterDirection.Output' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 8000' ParameterDirection.Output' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("PageTitle"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageTitle)' new MSSQL.Parameter ("PageKeywords"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageKeywords)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3111.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetSiteInformationByUrl"' ref ds' ref Outputs' new MSSQL.Parameter ("Url"' SqlDbType.VarChar' 0' ParameterDirection.Input' Url)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SiteID)' new MSSQL.Parameter ("ParentID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 200' ParameterDirection.Output' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 50' ParameterDirection.Output' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 6' ParameterDirection.Output' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 50' ParameterDirection.Output' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 50' ParameterDirection.Output' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 20' ParameterDirection.Output' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 1' ParameterDirection.Output' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 4' ParameterDirection.Output' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 1000' ParameterDirection.Output' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 100' ParameterDirection.Output' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 8000' ParameterDirection.Output' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("PageTitle"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageTitle)' new MSSQL.Parameter ("PageKeywords"' SqlDbType.VarChar' 1000' ParameterDirection.Output' PageKeywords)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetSiteNotificationTemplate"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("NotificationType"' SqlDbType.VarChar' 0' ParameterDirection.Input' NotificationType)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' Value)); " is 499.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetSiteNotificationTemplate"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("NotificationType"' SqlDbType.VarChar' 0' ParameterDirection.Input' NotificationType)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' Value)); " is 508.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserAccountDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("Day"' SqlDbType.Int' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 734.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserAccountDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("Day"' SqlDbType.Int' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 743.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserAccountDetails"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 681.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserAccountDetails"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 690.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserBankDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("BankTypeName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankTypeName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("BankInProvinceName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankInProvinceName)' new MSSQL.Parameter ("BankInCityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankInCityName)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 20' ParameterDirection.Output' BankUserName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1115.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserBankDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("BankTypeName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankTypeName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("BankInProvinceName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankInProvinceName)' new MSSQL.Parameter ("BankInCityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankInCityName)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 20' ParameterDirection.Output' BankUserName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserCustomFollowSchemes"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 592.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserCustomFollowSchemes"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 601.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserFreezeDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 493.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserFreezeDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 502.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserInformationByID"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("NickName"' SqlDbType.VarChar' 50' ParameterDirection.Output' NickName)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 32' ParameterDirection.Output' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("OwnerSites"' SqlDbType.VarChar' 1000' ParameterDirection.Output' OwnerSites)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("ComeFrom"' SqlDbType.Int' 4' ParameterDirection.Output' ComeFrom)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' IsCrossLogin)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 255' ParameterDirection.Output' VisitSource)' new MSSQL.Parameter ("HeadUrl"' SqlDbType.VarChar' 500' ParameterDirection.Output' HeadUrl)' new MSSQL.Parameter ("SecurityQuestion"' SqlDbType.VarChar' 100' ParameterDirection.Output' SecurityQuestion)' new MSSQL.Parameter ("SecurityAnswer"' SqlDbType.VarChar' 50' ParameterDirection.Output' SecurityAnswer)' new MSSQL.Parameter ("FriendList"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' FriendList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 5708.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserInformationByID"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 50' ParameterDirection.Output' Name)' new MSSQL.Parameter ("NickName"' SqlDbType.VarChar' 50' ParameterDirection.Output' NickName)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 32' ParameterDirection.Output' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("OwnerSites"' SqlDbType.VarChar' 1000' ParameterDirection.Output' OwnerSites)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("ComeFrom"' SqlDbType.Int' 4' ParameterDirection.Output' ComeFrom)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' IsCrossLogin)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 255' ParameterDirection.Output' VisitSource)' new MSSQL.Parameter ("HeadUrl"' SqlDbType.VarChar' 500' ParameterDirection.Output' HeadUrl)' new MSSQL.Parameter ("SecurityQuestion"' SqlDbType.VarChar' 100' ParameterDirection.Output' SecurityQuestion)' new MSSQL.Parameter ("SecurityAnswer"' SqlDbType.VarChar' 50' ParameterDirection.Output' SecurityAnswer)' new MSSQL.Parameter ("FriendList"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' FriendList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 5717.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserInformationByName"' ref Outputs' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("NickName"' SqlDbType.VarChar' 50' ParameterDirection.Output' NickName)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 32' ParameterDirection.Output' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("OwnerSites"' SqlDbType.VarChar' 1000' ParameterDirection.Output' OwnerSites)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("ComeFrom"' SqlDbType.Int' 4' ParameterDirection.Output' ComeFrom)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' IsCrossLogin)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 255' ParameterDirection.Output' VisitSource)' new MSSQL.Parameter ("HeadUrl"' SqlDbType.VarChar' 500' ParameterDirection.Output' HeadUrl)' new MSSQL.Parameter ("SecurityQuestion"' SqlDbType.VarChar' 100' ParameterDirection.Output' SecurityQuestion)' new MSSQL.Parameter ("SecurityAnswer"' SqlDbType.VarChar' 50' ParameterDirection.Output' SecurityAnswer)' new MSSQL.Parameter ("FriendList"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' FriendList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 5709.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserInformationByName"' ref ds' ref Outputs' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("NickName"' SqlDbType.VarChar' 50' ParameterDirection.Output' NickName)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 32' ParameterDirection.Output' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("OwnerSites"' SqlDbType.VarChar' 1000' ParameterDirection.Output' OwnerSites)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("ComeFrom"' SqlDbType.Int' 4' ParameterDirection.Output' ComeFrom)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' IsCrossLogin)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 255' ParameterDirection.Output' VisitSource)' new MSSQL.Parameter ("HeadUrl"' SqlDbType.VarChar' 500' ParameterDirection.Output' HeadUrl)' new MSSQL.Parameter ("SecurityQuestion"' SqlDbType.VarChar' 100' ParameterDirection.Output' SecurityQuestion)' new MSSQL.Parameter ("SecurityAnswer"' SqlDbType.VarChar' 50' ParameterDirection.Output' SecurityAnswer)' new MSSQL.Parameter ("FriendList"' SqlDbType.VarChar' 1073741823' ParameterDirection.Output' FriendList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 5718.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserScoringDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 656.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserScoringDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 665.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetUserSMSDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 652.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetUserSMSDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Year"' SqlDbType.Int' 0' ParameterDirection.Input' Year)' new MSSQL.Parameter ("Month"' SqlDbType.Int' 0' ParameterDirection.Input' Month)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 661.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_GetWinLotteryNumber"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("IsuseCount"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseCount)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 588.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_GetWinLotteryNumber"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("IsuseCount"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseCount)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 597.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InitializationData"' ref Outputs' new MSSQL.Parameter ("CallPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' CallPassword)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 418.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InitializationData"' ref ds' ref Outputs' new MSSQL.Parameter ("CallPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' CallPassword)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 427.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InitializationSiteTemplates"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 414.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InitializationSiteTemplates"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 423.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InitiateChaseTask"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("StopWhenWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopWhenWinMoney)' new MSSQL.Parameter ("DetailXML"' SqlDbType.NText' 0' ParameterDirection.Input' DetailXML)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ChaseTaskID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1174.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InitiateChaseTask"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("StopWhenWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopWhenWinMoney)' new MSSQL.Parameter ("DetailXML"' SqlDbType.NText' 0' ParameterDirection.Input' DetailXML)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ChaseTaskID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1183.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InitiateChaseTask_Count"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("TaskMoney"' SqlDbType.Money' 0' ParameterDirection.Input' TaskMoney)' new MSSQL.Parameter ("Count"' SqlDbType.Int' 0' ParameterDirection.Input' Count)' new MSSQL.Parameter ("StopWhenWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopWhenWinMoney)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ChaseTaskID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1258.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InitiateChaseTask_Count"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("TaskMoney"' SqlDbType.Money' 0' ParameterDirection.Input' TaskMoney)' new MSSQL.Parameter ("Count"' SqlDbType.Int' 0' ParameterDirection.Input' Count)' new MSSQL.Parameter ("StopWhenWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' StopWhenWinMoney)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ChaseTaskID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1267.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InitiateScheme"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("UploadFileContent"' SqlDbType.VarChar' 0' ParameterDirection.Input' UploadFileContent)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("AssureMoney"' SqlDbType.Money' 0' ParameterDirection.Input' AssureMoney)' new MSSQL.Parameter ("Share"' SqlDbType.Int' 0' ParameterDirection.Input' Share)' new MSSQL.Parameter ("BuyShare"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShare)' new MSSQL.Parameter ("OpenUsers"' SqlDbType.VarChar' 0' ParameterDirection.Input' OpenUsers)' new MSSQL.Parameter ("SecrecyLevel"' SqlDbType.SmallInt' 0' ParameterDirection.Input' SecrecyLevel)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SchemeID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1801.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InitiateScheme"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Description"' SqlDbType.VarChar' 0' ParameterDirection.Input' Description)' new MSSQL.Parameter ("LotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' LotteryNumber)' new MSSQL.Parameter ("UploadFileContent"' SqlDbType.VarChar' 0' ParameterDirection.Input' UploadFileContent)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("AssureMoney"' SqlDbType.Money' 0' ParameterDirection.Input' AssureMoney)' new MSSQL.Parameter ("Share"' SqlDbType.Int' 0' ParameterDirection.Input' Share)' new MSSQL.Parameter ("BuyShare"' SqlDbType.Int' 0' ParameterDirection.Input' BuyShare)' new MSSQL.Parameter ("OpenUsers"' SqlDbType.VarChar' 0' ParameterDirection.Input' OpenUsers)' new MSSQL.Parameter ("SecrecyLevel"' SqlDbType.SmallInt' 0' ParameterDirection.Input' SecrecyLevel)' new MSSQL.Parameter ("SchemeBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeBonusScale)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SchemeID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1810.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_InquirySchemesHandle"' ref Outputs' new MSSQL.Parameter ("CounterAnteId"' SqlDbType.VarChar' 0' ParameterDirection.Input' CounterAnteId)' new MSSQL.Parameter ("DealTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("HandleResult"' SqlDbType.SmallInt' 0' ParameterDirection.Input' HandleResult)' new MSSQL.Parameter ("HandleDescription"' SqlDbType.VarChar' 0' ParameterDirection.Input' HandleDescription)' new MSSQL.Parameter ("PrintOutType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' PrintOutType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 826.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_InquirySchemesHandle"' ref ds' ref Outputs' new MSSQL.Parameter ("CounterAnteId"' SqlDbType.VarChar' 0' ParameterDirection.Input' CounterAnteId)' new MSSQL.Parameter ("DealTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("HandleResult"' SqlDbType.SmallInt' 0' ParameterDirection.Input' HandleResult)' new MSSQL.Parameter ("HandleDescription"' SqlDbType.VarChar' 0' ParameterDirection.Input' HandleDescription)' new MSSQL.Parameter ("PrintOutType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' PrintOutType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 835.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_IsuseAdd"' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("AdditionalXML"' SqlDbType.NText' 0' ParameterDirection.Input' AdditionalXML)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 8' ParameterDirection.Output' IsuseID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 763.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_IsuseAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("AdditionalXML"' SqlDbType.NText' 0' ParameterDirection.Input' AdditionalXML)' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 8' ParameterDirection.Output' IsuseID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 772.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_IsuseBonusesAdd"' ref Outputs' new MSSQL.Parameter ("IsuseId"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseId)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("WinListXML"' SqlDbType.NText' 0' ParameterDirection.Input' WinListXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 585.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_IsuseBonusesAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseId"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseId)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("WinListXML"' SqlDbType.NText' 0' ParameterDirection.Input' WinListXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 594.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_IsuseEdit"' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("AdditionalXML"' SqlDbType.NText' 0' ParameterDirection.Input' AdditionalXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 768.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_IsuseEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("AdditionalXML"' SqlDbType.NText' 0' ParameterDirection.Input' AdditionalXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 777.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_IsuseEndTime"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 312.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_IsuseEndTime"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 321.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_IsuseUpdate"' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("IsuseName"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseName)' new MSSQL.Parameter ("State"' SqlDbType.SmallInt' 0' ParameterDirection.Input' State)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("StateUpdateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StateUpdateTime)' new MSSQL.Parameter ("WinLotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinLotteryNumber)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 983.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_IsuseUpdate"' ref ds' ref Outputs' new MSSQL.Parameter ("LotteryID"' SqlDbType.Int' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("IsuseName"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseName)' new MSSQL.Parameter ("State"' SqlDbType.SmallInt' 0' ParameterDirection.Input' State)' new MSSQL.Parameter ("StartTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StartTime)' new MSSQL.Parameter ("EndTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' EndTime)' new MSSQL.Parameter ("StateUpdateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StateUpdateTime)' new MSSQL.Parameter ("WinLotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinLotteryNumber)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 992.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_JoinScheme"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("Share"' SqlDbType.Int' 0' ParameterDirection.Input' Share)' new MSSQL.Parameter ("isAutoFollowScheme"' SqlDbType.Bit' 0' ParameterDirection.Input' isAutoFollowScheme)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 765.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_JoinScheme"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("Share"' SqlDbType.Int' 0' ParameterDirection.Input' Share)' new MSSQL.Parameter ("isAutoFollowScheme"' SqlDbType.Bit' 0' ParameterDirection.Input' isAutoFollowScheme)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 774.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Jqsdg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("in0"' SqlDbType.Float' 0' ParameterDirection.Input' in0)' new MSSQL.Parameter ("in1"' SqlDbType.Float' 0' ParameterDirection.Input' in1)' new MSSQL.Parameter ("in2"' SqlDbType.Float' 0' ParameterDirection.Input' in2)' new MSSQL.Parameter ("in3"' SqlDbType.Float' 0' ParameterDirection.Input' in3)' new MSSQL.Parameter ("in4"' SqlDbType.Float' 0' ParameterDirection.Input' in4)' new MSSQL.Parameter ("in5"' SqlDbType.Float' 0' ParameterDirection.Input' in5)' new MSSQL.Parameter ("in6"' SqlDbType.Float' 0' ParameterDirection.Input' in6)' new MSSQL.Parameter ("in7"' SqlDbType.Float' 0' ParameterDirection.Input' in7)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1506.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Jqsdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("in0"' SqlDbType.Float' 0' ParameterDirection.Input' in0)' new MSSQL.Parameter ("in1"' SqlDbType.Float' 0' ParameterDirection.Input' in1)' new MSSQL.Parameter ("in2"' SqlDbType.Float' 0' ParameterDirection.Input' in2)' new MSSQL.Parameter ("in3"' SqlDbType.Float' 0' ParameterDirection.Input' in3)' new MSSQL.Parameter ("in4"' SqlDbType.Float' 0' ParameterDirection.Input' in4)' new MSSQL.Parameter ("in5"' SqlDbType.Float' 0' ParameterDirection.Input' in5)' new MSSQL.Parameter ("in6"' SqlDbType.Float' 0' ParameterDirection.Input' in6)' new MSSQL.Parameter ("in7"' SqlDbType.Float' 0' ParameterDirection.Input' in7)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1515.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Jqsgg"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("in0"' SqlDbType.Float' 0' ParameterDirection.Input' in0)' new MSSQL.Parameter ("in1"' SqlDbType.Float' 0' ParameterDirection.Input' in1)' new MSSQL.Parameter ("in2"' SqlDbType.Float' 0' ParameterDirection.Input' in2)' new MSSQL.Parameter ("in3"' SqlDbType.Float' 0' ParameterDirection.Input' in3)' new MSSQL.Parameter ("in4"' SqlDbType.Float' 0' ParameterDirection.Input' in4)' new MSSQL.Parameter ("in5"' SqlDbType.Float' 0' ParameterDirection.Input' in5)' new MSSQL.Parameter ("in6"' SqlDbType.Float' 0' ParameterDirection.Input' in6)' new MSSQL.Parameter ("in7"' SqlDbType.Float' 0' ParameterDirection.Input' in7)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1506.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Jqsgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("in0"' SqlDbType.Float' 0' ParameterDirection.Input' in0)' new MSSQL.Parameter ("in1"' SqlDbType.Float' 0' ParameterDirection.Input' in1)' new MSSQL.Parameter ("in2"' SqlDbType.Float' 0' ParameterDirection.Input' in2)' new MSSQL.Parameter ("in3"' SqlDbType.Float' 0' ParameterDirection.Input' in3)' new MSSQL.Parameter ("in4"' SqlDbType.Float' 0' ParameterDirection.Input' in4)' new MSSQL.Parameter ("in5"' SqlDbType.Float' 0' ParameterDirection.Input' in5)' new MSSQL.Parameter ("in6"' SqlDbType.Float' 0' ParameterDirection.Input' in6)' new MSSQL.Parameter ("in7"' SqlDbType.Float' 0' ParameterDirection.Input' in7)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1515.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Login"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("InputPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' InputPassword)' new MSSQL.Parameter ("LoginIP"' SqlDbType.VarChar' 0' ParameterDirection.Input' LoginIP)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 4891.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Login"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("InputPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' InputPassword)' new MSSQL.Parameter ("LoginIP"' SqlDbType.VarChar' 0' ParameterDirection.Input' LoginIP)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 32' ParameterDirection.Output' PasswordAdv)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 50' ParameterDirection.Output' RealityName)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 4' ParameterDirection.Output' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 2' ParameterDirection.Output' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 8' ParameterDirection.Output' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 50' ParameterDirection.Output' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 50' ParameterDirection.Output' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 50' ParameterDirection.Output' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 50' ParameterDirection.Output' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 50' ParameterDirection.Output' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 1' ParameterDirection.Output' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 1' ParameterDirection.Output' isCanLogin)' new MSSQL.Parameter ("RegisterTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' RegisterTime)' new MSSQL.Parameter ("LastLoginTime"' SqlDbType.DateTime' 8' ParameterDirection.Output' LastLoginTime)' new MSSQL.Parameter ("LastLoginIP"' SqlDbType.VarChar' 50' ParameterDirection.Output' LastLoginIP)' new MSSQL.Parameter ("LoginCount"' SqlDbType.Int' 4' ParameterDirection.Output' LoginCount)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 2' ParameterDirection.Output' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 50' ParameterDirection.Output' BankCardNumber)' new MSSQL.Parameter ("Balance"' SqlDbType.Money' 8' ParameterDirection.Output' Balance)' new MSSQL.Parameter ("Freeze"' SqlDbType.Money' 8' ParameterDirection.Output' Freeze)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 8' ParameterDirection.Output' ScoringOfCommendBuy)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 8' ParameterDirection.Output' Scoring)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 2' ParameterDirection.Output' Level)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' CpsID)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 32' ParameterDirection.Output' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 50' ParameterDirection.Output' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 1' ParameterDirection.Output' isAlipayNameValided)' new MSSQL.Parameter ("Bonus"' SqlDbType.Money' 8' ParameterDirection.Output' Bonus)' new MSSQL.Parameter ("Reward"' SqlDbType.Money' 8' ParameterDirection.Output' Reward)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 50' ParameterDirection.Output' Memo)' new MSSQL.Parameter ("BonusThisMonth"' SqlDbType.Money' 8' ParameterDirection.Output' BonusThisMonth)' new MSSQL.Parameter ("BonusAllow"' SqlDbType.Money' 8' ParameterDirection.Output' BonusAllow)' new MSSQL.Parameter ("BonusUse"' SqlDbType.Money' 8' ParameterDirection.Output' BonusUse)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 8' ParameterDirection.Output' PromotionSiteBonusScale)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 4900.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MarketOutlookAdd"' ref Outputs' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewMarketOutlookID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewMarketOutlookID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 686.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MarketOutlookAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewMarketOutlookID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewMarketOutlookID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 695.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MarketOutlookDelete"' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 398.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MarketOutlookDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 407.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MarketOutlookEdit"' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 749.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MarketOutlookEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 758.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchBasketReceive,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MatchBasketReceive"' ref Outputs' new MSSQL.Parameter ("Mainteam"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mainteam)' new MSSQL.Parameter ("guestteam"' SqlDbType.VarChar' 0' ParameterDirection.Input' guestteam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellingTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellingTime)); " is 680.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchBasketReceive,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MatchBasketReceive"' ref ds' ref Outputs' new MSSQL.Parameter ("Mainteam"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mainteam)' new MSSQL.Parameter ("guestteam"' SqlDbType.VarChar' 0' ParameterDirection.Input' guestteam)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellingTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellingTime)); " is 689.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MatchReceive"' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.NVarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("Mainteam"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Mainteam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.NVarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellingTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellingTime)' new MSSQL.Parameter ("ReturnValut"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValut)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 883.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MatchReceive"' ref ds' ref Outputs' new MSSQL.Parameter ("MatchNumber"' SqlDbType.NVarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("Mainteam"' SqlDbType.NVarChar' 0' ParameterDirection.Input' Mainteam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.NVarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("StopSellingTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' StopSellingTime)' new MSSQL.Parameter ("ReturnValut"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValut)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 892.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_MergeUserDetails"' ref Outputs' new MSSQL.Parameter ("CallPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' CallPassword)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 416.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_MergeUserDetails"' ref ds' ref Outputs' new MSSQL.Parameter ("CallPassword"' SqlDbType.VarChar' 0' ParameterDirection.Input' CallPassword)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 425.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("TypeID"' SqlDbType.Int' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("ImageUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' ImageUrl)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isHasImage"' SqlDbType.Bit' 0' ParameterDirection.Input' isHasImage)' new MSSQL.Parameter ("isCanComments"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanComments)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("isHot"' SqlDbType.Bit' 0' ParameterDirection.Input' isHot)' new MSSQL.Parameter ("ReadCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' ReadCount)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1371.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("TypeID"' SqlDbType.Int' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("ImageUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' ImageUrl)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isHasImage"' SqlDbType.Bit' 0' ParameterDirection.Input' isHasImage)' new MSSQL.Parameter ("isCanComments"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanComments)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("isHot"' SqlDbType.Bit' 0' ParameterDirection.Input' isHot)' new MSSQL.Parameter ("ReadCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' ReadCount)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1380.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsAddComments"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("CommentserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommentserID)' new MSSQL.Parameter ("CommentserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' CommentserName)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewNewsCommentsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewNewsCommentsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 974.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsAddComments"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("CommentserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommentserID)' new MSSQL.Parameter ("CommentserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' CommentserName)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("NewNewsCommentsID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewNewsCommentsID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 983.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsDelete"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 476.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 485.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsDeleteComments"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsCommentsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsCommentsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 511.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsDeleteComments"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsCommentsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsCommentsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 520.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("TypeID"' SqlDbType.Int' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("ImageUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' ImageUrl)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isHasImage"' SqlDbType.Bit' 0' ParameterDirection.Input' isHasImage)' new MSSQL.Parameter ("isCanComments"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanComments)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("isHot"' SqlDbType.Bit' 0' ParameterDirection.Input' isHot)' new MSSQL.Parameter ("ReadCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' ReadCount)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1458.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("TypeID"' SqlDbType.Int' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("ImageUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' ImageUrl)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isHasImage"' SqlDbType.Bit' 0' ParameterDirection.Input' isHasImage)' new MSSQL.Parameter ("isCanComments"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanComments)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("isHot"' SqlDbType.Bit' 0' ParameterDirection.Input' isHot)' new MSSQL.Parameter ("ReadCount"' SqlDbType.BigInt' 0' ParameterDirection.Input' ReadCount)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1467.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsEditComments"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsCommentsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsCommentsID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("CommentserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommentserID)' new MSSQL.Parameter ("CommentserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' CommentserName)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 979.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsEditComments"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsCommentsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsCommentsID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("CommentserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommentserID)' new MSSQL.Parameter ("CommentserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' CommentserName)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.BigInt' 8' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 988.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_NewsRead"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 482.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_NewsRead"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("NewsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' NewsID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 491.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_PassRateBasketAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_PassRateBasketAdd"' ref Outputs' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)); " is 755.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_PassRateBasketAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_PassRateBasketAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("Day"' SqlDbType.VarChar' 0' ParameterDirection.Input' Day)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)); " is 764.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Quash"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("BuyDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' BuyDetailID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 489.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Quash"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("BuyDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' BuyDetailID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 498.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuashChaseTask"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 596.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuashChaseTask"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 605.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuashChaseTaskDetail"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskDetailID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 614.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuashChaseTaskDetail"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ChaseTaskDetailID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ChaseTaskDetailID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 623.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuashScheme"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("isRelation"' SqlDbType.Bit' 0' ParameterDirection.Input' isRelation)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 679.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuashScheme"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("isSystemQuash"' SqlDbType.Bit' 0' ParameterDirection.Input' isSystemQuash)' new MSSQL.Parameter ("isRelation"' SqlDbType.Bit' 0' ParameterDirection.Input' isRelation)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 688.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuashSchemeNoLotteryNumber"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 326.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuashSchemeNoLotteryNumber"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 335.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuestionsAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("TypeID"' SqlDbType.SmallInt' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewQuestionID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewQuestionID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 766.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuestionsAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("TypeID"' SqlDbType.SmallInt' 0' ParameterDirection.Input' TypeID)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewQuestionID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewQuestionID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 775.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuestionsAnswer"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("Answer"' SqlDbType.VarChar' 0' ParameterDirection.Input' Answer)' new MSSQL.Parameter ("AnswerOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AnswerOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 692.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuestionsAnswer"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("Answer"' SqlDbType.VarChar' 0' ParameterDirection.Input' Answer)' new MSSQL.Parameter ("AnswerOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AnswerOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 701.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuestionsDelete"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 497.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuestionsDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 506.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_QuestionsHandling"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 606.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_QuestionsHandling"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("QuestionID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QuestionID)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 615.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_RebonusShares"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 313.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_RebonusShares"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 322.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemeAssure"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 312.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemeAssure"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 321.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemeAssureMoney"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 408.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemeAssureMoney"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 417.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemeCalculatedBonus"' ref Outputs' new MSSQL.Parameter ("ReturnBool"' SqlDbType.Bit' 1' ParameterDirection.Output' ReturnBool)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 414.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemeCalculatedBonus"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnBool"' SqlDbType.Bit' 1' ParameterDirection.Output' ReturnBool)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 423.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemeCalculatedScore"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DetailMoney"' SqlDbType.Money' 0' ParameterDirection.Input' DetailMoney)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)); " is 387.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemeCalculatedScore"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("DetailMoney"' SqlDbType.Money' 0' ParameterDirection.Input' DetailMoney)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)); " is 396.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemePrintOut"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("BuyOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' BuyOperatorID)' new MSSQL.Parameter ("PrintOutType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' PrintOutType)' new MSSQL.Parameter ("Identifiers"' SqlDbType.VarChar' 0' ParameterDirection.Input' Identifiers)' new MSSQL.Parameter ("isOt"' SqlDbType.Bit' 0' ParameterDirection.Input' isOt)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 872.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemePrintOut"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("BuyOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' BuyOperatorID)' new MSSQL.Parameter ("PrintOutType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' PrintOutType)' new MSSQL.Parameter ("Identifiers"' SqlDbType.VarChar' 0' ParameterDirection.Input' Identifiers)' new MSSQL.Parameter ("isOt"' SqlDbType.Bit' 0' ParameterDirection.Input' isOt)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 881.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemesSendToCenterAdd"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("TicketXML"' SqlDbType.NText' 0' ParameterDirection.Input' TicketXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 597.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemesSendToCenterAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("TicketXML"' SqlDbType.NText' 0' ParameterDirection.Input' TicketXML)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 606.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemesSendToCenterAdd_Single"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Ticket"' SqlDbType.VarChar' 0' ParameterDirection.Input' Ticket)' new MSSQL.Parameter ("isFirstWrite"' SqlDbType.Bit' 0' ParameterDirection.Input' isFirstWrite)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 853.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemesSendToCenterAdd_Single"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Multiple"' SqlDbType.Int' 0' ParameterDirection.Input' Multiple)' new MSSQL.Parameter ("Ticket"' SqlDbType.VarChar' 0' ParameterDirection.Input' Ticket)' new MSSQL.Parameter ("isFirstWrite"' SqlDbType.Bit' 0' ParameterDirection.Input' isFirstWrite)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 8' ParameterDirection.Output' ID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 862.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemesSendToCenterHandle"' ref Outputs' new MSSQL.Parameter ("Identifiers"' SqlDbType.VarChar' 0' ParameterDirection.Input' Identifiers)' new MSSQL.Parameter ("DealTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("IsSuccess"' SqlDbType.Bit' 0' ParameterDirection.Input' IsSuccess)' new MSSQL.Parameter ("Status"' SqlDbType.VarChar' 0' ParameterDirection.Input' Status)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 694.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemesSendToCenterHandle"' ref ds' ref Outputs' new MSSQL.Parameter ("Identifiers"' SqlDbType.VarChar' 0' ParameterDirection.Input' Identifiers)' new MSSQL.Parameter ("DealTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("IsSuccess"' SqlDbType.Bit' 0' ParameterDirection.Input' IsSuccess)' new MSSQL.Parameter ("Status"' SqlDbType.VarChar' 0' ParameterDirection.Input' Status)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 703.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemesSendToCenterHandleUniteAnte"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("DealTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("isOt"' SqlDbType.Bit' 0' ParameterDirection.Input' isOt)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 598.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemesSendToCenterHandleUniteAnte"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("DealTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DealTime)' new MSSQL.Parameter ("isOt"' SqlDbType.Bit' 0' ParameterDirection.Input' isOt)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 607.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeWinCalculatedScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SchemeWinCalculatedScore"' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("SchemeWinScore"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeWinScore)' new MSSQL.Parameter ("MaxWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' MaxWinMoney)); " is 405.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeWinCalculatedScore,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SchemeWinCalculatedScore"' ref ds' ref Outputs' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("SchemeWinScore"' SqlDbType.Float' 0' ParameterDirection.Input' SchemeWinScore)' new MSSQL.Parameter ("MaxWinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' MaxWinMoney)); " is 414.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ScoreChange"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CommoditityID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommoditityID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 498.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ScoreChange"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CommoditityID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommoditityID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 507.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ScoringExchange"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 0' ParameterDirection.Input' Scoring)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 577.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ScoringExchange"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Scoring"' SqlDbType.Float' 0' ParameterDirection.Input' Scoring)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 586.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SelectPaging"' ref Outputs' new MSSQL.Parameter ("TableOrViewName"' SqlDbType.VarChar' 0' ParameterDirection.Input' TableOrViewName)' new MSSQL.Parameter ("FieldList"' SqlDbType.VarChar' 0' ParameterDirection.Input' FieldList)' new MSSQL.Parameter ("OrderFieldList"' SqlDbType.VarChar' 0' ParameterDirection.Input' OrderFieldList)' new MSSQL.Parameter ("Condition"' SqlDbType.VarChar' 0' ParameterDirection.Input' Condition)' new MSSQL.Parameter ("PageSize"' SqlDbType.Int' 0' ParameterDirection.Input' PageSize)' new MSSQL.Parameter ("PageIndex"' SqlDbType.Int' 0' ParameterDirection.Input' PageIndex)' new MSSQL.Parameter ("RowCount"' SqlDbType.BigInt' 8' ParameterDirection.Output' RowCount)' new MSSQL.Parameter ("PageCount"' SqlDbType.Int' 4' ParameterDirection.Output' PageCount)' new MSSQL.Parameter ("CurrentPageIndex"' SqlDbType.Int' 4' ParameterDirection.Output' CurrentPageIndex)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1081.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SelectPaging"' ref ds' ref Outputs' new MSSQL.Parameter ("TableOrViewName"' SqlDbType.VarChar' 0' ParameterDirection.Input' TableOrViewName)' new MSSQL.Parameter ("FieldList"' SqlDbType.VarChar' 0' ParameterDirection.Input' FieldList)' new MSSQL.Parameter ("OrderFieldList"' SqlDbType.VarChar' 0' ParameterDirection.Input' OrderFieldList)' new MSSQL.Parameter ("Condition"' SqlDbType.VarChar' 0' ParameterDirection.Input' Condition)' new MSSQL.Parameter ("PageSize"' SqlDbType.Int' 0' ParameterDirection.Input' PageSize)' new MSSQL.Parameter ("PageIndex"' SqlDbType.Int' 0' ParameterDirection.Input' PageIndex)' new MSSQL.Parameter ("RowCount"' SqlDbType.BigInt' 8' ParameterDirection.Output' RowCount)' new MSSQL.Parameter ("PageCount"' SqlDbType.Int' 4' ParameterDirection.Output' PageCount)' new MSSQL.Parameter ("CurrentPageIndex"' SqlDbType.Int' 4' ParameterDirection.Output' CurrentPageIndex)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1090.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetMaxMultiple"' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("MaxMultiple"' SqlDbType.Int' 0' ParameterDirection.Input' MaxMultiple)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 589.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetMaxMultiple"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("PlayTypeID"' SqlDbType.Int' 0' ParameterDirection.Input' PlayTypeID)' new MSSQL.Parameter ("MaxMultiple"' SqlDbType.Int' 0' ParameterDirection.Input' MaxMultiple)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 598.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetOptions,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetOptions"' ref Outputs' new MSSQL.Parameter ("Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' Key)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 0' ParameterDirection.Input' Value)); " is 270.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetOptions,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetOptions"' ref ds' ref Outputs' new MSSQL.Parameter ("Key"' SqlDbType.VarChar' 0' ParameterDirection.Input' Key)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 0' ParameterDirection.Input' Value)); " is 279.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetSchemeOpenUsers"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("UserList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 588.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetSchemeOpenUsers"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("UserList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UserList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 597.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteNotificationTemplate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetSiteNotificationTemplate"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("NotificationType"' SqlDbType.VarChar' 0' ParameterDirection.Input' NotificationType)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 0' ParameterDirection.Input' Value)); " is 489.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteNotificationTemplate,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetSiteNotificationTemplate"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("NotificationType"' SqlDbType.VarChar' 0' ParameterDirection.Input' NotificationType)' new MSSQL.Parameter ("Value"' SqlDbType.VarChar' 0' ParameterDirection.Input' Value)); " is 498.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetSiteSendNotificationTypes"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("SendNotificationTypeList"' SqlDbType.VarChar' 0' ParameterDirection.Input' SendNotificationTypeList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 628.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetSiteSendNotificationTypes"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("SendNotificationTypeList"' SqlDbType.VarChar' 0' ParameterDirection.Input' SendNotificationTypeList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 637.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetSiteUrls"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 482.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetSiteUrls"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 491.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetUserAcceptNotificationTypes"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("AcceptNotificationTypeList"' SqlDbType.VarChar' 0' ParameterDirection.Input' AcceptNotificationTypeList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 721.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetUserAcceptNotificationTypes"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Manner"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Manner)' new MSSQL.Parameter ("AcceptNotificationTypeList"' SqlDbType.VarChar' 0' ParameterDirection.Input' AcceptNotificationTypeList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 730.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SetUserCompetences"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CompetencesList"' SqlDbType.VarChar' 0' ParameterDirection.Input' CompetencesList)' new MSSQL.Parameter ("GroupsList"' SqlDbType.VarChar' 0' ParameterDirection.Input' GroupsList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 694.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SetUserCompetences"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("CompetencesList"' SqlDbType.VarChar' 0' ParameterDirection.Input' CompetencesList)' new MSSQL.Parameter ("GroupsList"' SqlDbType.VarChar' 0' ParameterDirection.Input' GroupsList)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 703.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SiteAdd"' ref Outputs' new MSSQL.Parameter ("SiteParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 0' ParameterDirection.Input' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 0' ParameterDirection.Input' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SiteID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2675.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SiteAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteParentID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteParentID)' new MSSQL.Parameter ("OwnerUserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OwnerUserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 0' ParameterDirection.Input' ICPCert)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 0' ParameterDirection.Input' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("AdministratorID"' SqlDbType.BigInt' 8' ParameterDirection.Output' AdministratorID)' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 8' ParameterDirection.Output' SiteID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2684.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SiteAfficheAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("NewAfficheID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewAfficheID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 849.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SiteAfficheAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("NewAfficheID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewAfficheID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 858.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SiteAfficheDelete"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 483.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SiteAfficheDelete"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 492.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SiteAfficheEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 924.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SiteAfficheEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("ID"' SqlDbType.BigInt' 0' ParameterDirection.Input' ID)' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("Title"' SqlDbType.VarChar' 0' ParameterDirection.Input' Title)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("isShow"' SqlDbType.Bit' 0' ParameterDirection.Input' isShow)' new MSSQL.Parameter ("isCommend"' SqlDbType.Bit' 0' ParameterDirection.Input' isCommend)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 933.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SiteEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 0' ParameterDirection.Input' ICPCert)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 0' ParameterDirection.Input' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2381.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SiteEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("LogoUrl"' SqlDbType.VarChar' 0' ParameterDirection.Input' LogoUrl)' new MSSQL.Parameter ("Company"' SqlDbType.VarChar' 0' ParameterDirection.Input' Company)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("PostCode"' SqlDbType.VarChar' 0' ParameterDirection.Input' PostCode)' new MSSQL.Parameter ("ResponsiblePerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ResponsiblePerson)' new MSSQL.Parameter ("ContactPerson"' SqlDbType.VarChar' 0' ParameterDirection.Input' ContactPerson)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Fax"' SqlDbType.VarChar' 0' ParameterDirection.Input' Fax)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ServiceTelephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' ServiceTelephone)' new MSSQL.Parameter ("ICPCert"' SqlDbType.VarChar' 0' ParameterDirection.Input' ICPCert)' new MSSQL.Parameter ("ON"' SqlDbType.Bit' 0' ParameterDirection.Input' ON)' new MSSQL.Parameter ("BonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' BonusScale)' new MSSQL.Parameter ("MaxSubSites"' SqlDbType.Int' 0' ParameterDirection.Input' MaxSubSites)' new MSSQL.Parameter ("UseLotteryListRestrictions"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListRestrictions)' new MSSQL.Parameter ("UseLotteryList"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryList)' new MSSQL.Parameter ("UseLotteryListQuickBuy"' SqlDbType.VarChar' 0' ParameterDirection.Input' UseLotteryListQuickBuy)' new MSSQL.Parameter ("Urls"' SqlDbType.VarChar' 0' ParameterDirection.Input' Urls)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2390.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_spfdg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("win"' SqlDbType.Float' 0' ParameterDirection.Input' win)' new MSSQL.Parameter ("flat"' SqlDbType.Float' 0' ParameterDirection.Input' flat)' new MSSQL.Parameter ("lose"' SqlDbType.Float' 0' ParameterDirection.Input' lose)' new MSSQL.Parameter ("MainLoseball"' SqlDbType.Int' 0' ParameterDirection.Input' MainLoseball)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1488.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_spfdg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("win"' SqlDbType.Float' 0' ParameterDirection.Input' win)' new MSSQL.Parameter ("flat"' SqlDbType.Float' 0' ParameterDirection.Input' flat)' new MSSQL.Parameter ("lose"' SqlDbType.Float' 0' ParameterDirection.Input' lose)' new MSSQL.Parameter ("MainLoseball"' SqlDbType.Int' 0' ParameterDirection.Input' MainLoseball)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1497.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_spfgg"' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("win"' SqlDbType.Float' 0' ParameterDirection.Input' win)' new MSSQL.Parameter ("flat"' SqlDbType.Float' 0' ParameterDirection.Input' flat)' new MSSQL.Parameter ("lose"' SqlDbType.Float' 0' ParameterDirection.Input' lose)' new MSSQL.Parameter ("MainLoseball"' SqlDbType.Int' 0' ParameterDirection.Input' MainLoseball)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1488.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_spfgg"' ref ds' ref Outputs' new MSSQL.Parameter ("MainTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' MainTeam)' new MSSQL.Parameter ("GuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' GuestTeam)' new MSSQL.Parameter ("Game"' SqlDbType.VarChar' 0' ParameterDirection.Input' Game)' new MSSQL.Parameter ("MatchNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' MatchNumber)' new MSSQL.Parameter ("win"' SqlDbType.Float' 0' ParameterDirection.Input' win)' new MSSQL.Parameter ("flat"' SqlDbType.Float' 0' ParameterDirection.Input' flat)' new MSSQL.Parameter ("lose"' SqlDbType.Float' 0' ParameterDirection.Input' lose)' new MSSQL.Parameter ("MainLoseball"' SqlDbType.Int' 0' ParameterDirection.Input' MainLoseball)' new MSSQL.Parameter ("MatchDate"' SqlDbType.DateTime' 0' ParameterDirection.Input' MatchDate)' new MSSQL.Parameter ("stopselltime"' SqlDbType.DateTime' 0' ParameterDirection.Input' stopselltime)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescption"' SqlDbType.NVarChar' 100' ParameterDirection.Output' ReturnDescption)); " is 1497.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SystemEnd"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 309.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SystemEnd"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 318.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_SystemPaulAtTheEnd"' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 318.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_SystemPaulAtTheEnd"' ref ds' ref Outputs' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 327.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_11YDJ_WINNUM"' ref Outputs' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 509.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_11YDJ_WINNUM"' ref ds' ref Outputs' new MSSQL.Parameter ("DateTime"' SqlDbType.DateTime' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("LotteryID"' SqlDbType.BigInt' 0' ParameterDirection.Input' LotteryID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 518.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_15X5_CGXMB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_15X5_CGXMB"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_15X5_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_15X5_HMFB"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_22X5_HMFB"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 200.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_HMFB"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 209.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMLR,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_22X5_HMLR"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 200.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMLR,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_HMLR"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 209.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMLRjj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_22X5_HMLRjj"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HMLRjj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_HMLRjj"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HZ_Heng,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_HZ_Heng"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_HZzong,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_HZzong"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_22X5_WeiHaoCF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_22X5_WeiHaoCF"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_3D_XTZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_3D_XTZST"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_4D_CGXMB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_4D_CGXMB"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_7CL_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_7CL_HMFB"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_7LC_CGXMB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_7LC_CGXMB"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_7X_HZHeng,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_7X_HZHeng"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_7X_HZzhong,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_7X_HZzhong"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_7XC_CGXMB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_7XC_CGXMB"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_HMFB"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 201.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HMFB"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 210.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_JiMa,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_JiMa"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_JiMa,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_JiMa"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 215.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_JiMajj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_JiMajj"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 208.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_JiMajj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_JiMajj"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 217.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_Tema,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_Tema"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_Tema,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_Tema"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 215.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_Temajj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_Temajj"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 208.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HMLR_Temajj,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HMLR_Temajj"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 217.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HZ_Heng,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HZ_Heng"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_HZzong,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_HZzong"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_jima,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_jima"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_jimaYL,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_jimaYL"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 203.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_jimaYL,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_jimaYL"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 212.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_Jiou,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_Jiou"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_LH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_LH"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_tema,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_tema"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_TeMa_WH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_TeMa_WH"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_TemaYL,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CJDLT_TemaYL"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 203.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_TemaYL,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_TemaYL"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 212.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_WH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_WH"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CJDLT_YS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CJDLT_YS"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2X_012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2X_012_ZST"' ref ds' ref Outputs); " is 128.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XDXDSZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XDXDSZST"' ref ds' ref Outputs); " is 127.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XHZWZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XHZWZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XHZZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XKDZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XMaxZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XMaxZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XMINZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XMINZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XPJZZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_2XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_2XZHFBZST"' ref ds' ref Outputs); " is 127.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3X_DX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CQSSC_3X_DX012_ZST"' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3X_DX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3X_DX012_ZST"' ref ds' ref Outputs); " is 130.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3X_ZX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_CQSSC_3X_ZX012_ZST"' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3X_ZX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3X_ZX012_ZST"' ref ds' ref Outputs); " is 130.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XDXZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XHZWZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XHZWZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XHZZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XJOZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XKDZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XPJZZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XZHFBZST"' ref ds' ref Outputs); " is 127.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XZHZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_3XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_3XZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XDXZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XHZZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XJOZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XKDZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XPJZZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XZHFBZST"' ref ds' ref Outputs); " is 127.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XZHZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_4XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_4XZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XDXZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XHZZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XJOZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XKDZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XPJZZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XZHFBZST"' ref ds' ref Outputs); " is 127.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XZHZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_CQSSC_5XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_CQSSC_5XZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_DF6J1_ZHFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_DF6J1_ZHFB"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_FC3D,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_FC3D"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 195.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_FC3D,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_FC3D"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 204.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KLPK_012,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KLPK_012"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KLPK_DZX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KLPK_DZX"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KLPK_KJFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KLPK_KJFB"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_DXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_KY481_DXZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_DXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KY481_DXZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_HZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_KY481_HZZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_HZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KY481_HZZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_JBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_KY481_JBZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_JBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KY481_JBZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_JOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_KY481_JOZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_JOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KY481_JOZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_KDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_KY481_KDZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 202.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_KY481_KDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_KY481_KDZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 211.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_012,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_012"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 198.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_012,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_012"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 207.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_DX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_DX"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_DX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_DX"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_DZX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_DZX"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 198.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_DZX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_DZX"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 207.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_HMFB"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 199.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_HMFB"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 208.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_HZ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_HZ"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_HZ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_HZ"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_JO,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_JO"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_JO,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_JO"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_KD,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_KD"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_KD,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_KD"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_WH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_WH"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_WH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_WH"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_ZH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_ZH"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_ZH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_ZH"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_ZX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL3_ZX"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL3_ZX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL3_ZX"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL5_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL5_HMFB"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 199.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL5_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL5_HMFB"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 208.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL5_HZ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_PL5_HZ"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 197.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_PL5_HZ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_PL5_HZ"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 206.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_012,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_012"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_DX,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_DX"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_HZ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_HZ"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_JO,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_JO"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_ZH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_ZH"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SHSSL_ZHFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SHSSL_ZHFB"' ref ds' ref Outputs); " is 122.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2X_012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2X_012_ZST"' ref ds' ref Outputs); " is 126.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XDXDSZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XDXDSZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XHZWZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XHZWZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XHZZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XKDZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XMaxZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XMaxZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XMINZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XMINZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XPJZZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_2XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_2XZHFBZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3X_DX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3X_DX012_ZST"' ref ds' ref Outputs); " is 128.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3X_ZX012_ZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3X_ZX012_ZST"' ref ds' ref Outputs); " is 128.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XDXZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XHZWZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XHZWZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XHZZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XJOZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XKDZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XPJZZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XZHFBZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XZHZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_3XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_3XZST"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XDXZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XHZZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XJOZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XKDZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XPJZZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XZHFBZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XZHZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_4XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_4XZST"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XDXZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XDXZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XHZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XHZZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XJOZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XJOZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XKDZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XKDZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XPJZZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XPJZZST"' ref ds' ref Outputs); " is 124.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XZHFBZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XZHFBZST"' ref ds' ref Outputs); " is 125.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XZHZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XZHZST"' ref ds' ref Outputs); " is 123.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSC_5XZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSC_5XZST"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSQ_BQZH,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSQ_BQZH"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSQ_CGXMB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSQ_CGXMB"' ref ds' ref Outputs); " is 121.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_SSQ_HMFB,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_SSQ_HMFB"' ref ds' ref Outputs); " is 120.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_ZYFC22X5_HMZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_TrendChart_ZYFC22X5_HMZST"' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 205.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_ZYFC22X5_HMZST,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_TrendChart_ZYFC22X5_HMZST"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseNum"' SqlDbType.Int' 0' ParameterDirection.Input' IsuseNum)); " is 214.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForBQCSPF"' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("BQCSPFSSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSSSP)' new MSSQL.Parameter ("BQCSPFSPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSPSP)' new MSSQL.Parameter ("BQCSPFSFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSFSP)' new MSSQL.Parameter ("BQCSPFPSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPSSP)' new MSSQL.Parameter ("BQCSPFPPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPPSP)' new MSSQL.Parameter ("BQCSPFPFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPFSP)' new MSSQL.Parameter ("BQCSPFFSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFSSP)' new MSSQL.Parameter ("BQCSPFFPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFPSP)' new MSSQL.Parameter ("BQCSPFFFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFFSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 2187.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForBQCSPF"' ref ds' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("BQCSPFSSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSSSP)' new MSSQL.Parameter ("BQCSPFSPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSPSP)' new MSSQL.Parameter ("BQCSPFSFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFSFSP)' new MSSQL.Parameter ("BQCSPFPSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPSSP)' new MSSQL.Parameter ("BQCSPFPPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPPSP)' new MSSQL.Parameter ("BQCSPFPFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFPFSP)' new MSSQL.Parameter ("BQCSPFFSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFSSP)' new MSSQL.Parameter ("BQCSPFFPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFPSP)' new MSSQL.Parameter ("BQCSPFFFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' BQCSPFFFSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 2196.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForEuropeanOdds"' ref Outputs' new MSSQL.Parameter ("Isuse"' SqlDbType.VarChar' 0' ParameterDirection.Input' Isuse)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 783.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForEuropeanOdds"' ref ds' ref Outputs' new MSSQL.Parameter ("Isuse"' SqlDbType.VarChar' 0' ParameterDirection.Input' Isuse)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 792.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForSPF"' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("LetBall"' SqlDbType.Int' 0' ParameterDirection.Input' LetBall)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("SPFSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFSSP)' new MSSQL.Parameter ("SPFPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFPSP)' new MSSQL.Parameter ("SPFFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFFSP)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 1952.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForSPF"' ref ds' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("LetBall"' SqlDbType.Int' 0' ParameterDirection.Input' LetBall)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("SPFSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFSSP)' new MSSQL.Parameter ("SPFPSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFPSP)' new MSSQL.Parameter ("SPFFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SPFFSP)' new MSSQL.Parameter ("EuropeSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeSSP)' new MSSQL.Parameter ("EuropePSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropePSP)' new MSSQL.Parameter ("EuropeFSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' EuropeFSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 1961.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForSXDS"' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("SXDSSDSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSSDSP)' new MSSQL.Parameter ("SXDSSSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSSSSP)' new MSSQL.Parameter ("SXDSXDSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSXDSP)' new MSSQL.Parameter ("SXDSXSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSXSSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 1689.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForSXDS"' ref ds' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("SXDSSDSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSSDSP)' new MSSQL.Parameter ("SXDSSSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSSSSP)' new MSSQL.Parameter ("SXDSXDSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSXDSP)' new MSSQL.Parameter ("SXDSXSSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' SXDSXSSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 1698.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForZJQ"' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("ZJQ0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ0SP)' new MSSQL.Parameter ("ZJQ1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ1SP)' new MSSQL.Parameter ("ZJQ2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ2SP)' new MSSQL.Parameter ("ZJQ3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ3SP)' new MSSQL.Parameter ("ZJQ4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ4SP)' new MSSQL.Parameter ("ZJQ5SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ5SP)' new MSSQL.Parameter ("ZJQ6SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ6SP)' new MSSQL.Parameter ("ZJQ7SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ7SP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 2024.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForZJQ"' ref ds' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("ZJQ0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ0SP)' new MSSQL.Parameter ("ZJQ1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ1SP)' new MSSQL.Parameter ("ZJQ2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ2SP)' new MSSQL.Parameter ("ZJQ3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ3SP)' new MSSQL.Parameter ("ZJQ4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ4SP)' new MSSQL.Parameter ("ZJQ5SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ5SP)' new MSSQL.Parameter ("ZJQ6SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ6SP)' new MSSQL.Parameter ("ZJQ7SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZJQ7SP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 2033.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForZQBF"' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("ZQBFS1Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS1Then0SP)' new MSSQL.Parameter ("ZQBFS2Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS2Then0SP)' new MSSQL.Parameter ("ZQBFS2Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS2Then1SP)' new MSSQL.Parameter ("ZQBFS3Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then0SP)' new MSSQL.Parameter ("ZQBFS3Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then1SP)' new MSSQL.Parameter ("ZQBFS3Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then2SP)' new MSSQL.Parameter ("ZQBFS4Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then0SP)' new MSSQL.Parameter ("ZQBFS4Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then1SP)' new MSSQL.Parameter ("ZQBFS4Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then2SP)' new MSSQL.Parameter ("ZQBFSSOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFSSOtherSP)' new MSSQL.Parameter ("ZQBFP0Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP0Then0SP)' new MSSQL.Parameter ("ZQBFP1Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP1Then1SP)' new MSSQL.Parameter ("ZQBFP2Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP2Then2SP)' new MSSQL.Parameter ("ZQBFP3Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP3Then3SP)' new MSSQL.Parameter ("ZQBFPPOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFPPOtherSP)' new MSSQL.Parameter ("ZQBFF0Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then1SP)' new MSSQL.Parameter ("ZQBFF0Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then2SP)' new MSSQL.Parameter ("ZQBFF1Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then2SP)' new MSSQL.Parameter ("ZQBFF0Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then3SP)' new MSSQL.Parameter ("ZQBFF1Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then3SP)' new MSSQL.Parameter ("ZQBFF2Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF2Then3SP)' new MSSQL.Parameter ("ZQBFF0Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then4SP)' new MSSQL.Parameter ("ZQBFF1Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then4SP)' new MSSQL.Parameter ("ZQBFF2Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF2Then4SP)' new MSSQL.Parameter ("ZQBFFFOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFFFOtherSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 3871.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UpdateIsuseForZCDCSPForZQBF"' ref ds' ref Outputs' new MSSQL.Parameter ("QtherMatchID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherMatchID)' new MSSQL.Parameter ("QtherLID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherLID)' new MSSQL.Parameter ("QtherLName"' SqlDbType.VarChar' 0' ParameterDirection.Input' QtherLName)' new MSSQL.Parameter ("IsuseID"' SqlDbType.VarChar' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("LeagueType"' SqlDbType.VarChar' 0' ParameterDirection.Input' LeagueType)' new MSSQL.Parameter ("No"' SqlDbType.VarChar' 0' ParameterDirection.Input' No)' new MSSQL.Parameter ("OtherHostID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OtherHostID)' new MSSQL.Parameter ("HostTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' HostTeam)' new MSSQL.Parameter ("QtherQuestID"' SqlDbType.BigInt' 0' ParameterDirection.Input' QtherQuestID)' new MSSQL.Parameter ("QuestTeam"' SqlDbType.VarChar' 0' ParameterDirection.Input' QuestTeam)' new MSSQL.Parameter ("DateTime"' SqlDbType.VarChar' 0' ParameterDirection.Input' DateTime)' new MSSQL.Parameter ("ZQBFS1Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS1Then0SP)' new MSSQL.Parameter ("ZQBFS2Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS2Then0SP)' new MSSQL.Parameter ("ZQBFS2Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS2Then1SP)' new MSSQL.Parameter ("ZQBFS3Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then0SP)' new MSSQL.Parameter ("ZQBFS3Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then1SP)' new MSSQL.Parameter ("ZQBFS3Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS3Then2SP)' new MSSQL.Parameter ("ZQBFS4Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then0SP)' new MSSQL.Parameter ("ZQBFS4Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then1SP)' new MSSQL.Parameter ("ZQBFS4Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFS4Then2SP)' new MSSQL.Parameter ("ZQBFSSOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFSSOtherSP)' new MSSQL.Parameter ("ZQBFP0Then0SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP0Then0SP)' new MSSQL.Parameter ("ZQBFP1Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP1Then1SP)' new MSSQL.Parameter ("ZQBFP2Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP2Then2SP)' new MSSQL.Parameter ("ZQBFP3Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFP3Then3SP)' new MSSQL.Parameter ("ZQBFPPOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFPPOtherSP)' new MSSQL.Parameter ("ZQBFF0Then1SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then1SP)' new MSSQL.Parameter ("ZQBFF0Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then2SP)' new MSSQL.Parameter ("ZQBFF1Then2SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then2SP)' new MSSQL.Parameter ("ZQBFF0Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then3SP)' new MSSQL.Parameter ("ZQBFF1Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then3SP)' new MSSQL.Parameter ("ZQBFF2Then3SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF2Then3SP)' new MSSQL.Parameter ("ZQBFF0Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF0Then4SP)' new MSSQL.Parameter ("ZQBFF1Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF1Then4SP)' new MSSQL.Parameter ("ZQBFF2Then4SP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFF2Then4SP)' new MSSQL.Parameter ("ZQBFFFOtherSP"' SqlDbType.VarChar' 0' ParameterDirection.Input' ZQBFFFOtherSP)' new MSSQL.Parameter ("Result"' SqlDbType.Int' 4' ParameterDirection.Output' Result)' new MSSQL.Parameter ("Return"' SqlDbType.VarChar' 100' ParameterDirection.Output' Return)); " is 3880.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserAdd"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 0' ParameterDirection.Input' VisitSource)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2784.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserAdd"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("isQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("CommenderID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CommenderID)' new MSSQL.Parameter ("CpsID"' SqlDbType.BigInt' 0' ParameterDirection.Input' CpsID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("VisitSource"' SqlDbType.VarChar' 0' ParameterDirection.Input' VisitSource)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 8' ParameterDirection.Output' UserID)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 2793.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserAddMoney"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("PayNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayNumber)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 942.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserAddMoney"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("FormalitiesFees"' SqlDbType.Money' 0' ParameterDirection.Input' FormalitiesFees)' new MSSQL.Parameter ("PayNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayNumber)' new MSSQL.Parameter ("PayBank"' SqlDbType.VarChar' 0' ParameterDirection.Input' PayBank)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 951.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserAddMoneyManual"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 755.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserAddMoneyManual"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Money"' SqlDbType.Money' 0' ParameterDirection.Input' Money)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("OperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 764.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserBankDetailEdit"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("BankTypeName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankTypeName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("BankInProvinceName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankInProvinceName)' new MSSQL.Parameter ("BankInCityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankInCityName)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1104.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserBankDetailEdit"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("BankTypeName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankTypeName)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("BankInProvinceName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankInProvinceName)' new MSSQL.Parameter ("BankInCityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankInCityName)' new MSSQL.Parameter ("BankUserName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankUserName)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1113.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserDistillPayByAlipay"' ref Outputs' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("FileName"' SqlDbType.VarChar' 0' ParameterDirection.Input' FileName)' new MSSQL.Parameter ("IDs"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDs)' new MSSQL.Parameter ("PaymentType"' SqlDbType.Int' 0' ParameterDirection.Input' PaymentType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 697.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserDistillPayByAlipay"' ref ds' ref Outputs' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("FileName"' SqlDbType.VarChar' 0' ParameterDirection.Input' FileName)' new MSSQL.Parameter ("IDs"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDs)' new MSSQL.Parameter ("PaymentType"' SqlDbType.Int' 0' ParameterDirection.Input' PaymentType)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 706.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserDistillPayByAlipaySuccess"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 616.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserDistillPayByAlipaySuccess"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("HandleOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' HandleOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 625.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserDistillPayByAlipayUnsuccess"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 595.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserDistillPayByAlipayUnsuccess"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("DistillID"' SqlDbType.BigInt' 0' ParameterDirection.Input' DistillID)' new MSSQL.Parameter ("Memo"' SqlDbType.VarChar' 0' ParameterDirection.Input' Memo)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 604.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayWriteLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserDistillPayByAlipayWriteLog"' ref Outputs' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)); " is 212.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayWriteLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserDistillPayByAlipayWriteLog"' ref ds' ref Outputs' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)); " is 221.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserEditByID"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("IsQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' IsQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanLogin)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfCommendBuy)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isAlipayNameValided)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionSiteBonusScale)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCrossLogin)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3546.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserEditByID"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("IsQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' IsQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanLogin)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfCommendBuy)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isAlipayNameValided)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionSiteBonusScale)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCrossLogin)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3555.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserEditByName"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("IsQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' IsQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanLogin)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfCommendBuy)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isAlipayNameValided)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionSiteBonusScale)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCrossLogin)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3548.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserEditByName"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Name"' SqlDbType.VarChar' 0' ParameterDirection.Input' Name)' new MSSQL.Parameter ("RealityName"' SqlDbType.VarChar' 0' ParameterDirection.Input' RealityName)' new MSSQL.Parameter ("Password"' SqlDbType.VarChar' 0' ParameterDirection.Input' Password)' new MSSQL.Parameter ("PasswordAdv"' SqlDbType.VarChar' 0' ParameterDirection.Input' PasswordAdv)' new MSSQL.Parameter ("CityID"' SqlDbType.Int' 0' ParameterDirection.Input' CityID)' new MSSQL.Parameter ("Sex"' SqlDbType.VarChar' 0' ParameterDirection.Input' Sex)' new MSSQL.Parameter ("BirthDay"' SqlDbType.DateTime' 0' ParameterDirection.Input' BirthDay)' new MSSQL.Parameter ("IDCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' IDCardNumber)' new MSSQL.Parameter ("Address"' SqlDbType.VarChar' 0' ParameterDirection.Input' Address)' new MSSQL.Parameter ("Email"' SqlDbType.VarChar' 0' ParameterDirection.Input' Email)' new MSSQL.Parameter ("isEmailValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isEmailValided)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("IsQQValided"' SqlDbType.Bit' 0' ParameterDirection.Input' IsQQValided)' new MSSQL.Parameter ("Telephone"' SqlDbType.VarChar' 0' ParameterDirection.Input' Telephone)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("isMobileValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isMobileValided)' new MSSQL.Parameter ("isPrivacy"' SqlDbType.Bit' 0' ParameterDirection.Input' isPrivacy)' new MSSQL.Parameter ("isCanLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' isCanLogin)' new MSSQL.Parameter ("UserType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' UserType)' new MSSQL.Parameter ("BankType"' SqlDbType.SmallInt' 0' ParameterDirection.Input' BankType)' new MSSQL.Parameter ("BankName"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankName)' new MSSQL.Parameter ("BankCardNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' BankCardNumber)' new MSSQL.Parameter ("ScoringOfSelfBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfSelfBuy)' new MSSQL.Parameter ("ScoringOfCommendBuy"' SqlDbType.Float' 0' ParameterDirection.Input' ScoringOfCommendBuy)' new MSSQL.Parameter ("Level"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Level)' new MSSQL.Parameter ("AlipayID"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayID)' new MSSQL.Parameter ("AlipayName"' SqlDbType.VarChar' 0' ParameterDirection.Input' AlipayName)' new MSSQL.Parameter ("isAlipayNameValided"' SqlDbType.Bit' 0' ParameterDirection.Input' isAlipayNameValided)' new MSSQL.Parameter ("PromotionMemberBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionMemberBonusScale)' new MSSQL.Parameter ("PromotionSiteBonusScale"' SqlDbType.Float' 0' ParameterDirection.Input' PromotionSiteBonusScale)' new MSSQL.Parameter ("IsCrossLogin"' SqlDbType.Bit' 0' ParameterDirection.Input' IsCrossLogin)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 3557.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserLogOut"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 572.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserLogOut"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Reason"' SqlDbType.VarChar' 0' ParameterDirection.Input' Reason)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 581.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserPaySMSCost"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Num"' SqlDbType.Int' 0' ParameterDirection.Input' Num)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 654.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserPaySMSCost"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("Mobile"' SqlDbType.VarChar' 0' ParameterDirection.Input' Mobile)' new MSSQL.Parameter ("Num"' SqlDbType.Int' 0' ParameterDirection.Input' Num)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 663.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_UserQQBind"' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 476.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_UserQQBind"' ref ds' ref Outputs' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("QQ"' SqlDbType.VarChar' 0' ParameterDirection.Input' QQ)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 50' ParameterDirection.Output' ReturnDescription)); " is 485.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_ViewUserBonus"' ref Outputs' new MSSQL.Parameter ("userid"' SqlDbType.BigInt' 0' ParameterDirection.Input' userid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 400.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_ViewUserBonus"' ref ds' ref Outputs' new MSSQL.Parameter ("userid"' SqlDbType.BigInt' 0' ParameterDirection.Input' userid)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 409.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_Win"' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("WinLotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinLotteryNumber)' new MSSQL.Parameter ("OpenAffiche"' SqlDbType.VarChar' 0' ParameterDirection.Input' OpenAffiche)' new MSSQL.Parameter ("OpenOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OpenOperatorID)' new MSSQL.Parameter ("isEndTheIsuse"' SqlDbType.Bit' 0' ParameterDirection.Input' isEndTheIsuse)' new MSSQL.Parameter ("SchemeCount"' SqlDbType.Int' 4' ParameterDirection.Output' SchemeCount)' new MSSQL.Parameter ("QuashCount"' SqlDbType.Int' 4' ParameterDirection.Output' QuashCount)' new MSSQL.Parameter ("WinCount"' SqlDbType.Int' 4' ParameterDirection.Output' WinCount)' new MSSQL.Parameter ("WinNoBuyCount"' SqlDbType.Int' 4' ParameterDirection.Output' WinNoBuyCount)' new MSSQL.Parameter ("isEndOpen"' SqlDbType.Bit' 1' ParameterDirection.Output' isEndOpen)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1266.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_Win"' ref ds' ref Outputs' new MSSQL.Parameter ("IsuseID"' SqlDbType.BigInt' 0' ParameterDirection.Input' IsuseID)' new MSSQL.Parameter ("WinLotteryNumber"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinLotteryNumber)' new MSSQL.Parameter ("OpenAffiche"' SqlDbType.VarChar' 0' ParameterDirection.Input' OpenAffiche)' new MSSQL.Parameter ("OpenOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OpenOperatorID)' new MSSQL.Parameter ("isEndTheIsuse"' SqlDbType.Bit' 0' ParameterDirection.Input' isEndTheIsuse)' new MSSQL.Parameter ("SchemeCount"' SqlDbType.Int' 4' ParameterDirection.Output' SchemeCount)' new MSSQL.Parameter ("QuashCount"' SqlDbType.Int' 4' ParameterDirection.Output' QuashCount)' new MSSQL.Parameter ("WinCount"' SqlDbType.Int' 4' ParameterDirection.Output' WinCount)' new MSSQL.Parameter ("WinNoBuyCount"' SqlDbType.Int' 4' ParameterDirection.Output' WinNoBuyCount)' new MSSQL.Parameter ("isEndOpen"' SqlDbType.Bit' 1' ParameterDirection.Output' isEndOpen)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 1275.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_WinByOpenManual"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("WinMoneyNoWithTax"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoneyNoWithTax)' new MSSQL.Parameter ("WinDescription"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinDescription)' new MSSQL.Parameter ("OpenOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OpenOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 898.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_WinByOpenManual"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SchemeID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SchemeID)' new MSSQL.Parameter ("WinMoney"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney)' new MSSQL.Parameter ("WinMoneyNoWithTax"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoneyNoWithTax)' new MSSQL.Parameter ("WinDescription"' SqlDbType.VarChar' 0' ParameterDirection.Input' WinDescription)' new MSSQL.Parameter ("OpenOperatorID"' SqlDbType.BigInt' 0' ParameterDirection.Input' OpenOperatorID)' new MSSQL.Parameter ("ReturnValue"' SqlDbType.Int' 4' ParameterDirection.Output' ReturnValue)' new MSSQL.Parameter ("ReturnDescription"' SqlDbType.VarChar' 100' ParameterDirection.Output' ReturnDescription)); " is 907.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_WriteSMS"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SMSID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SMSID)' new MSSQL.Parameter ("From"' SqlDbType.VarChar' 0' ParameterDirection.Input' From)' new MSSQL.Parameter ("To"' SqlDbType.VarChar' 0' ParameterDirection.Input' To)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewSMSID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewSMSID)); " is 618.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_WriteSMS"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SMSID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SMSID)' new MSSQL.Parameter ("From"' SqlDbType.VarChar' 0' ParameterDirection.Input' From)' new MSSQL.Parameter ("To"' SqlDbType.VarChar' 0' ParameterDirection.Input' To)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewSMSID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewSMSID)); " is 627.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_WriteStationSMS"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SourceID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SourceID)' new MSSQL.Parameter ("AimID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AimID)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewSMSID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewSMSID)); " is 637.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_WriteStationSMS"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("SourceID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SourceID)' new MSSQL.Parameter ("AimID"' SqlDbType.BigInt' 0' ParameterDirection.Input' AimID)' new MSSQL.Parameter ("Type"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Type)' new MSSQL.Parameter ("Content"' SqlDbType.VarChar' 0' ParameterDirection.Input' Content)' new MSSQL.Parameter ("NewSMSID"' SqlDbType.BigInt' 8' ParameterDirection.Output' NewSMSID)); " is 646.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSystemLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureNonQuery (ConnectionString' "P_WriteSystemLog"' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)' new MSSQL.Parameter ("Description"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Description)); " is 473.
Long Statement,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSystemLog,The length of the statement  "	int CallResult = MSSQL.ExecuteStoredProcedureWithQuery (ConnectionString' "P_WriteSystemLog"' ref ds' ref Outputs' new MSSQL.Parameter ("SiteID"' SqlDbType.BigInt' 0' ParameterDirection.Input' SiteID)' new MSSQL.Parameter ("UserID"' SqlDbType.BigInt' 0' ParameterDirection.Input' UserID)' new MSSQL.Parameter ("IPAddress"' SqlDbType.VarChar' 0' ParameterDirection.Input' IPAddress)' new MSSQL.Parameter ("Description"' SqlDbType.SmallInt' 0' ParameterDirection.Input' Description)); " is 482.
Long Statement,SLS.Task,Log,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Log.cs,Write,The length of the statement  "			writer.WriteLine (System.DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss") + ":" + System.DateTime.Now.Millisecond.ToString () + "\t\t" + Message + "\r\n"); " is 152.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Run,The length of the statement  "	if ((ElectronTicket_HPSH_Getway == "") || (ElectronTicket_HPSH_UserName == "") || (ElectronTicket_HPSH_UserPassword == "")) { " is 125.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemeSchedules ().Open (ConnectionString' "ID' LotteryID' PlayTypeID' LotteryNumber' Multiple' Money' (case LotteryID when 29 then -29 else LotteryID end) as LotteryID_2"' "Buyed = 0 and (GetDate() between StartTime and EndTime) and BuyedShare >= Share and isnull(Identifiers' '') = '' and PrintOutType = 102 and State = 1 and dateadd(mi' 1' StateUpdateTime) <= GetDate() and LotteryID = 29"' "LotteryID_2' UserType desc' [ID]"); " is 461.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The length of the statement  "			SMS.Eucp.Gateway.CallResult SmsResult = segg.Send ("13537697101"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！"); " is 146.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The length of the statement  "			TicketXML += "<Ticket LotteryNumber=\"" + ticket.Number + "\" Multiple=\"" + ticket.Multiple + "\" Money=\"" + ticket.Money + "\" />"; " is 134.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The length of the statement  "		int Result = DAL.Procedures.P_SchemesSendToCenterAdd (ConnectionString' SchemeID' TicketPlayTypeID' TicketXML' ref ReturnValue' ref ReturnDescription); " is 151.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemesSendToCenter ().Open (ConnectionString' "distinct SchemeID"' "(((Sends > 0) AND (Sends < 100)) or (sends = 3301) or (sends = 2148)) AND (HandleResult = 0) AND (IsOpened = 0) and LotteryID = 29 and buyed = 0"' ""); " is 251.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "		dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' ""); " is 194.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString (); " is 149.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "				int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 213.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "					Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription); " is 262.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The length of the statement  "			if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) { " is 293.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "	DataTable dt = v_SchemesSendToCenter.Open (ConnectionString' "distinct SchemeID' SiteID' UserType"' "Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1 and LotteryID = 29"' " UserType desc"); " is 246.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "		DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' ""); " is 247.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "		if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) { " is 162.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">"; " is 201.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>"; " is 146.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>"; " is 364.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString (); " is 131.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 213.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 123.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 124.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 209.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "					msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 123.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "					log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 124.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription); " is 190.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "					msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 137.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "					log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 138.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription); " is 190.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 137.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The length of the statement  "				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 138.
Long Statement,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,ReNotice,The length of the statement  "	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The length of the statement  "	DataTable dt = new DAL.Views.V_Schemes ().Open (ConnectionString' "id"' "DATEDIFF(minute' case when UpdateDatetime < StartTime then dateadd(minute' 2' StartTime) else UpdateDatetime end' getdate()) > 4 and Schedule >= 100 and Buyed = 0 and QuashStatus = 0 and State = 1"' ""); " is 276.
Long Statement,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The length of the statement  "		Shove._Net.Email.SendEmail ("services@icaile.com"' "thc@3km.cc"' "爱彩乐出现紧急票，需要立即处理。"' "爱彩乐出现紧急票，需要立即处理。"' "mail.icaile.com"' "services@icaile.com"' "1314521"); " is 158.
Long Statement,SLS.Task,PublicFunction,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Utility\PublicFunction.cs,Post,The length of the statement  "		sr = new StreamReader (new GZipStream (hwrp.GetResponseStream ()' CompressionMode.Decompress)' System.Text.Encoding.GetEncoding ("GBK")); " is 137.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Run,The length of the statement  "	if ((ElectronTicket_HPCQ_Getway == "") || (ElectronTicket_HPCQ_UserName == "") || (ElectronTicket_HPCQ_UserPassword == "")) { " is 125.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,WriteTickets,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemeSchedules ().Open (ConnectionString' "ID' LotteryID' PlayTypeID' LotteryNumber' Multiple' Money"' "Buyed = 0 and PrintOutType = 101 and (GetDate() between StartTime and EndTime) and Schedule >= 100 and not [ID] in (select SchemeID from T_SchemesSendToCenter)"' "[ID]"); " is 306.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,WriteTickets,The length of the statement  "		SLS.Lottery.Ticket[] Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPCQ (PlayTypeID' LotterNumber' Multiple' 200' ref Money); " is 139.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemesSendToCenter ().Open (ConnectionString' ""' "Buyed = 0 and PrintOutType = 101 and (GetDate() between StartTime and EndTime) and ((Sends = 0) or (Sends < 3 and HandleResult = 0 and datediff(minute' [Datetime]' GetDate()) > 3))"' "[ID]"); " is 274.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "			Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\""; " is 137.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "			Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">"; " is 183.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "			Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>"; " is 143.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "			Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>"; " is 286.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "		string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0'); " is 135.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The length of the statement  "		MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")"); " is 156.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Run,The length of the statement  "	if ((ElectronTicket_HPSH_Getway == "") || (ElectronTicket_HPSH_UserName == "") || (ElectronTicket_HPSH_UserPassword == "")) { " is 125.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemeSchedules ().Open (ConnectionString' "ID' LotteryID' PlayTypeID' LotteryNumber' Multiple' Money' (case LotteryID when 29 then -29 else LotteryID end) as LotteryID_2"' "Buyed = 0 and (GetDate() between StartTime and EndTime) and BuyedShare >= Share and isnull(Identifiers' '') = '' and PrintOutType = 102 and State = 1 and dateadd(mi' 1' StateUpdateTime) <= GetDate() and LotteryID <> 29"' "LotteryID_2' UserType desc' [ID]"); " is 462.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The length of the statement  "			SMS.Eucp.Gateway.CallResult SmsResult = segg.Send ("13537697101"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！"); " is 146.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The length of the statement  "			TicketXML += "<Ticket LotteryNumber=\"" + ticket.Number + "\" Multiple=\"" + ticket.Multiple + "\" Money=\"" + ticket.Money + "\" />"; " is 134.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The length of the statement  "		int Result = DAL.Procedures.P_SchemesSendToCenterAdd (ConnectionString' SchemeID' TicketPlayTypeID' TicketXML' ref ReturnValue' ref ReturnDescription); " is 151.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "	DataTable dt = new DAL.Views.V_SchemesSendToCenter ().Open (ConnectionString' "distinct SchemeID"' "(((Sends > 0) AND (Sends < 100)) or (sends = 3301) or (sends = 2148)) AND (HandleResult = 0) AND (IsOpened = 0) and LotteryID <> 29  and PrintOutType = 102"' ""); " is 262.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "		dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' ""); " is 194.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0'); " is 161.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "				int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 213.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "					Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription); " is 262.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The length of the statement  "			if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) { " is 293.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "	DataTable dt = v_SchemesSendToCenter.Open (ConnectionString' "distinct SchemeID' SiteID' UserType"' "Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1 and LotteryID <> 29 and PrintOutType = 102"' " UserType desc"); " is 270.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "		DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' ""); " is 247.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "		if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) { " is 162.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">"; " is 201.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>"; " is 146.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>"; " is 364.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0'); " is 143.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 213.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 123.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 124.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription); " is 209.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "					msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 123.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "					log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription); " is 124.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription); " is 190.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "					msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 137.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "					log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 138.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription); " is 190.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 137.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The length of the statement  "				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription); " is 138.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "	DataTable dt = new DAL.Views.V_Isuses ().Open (ConnectionString' "[ID]' LotteryID' [Name]"' "((isOpened = 0 and (Getdate() between StartTime and EndTime) and State = 0) or (isOpened = 0 and Getdate() > EndTime and State < 5)) and PrintOutType = 102"' "EndTime"); " is 262.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0'); " is 143.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "		string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>"; " is 125.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "			DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' ""); " is 166.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "					DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' ""); " is 123.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "					DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' ""); " is 180.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "						double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList); " is 209.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The length of the statement  "						if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) { " is 282.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The length of the statement  "	DataTable dt = new DAL.Views.V_Isuses ().Open (ConnectionString' "[ID]' LotteryID' [Name]"' "IsOpened = 0 and State >= 5 and PrintOutType = 102"' "EndTime"); " is 157.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0'); " is 143.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The length of the statement  "		string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>"; " is 125.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' ""' "[ID] = " + IsuseID + " and [Name] = '" + number + "' and LotteryID = " + LotteryID.ToString () + " and IsOpened = 0"' ""); " is 198.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "	T_Isuses.Update (ConnectionString' "[ID] = " + IsuseID + " and [Name] = '" + number + "' and LotteryID = " + LotteryID.ToString ()); " is 132.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "	DataTable dtWinTypesSSL = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' " LotteryID =" + LotteryID.ToString ()' ""); " is 127.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "			DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0); " is 120.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "		DataTable t_dtSchemes = new DAL.Tables.T_Schemes ().Open (ConnectionString' ""' "IsuseID = " + IsuseID + " and WinMoney = 0 and Buyed =1 and  isnull(Identifiers' '') = ''"' ""); " is 177.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "			double WinMoney = t_lb.ComputeWin (t_LotteryNumber' WinNumber.Trim ()' ref t_Description' ref t_WinMoneyNoWithTax' int.Parse (t_dtSchemes.Rows [i] ["PlayTypeID"].ToString ())' WinMoneyListSSL); " is 193.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "				Shove.Database.MSSQL.ExecuteNonQuery (ConnectionString' "update T_Schemes set PreWinMoney = @p1' PreWinMoneyNoWithTax = @p2' WinMoney = @p3' WinMoneyNoWithTax = @p4' WinDescription = @p5 where [ID] = " + t_dtSchemes.Rows [i] ["ID"].ToString ()' new Shove.Database.MSSQL.Parameter ("p1"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p2"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p3"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p4"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p5"' SqlDbType.VarChar' 0' ParameterDirection.Input' t_Description)); " is 1077.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "		string bonusItemXML = Transmessage.Substring (Transmessage.IndexOf ("<bonusQueryResult")' Transmessage.LastIndexOf ("</response>") - Transmessage.IndexOf ("<bonusQueryResult")); " is 177.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "		DataTable dtSchemes = MSSQL.Select (ConnectionString' "SELECT SchemeID' 0 AS AgentID' SchemesMultiple as Multiple' Identifiers FROM V_SchemesSendToCenter WHERE (IsuseID = " + IsuseID + ")"); " is 190.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "			join NewdtScheme in dtSchemes.AsEnumerable () on NewDtTickets.Field<string> ("ticketID") equals NewdtScheme.Field<string> ("Identifiers") " is 137.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "				BonusLevel = t_dtSchemes.Merge (NewDt => NewDt.BonusLevel) + ((t_dtSchemes.Key.Multiple != 1) ? "(" + t_dtSchemes.Key.Multiple.ToString () + "倍)" : "") " is 151.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "				BonusXML += "<Scheme SchemeID=\"" + Scheme.SchemeID.ToString () + "\" WinMoney=\"" + Scheme.Bonus.ToString () + "\" WinDescription=\"" + Scheme.BonusLevel + "\" />"; " is 165.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "		Result = DAL.Procedures.P_ElectronTicketWin (ConnectionString' ref ds' Shove._Convert.StrToLong (IsuseID' 0)' BonusXML' ref ReturnValue' ref ReturnDescription); " is 160.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "			new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ()); " is 155.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "	DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' " LotteryID =" + LotteryID.ToString ()' ""); " is 124.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "	DataTable dtSchemesWithTaskDetails = new DAL.Views.V_Schemes ().Open (ConnectionString' ""' " IsuseName = '" + number + "' and LotteryID = " + LotteryID.ToString () + " and WinMoney = 0  and Buyed = 0 and ID in ( select ID from V_ChaseTaskDetails where IsuseName = '" + number + "' and LotteryID = " + LotteryID.ToString () + ")"' ""); " is 335.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "		double WinMoney = lb.ComputeWin (LotteryNumber' WinNumber.Trim ()' ref Description' ref WinMoneyNoWithTax' int.Parse (dtSchemesWithTaskDetails.Rows [i] ["PlayTypeID"].ToString ())' WinMoneyList); " is 195.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The length of the statement  "			if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtSchemesWithTaskDetails.Rows [i] ["SiteID"].ToString ()' 0)' Shove._Convert.StrToLong (dtSchemesWithTaskDetails.Rows [i] ["ID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescription) < 0) { " is 289.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,ReNotice,The length of the statement  "	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The length of the statement  "		string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0'); " is 143.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The length of the statement  "		string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>"; " is 125.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The length of the statement  "		Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>"; " is 142.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The length of the statement  "			ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds); " is 122.
Long Statement,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The length of the statement  "		return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪"); " is 299.
Long Statement,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Run,The length of the statement  "	//if ((ElectronTicket_HPCQ_Getway == "") || (ElectronTicket_HPCQ_UserName == "") || (ElectronTicket_HPCQ_UserPassword == "")) " is 125.
Long Statement,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Run,The length of the statement  "	//if ((ElectronTicket_HPCQ_Getway == "") || (ElectronTicket_HPCQ_UserName == "") || (ElectronTicket_HPCQ_UserPassword == "")) " is 125.
Long Statement,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The length of the statement  "		DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' ""); " is 184.
Long Statement,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The length of the statement  "		DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' ""); " is 149.
Long Statement,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The length of the statement  "		DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' ""); " is 253.
Long Statement,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The length of the statement  "		long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription); " is 217.
Long Statement,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,InitiateScheme,The length of the statement  "	int Result = DAL.Procedures.P_InitiateScheme (ConnectionString' SiteID' UserID' IsuseID' PlayTypeID' Title' Description' LotteryNumber' UpdateloadFileContent' Multiple' Money' AssureMoney' Share' BuyShare' OpenUsers.Replace ('，'' ''')' SecrecyLevel' 0.04' ref SchemeID' ref ReturnDescription); " is 293.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "		System.Data.SqlClient.SqlConnection conn = Shove.Database.MSSQL.CreateDataConnection<System.Data.SqlClient.SqlConnection> (ConnectionString); " is 141.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "		if (so ["ElectronTicket_HPSH_Status_ON"].ToBoolean (false) && (new DAL.Tables.T_Lotteries ().GetCount (ConnectionString' "PrintOutType = 102") > 0)) { " is 150.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			ElectronTicket_HPSH_Task.ElectronTicket_PrintOut_IDCardNumber = so ["ElectronTicket_PrintOut_IDCardNumber"].ToString (""); " is 122.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			ElectronTicket_HPSH_Task.ElectronTicket_PrintOut_RealityName = so ["ElectronTicket_PrintOut_RealityName"].ToString (""); " is 120.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			ElectronTicket_HPSH_GP_Task.ElectronTicket_PrintOut_AlipayName = so ["ElectronTicket_PrintOut_AlipayName"].ToString (""); " is 121.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			ElectronTicket_HPSH_GP_Task.ElectronTicket_PrintOut_IDCardNumber = so ["ElectronTicket_PrintOut_IDCardNumber"].ToString (""); " is 125.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			ElectronTicket_HPSH_GP_Task.ElectronTicket_PrintOut_RealityName = so ["ElectronTicket_PrintOut_RealityName"].ToString (""); " is 123.
Long Statement,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The length of the statement  "			if ((ElectronTicket_HPSH_Task.ElectronTicket_HPSH_Getway != "") && (ElectronTicket_HPSH_Task.ElectronTicket_HPSH_UserName != "") && (ElectronTicket_HPSH_Task.ElectronTicket_HPSH_UserPassword != "")) { " is 200.
Complex Conditional,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The conditional expression  "(SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)"  is complex.
Complex Conditional,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The conditional expression  "(DateTime.Now.Hour < 9) || (DateTime.Now.Hour > 21) || ((DateTime.Now.Hour > 21) && (DateTime.Now.Minute > 30))"  is complex.
Complex Conditional,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,WriteTickets,The conditional expression  "(SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)"  is complex.
Complex Conditional,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The conditional expression  "(SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)"  is complex.
Complex Conditional,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The conditional expression  "(PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)"  is complex.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AcceptUserHongbaoPromotion,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_AdvertisementsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_3D_Miss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_HotAndCoolAndMiss,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Analysis_SHSSL_WinUsersList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketDXFgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketRfSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_BasketSfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Bqcgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CalculateScore,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CanExpenseBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordAgentAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordGet,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordSetPeriod,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordTryErrorFreeze,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CardPasswordUse,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChasesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ChaseTaskStopWhenWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CheckChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ClearSystemLog,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CompensationRateEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsAdminAccountByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateAllowBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsCalculateBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsDistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommenderBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetCommendSiteBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetDayBuyDetailByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetIncomeListByMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetPerDayTradeSumOfMonthByType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUnionPidTradeSum,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsGetUserBonusScaleList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsMemRecommendWebsiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsPromoterList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleSetting,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetBonusScaleType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsSetUserBonusScale,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTry,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CpsTryHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_CustomFollowSchemesDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Distill,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillNoAccept,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillPaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_DistillQuash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ElectronTicketWin,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChases,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ExecChaseTasks,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FootballLeagueTypeEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_FriendshipLinkEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetAccounts,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountByPid,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountDetailWithUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenue_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountRevenueSite_center,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithCpsUser,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsAccountWithMonth,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsByDay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsInformationByOwnerUserID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsLinkList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberBuyDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsMemberList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPIDBuyDetailByDate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsPopularizeAccountRevenue,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsUnionBusinessList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetCpsWebSiteList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillMoneyAndAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByAccount,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetDistillStatisticByDistillType,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFinanceAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsInitiateSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetFriendsWinInfo,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetNewPayNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetPromoterInfoByIDList,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteInformationByUrl,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetSiteNotificationTemplate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserAccountDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserBankDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserCustomFollowSchemes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserFreezeDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserInformationByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserScoringDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetUserSMSDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_GetWinLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationData,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitializationSiteTemplates,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateChaseTask_Count,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InitiateScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_InquirySchemesHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseBonusesAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseEndTime,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_IsuseUpdate,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_JoinScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Jqsgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Login,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MarketOutlookEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MatchReceive,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_MergeUserDetails,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsAddComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsDeleteComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsEditComments,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_NewsRead,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Quash,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTask,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashChaseTaskDetail,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashScheme,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuashSchemeNoLotteryNumber,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsAnswer,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_QuestionsHandling,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_RebonusShares,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssure,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeAssureMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemeCalculatedBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemePrintOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterAdd_Single,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandle,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SchemesSendToCenterHandleUniteAnte,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoreChange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ScoringExchange,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SelectPaging,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetMaxMultiple,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSchemeOpenUsers,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteSendNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetSiteUrls,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserAcceptNotificationTypes,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SetUserCompetences,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheDelete,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteAfficheEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SiteEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfdg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_spfgg,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_SystemPaulAtTheEnd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_TrendChart_11YDJ_WINNUM,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForBQCSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForEuropeanOdds,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSPF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForSXDS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZJQ,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UpdateIsuseForZCDCSPForZQBF,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAdd,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoney,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserAddMoneyManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserBankDetailEdit,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipay,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipaySuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserDistillPayByAlipayUnsuccess,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByID,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserEditByName,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserLogOut,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserPaySMSCost,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_UserQQBind,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_ViewUserBonus,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_Win,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WinByOpenManual,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteSMS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The method has an empty catch block.
Empty Catch Block,DAL,Procedures,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\DAL.cs,P_WriteStationSMS,The method has an empty catch block.
Empty Catch Block,SLS.Task,Log,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Log.cs,Log,The method has an empty catch block.
Empty Catch Block,SLS.Task,Log,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Log.cs,Log,The method has an empty catch block.
Empty Catch Block,SLS.Task,Log,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Log.cs,Write,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToString,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToBoolean,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToShort,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToInt,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToLong,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToDouble,The method has an empty catch block.
Empty Catch Block,SLS.Task,OptionValue,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Options\OptionValue.cs,ToDateTime,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The method has an empty catch block.
Empty Catch Block,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The method has an empty catch block.
Empty Catch Block,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The method has an empty catch block.
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("CpsTask Stop.");  		log.Write ("CpsTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	#region 20 分钟' 计算佣金  	if (gCount1 >= 60 * 20) {  		gCount1 = 0;  		try {  			CpsCalculateBonus ();  			msg.Send ("SchemeSystemDeal ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  			log.Write ("SchemeSystemDeal is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("CpsTask Stop.");  		log.Write ("CpsTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	#region 20 分钟' 计算佣金  	if (gCount1 >= 60 * 20) {  		gCount1 = 0;  		try {  			CpsCalculateBonus ();  			msg.Send ("SchemeSystemDeal ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  			log.Write ("SchemeSystemDeal is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("CpsTask Stop.");  		log.Write ("CpsTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	#region 20 分钟' 计算佣金  	if (gCount1 >= 60 * 20) {  		gCount1 = 0;  		try {  			CpsCalculateBonus ();  			msg.Send ("SchemeSystemDeal ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  			log.Write ("SchemeSystemDeal is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("CpsTask Stop.");  		log.Write ("CpsTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	#region 20 分钟' 计算佣金  	if (gCount1 >= 60 * 20) {  		gCount1 = 0;  		try {  			CpsCalculateBonus ();  			msg.Send ("SchemeSystemDeal ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  			log.Write ("SchemeSystemDeal is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("CpsTask Stop.");  	log.Write ("CpsTask Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: if (gCount1 >= 60 * 20) {  	gCount1 = 0;  	try {  		CpsCalculateBonus ();  		msg.Send ("SchemeSystemDeal ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  		log.Write ("SchemeSystemDeal is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,CpsTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\CpsTask.cs,Do,The following statement contains a magic number: if (gCount1 >= 60 * 20) {  	gCount1 = 0;  	try {  		CpsCalculateBonus ();  		msg.Send ("SchemeSystemDeal ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("SchemeSystemDeal is Fail: " + e.Message);  		log.Write ("SchemeSystemDeal is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Exit,The following statement contains a magic number: StateService = 2;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: if (StateService == 2) {  	msg.Send ("ElectronTicket_HPSH Task Stop.");  	log.Write ("ElectronTicket_HPSH Task Stop.");  	StateService = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,Do,The following statement contains a magic number: if (gCount1 >= 10 * 1) {  	gCount1 = 0;  	try {  		WriteTickets ();  		// 满员方案拆分为票  		msg.Send ("WriteTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("WriteTickets is Fail: " + e.Message);  		log.Write ("WriteTickets is Fail: " + e.Message);  	}  	try {  		QueryTickets ();  		// 代购票查询  		msg.Send ("QueryTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("QueryTickets is Fail: " + e.Message);  		log.Write ("QueryTickets is Fail: " + e.Message);  	}  	try {  		SendTickets ();  		// 发送代购电子票  		msg.Send ("SendTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("SendTickets is Fail: " + e.Message);  		log.Write ("SendTickets is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	long SchemeID = Shove._Convert.StrToLong (dr ["ID"].ToString ()' -1);  	int LotteryID = Shove._Convert.StrToInt (dr ["LotteryID"].ToString ()' -1);  	string LotterNumber = dr ["LotteryNumber"].ToString ();  	int PlayTypeID = Shove._Convert.StrToInt (dr ["PlayTypeID"].ToString ()' -1);  	int Multiple = Shove._Convert.StrToInt (dr ["Multiple"].ToString ()' -1);  	if ((SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)) {  		msg.Send ("读取方案错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		log.Write ("读取方案错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		continue;  	}  	double Money = 0;  	SLS.Lottery.Ticket[] Tickets = null;  	try {  		Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  	}  	catch (Exception e) {  		msg.Send ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  		log.Write ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  		continue;  	}  	if (Tickets == null) {  		msg.Send ("分解票错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		log.Write ("分解票错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		continue;  	}  	if (Money != Shove._Convert.StrToDouble (dr ["Money"].ToString ()' -1)) {  		msg.Send ("异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		log.Write ("异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		SMS.Eucp.Gateway.CallResult SmsResult = segg.Send ("13537697101"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		if (SmsResult.Code < 0) {  			log.Write ("Send is Fail: " + SmsResult.Description);  		}  		SmsResult = segg.Send ("13612833534"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		continue;  	}  	int TicketPlayTypeID = Tickets [0].PlayTypeID;  	string TicketXML = "<Tickets>";  	foreach (SLS.Lottery.Ticket ticket in Tickets) {  		TicketXML += "<Ticket LotteryNumber=\"" + ticket.Number + "\" Multiple=\"" + ticket.Multiple + "\" Money=\"" + ticket.Money + "\" />";  	}  	TicketXML += "</Tickets>";  	int ReturnValue = 0;  	string ReturnDescription = "";  	int Result = DAL.Procedures.P_SchemesSendToCenterAdd (ConnectionString' SchemeID' TicketPlayTypeID' TicketXML' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("票写入错误(WriteTickets)：方案号：" + SchemeID.ToString () + "，" + ReturnDescription);  		log.Write ("票写入错误(WriteTickets)：方案号：" + SchemeID.ToString () + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The following statement contains a magic number: try {  	Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  }  catch (Exception e) {  	msg.Send ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  	log.Write ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,WriteTickets,The following statement contains a magic number: Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: if (Status == "0000") {  	string DealTime = nodes [k].Attributes ["dealTime"].Value;  	int ReturnValue = 0;  	string ReturnDescription = "";  	int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		System.Threading.Thread.Sleep (1000);  		ReturnValue = 0;  		ReturnDescription = "";  		Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: if ((Result < 0) || (ReturnValue < 0)) {  	msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	System.Threading.Thread.Sleep (1000);  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  	t_SchemesSendToCenter.Sends.Value = Status + 100;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = Status + 100;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: if (Status == "2052") {  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + "1" + (i % 10).ToString ();  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (i % 10 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (i % 10 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (code == "0000") {  	int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		System.Threading.Thread.Sleep (1000);  		ReturnValue = 0;  		ReturnDescription = "";  		Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if ((Result < 0) || (ReturnValue < 0)) {  	msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	System.Threading.Thread.Sleep (1000);  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (code == "2032")// 限号   {  	if (Shove._Convert.StrToInt (Sends' 0) < 99) {  		t_SchemesSendToCenter.Sends.Value = 99;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	}  	else {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (code == "2032")// 限号   {  	if (Shove._Convert.StrToInt (Sends' 0) < 99) {  		t_SchemesSendToCenter.Sends.Value = 99;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	}  	else {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (Shove._Convert.StrToInt (Sends' 0) < 99) {  	t_SchemesSendToCenter.Sends.Value = 99;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  }  else {  	int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: if (Shove._Convert.StrToInt (Sends' 0) < 99) {  	t_SchemesSendToCenter.Sends.Value = 99;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  }  else {  	int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = 99;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,SendTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = 100 + State;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 5;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 6;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 13;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 29;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 58;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 59;  
Magic Number,SLS.Task,ElectronTicket_HPSH_GP,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH_GP.cs,GetLotteryID,The following statement contains a magic number: return 60;  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SendSMSTask Stop.");  		log.Write ("SendSMSTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 5 秒' 遍历待发短信表，发送短信  	if (gCount1 >= 5) {  		gCount1 = 0;  		int SendCount = 0;  		try {  			SendCount = Send ();  			msg.Send ("Send (" + SendCount.ToString () + ")...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Send is Fail: " + e.Message);  			log.Write ("Send is Fail: " + e.Message);  		}  	}  	#endregion  	gCount2++;  	#region 1 分钟' 检索是否有紧急票  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			Shove._IO.IniFile ini = new Shove._IO.IniFile (System.AppDomain.CurrentDomain.BaseDirectory + "Config.ini");  			bool IsSendSMSForSchemeCheck = Shove._Convert.StrToBool (ini.Read ("Options"' "IsSendSMSForSchemeCheck")' false);  			if (IsSendSMSForSchemeCheck) {  				SchemeCheck ();  				msg.Send ("SchemeCheck ...... OK.");  			}  		}  		catch (Exception e) {  			msg.Send ("SchemeCheck is Fail: " + e.Message);  			log.Write ("SchemeCheck is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SendSMSTask Stop.");  		log.Write ("SendSMSTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 5 秒' 遍历待发短信表，发送短信  	if (gCount1 >= 5) {  		gCount1 = 0;  		int SendCount = 0;  		try {  			SendCount = Send ();  			msg.Send ("Send (" + SendCount.ToString () + ")...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Send is Fail: " + e.Message);  			log.Write ("Send is Fail: " + e.Message);  		}  	}  	#endregion  	gCount2++;  	#region 1 分钟' 检索是否有紧急票  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			Shove._IO.IniFile ini = new Shove._IO.IniFile (System.AppDomain.CurrentDomain.BaseDirectory + "Config.ini");  			bool IsSendSMSForSchemeCheck = Shove._Convert.StrToBool (ini.Read ("Options"' "IsSendSMSForSchemeCheck")' false);  			if (IsSendSMSForSchemeCheck) {  				SchemeCheck ();  				msg.Send ("SchemeCheck ...... OK.");  			}  		}  		catch (Exception e) {  			msg.Send ("SchemeCheck is Fail: " + e.Message);  			log.Write ("SchemeCheck is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SendSMSTask Stop.");  		log.Write ("SendSMSTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 5 秒' 遍历待发短信表，发送短信  	if (gCount1 >= 5) {  		gCount1 = 0;  		int SendCount = 0;  		try {  			SendCount = Send ();  			msg.Send ("Send (" + SendCount.ToString () + ")...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Send is Fail: " + e.Message);  			log.Write ("Send is Fail: " + e.Message);  		}  	}  	#endregion  	gCount2++;  	#region 1 分钟' 检索是否有紧急票  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			Shove._IO.IniFile ini = new Shove._IO.IniFile (System.AppDomain.CurrentDomain.BaseDirectory + "Config.ini");  			bool IsSendSMSForSchemeCheck = Shove._Convert.StrToBool (ini.Read ("Options"' "IsSendSMSForSchemeCheck")' false);  			if (IsSendSMSForSchemeCheck) {  				SchemeCheck ();  				msg.Send ("SchemeCheck ...... OK.");  			}  		}  		catch (Exception e) {  			msg.Send ("SchemeCheck is Fail: " + e.Message);  			log.Write ("SchemeCheck is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SendSMSTask Stop.");  		log.Write ("SendSMSTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 5 秒' 遍历待发短信表，发送短信  	if (gCount1 >= 5) {  		gCount1 = 0;  		int SendCount = 0;  		try {  			SendCount = Send ();  			msg.Send ("Send (" + SendCount.ToString () + ")...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Send is Fail: " + e.Message);  			log.Write ("Send is Fail: " + e.Message);  		}  	}  	#endregion  	gCount2++;  	#region 1 分钟' 检索是否有紧急票  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			Shove._IO.IniFile ini = new Shove._IO.IniFile (System.AppDomain.CurrentDomain.BaseDirectory + "Config.ini");  			bool IsSendSMSForSchemeCheck = Shove._Convert.StrToBool (ini.Read ("Options"' "IsSendSMSForSchemeCheck")' false);  			if (IsSendSMSForSchemeCheck) {  				SchemeCheck ();  				msg.Send ("SchemeCheck ...... OK.");  			}  		}  		catch (Exception e) {  			msg.Send ("SchemeCheck is Fail: " + e.Message);  			log.Write ("SchemeCheck is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("SendSMSTask Stop.");  	log.Write ("SendSMSTask Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: if (gCount1 >= 5) {  	gCount1 = 0;  	int SendCount = 0;  	try {  		SendCount = Send ();  		msg.Send ("Send (" + SendCount.ToString () + ")...... OK.");  	}  	catch (Exception e) {  		msg.Send ("Send is Fail: " + e.Message);  		log.Write ("Send is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Do,The following statement contains a magic number: if (gCount2 >= 60 * 1) {  	gCount2 = 0;  	try {  		Shove._IO.IniFile ini = new Shove._IO.IniFile (System.AppDomain.CurrentDomain.BaseDirectory + "Config.ini");  		bool IsSendSMSForSchemeCheck = Shove._Convert.StrToBool (ini.Read ("Options"' "IsSendSMSForSchemeCheck")' false);  		if (IsSendSMSForSchemeCheck) {  			SchemeCheck ();  			msg.Send ("SchemeCheck ...... OK.");  		}  	}  	catch (Exception e) {  		msg.Send ("SchemeCheck is Fail: " + e.Message);  		log.Write ("SchemeCheck is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Send,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	SMS.Eucp.Gateway.CallResult Result = segg.Send (dr ["To"].ToString ()' dr ["Content"].ToString ());  	if (Result.Code < 0) {  		log.Write ("Send is Fail: " + Result.Description);  	}  	else {  		Count++;  	}  	sms.IsSent.Value = true;  	sms.Update (ConnectionString' "[ID] = " + dr ["ID"].ToString ());  	System.Threading.Thread.Sleep (500);  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,Send,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The following statement contains a magic number: if ((DateTime.Now.Hour < 9) || (DateTime.Now.Hour > 21) || ((DateTime.Now.Hour > 21) && (DateTime.Now.Minute > 30))) {  	return;  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The following statement contains a magic number: if ((DateTime.Now.Hour < 9) || (DateTime.Now.Hour > 21) || ((DateTime.Now.Hour > 21) && (DateTime.Now.Minute > 30))) {  	return;  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The following statement contains a magic number: if ((DateTime.Now.Hour < 9) || (DateTime.Now.Hour > 21) || ((DateTime.Now.Hour > 21) && (DateTime.Now.Minute > 30))) {  	return;  }  
Magic Number,SLS.Task,SendSMSTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SendSMSTask.cs,SchemeCheck,The following statement contains a magic number: if ((DateTime.Now.Hour < 9) || (DateTime.Now.Hour > 21) || ((DateTime.Now.Hour > 21) && (DateTime.Now.Minute > 30))) {  	return;  }  
Magic Number,SLS.Task,PublicFunction,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Utility\PublicFunction.cs,Post,The following statement contains a magic number: if (TimeoutSeconds > 0) {  	request.Timeout = 1000 * TimeoutSeconds;  }  
Magic Number,SLS.Task,PublicFunction,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Utility\PublicFunction.cs,Post,The following statement contains a magic number: request.Timeout = 1000 * TimeoutSeconds;  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_HPCQ Task Stop.");  		log.Write ("ElectronTicket_HPCQ Task Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			Send ();  			// 循环发送出票请求  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_HPCQ Task Stop.");  		log.Write ("ElectronTicket_HPCQ Task Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			Send ();  			// 循环发送出票请求  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_HPCQ Task Stop.");  		log.Write ("ElectronTicket_HPCQ Task Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			Send ();  			// 循环发送出票请求  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("ElectronTicket_HPCQ Task Stop.");  	log.Write ("ElectronTicket_HPCQ Task Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Do,The following statement contains a magic number: if (gCount1 >= 10) {  	gCount1 = 0;  	try {  		WriteTickets ();  		// 满员方案拆分为票  		Send ();  		// 循环发送出票请求  	}  	catch {  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,WriteTickets,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	long SchemeID = Shove._Convert.StrToLong (dr ["ID"].ToString ()' -1);  	int LotteryID = Shove._Convert.StrToInt (dr ["LotteryID"].ToString ()' -1);  	string LotterNumber = dr ["LotteryNumber"].ToString ();  	int PlayTypeID = Shove._Convert.StrToInt (dr ["PlayTypeID"].ToString ()' -1);  	int Multiple = Shove._Convert.StrToInt (dr ["Multiple"].ToString ()' -1);  	if ((SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)) {  		log.Write ("向恒朋-重庆电子票网关发送数据出错：读取方案错误。方案号：" + SchemeID.ToString ());  		continue;  	}  	double Money = 0;  	SLS.Lottery.Ticket[] Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPCQ (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  	if (Tickets == null) {  		log.Write ("向恒朋-重庆电子票网关发送数据出错：读取方案错误。方案号：" + SchemeID.ToString ());  		continue;  	}  	if (Money != Shove._Convert.StrToDouble (dr ["Money"].ToString ()' -1)) {  		log.Write ("向恒朋-重庆电子票网关发送数据出错：异常警告！！！！。方案号：" + SchemeID.ToString () + "的购买金额与实际票的金额不符合！！！！");  		continue;  	}  	int Count = 0;  	foreach (SLS.Lottery.Ticket ticket in Tickets) {  		int TicketID = -1;  		//long ID = -1;  		string ReturnDescription = "";  		Count++;  		if (TicketID < 0) {  			log.Write ("向恒朋-重庆电子票网关发送数据出错：部分票写入错误：" + ReturnDescription + "，方案号：" + SchemeID.ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: if ((dt.Rows.Count % 500) != 0) {  	SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  }  else {  	SendCount = dt.Rows.Count / 500;  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: if ((dt.Rows.Count % 500) != 0) {  	SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  }  else {  	SendCount = dt.Rows.Count / 500;  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: if ((dt.Rows.Count % 500) != 0) {  	SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  }  else {  	SendCount = dt.Rows.Count / 500;  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: if ((dt.Rows.Count % 500) != 0) {  	SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  }  else {  	SendCount = dt.Rows.Count / 500;  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: SendCount = (dt.Rows.Count - (dt.Rows.Count % 500)) / 500 + 1;  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: SendCount = dt.Rows.Count / 500;  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int i = 0; i < SendCount; i++) {  	DateTime Now = DateTime.Now;  	string SendedIDList = "";  	string Body = "<body><lotteryRequest>";  	for (int j = i * 500; j < (i * 500) + 500; j++) {  		if (j >= dt.Rows.Count) {  			break;  		}  		DataRow dr = dt.Rows [j];  		Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  		string LotteryNumber = dr ["Ticket"].ToString ();  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  		SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPCQ_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	PublicFunction.Post (ElectronTicket_HPCQ_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")");  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int i = 0; i < SendCount; i++) {  	DateTime Now = DateTime.Now;  	string SendedIDList = "";  	string Body = "<body><lotteryRequest>";  	for (int j = i * 500; j < (i * 500) + 500; j++) {  		if (j >= dt.Rows.Count) {  			break;  		}  		DataRow dr = dt.Rows [j];  		Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  		string LotteryNumber = dr ["Ticket"].ToString ();  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  		SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPCQ_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	PublicFunction.Post (ElectronTicket_HPCQ_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")");  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int i = 0; i < SendCount; i++) {  	DateTime Now = DateTime.Now;  	string SendedIDList = "";  	string Body = "<body><lotteryRequest>";  	for (int j = i * 500; j < (i * 500) + 500; j++) {  		if (j >= dt.Rows.Count) {  			break;  		}  		DataRow dr = dt.Rows [j];  		Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  		string LotteryNumber = dr ["Ticket"].ToString ();  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  		SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPCQ_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	PublicFunction.Post (ElectronTicket_HPCQ_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")");  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int i = 0; i < SendCount; i++) {  	DateTime Now = DateTime.Now;  	string SendedIDList = "";  	string Body = "<body><lotteryRequest>";  	for (int j = i * 500; j < (i * 500) + 500; j++) {  		if (j >= dt.Rows.Count) {  			break;  		}  		DataRow dr = dt.Rows [j];  		Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  		string LotteryNumber = dr ["Ticket"].ToString ();  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  		SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPCQ_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	PublicFunction.Post (ElectronTicket_HPCQ_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")");  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int i = 0; i < SendCount; i++) {  	DateTime Now = DateTime.Now;  	string SendedIDList = "";  	string Body = "<body><lotteryRequest>";  	for (int j = i * 500; j < (i * 500) + 500; j++) {  		if (j >= dt.Rows.Count) {  			break;  		}  		DataRow dr = dt.Rows [j];  		Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  		string LotteryNumber = dr ["Ticket"].ToString ();  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  		SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + i.ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPCQ_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPCQ_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	PublicFunction.Post (ElectronTicket_HPCQ_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1' [DateTime] = GetDate() where [ID] in (" + SendedIDList + ")");  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int j = i * 500; j < (i * 500) + 500; j++) {  	if (j >= dt.Rows.Count) {  		break;  	}  	DataRow dr = dt.Rows [j];  	Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  	Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  	Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  	Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  	string LotteryNumber = dr ["Ticket"].ToString ();  	string[] strs = LotteryNumber.Split ('\n');  	foreach (string str in strs) {  		if (str.Trim () == "") {  			continue;  		}  		Body += "<anteCode>" + str + "</anteCode>";  	}  	Body += "</ticket>";  	SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int j = i * 500; j < (i * 500) + 500; j++) {  	if (j >= dt.Rows.Count) {  		break;  	}  	DataRow dr = dt.Rows [j];  	Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  	Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  	Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  	Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  	string LotteryNumber = dr ["Ticket"].ToString ();  	string[] strs = LotteryNumber.Split ('\n');  	foreach (string str in strs) {  		if (str.Trim () == "") {  			continue;  		}  		Body += "<anteCode>" + str + "</anteCode>";  	}  	Body += "</ticket>";  	SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int j = i * 500; j < (i * 500) + 500; j++) {  	if (j >= dt.Rows.Count) {  		break;  	}  	DataRow dr = dt.Rows [j];  	Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  	Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  	Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  	Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  	string LotteryNumber = dr ["Ticket"].ToString ();  	string[] strs = LotteryNumber.Split ('\n');  	foreach (string str in strs) {  		if (str.Trim () == "") {  			continue;  		}  		Body += "<anteCode>" + str + "</anteCode>";  	}  	Body += "</ticket>";  	SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: for (int j = i * 500; j < (i * 500) + 500; j++) {  	if (j >= dt.Rows.Count) {  		break;  	}  	DataRow dr = dt.Rows [j];  	Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  	Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  	Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetGameName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  	Body += "<userProfile cardType=\"1\" mail=\"" + dr ["Email"].ToString () + "\" cardNumber=\"" + dr ["IDCardNumber"].ToString () + "\" mobile=\"" + dr ["Mobile"].ToString () + "\" realName=\"" + dr ["RealityName"].ToString () + "\" bonusPhone=\"" + dr ["Telephone"].ToString () + "\"/>";  	string LotteryNumber = dr ["Ticket"].ToString ();  	string[] strs = LotteryNumber.Split ('\n');  	foreach (string str in strs) {  		if (str.Trim () == "") {  			continue;  		}  		Body += "<anteCode>" + str + "</anteCode>";  	}  	Body += "</ticket>";  	SendedIDList += ((SendedIDList != "") ? "'" : "") + dr ["ID"].ToString ();  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,Send,The following statement contains a magic number: Body += "<ticket id=\"" + ElectronTicket_HPCQ_UserName + Now.ToString ("yyyyMMdd") + dr ["TicketID"].ToString ().PadLeft (8' '0') + "\"";  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,GetGameName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 28:  	return "ssc";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPCQ.cs,GetGameName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 28:  	return "ssc";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Exit,The following statement contains a magic number: StateService = 2;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: while (true) {  	if (StateService == 2) {  		msg.Send ("ElectronTicket_HPSH Task Stop.");  		log.Write ("ElectronTicket_HPSH Task Stop.");  		StateService = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	gCount2++;  	gCount3++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10 * 1) {  		gCount1 = 0;  		try {  			WriteTickets ();  			// 满员方案拆分为票  			msg.Send ("WriteTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("WriteTickets is Fail: " + e.Message);  			log.Write ("WriteTickets is Fail: " + e.Message);  		}  		try {  			QueryTickets ();  			// 代购票查询  			msg.Send ("QueryTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryTickets is Fail: " + e.Message);  			log.Write ("QueryTickets is Fail: " + e.Message);  		}  		try {  			SendTickets ();  			// 发送代购电子票  			msg.Send ("SendTickets ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("SendTickets is Fail: " + e.Message);  			log.Write ("SendTickets is Fail: " + e.Message);  		}  	}  	#endregion  	#region 2 分钟，查询奖期状态  	if (gCount2 >= 60 * 1) {  		gCount2 = 0;  		try {  			QueryIsuseState ();  			// 查询奖期状态  			msg.Send ("QueryIsuseState ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseState is Fail: " + e.Message);  			log.Write ("QueryIsuseState is Fail: " + e.Message);  		}  	}  	#endregion  	#region 20 分钟，开奖查询  	if (gCount3 >= 60 * 20) {  		gCount3 = 0;  		try {  			QueryIsuseOpen ();  			// 查询奖期开奖结果  			msg.Send ("QueryIsuseOpen ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  			log.Write ("QueryIsuseOpen is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: if (StateService == 2) {  	msg.Send ("ElectronTicket_HPSH Task Stop.");  	log.Write ("ElectronTicket_HPSH Task Stop.");  	StateService = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: if (gCount1 >= 10 * 1) {  	gCount1 = 0;  	try {  		WriteTickets ();  		// 满员方案拆分为票  		msg.Send ("WriteTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("WriteTickets is Fail: " + e.Message);  		log.Write ("WriteTickets is Fail: " + e.Message);  	}  	try {  		QueryTickets ();  		// 代购票查询  		msg.Send ("QueryTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("QueryTickets is Fail: " + e.Message);  		log.Write ("QueryTickets is Fail: " + e.Message);  	}  	try {  		SendTickets ();  		// 发送代购电子票  		msg.Send ("SendTickets ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("SendTickets is Fail: " + e.Message);  		log.Write ("SendTickets is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: if (gCount2 >= 60 * 1) {  	gCount2 = 0;  	try {  		QueryIsuseState ();  		// 查询奖期状态  		msg.Send ("QueryIsuseState ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("QueryIsuseState is Fail: " + e.Message);  		log.Write ("QueryIsuseState is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: if (gCount3 >= 60 * 20) {  	gCount3 = 0;  	try {  		QueryIsuseOpen ();  		// 查询奖期开奖结果  		msg.Send ("QueryIsuseOpen ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  		log.Write ("QueryIsuseOpen is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,Do,The following statement contains a magic number: if (gCount3 >= 60 * 20) {  	gCount3 = 0;  	try {  		QueryIsuseOpen ();  		// 查询奖期开奖结果  		msg.Send ("QueryIsuseOpen ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("QueryIsuseOpen is Fail: " + e.Message);  		log.Write ("QueryIsuseOpen is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	long SchemeID = Shove._Convert.StrToLong (dr ["ID"].ToString ()' -1);  	int LotteryID = Shove._Convert.StrToInt (dr ["LotteryID"].ToString ()' -1);  	string LotterNumber = dr ["LotteryNumber"].ToString ();  	int PlayTypeID = Shove._Convert.StrToInt (dr ["PlayTypeID"].ToString ()' -1);  	int Multiple = Shove._Convert.StrToInt (dr ["Multiple"].ToString ()' -1);  	if ((SchemeID < 0) || (LotteryID < 0) || (PlayTypeID < 0) || (Multiple < 1)) {  		msg.Send ("读取方案错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		log.Write ("读取方案错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		continue;  	}  	double Money = 0;  	SLS.Lottery.Ticket[] Tickets = null;  	try {  		Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  	}  	catch (Exception e) {  		msg.Send ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  		log.Write ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  		continue;  	}  	if (Tickets == null) {  		msg.Send ("分解票错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		log.Write ("分解票错误(WriteTickets)。方案号：" + SchemeID.ToString ());  		continue;  	}  	if (Money != Shove._Convert.StrToDouble (dr ["Money"].ToString ()' -1)) {  		msg.Send ("异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		log.Write ("异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		SMS.Eucp.Gateway.CallResult SmsResult = segg.Send ("13537697101"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		if (SmsResult.Code < 0) {  			log.Write ("Send is Fail: " + SmsResult.Description);  		}  		SmsResult = segg.Send ("13612833534"' "异常警告！！！！(WriteTickets)。方案号： " + SchemeID.ToString () + " 的购买金额与实际票的金额不符合！！！！");  		continue;  	}  	int TicketPlayTypeID = Tickets [0].PlayTypeID;  	string TicketXML = "<Tickets>";  	foreach (SLS.Lottery.Ticket ticket in Tickets) {  		TicketXML += "<Ticket LotteryNumber=\"" + ticket.Number + "\" Multiple=\"" + ticket.Multiple + "\" Money=\"" + ticket.Money + "\" />";  	}  	TicketXML += "</Tickets>";  	int ReturnValue = 0;  	string ReturnDescription = "";  	int Result = DAL.Procedures.P_SchemesSendToCenterAdd (ConnectionString' SchemeID' TicketPlayTypeID' TicketXML' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("票写入错误(WriteTickets)：方案号：" + SchemeID.ToString () + "，" + ReturnDescription);  		log.Write ("票写入错误(WriteTickets)：方案号：" + SchemeID.ToString () + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The following statement contains a magic number: try {  	Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  }  catch (Exception e) {  	msg.Send ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  	log.Write ("拆票错误(WriteTickets)。方案号：" + SchemeID.ToString () + "，" + e.Message);  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,WriteTickets,The following statement contains a magic number: Tickets = new SLS.Lottery () [LotteryID].ToElectronicTicket_HPSH (PlayTypeID' LotterNumber' Multiple' 200' ref Money);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	dtSchemesSendToCenter = new DAL.Tables.T_SchemesSendToCenter ().Open (ConnectionString' "top 1 *"' "schemeid=" + dt.Rows [i] ["SchemeID"].ToString () + " and (Sends > 0) AND (Sends < 100)"' "");  	if (dtSchemesSendToCenter == null) {  		continue;  	}  	if (dtSchemesSendToCenter.Rows.Count < 1) {  		continue;  	}  	System.Threading.Thread.Sleep (1000);  	string ticketid = dtSchemesSendToCenter.Rows [0] ["Identifiers"].ToString ();  	string Body = "<body><ticketQuery>" + "<ticket id=\"" + ticketid + "\"/>" + "</ticketQuery></body>";  	string MessageID = ElectronTicket_HPSH_UserName + DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = DateTime.Now.ToString ("yyyyMMdd") + DateTime.Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>105</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "105"' "transType=105&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=105&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("ticket");  	}  	catch {  	}  	if (nodes == null) {  		continue;  	}  	for (int k = 0; k < nodes.Count; k++) {  		string Identifiers = nodes [k].Attributes ["id"].Value;  		string Status = nodes [k].Attributes ["status"].Value;  		string _Message = nodes [k].Attributes ["message"].Value;  		if (Status == "0000") {  			string DealTime = nodes [k].Attributes ["dealTime"].Value;  			int ReturnValue = 0;  			string ReturnDescription = "";  			int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				System.Threading.Thread.Sleep (1000);  				ReturnValue = 0;  				ReturnDescription = "";  				Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  				if ((Result < 0) || (ReturnValue < 0)) {  					msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  					log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				}  			}  			continue;  		}  		if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  			t_SchemesSendToCenter.Sends.Value = Status + 100;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  		if (Status == "2052") {  			System.Threading.Thread.Sleep (1000);  			continue;  		}  		if (Status == "2032") {  			t_SchemesSendToCenter.Sends.Value = "99";  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: for (int k = 0; k < nodes.Count; k++) {  	string Identifiers = nodes [k].Attributes ["id"].Value;  	string Status = nodes [k].Attributes ["status"].Value;  	string _Message = nodes [k].Attributes ["message"].Value;  	if (Status == "0000") {  		string DealTime = nodes [k].Attributes ["dealTime"].Value;  		int ReturnValue = 0;  		string ReturnDescription = "";  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  				log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  		t_SchemesSendToCenter.Sends.Value = Status + 100;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (Status == "2052") {  		System.Threading.Thread.Sleep (1000);  		continue;  	}  	if (Status == "2032") {  		t_SchemesSendToCenter.Sends.Value = "99";  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: if (Status == "0000") {  	string DealTime = nodes [k].Attributes ["dealTime"].Value;  	int ReturnValue = 0;  	string ReturnDescription = "";  	int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		System.Threading.Thread.Sleep (1000);  		ReturnValue = 0;  		ReturnDescription = "";  		Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  			log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: if ((Result < 0) || (ReturnValue < 0)) {  	msg.Send ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	log.Write ("对所查询到的电子票数据第一次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	System.Threading.Thread.Sleep (1000);  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' Shove._Convert.StrToDateTime (DealTime' DateTime.Now.ToString ())' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  		log.Write ("对所查询到的电子票数据第二次处理出错(QueryTickets)：数据读写错误。票号：" + Identifiers + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: if ("0010 0011 0014 0015 0016 0098 0097 1008 1009 1010 1012 1016 1017 2001 2002 2003 2004 2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031 2040 2041 2042 -1 2043 2044 2046 3000 3002 3004 3005 3011 3012 3013 3014 3015 3016 3017 3018 3100 3101 3202 3203 3204 3205".IndexOf (Status) >= 0) {  	t_SchemesSendToCenter.Sends.Value = Status + 100;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = Status + 100;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: if (Status == "2052") {  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 10 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	DataTable dtSchemesSend = v_SchemesSendToCenter.Open (ConnectionString' ""' "SchemeID=" + dt.Rows [i] ["SchemeID"].ToString () + " and Buyed = 0 and (GetDate() between StartTime and EndTime) and Sends < 99 and HandleResult = 0 and State = 1"' "");  	if (dtSchemesSend == null) {  		msg.Send ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("发送代购票出错(SendTickets)：读取方案错误。方案号：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (dtSchemesSend.Rows.Count < 1) {  		continue;  	}  	string Sends = dtSchemesSend.Rows [0] ["Sends"].ToString ();  	if (MSSQL.ExecuteNonQuery (ConnectionString' "update T_SchemesSendToCenter set Sends = Sends + 1 where SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ()) < 0) {  		msg.Send ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("更新票发送状态时出错(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	string ticketid = "";  	string LotteryNumber = "";  	DateTime Now = DateTime.Now;  	string Body = "<body><lotteryRequest>";  	for (int j = 0; j < dtSchemesSend.Rows.Count; j++) {  		DataRow dr = dtSchemesSend.Rows [j];  		ticketid = dr ["Identifiers"].ToString ();  		Body += "<ticket id=\"" + ticketid + "\"";  		Body += " playType=\"" + dr ["PlayTypeID"].ToString () + "\" money=\"" + double.Parse (dr ["Money"].ToString ()).ToString ("N").Replace ("'"' "") + "\" amount=\"" + dr ["Multiple"].ToString () + "\">";  		Body += "<issue number=\"" + dr ["IsuseName"].ToString () + "\" gameName=\"" + GetLotteryName (int.Parse (dr ["LotteryID"].ToString ())) + "\"/>";  		Body += "<userProfile userName=\"" + ElectronTicket_PrintOut_AlipayName + "\" cardType=\"1\" mail=\"" + ElectronTicket_PrintOut_Email + "\" cardNumber=\"" + ElectronTicket_PrintOut_IDCardNumber + "\" mobile=\"" + ElectronTicket_PrintOut_Mobile + "\" realName=\"" + ElectronTicket_PrintOut_RealityName + "\" bonusPhone=\"" + ElectronTicket_PrintOut_Mobile + "\"/>";  		try {  			LotteryNumber = dr ["Ticket"].ToString ();  		}  		catch {  			continue;  		}  		string[] strs = LotteryNumber.Split ('\n');  		foreach (string str in strs) {  			if (str.Trim () == "") {  				continue;  			}  			Body += "<anteCode>" + str + "</anteCode>";  		}  		Body += "</ticket>";  	}  	Body += "</lotteryRequest></body>";  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>103</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "103"' "transType=103&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=103&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		msg.Send ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		log.Write ("电子票-103 发送失败(SendTickets)。方案ID：" + dt.Rows [i] ["SchemeID"].ToString ());  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] str_s = ReceiveString.Split ('&');  	if ((str_s == null) || (str_s.Length < 1)) {  		continue;  	}  	string TransType = str_s [0];  	string TransMessage = str_s [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("*");  	}  	catch {  		continue;  	}  	string code = "";  	for (int j = 0; j < nodes.Count; j++) {  		if (nodes [j].Name.ToUpper () == "RESPONSE") {  			code = nodes [j].Attributes ["code"].Value;  		}  	}  	int ReturnValue = 0;  	string ReturnDescription = "";  	if (code == "0000") {  		int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			System.Threading.Thread.Sleep (1000);  			ReturnValue = 0;  			ReturnDescription = "";  			Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  				log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			}  		}  		continue;  	}  	int State = 0;  	int SiteID = Shove._Convert.StrToInt (dt.Rows [i] ["SiteID"].ToString ()' 1);  	try {  		State = int.Parse (code);  	}  	catch {  	}  	if (code == "2032")// 限号  	 {  		if (Shove._Convert.StrToInt (Sends' 0) < 99) {  			t_SchemesSendToCenter.Sends.Value = 99;  			t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  		}  		else {  			int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  			if ((Result < 0) || (ReturnValue < 0)) {  				msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  				log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			}  		}  		continue;  	}  	if ("2048 3003 9999 1011".IndexOf (code) >= 0)// 重复发送的投注票  	 {  		continue;  	}  	t_SchemesSendToCenter.Sends.Value = 100 + State;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	if ("2010 2011 2012 2013 2014 2015 2016 2017 2018 2030 2031".IndexOf (code) >= 0) {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (i % 10 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (i % 10 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (code == "0000") {  	int Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		System.Threading.Thread.Sleep (1000);  		ReturnValue = 0;  		ReturnDescription = "";  		Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  			log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if ((Result < 0) || (ReturnValue < 0)) {  	msg.Send ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	log.Write ("对所发送的成功落地的代购票第一次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	System.Threading.Thread.Sleep (1000);  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_SchemesSendToCenterHandleUniteAnte (ConnectionString' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' -1)' DateTime.Now' true' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  		log.Write ("对所发送的成功落地的代购票第二次处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (code == "2032")// 限号   {  	if (Shove._Convert.StrToInt (Sends' 0) < 99) {  		t_SchemesSendToCenter.Sends.Value = 99;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	}  	else {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (code == "2032")// 限号   {  	if (Shove._Convert.StrToInt (Sends' 0) < 99) {  		t_SchemesSendToCenter.Sends.Value = 99;  		t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  	}  	else {  		int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  		if ((Result < 0) || (ReturnValue < 0)) {  			msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  			log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		}  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (Shove._Convert.StrToInt (Sends' 0) < 99) {  	t_SchemesSendToCenter.Sends.Value = 99;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  }  else {  	int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: if (Shove._Convert.StrToInt (Sends' 0) < 99) {  	t_SchemesSendToCenter.Sends.Value = 99;  	t_SchemesSendToCenter.Update (ConnectionString' "SchemeID = " + dt.Rows [i] ["SchemeID"].ToString ());  }  else {  	int Result = DAL.Procedures.P_QuashScheme (ConnectionString' SiteID' Shove._Convert.StrToLong (dt.Rows [i] ["SchemeID"].ToString ()' 0)' true' false' ref ReturnValue' ref ReturnDescription);  	if ((Result < 0) || (ReturnValue < 0)) {  		msg.Send ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  		log.Write ("对所发送落地失败的代购票【作撤单】处理出错(SendTickets)：数据读写错误。票号：" + dt.Rows [i] ["SchemeID"].ToString () + "，" + code + "，" + ReturnDescription);  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = 99;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,SendTickets,The following statement contains a magic number: t_SchemesSendToCenter.Sends.Value = 100 + State;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  	#region 处理结果  	System.Xml.XmlDocument XmlDoc = new XmlDocument ();  	System.Xml.XmlNodeList nodes = null;  	System.Xml.XmlNodeList nodesIssue = null;  	try {  		XmlDoc.Load (new StringReader (TransMessage));  		nodes = XmlDoc.GetElementsByTagName ("response");  		nodesIssue = XmlDoc.GetElementsByTagName ("issue");  	}  	catch {  		continue;  	}  	if (nodes == null) {  		continue;  	}  	if (nodes [0].Attributes ["code"].Value != "0000") {  		continue;  	}  	if (nodesIssue == null) {  		continue;  	}  	DAL.Tables.T_Isuses t_Isuses = new DAL.Tables.T_Isuses ();  	for (int j = 0; j < nodesIssue.Count; j++) {  		LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  		IsuseName = nodesIssue [j].Attributes ["number"].Value;  		string Status = nodesIssue [j].Attributes ["status"].Value;  		int LotteryID = GetLotteryID (LotteryName);  		string WinNumber = "";  		try {  			WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  		}  		catch {  		}  		if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  			continue;  		}  		DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  		if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  			continue;  		}  		bool isHasUpdate = false;  		if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  			t_Isuses.State.Value = Status;  			t_Isuses.StateUpdateTime.Value = DateTime.Now;  			isHasUpdate = true;  		}  		if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  			t_Isuses.WinLotteryNumber.Value = WinNumber;  			isHasUpdate = true;  			if (LotteryID == SLS.Lottery.SHSSL.ID) {  				DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  				double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  				for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  					WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  					WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  				}  				DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  				for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  					string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  					string Description = "";  					double WinMoneyNoWithTax = 0;  					double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  					if (WinMoney < 1) {  						continue;  					}  					int ReturnValue = 0;  					string ReturnDescprtion = "";  					if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  						msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  						log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					}  				}  			}  		}  		if (isHasUpdate) {  			t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if ((t_strs == null) || (t_strs.Length < 2)) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int j = 0; j < nodesIssue.Count; j++) {  	LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  	IsuseName = nodesIssue [j].Attributes ["number"].Value;  	string Status = nodesIssue [j].Attributes ["status"].Value;  	int LotteryID = GetLotteryID (LotteryName);  	string WinNumber = "";  	try {  		WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  	}  	catch {  	}  	if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  		continue;  	}  	DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		continue;  	}  	bool isHasUpdate = false;  	if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  		t_Isuses.State.Value = Status;  		t_Isuses.StateUpdateTime.Value = DateTime.Now;  		isHasUpdate = true;  	}  	if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  		t_Isuses.WinLotteryNumber.Value = WinNumber;  		isHasUpdate = true;  		if (LotteryID == SLS.Lottery.SHSSL.ID) {  			DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  			double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  			for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  				WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  				WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  			}  			DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  			for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  				string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  				string Description = "";  				double WinMoneyNoWithTax = 0;  				double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  				if (WinMoney < 1) {  					continue;  				}  				int ReturnValue = 0;  				string ReturnDescprtion = "";  				if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  					msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				}  			}  		}  	}  	if (isHasUpdate) {  		t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int j = 0; j < nodesIssue.Count; j++) {  	LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  	IsuseName = nodesIssue [j].Attributes ["number"].Value;  	string Status = nodesIssue [j].Attributes ["status"].Value;  	int LotteryID = GetLotteryID (LotteryName);  	string WinNumber = "";  	try {  		WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  	}  	catch {  	}  	if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  		continue;  	}  	DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		continue;  	}  	bool isHasUpdate = false;  	if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  		t_Isuses.State.Value = Status;  		t_Isuses.StateUpdateTime.Value = DateTime.Now;  		isHasUpdate = true;  	}  	if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  		t_Isuses.WinLotteryNumber.Value = WinNumber;  		isHasUpdate = true;  		if (LotteryID == SLS.Lottery.SHSSL.ID) {  			DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  			double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  			for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  				WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  				WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  			}  			DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  			for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  				string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  				string Description = "";  				double WinMoneyNoWithTax = 0;  				double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  				if (WinMoney < 1) {  					continue;  				}  				int ReturnValue = 0;  				string ReturnDescprtion = "";  				if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  					msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				}  			}  		}  	}  	if (isHasUpdate) {  		t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int j = 0; j < nodesIssue.Count; j++) {  	LotteryName = nodesIssue [j].Attributes ["gameName"].Value;  	IsuseName = nodesIssue [j].Attributes ["number"].Value;  	string Status = nodesIssue [j].Attributes ["status"].Value;  	int LotteryID = GetLotteryID (LotteryName);  	string WinNumber = "";  	try {  		WinNumber = GetWinNumber (LotteryID' nodesIssue [j].Attributes ["bonusCode"].Value);  	}  	catch {  	}  	if ((LotteryID < 0) || (String.IsNullOrEmpty (IsuseName))) {  		continue;  	}  	DataTable dtIsuse = t_Isuses.Open (ConnectionString' "ID' State' WinLotteryNumber"' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		continue;  	}  	bool isHasUpdate = false;  	if (dtIsuse.Rows [0] ["State"].ToString () != Status) {  		t_Isuses.State.Value = Status;  		t_Isuses.StateUpdateTime.Value = DateTime.Now;  		isHasUpdate = true;  	}  	if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  		t_Isuses.WinLotteryNumber.Value = WinNumber;  		isHasUpdate = true;  		if (LotteryID == SLS.Lottery.SHSSL.ID) {  			DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  			double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  			for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  				WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  				WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  			}  			DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  			for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  				string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  				string Description = "";  				double WinMoneyNoWithTax = 0;  				double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  				if (WinMoney < 1) {  					continue;  				}  				int ReturnValue = 0;  				string ReturnDescprtion = "";  				if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  					msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  					log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				}  			}  		}  	}  	if (isHasUpdate) {  		t_Isuses.Update (ConnectionString' "LotteryID = " + LotteryID.ToString () + " and [Name] = '" + IsuseName + "'");  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  	t_Isuses.WinLotteryNumber.Value = WinNumber;  	isHasUpdate = true;  	if (LotteryID == SLS.Lottery.SHSSL.ID) {  		DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  		double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  		for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  			WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  			WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  		}  		DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  		for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  			string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  			string Description = "";  			double WinMoneyNoWithTax = 0;  			double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  			if (WinMoney < 1) {  				continue;  			}  			int ReturnValue = 0;  			string ReturnDescprtion = "";  			if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  				msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			}  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  	t_Isuses.WinLotteryNumber.Value = WinNumber;  	isHasUpdate = true;  	if (LotteryID == SLS.Lottery.SHSSL.ID) {  		DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  		double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  		for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  			WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  			WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  		}  		DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  		for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  			string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  			string Description = "";  			double WinMoneyNoWithTax = 0;  			double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  			if (WinMoney < 1) {  				continue;  			}  			int ReturnValue = 0;  			string ReturnDescprtion = "";  			if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  				msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			}  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (!String.IsNullOrEmpty (WinNumber) && (dtIsuse.Rows [0] ["WinLotteryNumber"].ToString () != WinNumber)) {  	t_Isuses.WinLotteryNumber.Value = WinNumber;  	isHasUpdate = true;  	if (LotteryID == SLS.Lottery.SHSSL.ID) {  		DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  		double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  		for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  			WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  			WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  		}  		DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  		for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  			string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  			string Description = "";  			double WinMoneyNoWithTax = 0;  			double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  			if (WinMoney < 1) {  				continue;  			}  			int ReturnValue = 0;  			string ReturnDescprtion = "";  			if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  				msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  				log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			}  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SHSSL.ID) {  	DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  	double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  	for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  		WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  		WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  	}  	DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  	for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  		string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  		string Description = "";  		double WinMoneyNoWithTax = 0;  		double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  		if (WinMoney < 1) {  			continue;  		}  		int ReturnValue = 0;  		string ReturnDescprtion = "";  		if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  			msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SHSSL.ID) {  	DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  	double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  	for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  		WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  		WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  	}  	DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  	for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  		string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  		string Description = "";  		double WinMoneyNoWithTax = 0;  		double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  		if (WinMoney < 1) {  			continue;  		}  		int ReturnValue = 0;  		string ReturnDescprtion = "";  		if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  			msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SHSSL.ID) {  	DataTable dtWinTypes = new DAL.Tables.T_WinTypes ().Open (ConnectionString' ""' "LotteryID =" + LotteryID.ToString ()' "");  	double[] WinMoneyList = new double[dtWinTypes.Rows.Count * 2];  	for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  		WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  		WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  	}  	DataTable dtChaseTaskDetails = new DAL.Tables.T_ChaseTaskDetails ().Open (ConnectionString' ""' "IsuseID=" + dtIsuse.Rows [0] ["ID"].ToString () + " and SchemeID IS NOT NULL"' "");  	for (int k = 0; k < dtChaseTaskDetails.Rows.Count; k++) {  		string LotteryNumber = dtChaseTaskDetails.Rows [k] ["LotteryNumber"].ToString ();  		string Description = "";  		double WinMoneyNoWithTax = 0;  		double WinMoney = new SLS.Lottery () [LotteryID].ComputeWin (LotteryNumber' WinNumber' ref Description' ref WinMoneyNoWithTax' int.Parse (dtChaseTaskDetails.Rows [k] ["PlayTypeID"].ToString ())' WinMoneyList);  		if (WinMoney < 1) {  			continue;  		}  		int ReturnValue = 0;  		string ReturnDescprtion = "";  		if (DAL.Procedures.P_ChaseTaskStopWhenWin (ConnectionString' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SiteID"].ToString ()' 1)' Shove._Convert.StrToLong (dtChaseTaskDetails.Rows [k] ["SchemeID"].ToString ()' 0)' WinMoney' ref ReturnValue' ref ReturnDescprtion) < 0) {  			msg.Send ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  			log.Write ("电子票撤销追号错误_P_ChaseTaskStopWhenWin。");  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  	WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  	WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: for (int k = 0; k < dtWinTypes.Rows.Count; k++) {  	WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  	WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: WinMoneyList [k * 2] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoney"].ToString ()' 1);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseState,The following statement contains a magic number: WinMoneyList [k * 2 + 1] = Shove._Convert.StrToDouble (dtWinTypes.Rows [k] ["DefaultMoneyNoWithTax"].ToString ()' 1);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	string IsuseID = dt.Rows [i] ["ID"].ToString ();  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["LotteryID"].ToString ()' 0));  	string IsuseName = dt.Rows [i] ["Name"].ToString ();  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><bonusQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></bonusQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>106</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "106"' "transType=106&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=106&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	GetSprize (IsuseID' TransMessage);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: if ((t_strs == null) || (t_strs.Length < 2)) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,QueryIsuseOpen,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((dtWinTypesSSL != null) && dtWinTypesSSL.Rows.Count > 0) {  	double[] WinMoneyListSSL = new double[dtWinTypesSSL.Rows.Count * 2];  	double DefaultMoneySSL = 0;  	double DefaultMoneyNoWithTaxSSL = 0;  	for (int i = 0; i < dtWinTypesSSL.Rows.Count; i++) {  		DefaultMoneySSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoney"].ToString ()' 0);  		DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  		WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  		WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  	}  	DataTable t_dtSchemes = new DAL.Tables.T_Schemes ().Open (ConnectionString' ""' "IsuseID = " + IsuseID + " and WinMoney = 0 and Buyed =1 and  isnull(Identifiers' '') = ''"' "");  	string t_LotteryNumber = "";  	SLS.Lottery.LotteryBase t_lb = new SLS.Lottery () [LotteryID];  	string t_Description = "";  	double t_WinMoneyNoWithTax = 0;  	for (int i = 0; i < t_dtSchemes.Rows.Count; i++) {  		t_LotteryNumber = t_dtSchemes.Rows [i] ["LotteryNumber"].ToString ();  		t_Description = "";  		t_WinMoneyNoWithTax = 0;  		double WinMoney = t_lb.ComputeWin (t_LotteryNumber' WinNumber.Trim ()' ref t_Description' ref t_WinMoneyNoWithTax' int.Parse (t_dtSchemes.Rows [i] ["PlayTypeID"].ToString ())' WinMoneyListSSL);  		if (WinMoney > 0) {  			Shove.Database.MSSQL.ExecuteNonQuery (ConnectionString' "update T_Schemes set PreWinMoney = @p1' PreWinMoneyNoWithTax = @p2' WinMoney = @p3' WinMoneyNoWithTax = @p4' WinDescription = @p5 where [ID] = " + t_dtSchemes.Rows [i] ["ID"].ToString ()' new Shove.Database.MSSQL.Parameter ("p1"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p2"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p3"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p4"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p5"' SqlDbType.VarChar' 0' ParameterDirection.Input' t_Description));  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((dtWinTypesSSL != null) && dtWinTypesSSL.Rows.Count > 0) {  	double[] WinMoneyListSSL = new double[dtWinTypesSSL.Rows.Count * 2];  	double DefaultMoneySSL = 0;  	double DefaultMoneyNoWithTaxSSL = 0;  	for (int i = 0; i < dtWinTypesSSL.Rows.Count; i++) {  		DefaultMoneySSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoney"].ToString ()' 0);  		DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  		WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  		WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  	}  	DataTable t_dtSchemes = new DAL.Tables.T_Schemes ().Open (ConnectionString' ""' "IsuseID = " + IsuseID + " and WinMoney = 0 and Buyed =1 and  isnull(Identifiers' '') = ''"' "");  	string t_LotteryNumber = "";  	SLS.Lottery.LotteryBase t_lb = new SLS.Lottery () [LotteryID];  	string t_Description = "";  	double t_WinMoneyNoWithTax = 0;  	for (int i = 0; i < t_dtSchemes.Rows.Count; i++) {  		t_LotteryNumber = t_dtSchemes.Rows [i] ["LotteryNumber"].ToString ();  		t_Description = "";  		t_WinMoneyNoWithTax = 0;  		double WinMoney = t_lb.ComputeWin (t_LotteryNumber' WinNumber.Trim ()' ref t_Description' ref t_WinMoneyNoWithTax' int.Parse (t_dtSchemes.Rows [i] ["PlayTypeID"].ToString ())' WinMoneyListSSL);  		if (WinMoney > 0) {  			Shove.Database.MSSQL.ExecuteNonQuery (ConnectionString' "update T_Schemes set PreWinMoney = @p1' PreWinMoneyNoWithTax = @p2' WinMoney = @p3' WinMoneyNoWithTax = @p4' WinDescription = @p5 where [ID] = " + t_dtSchemes.Rows [i] ["ID"].ToString ()' new Shove.Database.MSSQL.Parameter ("p1"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p2"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p3"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p4"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p5"' SqlDbType.VarChar' 0' ParameterDirection.Input' t_Description));  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((dtWinTypesSSL != null) && dtWinTypesSSL.Rows.Count > 0) {  	double[] WinMoneyListSSL = new double[dtWinTypesSSL.Rows.Count * 2];  	double DefaultMoneySSL = 0;  	double DefaultMoneyNoWithTaxSSL = 0;  	for (int i = 0; i < dtWinTypesSSL.Rows.Count; i++) {  		DefaultMoneySSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoney"].ToString ()' 0);  		DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  		WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  		WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  	}  	DataTable t_dtSchemes = new DAL.Tables.T_Schemes ().Open (ConnectionString' ""' "IsuseID = " + IsuseID + " and WinMoney = 0 and Buyed =1 and  isnull(Identifiers' '') = ''"' "");  	string t_LotteryNumber = "";  	SLS.Lottery.LotteryBase t_lb = new SLS.Lottery () [LotteryID];  	string t_Description = "";  	double t_WinMoneyNoWithTax = 0;  	for (int i = 0; i < t_dtSchemes.Rows.Count; i++) {  		t_LotteryNumber = t_dtSchemes.Rows [i] ["LotteryNumber"].ToString ();  		t_Description = "";  		t_WinMoneyNoWithTax = 0;  		double WinMoney = t_lb.ComputeWin (t_LotteryNumber' WinNumber.Trim ()' ref t_Description' ref t_WinMoneyNoWithTax' int.Parse (t_dtSchemes.Rows [i] ["PlayTypeID"].ToString ())' WinMoneyListSSL);  		if (WinMoney > 0) {  			Shove.Database.MSSQL.ExecuteNonQuery (ConnectionString' "update T_Schemes set PreWinMoney = @p1' PreWinMoneyNoWithTax = @p2' WinMoney = @p3' WinMoneyNoWithTax = @p4' WinDescription = @p5 where [ID] = " + t_dtSchemes.Rows [i] ["ID"].ToString ()' new Shove.Database.MSSQL.Parameter ("p1"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p2"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p3"' SqlDbType.Money' 0' ParameterDirection.Input' WinMoney * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p4"' SqlDbType.Money' 0' ParameterDirection.Input' t_WinMoneyNoWithTax * Shove._Convert.StrToInt (t_dtSchemes.Rows [i] ["Multiple"].ToString ()' 1))' new Shove.Database.MSSQL.Parameter ("p5"' SqlDbType.VarChar' 0' ParameterDirection.Input' t_Description));  			continue;  		}  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: for (int i = 0; i < dtWinTypesSSL.Rows.Count; i++) {  	DefaultMoneySSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoney"].ToString ()' 0);  	DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  	WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  	WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: for (int i = 0; i < dtWinTypesSSL.Rows.Count; i++) {  	DefaultMoneySSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoney"].ToString ()' 0);  	DefaultMoneyNoWithTaxSSL = Shove._Convert.StrToDouble (dtWinTypesSSL.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  	WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  	WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: WinMoneyListSSL [i * 2] = DefaultMoneySSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: WinMoneyListSSL [i * 2 + 1] = DefaultMoneyNoWithTaxSSL == 0 ? 1 : DefaultMoneyNoWithTaxSSL;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((nodesBonusItem != null) && (nodesBonusItem.Count > 0)) {  	string bonusItemXML = Transmessage.Substring (Transmessage.IndexOf ("<bonusQueryResult")' Transmessage.LastIndexOf ("</response>") - Transmessage.IndexOf ("<bonusQueryResult"));  	DataSet dsXML = new DataSet ();  	try {  		dsXML.ReadXml (new StringReader (bonusItemXML));  	}  	catch (Exception e) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期解析开奖数据错误：" + e.Message);  		return;  	}  	if ((dsXML == null) || (dsXML.Tables.Count < 3)) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期开奖数据格式不符合要求。");  		return;  	}  	DataTable dtTickets = dsXML.Tables [2];  	DataTable dtSchemes = MSSQL.Select (ConnectionString' "SELECT SchemeID' 0 AS AgentID' SchemesMultiple as Multiple' Identifiers FROM V_SchemesSendToCenter WHERE (IsuseID = " + IsuseID + ")");  	if (dtSchemes == null) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期，读取本地方案错误。");  		return;  	}  	try {  		var query1 = from NewDtTickets in dtTickets.AsEnumerable ()  		join NewdtScheme in dtSchemes.AsEnumerable () on NewDtTickets.Field<string> ("ticketID") equals NewdtScheme.Field<string> ("Identifiers")  		select new {  			ID = NewdtScheme.Field<long> ("SchemeID")'  			AgentID = NewdtScheme.Field<long> ("AgentID")'  			Multiple = NewdtScheme.Field<int> ("Multiple")'  			Bonus = Shove._Convert.StrToDouble (NewDtTickets.Field<string> ("money")' 0)'  			BonusLevel = NewDtTickets.Field<string> ("bonusLevel")'  			Size = Shove._Convert.StrToInt (NewDtTickets.Field<string> ("size")' 1)  		};  		var query2 = from NewDt in query1.AsQueryable ()  		group NewDt by new {  			NewDt.ID'  			NewDt.BonusLevel'  			NewDt.AgentID'  			NewDt.Multiple  		} into gg  		select new {  			ID = gg.Key.ID'  			AgentID = gg.Key.AgentID'  			Multiple = gg.Key.Multiple'  			Bonus = gg.Sum (NewDt => NewDt.Bonus)'  			BonusLevel = GetSchemeWinDescription (gg.Key.BonusLevel' LotteryID' (gg.Sum (NewDt => NewDt.Size) / gg.Key.Multiple))  		};  		var query3 = from NewDt in query2.AsQueryable ()  		group NewDt by new {  			NewDt.ID'  			NewDt.Multiple'  			NewDt.AgentID  		} into t_dtSchemes  		select new {  			SchemeID = t_dtSchemes.Key.ID'  			AgentID = t_dtSchemes.Key.AgentID'  			Multiple = t_dtSchemes.Key.Multiple'  			Bonus = t_dtSchemes.Sum (NewDt => NewDt.Bonus)'  			BonusLevel = t_dtSchemes.Merge (NewDt => NewDt.BonusLevel) + ((t_dtSchemes.Key.Multiple != 1) ? "(" + t_dtSchemes.Key.Multiple.ToString () + "倍)" : "")  		};  		foreach (var Scheme in query3) {  			BonusXML += "<Scheme SchemeID=\"" + Scheme.SchemeID.ToString () + "\" WinMoney=\"" + Scheme.Bonus.ToString () + "\" WinDescription=\"" + Scheme.BonusLevel + "\" />";  		}  	}  	catch (Exception e) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期详细中奖数据解析错误：" + e.Message);  		return;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((nodesBonusItem != null) && (nodesBonusItem.Count > 0)) {  	string bonusItemXML = Transmessage.Substring (Transmessage.IndexOf ("<bonusQueryResult")' Transmessage.LastIndexOf ("</response>") - Transmessage.IndexOf ("<bonusQueryResult"));  	DataSet dsXML = new DataSet ();  	try {  		dsXML.ReadXml (new StringReader (bonusItemXML));  	}  	catch (Exception e) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期解析开奖数据错误：" + e.Message);  		return;  	}  	if ((dsXML == null) || (dsXML.Tables.Count < 3)) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期开奖数据格式不符合要求。");  		return;  	}  	DataTable dtTickets = dsXML.Tables [2];  	DataTable dtSchemes = MSSQL.Select (ConnectionString' "SELECT SchemeID' 0 AS AgentID' SchemesMultiple as Multiple' Identifiers FROM V_SchemesSendToCenter WHERE (IsuseID = " + IsuseID + ")");  	if (dtSchemes == null) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期，读取本地方案错误。");  		return;  	}  	try {  		var query1 = from NewDtTickets in dtTickets.AsEnumerable ()  		join NewdtScheme in dtSchemes.AsEnumerable () on NewDtTickets.Field<string> ("ticketID") equals NewdtScheme.Field<string> ("Identifiers")  		select new {  			ID = NewdtScheme.Field<long> ("SchemeID")'  			AgentID = NewdtScheme.Field<long> ("AgentID")'  			Multiple = NewdtScheme.Field<int> ("Multiple")'  			Bonus = Shove._Convert.StrToDouble (NewDtTickets.Field<string> ("money")' 0)'  			BonusLevel = NewDtTickets.Field<string> ("bonusLevel")'  			Size = Shove._Convert.StrToInt (NewDtTickets.Field<string> ("size")' 1)  		};  		var query2 = from NewDt in query1.AsQueryable ()  		group NewDt by new {  			NewDt.ID'  			NewDt.BonusLevel'  			NewDt.AgentID'  			NewDt.Multiple  		} into gg  		select new {  			ID = gg.Key.ID'  			AgentID = gg.Key.AgentID'  			Multiple = gg.Key.Multiple'  			Bonus = gg.Sum (NewDt => NewDt.Bonus)'  			BonusLevel = GetSchemeWinDescription (gg.Key.BonusLevel' LotteryID' (gg.Sum (NewDt => NewDt.Size) / gg.Key.Multiple))  		};  		var query3 = from NewDt in query2.AsQueryable ()  		group NewDt by new {  			NewDt.ID'  			NewDt.Multiple'  			NewDt.AgentID  		} into t_dtSchemes  		select new {  			SchemeID = t_dtSchemes.Key.ID'  			AgentID = t_dtSchemes.Key.AgentID'  			Multiple = t_dtSchemes.Key.Multiple'  			Bonus = t_dtSchemes.Sum (NewDt => NewDt.Bonus)'  			BonusLevel = t_dtSchemes.Merge (NewDt => NewDt.BonusLevel) + ((t_dtSchemes.Key.Multiple != 1) ? "(" + t_dtSchemes.Key.Multiple.ToString () + "倍)" : "")  		};  		foreach (var Scheme in query3) {  			BonusXML += "<Scheme SchemeID=\"" + Scheme.SchemeID.ToString () + "\" WinMoney=\"" + Scheme.Bonus.ToString () + "\" WinDescription=\"" + Scheme.BonusLevel + "\" />";  		}  	}  	catch (Exception e) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期详细中奖数据解析错误：" + e.Message);  		return;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if ((dsXML == null) || (dsXML.Tables.Count < 3)) {  	new Log ("ElectronTicket\\HPSH").Write ("电子票开奖，第 " + number + " 期开奖数据格式不符合要求。");  	return;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: while ((Result < 0) && (Times < 5)) {  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_ElectronTicketWin (ConnectionString' ref ds' Shove._Convert.StrToLong (IsuseID' 0)' BonusXML' ref ReturnValue' ref ReturnDescription);  	if (Result < 0) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ());  		Times++;  		if (Times < 5) {  			System.Threading.Thread.Sleep (10000);  		}  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: while ((Result < 0) && (Times < 5)) {  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_ElectronTicketWin (ConnectionString' ref ds' Shove._Convert.StrToLong (IsuseID' 0)' BonusXML' ref ReturnValue' ref ReturnDescription);  	if (Result < 0) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ());  		Times++;  		if (Times < 5) {  			System.Threading.Thread.Sleep (10000);  		}  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: while ((Result < 0) && (Times < 5)) {  	ReturnValue = 0;  	ReturnDescription = "";  	Result = DAL.Procedures.P_ElectronTicketWin (ConnectionString' ref ds' Shove._Convert.StrToLong (IsuseID' 0)' BonusXML' ref ReturnValue' ref ReturnDescription);  	if (Result < 0) {  		new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ());  		Times++;  		if (Times < 5) {  			System.Threading.Thread.Sleep (10000);  		}  		continue;  	}  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if (Result < 0) {  	new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ());  	Times++;  	if (Times < 5) {  		System.Threading.Thread.Sleep (10000);  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if (Result < 0) {  	new Log ("ElectronTicket\\HPSH").Write ("电子票第 " + (Times + 1).ToString () + " 次派奖出现错误(IsuseOpenNotice) 期号为: " + number + "，彩种为: " + LotteryID.ToString ());  	Times++;  	if (Times < 5) {  		System.Threading.Thread.Sleep (10000);  	}  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if (Times < 5) {  	System.Threading.Thread.Sleep (10000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: if (Times < 5) {  	System.Threading.Thread.Sleep (10000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: System.Threading.Thread.Sleep (10000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: for (int i = 0; i < dtWinTypes.Rows.Count; i++) {  	DefaultMoney = Shove._Convert.StrToDouble (dtWinTypes.Rows [i] ["DefaultMoney"].ToString ()' 0);  	DefaultMoneyNoWithTax = Shove._Convert.StrToDouble (dtWinTypes.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  	WinMoneyList [i * 2] = DefaultMoney == 0 ? 1 : DefaultMoneyNoWithTax;  	WinMoneyList [i * 2 + 1] = DefaultMoneyNoWithTax == 0 ? 1 : DefaultMoneyNoWithTax;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: for (int i = 0; i < dtWinTypes.Rows.Count; i++) {  	DefaultMoney = Shove._Convert.StrToDouble (dtWinTypes.Rows [i] ["DefaultMoney"].ToString ()' 0);  	DefaultMoneyNoWithTax = Shove._Convert.StrToDouble (dtWinTypes.Rows [i] ["DefaultMoneyNoWithTax"].ToString ()' 0);  	WinMoneyList [i * 2] = DefaultMoney == 0 ? 1 : DefaultMoneyNoWithTax;  	WinMoneyList [i * 2 + 1] = DefaultMoneyNoWithTax == 0 ? 1 : DefaultMoneyNoWithTax;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: WinMoneyList [i * 2] = DefaultMoney == 0 ? 1 : DefaultMoneyNoWithTax;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetSprize,The following statement contains a magic number: WinMoneyList [i * 2 + 1] = DefaultMoneyNoWithTax == 0 ? 1 : DefaultMoneyNoWithTax;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	if (i % 100 == 0) {  		System.Threading.Thread.Sleep (1000);  	}  	#region 查询奖期  	string LotteryName = GetLotteryName (Shove._Convert.StrToInt (dt.Rows [i] ["ID"].ToString ()' 0));  	string IsuseName = "";  	DateTime Now = DateTime.Now;  	string MessageID = ElectronTicket_HPSH_UserName + Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss") + (i % 100).ToString ().PadLeft (2' '0');  	string Body = "<body><issueQuery><issue gameName=\"" + LotteryName + "\" number=\"" + IsuseName + "\"/></issueQuery></body>";  	string TimeStamp = Now.ToString ("yyyyMMdd") + Now.ToString ("HHmmss");  	string Message = "<?xml version=\"1.0\" encoding=\"GBK\"?>";  	Message += "<message version=\"1.0\" id=\"" + MessageID + "\">";  	Message += "<header>";  	Message += "<messengerID>" + ElectronTicket_HPSH_UserName + "</messengerID>";  	Message += "<timestamp>" + TimeStamp + "</timestamp>";  	Message += "<transactionType>102</transactionType>";  	Message += "<digest>" + Shove._Security.Encrypt.MD5 (MessageID + TimeStamp + ElectronTicket_HPSH_UserPassword + Body' "gb2312") + "</digest>";  	Message += "</header>";  	Message += Body;  	Message += "</message>";  	WriteElectronTicketLog (true' "102"' "transType=102&transMessage=" + Message);  	string ReceiveString = "";  	try {  		ReceiveString = PublicFunction.Post (ElectronTicket_HPSH_Getway' "transType=102&transMessage=" + Message' TimeoutSeconds);  	}  	catch {  		continue;  	}  	if (ReceiveString.Length <= 10) {  		continue;  	}  	string[] t_strs = ReceiveString.Split ('&');  	if ((t_strs == null) || (t_strs.Length < 2)) {  		continue;  	}  	string TransType = t_strs [0];  	string TransMessage = t_strs [1];  	TransType = TransType.Substring (10);  	TransMessage = TransMessage.Substring (13);  	WriteElectronTicketLog (false' TransType' ReceiveString);  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: if (i % 100 == 0) {  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: if (ReceiveString.Length <= 10) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: if ((t_strs == null) || (t_strs.Length < 2)) {  	continue;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: TransType = TransType.Substring (10);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryIsuses,The following statement contains a magic number: TransMessage = TransMessage.Substring (13);  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryName,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return "ssq";  case 6:  	return "3d";  case 13:  	return "307";  case 29:  	return "ssl";  case 58:  	return "601";  case 59:  	return "155";  case 60:  	return "4d";  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: switch (LotteryName) {  case "ssq":  	return 5;  case "3d":  	return 6;  case "307":  	return 13;  case "ssl":  	return 29;  case "601":  	return 58;  case "155":  	return 59;  case "4d":  	return 60;  default:  	return -1;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 5;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 6;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 13;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 29;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 58;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 59;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetLotteryID,The following statement contains a magic number: return 60;  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinNumber,The following statement contains a magic number: switch (LotteryID) {  case 5:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 6:  	return WinNumber.Replace ("'"' "");  case 13:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " + ");  case 29:  	return WinNumber.Replace ("'"' "");  case 58:  	return WinNumber.Replace ("'"' "").Replace ("#01"' "+鼠").Replace ("#02"' "+牛").Replace ("#03"' "+虎").Replace ("#04"' "+兔").Replace ("#05"' "+龙").Replace ("#06"' "+蛇").Replace ("#07"' "+马").Replace ("#08"' "+羊").Replace ("#09"' "+猴").Replace ("#10"' "+鸡").Replace ("#11"' "+狗").Replace ("#12"' "+猪");  case 59:  	return WinNumber.Replace ("'"' " ").Replace ("#"' " ");  case 60:  	return WinNumber.Replace ("'"' "");  default:  	return WinNumber;  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_HPSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\HPSH.cs,GetWinDescription,The following statement contains a magic number: switch (LotteryID) {  case 5:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "快乐星期天";  	default:  		return "";  	}  case 6:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组3奖";  	case "3":  		return "组6奖";  	default:  		return "";  	}  case 13:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	case "7":  		return "七等奖";  	default:  		return "";  	}  case 29:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组三奖";  	case "3":  		return "组六奖";  	case "4":  		return "前二奖";  	case "5":  		return "后二奖";  	case "6":  		return "前一奖";  	case "7":  		return "后一奖";  	default:  		return "";  	}  case 58:  	switch (Rank) {  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "三等奖";  	case "4":  		return "四等奖";  	case "5":  		return "五等奖";  	case "6":  		return "六等奖";  	default:  		return "";  	}  case 59:  	switch (Rank) {  	case "0":  		return "特等奖";  	case "1":  		return "一等奖";  	case "2":  		return "二等奖";  	case "3":  		return "派送奖";  	default:  		return "";  	}  case 60:  	switch (Rank) {  	case "1":  		return "直选奖";  	case "2":  		return "组四奖";  	case "3":  		return "组六奖";  	case "4":  		return "组12奖";  	case "5":  		return "组24奖";  	default:  		return "";  	}  default:  	return "";  }  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGCQ Stop.");  		log.Write ("ElectronTicket_XGCQ Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGCQ Stop.");  		log.Write ("ElectronTicket_XGCQ Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGCQ Stop.");  		log.Write ("ElectronTicket_XGCQ Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("ElectronTicket_XGCQ Stop.");  	log.Write ("ElectronTicket_XGCQ Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_XGCQ,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGCQ.cs,Do,The following statement contains a magic number: if (gCount1 >= 10) {  	gCount1 = 0;  	try {  		Send ();  	}  	catch {  	}  }  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGSH Stop.");  		log.Write ("ElectronTicket_XGSH Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGSH Stop.");  		log.Write ("ElectronTicket_XGSH Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("ElectronTicket_XGSH Stop.");  		log.Write ("ElectronTicket_XGSH Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 10 秒，发送电子票数据  	if (gCount1 >= 10) {  		gCount1 = 0;  		try {  			Send ();  		}  		catch {  		}  	}  	#endregion  }  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("ElectronTicket_XGSH Stop.");  	log.Write ("ElectronTicket_XGSH Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,ElectronTicket_XGSH,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\ElectronTicket\XGSH.cs,Do,The following statement contains a magic number: if (gCount1 >= 10) {  	gCount1 = 0;  	try {  		Send ();  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Exit,The following statement contains a magic number: State = 2;  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SmsBettingTask Stop.");  		log.Write ("SmsBettingTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 30 秒' 接收短信，解析投注  	if (gCount1 >= 30) {  		gCount1 = 0;  		try {  			Receive ();  			msg.Send ("Receive ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Receive is Fail: " + e.Message);  			log.Write ("Receive is Fail: " + e.Message);  		}  		try {  			Betting ();  			msg.Send ("Betting ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Betting is Fail: " + e.Message);  			log.Write ("Betting is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SmsBettingTask Stop.");  		log.Write ("SmsBettingTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 30 秒' 接收短信，解析投注  	if (gCount1 >= 30) {  		gCount1 = 0;  		try {  			Receive ();  			msg.Send ("Receive ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Receive is Fail: " + e.Message);  			log.Write ("Receive is Fail: " + e.Message);  		}  		try {  			Betting ();  			msg.Send ("Betting ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Betting is Fail: " + e.Message);  			log.Write ("Betting is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: while (true) {  	if (State == 2) {  		msg.Send ("SmsBettingTask Stop.");  		log.Write ("SmsBettingTask Stop.");  		State = 0;  		Stop ();  		return;  	}  	System.Threading.Thread.Sleep (1000);  	// 1秒为单位  	gCount1++;  	#region 30 秒' 接收短信，解析投注  	if (gCount1 >= 30) {  		gCount1 = 0;  		try {  			Receive ();  			msg.Send ("Receive ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Receive is Fail: " + e.Message);  			log.Write ("Receive is Fail: " + e.Message);  		}  		try {  			Betting ();  			msg.Send ("Betting ...... OK.");  		}  		catch (Exception e) {  			msg.Send ("Betting is Fail: " + e.Message);  			log.Write ("Betting is Fail: " + e.Message);  		}  	}  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: if (State == 2) {  	msg.Send ("SmsBettingTask Stop.");  	log.Write ("SmsBettingTask Stop.");  	State = 0;  	Stop ();  	return;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Do,The following statement contains a magic number: if (gCount1 >= 30) {  	gCount1 = 0;  	try {  		Receive ();  		msg.Send ("Receive ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("Receive is Fail: " + e.Message);  		log.Write ("Receive is Fail: " + e.Message);  	}  	try {  		Betting ();  		msg.Send ("Betting ...... OK.");  	}  	catch (Exception e) {  		msg.Send ("Betting is Fail: " + e.Message);  		log.Write ("Betting is Fail: " + e.Message);  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	string ID = dr ["ID"].ToString ();  	string Mobile = dr ["From"].ToString ().Trim ();  	string Content = Shove._Convert.ToDBC (dr ["Content"].ToString ()).Trim ();  	if ((Mobile == "") || (Content == "")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1000)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	string[] Contents = Content.Split (';');  	if ((Contents == null) || (Contents.Length != 6)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 1;501;1;1;010203040506+01|010203040506+01;#2                          站点ID;玩法ID;总份数;认购份数;号码|号码;#倍数  	long SiteID = Shove._Convert.StrToLong (Contents [0]' -1);  	if (SiteID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1002)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	if (new DAL.Tables.T_Sites ().GetCount (ConnectionString' "[ID] = " + SiteID.ToString ()) < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1003)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	#region 投注  	if (!Contents [5].StartsWith ("#")) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int PlayTypeID = Shove._Convert.StrToInt (Contents [1]' -1);  	int Share = Shove._Convert.StrToInt (Contents [2]' -1);  	int BuyShare = Shove._Convert.StrToInt (Contents [3]' -1);  	string LotteryNumber = Contents [4].Trim ();  	int Multiple = Shove._Convert.StrToInt (Contents [5].Substring (1' Contents [5].Length - 1)' -1);  	if ((PlayTypeID < 0) || (BuyShare < 0) || (Share < BuyShare) || (LotteryNumber == "") || (Multiple < 0)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1005)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 根据手机获取用户  	DataTable dtUsers = new DAL.Tables.T_Users ().Open (ConnectionString' "[ID]' Balance"' "SiteID = " + SiteID.ToString () + " and Mobile = '" + Mobile + "' and isMobileValided = 1"' "");  	if ((dtUsers == null) || (dtUsers.Rows.Count != 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1006)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long UserID = Shove._Convert.StrToLong (dtUsers.Rows [0] ["ID"].ToString ()' -1);  	double Balance = Shove._Convert.StrToDouble (dtUsers.Rows [0] ["Balance"].ToString ()' 0);  	if (UserID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "用户不存在(1007)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 获取彩种、同时也校验了玩法  	DataTable dtLottery = new DAL.Tables.T_PlayTypes ().Open (ConnectionString' "LotteryID' Price' MaxMultiple"' "[ID] = " + PlayTypeID.ToString ()' "");  	if ((dtLottery == null) || (dtLottery.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(1008)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	int LotteryID = Shove._Convert.StrToInt (dtLottery.Rows [0] ["LotteryID"].ToString ()' -1);  	double Price = Shove._Convert.StrToDouble (dtLottery.Rows [0] ["Price"].ToString ()' -1);  	int MaxMultiple = Shove._Convert.StrToInt (dtLottery.Rows [0] ["MaxMultiple"].ToString ()' -1);  	if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验投注号码，计算注数、金额  	int Num = 0;  	LotteryNumber = GetLotteryNumber (LotteryID' PlayTypeID' LotteryNumber' ref Num);  	if (Num < 1) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注号码错误(1010)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	double Money = Num * Price * Multiple;  	// 获取期号  	DataTable dtIsuse = new DAL.Tables.T_Isuses ().Open (ConnectionString' "top 1 [ID]"' "LotteryID = " + LotteryID.ToString () + " and GetDate() between StartTime and dbo.F_GetIsuseSystemEndTime([ID]' " + PlayTypeID.ToString () + ") and IsOpened = 0"' "");  	if ((dtIsuse == null) || (dtIsuse.Rows.Count < 1)) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1011)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	long IsuseID = Shove._Convert.StrToLong (dtIsuse.Rows [0] ["ID"].ToString ()' -1);  	if (IsuseID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "奖期未开启(1012)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 校验余额  	if (Balance < Money) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = "投注卡账户余额不足(1013)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	// 投注  	string ReturnDescription = "";  	long SchemeID = InitiateScheme (SiteID' UserID' IsuseID' PlayTypeID' "本方案由用户手动编写短信代码投注（系统）"' "短信ID:" + ID + "\r\n短信内容:" + Content' LotteryNumber' ""' Multiple' Money' 0' Share' BuyShare' ""' 0' ref ReturnDescription);  	if (SchemeID < 0) {  		t_SmsBettings.HandleResult.Value = -1;  		t_SmsBettings.HandleDescription.Value = ReturnDescription + "(1015)";  		t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  		continue;  	}  	t_SmsBettings.SchemeID.Value = SchemeID;  	t_SmsBettings.HandleResult.Value = 1;  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	#endregion  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: if ((Contents == null) || (Contents.Length != 6)) {  	t_SmsBettings.HandleResult.Value = -1;  	t_SmsBettings.HandleDescription.Value = "短信格式错误(1001)";  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	continue;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: if (!Contents [5].StartsWith ("#")) {  	t_SmsBettings.HandleResult.Value = -1;  	t_SmsBettings.HandleDescription.Value = "短信格式错误(1004)";  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	continue;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,Betting,The following statement contains a magic number: if ((LotteryID < 0) || (Price < 2) || (Multiple > MaxMultiple)) {  	t_SmsBettings.HandleResult.Value = -1;  	t_SmsBettings.HandleDescription.Value = "短信格式错误(10090)";  	t_SmsBettings.Update (ConnectionString' "[ID] = " + ID);  	continue;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,GetLotteryNumber,The following statement contains a magic number: foreach (string str in t_Numbers) {  	string t_str = str.Trim ();  	if (String.IsNullOrEmpty (t_str)) {  		continue;  	}  	string[] t_strs = t_str.Split ('|');  	if ((t_strs == null) || (t_strs.Length != 2)) {  		continue;  	}  	int t_Num = Shove._Convert.StrToInt (t_strs [1]' -1);  	if (String.IsNullOrEmpty (t_strs [0]) || (t_Num < 1)) {  		continue;  	}  	Result += t_strs [0] + "\n";  	Num += t_Num;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,GetLotteryNumber,The following statement contains a magic number: if ((t_strs == null) || (t_strs.Length != 2)) {  	continue;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: foreach (string str in Numbers) {  	try {  		if (LotteryID == SLS.Lottery.SSQ.ID) {  			string[] Parts = str.Split ('+');  			if ((Parts == null) || (Parts.Length != 2)) {  				continue;  			}  			string t_str = "";  			for (int i = 0; i < Parts [0].Length; i += 2) {  				t_str += Parts [0].Substring (i' 2) + " ";  			}  			t_str += "+ ";  			for (int i = 0; i < Parts [1].Length; i += 2) {  				t_str += Parts [1].Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  		else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  			string t_str = "";  			for (int i = 0; i < str.Length; i += 2) {  				t_str += str.Substring (i' 2) + " ";  			}  			t_str = t_str.Trim ();  			Result += t_str + "\n";  		}  	}  	catch {  	}  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: try {  	if (LotteryID == SLS.Lottery.SSQ.ID) {  		string[] Parts = str.Split ('+');  		if ((Parts == null) || (Parts.Length != 2)) {  			continue;  		}  		string t_str = "";  		for (int i = 0; i < Parts [0].Length; i += 2) {  			t_str += Parts [0].Substring (i' 2) + " ";  		}  		t_str += "+ ";  		for (int i = 0; i < Parts [1].Length; i += 2) {  			t_str += Parts [1].Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  	else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  		string t_str = "";  		for (int i = 0; i < str.Length; i += 2) {  			t_str += str.Substring (i' 2) + " ";  		}  		t_str = t_str.Trim ();  		Result += t_str + "\n";  	}  }  catch {  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if (LotteryID == SLS.Lottery.SSQ.ID) {  	string[] Parts = str.Split ('+');  	if ((Parts == null) || (Parts.Length != 2)) {  		continue;  	}  	string t_str = "";  	for (int i = 0; i < Parts [0].Length; i += 2) {  		t_str += Parts [0].Substring (i' 2) + " ";  	}  	t_str += "+ ";  	for (int i = 0; i < Parts [1].Length; i += 2) {  		t_str += Parts [1].Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  else if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if ((Parts == null) || (Parts.Length != 2)) {  	continue;  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < Parts [0].Length; i += 2) {  	t_str += Parts [0].Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < Parts [0].Length; i += 2) {  	t_str += Parts [0].Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: i += 2
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: t_str += Parts [0].Substring (i' 2) + " ";  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < Parts [1].Length; i += 2) {  	t_str += Parts [1].Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < Parts [1].Length; i += 2) {  	t_str += Parts [1].Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: i += 2
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: t_str += Parts [1].Substring (i' 2) + " ";  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: if ((LotteryID == SLS.Lottery.HD15X5.ID) || (LotteryID == SLS.Lottery.QLC.ID)) {  	string t_str = "";  	for (int i = 0; i < str.Length; i += 2) {  		t_str += str.Substring (i' 2) + " ";  	}  	t_str = t_str.Trim ();  	Result += t_str + "\n";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < str.Length; i += 2) {  	t_str += str.Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: for (int i = 0; i < str.Length; i += 2) {  	t_str += str.Substring (i' 2) + " ";  }  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: i += 2
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,ConvertLotteryNumber,The following statement contains a magic number: t_str += str.Substring (i' 2) + " ";  
Magic Number,SLS.Task,SmsBettingTask,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\App_Code\Threads\SmsBettingTask.cs,InitiateScheme,The following statement contains a magic number: if ((SecrecyLevel < 0) || (SecrecyLevel > 3)) {  	SecrecyLevel = 0;  }  
Magic Number,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The following statement contains a magic number: try {  	System.Data.SqlClient.SqlConnection conn = Shove.Database.MSSQL.CreateDataConnection<System.Data.SqlClient.SqlConnection> (ConnectionString);  	while (conn.State != ConnectionState.Open) {  		conn.Open ();  		new Log ("System").Write ("数据库连接失败");  		System.Threading.Thread.Sleep (1000);  	}  	conn.Close ();  }  catch (Exception e) {  	new Log ("System").Write (e.Message);  }  
Magic Number,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The following statement contains a magic number: while (conn.State != ConnectionState.Open) {  	conn.Open ();  	new Log ("System").Write ("数据库连接失败");  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStart,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStop,The following statement contains a magic number: while ((ElectronTicket_HPSH_Task != null) && (ElectronTicket_HPSH_Task.StateService != 0)) {  	System.Threading.Thread.Sleep (500);  }  
Magic Number,SLS.Task,MainService,C:\repos\ichari_ichari\04项目支持\01参考资料\lottery\ElectronTicket\源代码\SLS.Task\MainService.cs,OnStop,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
