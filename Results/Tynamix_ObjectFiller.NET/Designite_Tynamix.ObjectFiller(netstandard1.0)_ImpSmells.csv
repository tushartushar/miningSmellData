Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,CreateAndFillObject,Cyclomatic complexity of the method is 9
Long Parameter List,Tynamix.ObjectFiller,Lipsum,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\Lipsum.cs,Lipsum,The method has 5 parameters. Parameters: lipsumFlavor' minWords' maxWords' minSentences' maxSentences
Long Parameter List,Tynamix.ObjectFiller,Lipsum,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\Lipsum.cs,Lipsum,The method has 6 parameters. Parameters: lipsumFlavor' minWords' maxWords' minSentences' maxSentences' paragraphs
Long Parameter List,Tynamix.ObjectFiller,Lipsum,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\Lipsum.cs,Lipsum,The method has 7 parameters. Parameters: lipsumFlavor' minWords' maxWords' minSentences' maxSentences' paragraphs' randomSeed
Long Statement,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,CheckForCircularReference,The length of the statement  "                                "The type {0} was already encountered before' which probably means you have a circular reference in your model. Either ignore the properties which cause this or specify explicit creation rules for them which do not rely on types."' " is 231.
Long Statement,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,CreateInstanceOfType,The length of the statement  "                        if (paramTypes.All(ctorParamType => TypeIsValidForObjectFiller(ctorParamType' currentSetupItem) && ctorParamType != type)) " is 122.
Long Statement,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,GetFilledDictionary,The length of the statement  "                            "Generating Keyvalue failed because it generates always the same data for dictionaryType [{0}]. Please check your setup."' " is 122.
Long Statement,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,GetFilledCollection,The length of the statement  "                     || propertyType.GetImplementedInterfaces().Any(x => x.IsGenericType() && x.GetGenericTypeDefinition() == typeof(ICollection<>)) " is 127.
Long Statement,Tynamix.ObjectFiller,NetTypeApiExtension,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\NetTypeApiExtension.cs,GetProperties,The length of the statement  "                return source.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public); " is 123.
Long Statement,Tynamix.ObjectFiller,Randomizer<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Randomizer.cs,Create,The length of the statement  "                    + "Please use the Filler class and call \"Setup\" to create a setup for that type. See Innerexception for more details."' " is 121.
Long Statement,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The length of the statement  "            this.TypeToRandomFunc[typeof(ArrayList)] = () => ((IRandomizerPlugin<ArrayList>)new Collectionizer<string' MnemonicString>()).GetValue(); " is 137.
Long Statement,Tynamix.ObjectFiller,SetupManager,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\SetupManager.cs,SetNewFor,The length of the statement  "            this.FillerSetup.TypeToFillerSetup[typeof(TTargetObject)] = useDefaultSettings ? new FillerSetupItem() : FillerSetup.MainSetupItem; " is 131.
Complex Conditional,Tynamix.ObjectFiller,Filler<T>,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Filler.cs,GetFilledCollection,The conditional expression  "propertyType.IsGenericType() &&                           propertyType.GetGenericTypeDefinition() == typeof(ICollection<>)                       || propertyType.GetImplementedInterfaces().Any(x => x.IsGenericType() && x.GetGenericTypeDefinition() == typeof(ICollection<>))  #if (!NET35 && !NET40)                       || propertyType.GetGenericTypeDefinition() == typeof(IReadOnlyCollection<>)                       || propertyType.GetImplementedInterfaces().Any(x => x.GetGenericTypeDefinition() == typeof(IReadOnlyCollection<>))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorSByte,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorInt16,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorInt32,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorInt64,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorSingle,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorDouble,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorDecimal,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(1) > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(1) < 0) && (nextValue < To))"  is complex.
Complex Conditional,Tynamix.ObjectFiller,SequenceGeneratorDateTime,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\SequenceGenerator.cs,GetValue,The conditional expression  "((Step.GetValueOrDefault(TimeSpan.FromDays(1)).TotalMilliseconds > 0) && (nextValue > To)) ||                      ((Step.GetValueOrDefault(TimeSpan.FromDays(1)).TotalMilliseconds < 0) && (nextValue < To))"  is complex.
Magic Number,Tynamix.ObjectFiller,RandomUri,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\RandomUri.cs,GetValue,The following statement contains a magic number: var relativeElements = Randomizer<int>.Create(new IntRange(1' 4));
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.firstIpPartMax = (int)(firstIpPartMax > 255 ? 255 : firstIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.firstIpPartMax = (int)(firstIpPartMax > 255 ? 255 : firstIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.secondIpPartMax = (int)(secondIpPartMax > 255 ? 255 : secondIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.secondIpPartMax = (int)(secondIpPartMax > 255 ? 255 : secondIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.thirdIpPartMax = (int)(thirdIpPartMax > 255 ? 255 : thirdIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.thirdIpPartMax = (int)(thirdIpPartMax > 255 ? 255 : thirdIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.lastIpPartMax = (int)(lastIpPartMax > 255 ? 255 : lastIpPartMax);
Magic Number,Tynamix.ObjectFiller,IpAddress,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\IpAddress.cs,IpAddress,The following statement contains a magic number: this.lastIpPartMax = (int)(lastIpPartMax > 255 ? 255 : lastIpPartMax);
Magic Number,Tynamix.ObjectFiller,MnemonicString,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\MnemonicString.cs,GetValue,The following statement contains a magic number: bool upperLetter = i == 0 || Random.Next(0' 2) == 1;
Magic Number,Tynamix.ObjectFiller,PatternGenerator,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\PatternGenerator.cs,GetValue,The following statement contains a magic number: var sb = new StringBuilder(_pattern.Length * 3);
Magic Number,Tynamix.ObjectFiller,CharacterExpressionGenerator,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\PatternGenerator.cs,NextHexDigit,The following statement contains a magic number: var c = (char)Random.Next('0'' '9' + 6 + 1);
Magic Number,Tynamix.ObjectFiller,CharacterExpressionGenerator,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\PatternGenerator.cs,NextHexDigit,The following statement contains a magic number: return (char)((c > '9') ? (c + 7) : c);
Magic Number,Tynamix.ObjectFiller,Random,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Random.cs,NextLong,The following statement contains a magic number: byte[] buf = new byte[8];
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,FillerSetupItem,The following statement contains a magic number: this.ListMaxCount = 25;
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,FillerSetupItem,The following statement contains a magic number: this.DictionaryKeyMaxCount = 10;
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: var dateTimeRandomizer = new DateTimeRange(new DateTime(1970' 1' 1));
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: this.TypeToRandomFunc[typeof(bool)] = () => Random.Next(0' 2) == 1;
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: this.TypeToRandomFunc[typeof(short)] = () => (short)Random.Next(-32767' 32767);
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: this.TypeToRandomFunc[typeof(short)] = () => (short)Random.Next(-32767' 32767);
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: this.TypeToRandomFunc[typeof(short?)] = () => (short)Random.Next(-32767' 32767);
Magic Number,Tynamix.ObjectFiller,FillerSetupItem,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Setup\FillerSetupItem.cs,SetDefaultRandomizer,The following statement contains a magic number: this.TypeToRandomFunc[typeof(short?)] = () => (short)Random.Next(-32767' 32767);
Missing Default,Tynamix.ObjectFiller,StreetName,D:\research\architectureSmells\repos1\Tynamix_ObjectFiller.NET\Tynamix.ObjectFiller\Plugins\String\StreetName.cs,StreetName,The following switch statement is missing a default case: switch (targetCity)              {                  case City.Dresden:                      this.AllStreetNames = Resources.GermanStreetNames.Split(';').ToList();                      break;                  case City.Moscow:                      this.AllStreetNames = Resources.MoscowStreetNames.Split(';').ToList();                      break;                  case City.NewYork:                      this.AllStreetNames = Resources.NewYorkStreetNames.Split(';').ToList();                      break;                  case City.Tokyo:                      this.AllStreetNames = Resources.TokyoStreetNames.Split(';').ToList();                      break;                  case City.Paris:                      this.AllStreetNames = Resources.ParisStreetNames.Split(';').ToList();                      break;                  case City.London:                      this.AllStreetNames = Resources.LondonStreetNames.Split(';').ToList();                      break;              }
