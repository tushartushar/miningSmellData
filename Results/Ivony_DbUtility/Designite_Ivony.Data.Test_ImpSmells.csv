Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,StandardTest,The length of the statement  "      Assert.AreEqual( db.T( "INSERT INTO testTable ( Name' Content) VALUES ( {...} )"' "Ivony"' "Test" ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 135.
Long Statement,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO testTable ( Name' Content ) VALUES ( {...} )"' "Ivony"' "Test" ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 145.
Long Statement,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO testTable ( Name' Content) VALUES ( {...} )"' "Ivony"' "Test" ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 144.
Long Statement,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO testTable ( Name' Content) VALUES ( {...} )"' "Ivony"' "Test" ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 144.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The length of the statement  "      Assert.AreEqual( query.TextTemplate' "SELECT * FROM Users WHERE ID = ( SELECT ID FROM Users WHERE Username = #0# )"' "一个参数化查询作为另一个参数化查询参数测试失败" ); " is 145.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The length of the statement  "      query = Db.T( "SELECT * FROM Users WHERE ID = ( {1} ) AND Status = {0}"' 3' Db.T( "SELECT ID FROM Users WHERE Username = {0}"' "Ivony" ) ); " is 139.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The length of the statement  "      Assert.AreEqual( query.TextTemplate' "SELECT * FROM Users WHERE ID = ( SELECT ID FROM Users WHERE Username = #0# ) AND Status = #1#"' "一个参数化查询作为另一个参数化查询参数测试失败" ); " is 162.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,ConcatTest,The length of the statement  "      Assert.AreEqual( (query + query + query).TextTemplate' "SELECT * FROM Users; SELECT * FROM Users; SELECT * FROM Users;"' "多个纯文本模板连接测试失败" ); " is 139.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,ConcatTest,The length of the statement  "      Assert.AreEqual( query.ConcatQueries( query' query ).TextTemplate' "SELECT * FROM Users; SELECT * FROM Users; SELECT * FROM Users;"' "多个纯文本模板连接测试失败" ); " is 151.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,ConcatTest,The length of the statement  "      Assert.AreEqual( (query + query + query).TextTemplate' "SELECT * FROM Users WHERE UserID = #0#; SELECT * FROM Users WHERE UserID = #1#; SELECT * FROM Users WHERE UserID = #2#;"' "多个带参数模板连接测试失败" ); " is 196.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,ConcatTest,The length of the statement  "      Assert.AreEqual( query.ConcatQueries( query' query ).TextTemplate' "SELECT * FROM Users WHERE UserID = #0#; SELECT * FROM Users WHERE UserID = #1#; SELECT * FROM Users WHERE UserID = #2#;"' "多个带参数模板连接测试失败" ); " is 208.
Long Statement,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,JoinTest,The length of the statement  "      query += Db.Join( "AND"' new ParameterizedQuery[] { Db.T( "UserID <> {0}"' 0 )' null' Db.T( "Username = {0}"' "Ivony" ) } ); " is 124.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,Initialize,The length of the statement  "            //this._db = PostgreSql.Create("Server=127.0.0.1;Port=5432;Database=InventoryDB;User Id=inventory_user;Password=sa"' new NpgsqlDbConfiguration()); " is 146.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlTest,The length of the statement  "            //var affectedRows = this._db.T("INSERT INTO \"J_Log\" (\"LoginUser\"'\"CreationDate\"'\"Action\") VALUES ( {...} )"' "oger"' DateTime.Now' 1).ExecuteNonQuery(); " is 161.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlAsyncTest,The length of the statement  "            //var affectedRows = await this._db.T("INSERT INTO \"J_Log\" (\"LoginUser\"'\"CreationDate\"'\"Action\") VALUES ( {...} )"' "oger"' DateTime.Now' 1).ExecuteNonQueryAsync(); " is 172.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlTransactionTest,The length of the statement  "            //	var affectedRows = this._db.T("INSERT INTO \"J_Log\" (\"LoginUser\"'\"CreationDate\"'\"Action\") VALUES ( {...} )"' "oger"' DateTime.Now' 1).ExecuteNonQuery(); " is 162.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlTransactionTest,The length of the statement  "                var affectedRows = tran.T("INSERT INTO \"J_Log\" (\"LoginUser\"'\"CreationDate\"'\"Action\") VALUES ( {...} )"' "oger"' DateTime.Now' 1).ExecuteNonQuery(); " is 155.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,MyTestTransaction,The length of the statement  "            using (var conn = new NpgsqlConnection("Server=127.0.0.1;Port=5432;Database=InventoryDB;User Id=inventory_user;Password=sa")) " is 125.
Long Statement,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,MyTestTransaction,The length of the statement  "                    var sql = "INSERT INTO \"J_Log\" (\"LoginUser\"'\"CreationDate\"'\"Action\") VALUES ( 'oger-me'''2014-06-14 12:38:00'' 1 )"; " is 124.
Long Statement,Ivony.Data.Test,SQLiteTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SQLiteTest.cs,StandardTest1,The length of the statement  "      Assert.AreEqual( db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 144.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,StandardTest1,The length of the statement  "      Assert.AreEqual( db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 144.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,_AsyncTest1,The length of the statement  "      Assert.AreEqual( await db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQueryAsync()' 1' "插入数据测试失败" ); " is 155.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 153.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 153.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TransactionTest,The length of the statement  "        Assert.AreEqual( transaction.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "Ivony"' "Test"' 1 ).ExecuteNonQuery()' 1' "插入数据测试失败" ); " is 153.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,XmlFieldTest,The length of the statement  "      db.T( "INSERT INTO Test1 ( Name' XmlContent' [Index] ) VALUES ( {...} ) "' "XML content"' document' 1 ).ExecuteNonQuery(); " is 122.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,XmlFieldTest,The length of the statement  "      Assert.AreEqual( document.ToString( SaveOptions.OmitDuplicateNamespaces )' document1.ToString( SaveOptions.OmitDuplicateNamespaces ) ); " is 135.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,EntityTest,The length of the statement  "      var entities = db.T( "SELECT Name' Content' [Index] FROM Test1" ).ExecuteDynamics().Select( item => (CorrectEntity) item ).ToArray(); " is 133.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The length of the statement  "      db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "1900/1/2 13:00:05.276"' "ABC"' 0 ).ExecuteNonQuery(); " is 125.
Long Statement,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The length of the statement  "      Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) ); " is 127.
Empty Catch Block,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TraceTest,The method has an empty catch block.
Empty Catch Block,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TraceTest,The method has an empty catch block.
Magic Number,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( logs.Length' 3 );
Magic Number,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( logs[2].EventName' "OnComplete" );
Magic Number,Ivony.Data.Test,MySqlTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\MySqlTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( logs.Length' 2 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID = {0}"' 123 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[0]' 123' "单参数模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID = {0..0}"' 123 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[0]' 123' "单参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0..2} )"' 1' 2' 3 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0..2} )"' 1' 2' 3 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 3' "参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 2' "参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0..2}' {1} )"' 1' 2' 3 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0..2}' {1} )"' 1' 2' 3 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 4' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 2' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[3]' 2' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[3]' 2' "混合参数列表模板解析测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID = ( {1} ) AND Status = {0}"' 3' Db.T( "SELECT ID FROM Users WHERE Username = {0}"' "Ivony" ) );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 2' "一个参数化查询作为另一个参数化查询参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParserTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 3' "一个参数化查询作为另一个参数化查询参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: var query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0} )"' new[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: var query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0} )"' new[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 3' "以列表作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 2' "以列表作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以列表作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以列表作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 3' "以引用类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' "3"' "以引用类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0}' {1}' {2} )"' new object[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0}' {1}' {2} )"' new object[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 3' "以object数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 2' "以object数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以object数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以object数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0}' {1}' {2} )"' new[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: query = Db.T( "SELECT * FROM Users WHERE ID IN ( {0}' {1}' {2} )"' new[] { 1' 2' 3 } );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 3' "以值类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[1]' 2' "以值类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以值类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseListTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues[2]' 3' "以值类型数组作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,TemplateParseNullTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 2' "以多个 null 值作为参数测试失败" );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,JoinTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 2 );
Magic Number,Ivony.Data.Test,ParameterizedQueryTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\ParameterizedQueryTest.cs,JoinTest,The following statement contains a magic number: Assert.AreEqual( query.ParameterValues.Length' 2 );
Magic Number,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,Initialize,The following statement contains a magic number: this._db = PostgreSql.Connect("127.0.0.1"' "InventoryDB"' 5432' "inventory_user"' "sa");
Magic Number,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlTest,The following statement contains a magic number: Assert.AreEqual(dynamicVar.Length' 61' "插入数据后查询测试失败");
Magic Number,Ivony.Data.Test,PostgreSqlTests,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\PostgreSqlTests.cs,NpgsqlAsyncTest,The following statement contains a magic number: Assert.AreEqual(dynamicVar.Length' 62' "插入数据后查询测试失败");
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( events.Length' 3 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( events[2].EventName' "OnComplete" );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,TraceTest,The following statement contains a magic number: Assert.AreEqual( events.Length' 2 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,EntityTest,The following statement contains a magic number: db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES( {...} )"' "Test"' "TestContent"' 2 ).ExecuteNonQuery();
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: db.T( "INSERT INTO Test1 ( Name' Content' [Index] ) VALUES ( {...} )"' "5"' "0.9"' 100 ).ExecuteNonQuery();
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<long>()' 100L );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<int>()' 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<short>()' (short) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<byte>()' (byte) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<ulong>()' (ulong) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<uint>()' 100u );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<ushort>()' (ushort) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<sbyte>()' (sbyte) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<char>()' (char) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<decimal>()' (decimal) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<double>()' (double) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<float>()' (float) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<long?>()' 100L );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<int?>()' 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<short?>()' (short) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<byte?>()' (byte) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<ulong?>()' (ulong) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<uint?>()' 100u );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<ushort?>()' (ushort) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<sbyte?>()' (sbyte) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<char?>()' (char) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<decimal?>()' (decimal) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<double?>()' (double) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 [Index] FROM Test1" ).ExecuteScalar<float?>()' (float) 100 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<long>()' 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<int>()' 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<short>()' (short) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<byte>()' (byte) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<ulong>()' (ulong) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<uint>()' 5u );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<ushort>()' (ushort) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<sbyte>()' (sbyte) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<decimal>()' (decimal) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<double>()' (double) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<float>()' (float) 5 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<decimal>()' (decimal) 0.9m );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<double>()' (double) 0.9 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<float>()' (float) 0.9 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<decimal?>()' (decimal) 0.9m );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<double?>()' (double) 0.9 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Content FROM Test1" ).ExecuteScalar<float?>()' (float) 0.9 );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,ConvertibleTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT TOP 1 Name FROM Test1" ).ExecuteScalar<DateTime>()' new DateTime( 1900' 1' 2' 13' 0' 5' 276 ) );
Magic Number,Ivony.Data.Test,SqlServerTest,D:\research\architectureSmells\repos\Ivony_DbUtility\Sources\Ivony.Data.Test\SqlServerTest.cs,EnumTest,The following statement contains a magic number: Assert.AreEqual( db.T( "SELECT [Index] FROM Test1" ).ExecuteScalar<int>()' 3 );
