Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CodeCracker.FixAllProviders,DocumentCodeFixProviderAll,C:\repos\code-cracker_code-cracker\src\Common\CodeCracker.Common\FixAllProviders\DocumentCodeFixProviderAll.cs,GetFixedDocumentsAsync,The length of the statement  "                solution = solution.WithDocumentSyntaxRoot(newDocument.DocumentId' await newDocument.Document.GetSyntaxRootAsync().ConfigureAwait(false)); " is 138.
Long Statement,CodeCracker.FixAllProviders,DocumentCodeFixProviderAll,C:\repos\code-cracker_code-cracker\src\Common\CodeCracker.Common\FixAllProviders\DocumentCodeFixProviderAll.cs,GetFixedDocumentAsync,The length of the statement  "            if (codeFixer == null) throw new ArgumentException("This CodeFixAllProvider requires that your CodeFixProvider implements the IFixDocumentInternalsOnly."); " is 155.
Long Statement,CodeCracker.FixAllProviders,DocumentCodeFixProviderAll,C:\repos\code-cracker_code-cracker\src\Common\CodeCracker.Common\FixAllProviders\DocumentCodeFixProviderAll.cs,GetFixedDocumentAsync,The length of the statement  "            newDocument = await FixCodeForAnnotatedNodesAsync(newDocument' codeFixer' annotations' fixAllContext.CancellationToken).ConfigureAwait(false); " is 142.
Missing Default,CodeCracker.FixAllProviders,DocumentCodeFixProviderAll,C:\repos\code-cracker_code-cracker\src\Common\CodeCracker.Common\FixAllProviders\DocumentCodeFixProviderAll.cs,GetFixAsync,The following switch statement is missing a default case: switch (fixAllContext.Scope)              {                  case FixAllScope.Document:                      return Task.FromResult(CodeAction.Create(CodeFixTitle'                          ct => GetFixedDocumentsAsync(fixAllContext' Enumerable.Repeat(fixAllContext.Document' 1))));                  case FixAllScope.Project:                      return Task.FromResult(CodeAction.Create(CodeFixTitle'                          ct => GetFixedDocumentsAsync(fixAllContext' fixAllContext.Project.Documents)));                  case FixAllScope.Solution:                      return Task.FromResult(CodeAction.Create(CodeFixTitle'                          ct => GetFixedDocumentsAsync(fixAllContext' fixAllContext.Solution.Projects.SelectMany(p => p.Documents))));              }
