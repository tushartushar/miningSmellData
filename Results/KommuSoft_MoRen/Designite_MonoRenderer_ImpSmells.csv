Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Renderer,FinalList,C:\repos\KommuSoft_MoRen\MonoRenderer\FinalList.cs,FinalList,Cyclomatic complexity of the method is 16
Complex Method,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,Cyclomatic complexity of the method is 11
Complex Method,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Renderer,Mesh,C:\repos\KommuSoft_MoRen\MonoRenderer\Mesh.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Renderer,RayTracer,C:\repos\KommuSoft_MoRen\MonoRenderer\RayTracer.cs,CalculateColor,Cyclomatic complexity of the method is 13
Complex Method,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,ReadColorChunk,Cyclomatic complexity of the method is 10
Complex Method,Renderer,ParserUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ParserUtils.cs,ParseTreeBracketsComma,Cyclomatic complexity of the method is 8
Complex Method,Renderer,ParserUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ParserUtils.cs,ParseBracketsComma,Cyclomatic complexity of the method is 8
Complex Method,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,Cyclomatic complexity of the method is 9
Complex Method,Renderer,CubicalEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CubicalEnvironmentMap.cs,GetColorAt,Cyclomatic complexity of the method is 15
Complex Method,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,Cyclomatic complexity of the method is 18
Complex Method,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readJunk,Cyclomatic complexity of the method is 76
Complex Method,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,buildCameraCalculateAt,Cyclomatic complexity of the method is 11
Complex Method,Renderer.SceneBuilding,EnvMapWrapper,C:\repos\KommuSoft_MoRen\MonoRenderer\EnvMapWrapper.cs,ToEnvironmentMap,Cyclomatic complexity of the method is 12
Long Parameter List,Renderer,Camera,C:\repos\KommuSoft_MoRen\MonoRenderer\Camera.cs,Camera,The method has 8 parameters.
Long Parameter List,Renderer,CastResult,C:\repos\KommuSoft_MoRen\MonoRenderer\CastResult.cs,Copy,The method has 7 parameters.
Long Parameter List,Renderer,CastResult,C:\repos\KommuSoft_MoRen\MonoRenderer\CastResult.cs,Copy,The method has 9 parameters.
Long Parameter List,Renderer,GridAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\GridAccelerator.cs,Align,The method has 15 parameters.
Long Parameter List,Renderer,GridAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\GridAccelerator.cs,addMigrations,The method has 8 parameters.
Long Parameter List,Renderer,GridAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\GridAccelerator.cs,buildGrid,The method has 15 parameters.
Long Parameter List,Renderer,IRenderable,C:\repos\KommuSoft_MoRen\MonoRenderer\IRenderable.cs,GetBounds,The method has 6 parameters.
Long Parameter List,Renderer,Material,C:\repos\KommuSoft_MoRen\MonoRenderer\Material.cs,Material,The method has 13 parameters.
Long Parameter List,Renderer,Material,C:\repos\KommuSoft_MoRen\MonoRenderer\Material.cs,ADSAtAndBump,The method has 7 parameters.
Long Parameter List,Renderer,Maths,C:\repos\KommuSoft_MoRen\MonoRenderer\Maths.cs,LinEqOrder,The method has 6 parameters.
Long Parameter List,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Matrix4,The method has 12 parameters.
Long Parameter List,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,OctTreeAccelerator,The method has 5 parameters.
Long Parameter List,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,proceedSubTree,The method has 8 parameters.
Long Parameter List,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,calcDim,The method has 6 parameters.
Long Parameter List,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The method has 21 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Cross,The method has 9 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Dot,The method has 6 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InBox,The method has 6 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,CrossLength,The method has 6 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,CrossNormalize,The method has 9 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,ReflectRefract,The method has 5 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Order,The method has 7 parameters.
Long Parameter List,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,NormalizedConeGenerator,The method has 6 parameters.
Long Parameter List,Renderer,ProxyRenderItem,C:\repos\KommuSoft_MoRen\MonoRenderer\ProxyRenderItem.cs,GetBounds,The method has 6 parameters.
Long Parameter List,Renderer,ProxyTriangle,C:\repos\KommuSoft_MoRen\MonoRenderer\ProxyTriangle.cs,GetBounds,The method has 6 parameters.
Long Parameter List,Renderer,Ray,C:\repos\KommuSoft_MoRen\MonoRenderer\Ray.cs,Ray,The method has 6 parameters.
Long Parameter List,Renderer,RenderItem,C:\repos\KommuSoft_MoRen\MonoRenderer\RenderItem.cs,BoxOverlap,The method has 6 parameters.
Long Parameter List,Renderer,RenderItem,C:\repos\KommuSoft_MoRen\MonoRenderer\RenderItem.cs,InBox,The method has 6 parameters.
Long Parameter List,Renderer,Sphere,C:\repos\KommuSoft_MoRen\MonoRenderer\Sphere.cs,GetBounds,The method has 6 parameters.
Long Parameter List,Renderer,Sphere,C:\repos\KommuSoft_MoRen\MonoRenderer\Sphere.cs,InBox,The method has 6 parameters.
Long Parameter List,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The method has 5 parameters.
Long Parameter List,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The method has 5 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,Triangle,The method has 10 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,GetBounds,The method has 6 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The method has 6 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,invPlaneBoxOverlap,The method has 9 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,invAxisTestYZ,The method has 10 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,TriangleSplitSurface,The method has 5 parameters.
Long Parameter List,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,TriangleSplitAt,The method has 6 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoxHitpoint,The method has 9 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateNormalizationFactors,The method has 7 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,calculateOffset,The method has 13 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoundingBox,The method has 7 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoundingBox,The method has 7 parameters.
Long Parameter List,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CloseInterval,The method has 6 parameters.
Long Parameter List,Renderer,SplitDimensionHeuristics,C:\repos\KommuSoft_MoRen\MonoRenderer\SplitDimensionHeuristics.cs,SplitHalfDimensionHeuristic,The method has 5 parameters.
Long Parameter List,Renderer,SplitDimensionHeuristics,C:\repos\KommuSoft_MoRen\MonoRenderer\SplitDimensionHeuristics.cs,HalfTriangleCountHeuristic,The method has 6 parameters.
Long Parameter List,Renderer,BSPAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\BSPAccelerator.cs,BSPAccelerator,The method has 5 parameters.
Long Parameter List,Renderer,BSPAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\BSPAccelerator.cs,Split,The method has 6 parameters.
Long Parameter List,Renderer,BSPAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\BSPAccelerator.cs,Filter,The method has 8 parameters.
Long Parameter List,Renderer,ImplementedSplitHeuristics,C:\repos\KommuSoft_MoRen\MonoRenderer\ImplementedSplitHeuristics.cs,SplitHalfAreaHeuristic,The method has 7 parameters.
Long Parameter List,Renderer,ImplementedSplitHeuristics,C:\repos\KommuSoft_MoRen\MonoRenderer\ImplementedSplitHeuristics.cs,SurfaceAreaHeuristic,The method has 8 parameters.
Long Parameter List,Renderer,Color6,C:\repos\KommuSoft_MoRen\MonoRenderer\Color6.cs,Color6,The method has 6 parameters.
Long Parameter List,Renderer,CubicalEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CubicalEnvironmentMap.cs,CubicalEnvironmentMap,The method has 6 parameters.
Long Parameter List,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readChildren,The method has 5 parameters.
Long Parameter List,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,Inject,The method has 5 parameters.
Long Parameter List,Renderer.SceneBuilding,SceneGraphNode,C:\repos\KommuSoft_MoRen\MonoRenderer\SceneGraphNode.cs,SceneGraphNode,The method has 5 parameters.
Long Parameter List,Renderer.SceneBuilding,SceneGraphNode,C:\repos\KommuSoft_MoRen\MonoRenderer\SceneGraphNode.cs,Inject,The method has 8 parameters.
Long Parameter List,Renderer.SceneBuilding,EnvironmentSettings,C:\repos\KommuSoft_MoRen\MonoRenderer\EnvironmentSettings.cs,EnvironmentSettings,The method has 6 parameters.
Long Parameter List,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,fillMotionBlurCache,The method has 5 parameters.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Invert,The length of the statement  "	double N00 = (this.M11 * this.M22 - this.M12 * this.M21) * invdet' N01 = (this.M02 * this.M21 - this.M01 * this.M22) * invdet' N02 = (bg - cf) * invdet' N03 = -(N00 * this.M03 + N01 * this.M13 + N02 * this.M23); " is 211.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Invert,The length of the statement  "	double N10 = (this.M12 * this.M20 - this.M10 * this.M22) * invdet' N11 = (this.M00 * this.M22 - this.M02 * this.M20) * invdet' N12 = (ce - ag) * invdet' N13 = -(N10 * this.M03 + N11 * this.M13 + N12 * this.M23); " is 211.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Invert,The length of the statement  "	double N20 = (this.M10 * this.M21 - this.M11 * this.M20) * invdet' N21 = (this.M01 * this.M20 - this.M00 * this.M21) * invdet' N22 = (af - be) * invdet' N23 = -(N20 * this.M03 + N21 * this.M13 + N22 * this.M23); " is 211.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,CreateRotateMatrix,The length of the statement  "	return new Matrix4 (cost + costa * ux * ux' ux * uy * costa - uz * sint' ux * uz * costa + uy * sint' 0.0d' ux * uy * costa + uz * sint' cost + costa * uy * uy' uy * uz * costa - ux * sint' 0.0d' ux * uz * costa - uy * sint' uz * uy * costa + ux * sint' cost + costa * uz * uz' 0.0d); " is 284.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Rotate,The length of the statement  "	double N00 = r0 * M00 + r1 * M10 + r2 * M20' N01 = r0 * M01 + r1 * M11 + r2 * M21' N02 = r0 * M02 + r1 * M12 + r2 * M22' N03 = r0 * M03 + r1 * M13 + r2 * M23; " is 158.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Rotate,The length of the statement  "	double N10 = r0 * M00 + r1 * M10 + r2 * M20' N11 = r0 * M01 + r1 * M11 + r2 * M21' N12 = r0 * M02 + r1 * M12 + r2 * M22' N13 = r0 * M03 + r1 * M13 + r2 * M23; " is 158.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,RotateX,The length of the statement  "	double N10 = M10 * cost - M20 * sint' N11 = M11 * cost - M21 * sint' N12 = M12 * cost - M22 * sint' N13 = M13 * cost - M23 * sint; " is 130.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,RotateY,The length of the statement  "	double N00 = M00 * cost + M20 * sint' N01 = M01 * cost + M21 * sint' N02 = M02 * cost + M22 * sint' N03 = M03 * cost + M23 * sint; " is 130.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,RotateZ,The length of the statement  "	double N00 = M00 * cost - M10 * sint' N01 = M01 * cost - M11 * sint' N02 = M02 * cost - M12 * sint' N03 = M03 * cost - M13 * sint; " is 130.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,ToString,The length of the statement  "	return string.Format ("Matrix {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11}"' M00' M01' M02' M03' M10' M11' M12' M13' M20' M21' M22' M23); " is 142.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Equals,The length of the statement  "		return (this.M00 == N.M00 && this.M01 == N.M01 && this.M02 == N.M02 && this.M03 == N.M03 && this.M10 == N.M10 && this.M11 == N.M11 && this.M12 == N.M12 && this.M13 == N.M13 && this.M20 == N.M20 && this.M21 == N.M21 && this.M22 == N.M22 && this.M23 == N.M23); " is 258.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,GetHashCode,The length of the statement  "	return this.M00.GetHashCode () ^ this.M01.GetHashCode () ^ this.M02.GetHashCode () ^ this.M03.GetHashCode () ^ this.M10.GetHashCode () ^ this.M11.GetHashCode () ^ this.M12.GetHashCode () ^ this.M13.GetHashCode () ^ this.M20.GetHashCode () ^ this.M21.GetHashCode () ^ this.M22.GetHashCode () ^ this.M23.GetHashCode (); " is 317.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,The length of the statement  "		if (m1.Groups ["rotxyz"].Captures.Count > 0x00 && m2.Groups ["rotxyz"].Captures.Count > 0x00 && m1.Groups ["dim"].Value == m2.Groups ["dim"].Value) { " is 149.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,The length of the statement  "			Point3 u = new Point3 (factora * double.Parse (m1.Groups ["ux"].Value) + factor * double.Parse (m2.Groups ["ux"].Value)' factora * double.Parse (m1.Groups ["uy"].Value) + factor * double.Parse (m2.Groups ["uy"].Value)' factora * double.Parse (m1.Groups ["uz"].Value) + factor * double.Parse (m2.Groups ["uz"].Value)); " is 317.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,The length of the statement  "				u = new Point3 (factora * double.Parse (m1.Groups ["ux"].Value) + factor * double.Parse (m2.Groups ["ux"].Value)' factora * double.Parse (m1.Groups ["uy"].Value) + factor * double.Parse (m2.Groups ["uy"].Value)' factora * double.Parse (m1.Groups ["uz"].Value) + factor * double.Parse (m2.Groups ["uz"].Value)); " is 310.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Parse,The length of the statement  "			Point3 u = new Point3 (double.Parse (m.Groups ["ux"].Value)' double.Parse (m.Groups ["uy"].Value)' double.Parse (m.Groups ["uz"].Value)); " is 137.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Parse,The length of the statement  "			Point3 u = new Point3 (double.Parse (m.Groups ["ux"].Value)' double.Parse (m.Groups ["uy"].Value)' double.Parse (m.Groups ["uz"].Value)); " is 137.
Long Statement,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,Parse,The length of the statement  "				u = new Point3 (double.Parse (m.Groups ["ux"].Value)' double.Parse (m.Groups ["uy"].Value)' double.Parse (m.Groups ["uz"].Value)); " is 130.
Long Statement,Renderer,Mesh,C:\repos\KommuSoft_MoRen\MonoRenderer\Mesh.cs,InvokeLoaders,The length of the statement  "			if (t.GetCustomAttributes (typeof(MeshLoaderAttribute)' false).Length > 0x00 && typeof(IMeshLoader).IsAssignableFrom (t)) { " is 123.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,proceedSubTree,The length of the statement  "		int pos = Maths.BinarySign (inter.X - fotn.x) | (Maths.BinarySign (inter.Y - fotn.y) << 0x02) | (Maths.BinarySign (inter.Z - fotn.z) << 0x04); " is 142.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,proceedSubTree,The length of the statement  "			proceedSubTree (ray' dpos' seqxyz' inter' ref ri' ref t' ref tHit' fotn.node [((pos & 0x01) << 0x02) | ((pos & 0x04) >> 0x01) | ((pos & 0x10) >> 0x04)]); " is 153.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x0' x2' y0' y2' z0' z2) && x.Item2.InBox (x0' x2' y0' y2' z0' z2))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x0' x2' y0' y2' z2' z1) && x.Item2.InBox (x0' x2' y0' y2' z2' z1))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x0' x2' y2' y1' z0' z2) && x.Item2.InBox (x0' x2' y2' y1' z0' z2))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x0' x2' y2' y1' z2' z1) && x.Item2.InBox (x0' x2' y2' y1' z2' z1))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x2' x1' y0' y2' z0' z2) && x.Item2.InBox (x2' x1' y0' y2' z0' z2))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x2' x1' y0' y2' z2' z1) && x.Item2.InBox (x2' x1' y0' y2' z2' z1))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x2' x1' y2' y1' z0' z2) && x.Item2.InBox (x2' x1' y2' y1' z0' z2))); " is 133.
Long Statement,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,Order,The length of the statement  "		nextCache.AddRange (currentCache.Where (x => x.Item2.BoxOverlap (x2' x1' y2' y1' z2' z1) && x.Item2.InBox (x2' x1' y2' y1' z2' z1))); " is 133.
Long Statement,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,Perlin3d,The length of the statement  "	int L = permutationResult [xi] + yi' LL = permutationResult [L] + zi' LR = permutationResult [L + 0x01] + zi' R = permutationResult [xi + 0x01] + yi' RL = permutationResult [R] + zi' RR = permutationResult [R + 0x01] + zi; " is 222.
Long Statement,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,Perlin3d,The length of the statement  "	return Maths.LinearInterpolate (w' Maths.LinearInterpolate (v' Maths.LinearInterpolate (u' PerlinGradient (permutationResult [LL]' xf' yf' zf)' PerlinGradient (permutationResult [RL]' xf - 0x01' yf' zf))' Maths.LinearInterpolate (u' PerlinGradient (permutationResult [LR]' xf' yf - 0x01' zf)' PerlinGradient (permutationResult [RR]' xf - 0x01' yf - 0x01' zf)))' Maths.LinearInterpolate (v' Maths.LinearInterpolate (u' PerlinGradient (permutationResult [LL + 0x01]' xf' yf' zf - 1)' PerlinGradient (permutationResult [RL + 0x01]' xf - 0x01' yf' zf - 0x01))' Maths.LinearInterpolate (u' PerlinGradient (permutationResult [LR + 0x01]' xf' yf - 1' zf - 0x01)' PerlinGradient (permutationResult [RR + 0x01]' xf - 0x01' yf - 0x01' zf - 0x01)))); " is 739.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransform,The length of the statement  "	double frac = 1.0d / (m.M00 * (m.M12 * m.M21 - m.M11 * m.M22) + m.M01 * (m.M10 * m.M22 - m.M12 * m.M20) + m.M02 * (m.M11 * m.M20 - m.M10 * m.M21)); " is 147.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransform,The length of the statement  "	double xn = frac * ((m.M02 * m.M11 - m.M01 * m.M12) * Z + (m.M01 * m.M22 - m.M02 * m.M21) * Y + (m.M12 * m.M21 - m.M11 * m.M22) * X + (m.M01 * m.M12 - m.M02 * m.M11) * m.M23 + (m.M03 * m.M11 - m.M01 * m.M13) * m.M22 + (m.M02 * m.M13 - m.M03 * m.M12) * m.M21); " is 259.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransform,The length of the statement  "	double yn = frac * ((m.M00 * m.M12 - m.M02 * m.M10) * Z + (m.M02 * m.M20 - m.M00 * m.M22) * Y + (m.M10 * m.M22 - m.M12 * m.M20) * X + (m.M02 * m.M10 - m.M00 * m.M12) * m.M23 + (m.M00 * m.M13 - m.M03 * m.M10) * m.M22 + (m.M03 * m.M12 - m.M02 * m.M13) * m.M20); " is 259.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransform,The length of the statement  "	this.Z = frac * ((m.M01 * m.M10 - m.M00 * m.M11) * Z + (m.M00 * m.M21 - m.M01 * m.M20) * Y + (m.M11 * m.M20 - m.M10 * m.M21) * X + (m.M00 * m.M11 - m.M01 * m.M10) * m.M23 + (m.M03 * m.M10 - m.M00 * m.M13) * m.M21 + (m.M01 * m.M13 - m.M03 * m.M11) * m.M20); " is 256.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransformNonShift,The length of the statement  "	double frac = 1.0d / (m.M00 * (m.M12 * m.M21 - m.M11 * m.M22) + m.M01 * (m.M10 * m.M22 - m.M12 * m.M20) + m.M02 * (m.M11 * m.M20 - m.M10 * m.M21)); " is 147.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransformNonShift,The length of the statement  "	double xn = frac * ((m.M02 * m.M11 - m.M01 * m.M12) * Z + (m.M01 * m.M22 - m.M02 * m.M21) * Y + (m.M12 * m.M21 - m.M11 * m.M22) * X); " is 133.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransformNonShift,The length of the statement  "	double yn = frac * ((m.M00 * m.M12 - m.M02 * m.M10) * Z + (m.M02 * m.M20 - m.M00 * m.M22) * Y + (m.M10 * m.M22 - m.M12 * m.M20) * X); " is 133.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,InvTransformNonShift,The length of the statement  "	this.Z = frac * ((m.M01 * m.M10 - m.M00 * m.M11) * Z + (m.M00 * m.M21 - m.M01 * m.M20) * Y + (m.M11 * m.M20 - m.M10 * m.M21) * X); " is 130.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,CosAngle,The length of the statement  "	return pa.X * pb.X + pa.Y * pb.Y + pa.Z * pb.Z / Math.Sqrt ((pa.X * pa.X + pa.Y * pa.Y + pa.Z * pa.Z) * (pb.X * pb.X + pb.Y * pb.Y + pb.Z * pb.Z)); " is 147.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,ToString,The length of the statement  "	return string.Format ("({0};{1};{2})"' X.ToString ("0.000000000")' Y.ToString ("0.000000000")' Z.ToString ("0.000000000")); " is 123.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Rotate,The length of the statement  "	double nx = (cost + costa * ux * ux) * this.X + (ux * uy * costa - uz * sint) * this.Z + (ux * uz * costa + uy * sint) * this.Z; " is 128.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Rotate,The length of the statement  "	double ny = (ux * uy * costa + uz * sint) * this.X + (cost + costa * uy * uy) * this.Y + (uy * uz * costa - ux * sint) * this.Z; " is 128.
Long Statement,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Rotate,The length of the statement  "	this.Z = (ux * uz * costa - uy * sint) * this.X + (uz * uy * costa + ux * sint) * this.Y + (cost + costa * uz * uz) * this.Z; " is 125.
Long Statement,Renderer,Ray,C:\repos\KommuSoft_MoRen\MonoRenderer\Ray.cs,WithEpsilon,The length of the statement  "	return new Ray (new Point3 (offset.X + Maths.GlobalEpsilon * direction.X' offset.Y + Maths.GlobalEpsilon * direction.Y' offset.Z + Maths.GlobalEpsilon * direction.Z)' direction); " is 178.
Long Statement,Renderer,Ray,C:\repos\KommuSoft_MoRen\MonoRenderer\Ray.cs,Random,The length of the statement  "	Ray ray = new Ray (Maths.Random ()' Maths.Random ()' Maths.Random ()' Maths.Random ()' Maths.Random ()' Maths.Random ()); " is 121.
Long Statement,Renderer,Ray,C:\repos\KommuSoft_MoRen\MonoRenderer\Ray.cs,ToString,The length of the statement  "	return string.Format ("( {0} ; {1} ; {2} ; {3} ; {4} ; {5} )"' X0.ToString ("0.000000000")' Y0.ToString ("0.000000000")' Z0.ToString ("0.000000000")' DX.ToString ("0.000000000")' DY.ToString ("0.000000000")' DZ.ToString ("0.000000000")); " is 237.
Long Statement,Renderer,RenderItem,C:\repos\KommuSoft_MoRen\MonoRenderer\RenderItem.cs,BoxOverlap,The length of the statement  "	return (Math.Max (x0' xm) <= Math.Min (x1' xM) && Math.Max (y0' ym) <= Math.Min (y1' yM) && Math.Max (z0' zm) <= Math.Min (z1' zM)); " is 132.
Long Statement,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,ToBitmap,The length of the statement  "	BitmapData bmd = bmp.LockBits (new Rectangle (0x00' 0x00' this.Width' this.Height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppPArgb); " is 139.
Long Statement,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The length of the statement  "			Pixel [i + offset1] = ColorUtils.AlphaChannel | ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]); " is 122.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The length of the statement  "	if (this.p0.InBox (xm' xM' ym' yM' zm' zM) || this.p1.InBox (xm' xM' ym' yM' zm' zM) || this.p2.InBox (xm' xM' ym' yM' zm' zM)) { " is 129.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The length of the statement  "	if (invAxisTestYZ (bhy' bhz' e0z' e0y' fez' fey' v0y' v0z' v2y' v2z) || invAxisTestYZ (bhx' bhz' -e0z' -e0x' fez' fex' v0x' v0z' v2x' v2z) || invAxisTestYZ (bhx' bhy' e0y' e0x' fey' fex' v2x' v2y' v1x' v1y)) { " is 209.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The length of the statement  "	if (invAxisTestYZ (bhy' bhz' e1z' e1y' fez' fey' v0y' v0z' v2y' v2z) || invAxisTestYZ (bhx' bhz' -e1z' -e1x' fez' fex' v0x' v0z' v2x' v2z) || invAxisTestYZ (bhx' bhy' e1y' e1x' fey' fex' v0x' v0y' v1x' v1y)) { " is 209.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The length of the statement  "	if (invAxisTestYZ (bhy' bhz' e2z' e2y' fez' fey' v0y' v0z' v1y' v1z) || invAxisTestYZ (bhx' bhz' -e2z' -e2x' fez' fex' v0x' v0z' v1x' v1z) || invAxisTestYZ (bhx' bhy' e2y' e2x' fey' fex' v2x' v2y' v1x' v1y)) { " is 209.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,InBox,The length of the statement  "	if (invMinMaxBound (bhx' v0x' v1x' v2x) || invMinMaxBound (bhy' v0y' v1y' v2y) || invMinMaxBound (bhz' v0z' v1z' v2z)) { " is 120.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,HitAt,The length of the statement  "	double M = 1.0d / (dx01 * (ray.DY * dz02 - dy02 * ray.DZ) + dx02 * (dy01 * ray.DZ - ray.DY * dz01) + ray.DX * (dy02 * dz01 - dy01 * dz02)); " is 139.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,HitAt,The length of the statement  "	double beta = (dx02 * (ray.DZ * k - ray.DY * l) + ray.DX * (dy02 * l - dz02 * k) + (ray.DY * dz02 - dy02 * ray.DZ) * j) * M; " is 124.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,HitAt,The length of the statement  "	double gamma = -(dx01 * (ray.DZ * k - ray.DY * l) + ray.DX * (dy01 * l - dz01 * k) + (ray.DY * dz01 - dy01 * ray.DZ) * j) * M; " is 126.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,Cast,The length of the statement  "	double M = 1.0d / (dx01 * (ray.DY * dz02 - dy02 * ray.DZ) + dx02 * (dy01 * ray.DZ - ray.DY * dz01) + ray.DX * (dy02 * dz01 - dy01 * dz02)); " is 139.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,Cast,The length of the statement  "	double beta = (dx02 * (ray.DZ * k - ray.DY * l) + ray.DX * (dy02 * l - dz02 * k) + (ray.DY * dz02 - dy02 * ray.DZ) * j) * M; " is 124.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,Cast,The length of the statement  "	double gamma = -(dx01 * (ray.DZ * k - ray.DY * l) + ray.DX * (dy01 * l - dz01 * k) + (ray.DY * dz01 - dy01 * ray.DZ) * j) * M; " is 126.
Long Statement,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,Cast,The length of the statement  "	cr.Copy (t' alpha * n0.X + beta * n1.X + gamma * n2.X' alpha * n0.Y + beta * n1.Y + gamma * n2.Y' alpha * n0.Z + beta * n1.Z + gamma * n2.Z' alpha * t0.X + beta * t1.X + gamma * t2.X' alpha * t0.Y + beta * t1.Y + gamma * t2.Y' alpha * t0.Z + beta * t1.Z + gamma * t2.Z' this.bumpx' this.bumpy); " is 294.
Long Statement,Renderer,BSPAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\BSPAccelerator.cs,Split,The length of the statement  "		return new BSPNode (nibest' tm' ta' tb' tM' Split (cachea' sh' facenormals' maxDepth' maxSize' depth + 1)' Split (cacheb' sh' facenormals' maxDepth' maxSize' depth + 1)); " is 170.
Long Statement,Renderer,ImplementedSplitHeuristics,C:\repos\KommuSoft_MoRen\MonoRenderer\ImplementedSplitHeuristics.cs,SurfaceAreaHeuristic,The length of the statement  "	SortedSet<ProxyRenderItem> starts = new SortedSet<ProxyRenderItem> (items' new RenderItemNormalStartComparator (facenormal)); " is 125.
Long Statement,Renderer,Color6,C:\repos\KommuSoft_MoRen\MonoRenderer\Color6.cs,ToString,The length of the statement  "	return string.Format ("[Color6: Seg0={0}' Seg1={1}' Seg2={2}' Seg3={3}' Seg4={4}' Seg5={5}]"' Seg0.ToString ("X")' Seg1.ToString ("X")' Seg2.ToString ("X")' Seg3.ToString ("X")' Seg4.ToString ("X")' Seg5.ToString ("X")); " is 220.
Long Statement,Renderer,Color6Cache65536,C:\repos\KommuSoft_MoRen\MonoRenderer\Color6Cache65536.cs,Mix,The length of the statement  "	return new Color6 ((ushort)((High >> 0x20) / n)' (ushort)((High & 0xffffffff) / n)' (ushort)((Mid >> 0x20) / n)' (ushort)((Mid & 0xffffffff) / n)' (ushort)((Low >> 0x20) / n)' (ushort)((Low & 0xffffffff) / n)); " is 210.
Long Statement,Renderer,ColorCache,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorCache.cs,MixRGB,The length of the statement  "	return (uint)((((this.Red / n) << 0x04) & Color.Red8Mask) | (((this.Green / n) >> 0x04) & Color.Green8Mask) | (((this.Blue / n) >> 0x0c) & Color.Blue8Mask)); " is 157.
Long Statement,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,GetCropColor,The length of the statement  "	return ((uint)Maths.Border (0x00' red' 0xff) << 0x10) | ((uint)Maths.Border (0x00' green' 0xff) << 0x08) | (uint)Maths.Border (0x00' blue' 0xff); " is 145.
Long Statement,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,GetCropColor,The length of the statement  "	return (Maths.Border (0x00' red' 0xff) << 0x10) | (Maths.Border (0x00' green' 0xff) << 0x08) | Maths.Border (0x00' blue' 0xff); " is 127.
Long Statement,Renderer,Color,C:\repos\KommuSoft_MoRen\MonoRenderer\Color.cs,ToString,The length of the statement  "	return string.Format ("[Color: Red={0}' Green={1}' Blue={2}]"' RedInt.ToString ("X")' GreenInt.ToString ("X")' BlueInt.ToString ("X")); " is 135.
Long Statement,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readJunk,The length of the statement  "		Console.Error.WriteLine ("unknown chunk is {0}/{1} @ {2}"' this.currentJunk.ToString ("X")' this.nextJunkOffset.ToString ("X")' st.Position.ToString ("X")); " is 156.
Long Statement,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,AddPos,The length of the statement  "	pos.Add (new Point3 (double.Parse (m.Groups [1].Value' nfi)' double.Parse (m.Groups [2].Value' nfi)' double.Parse (m.Groups [3].Value' nfi))); " is 142.
Long Statement,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,AddNor,The length of the statement  "	Point3 p = new Point3 (double.Parse (m.Groups [1].Value' nfi)' double.Parse (m.Groups [2].Value' nfi)' double.Parse (m.Groups [3].Value' nfi)); " is 143.
Long Statement,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,Inject,The length of the statement  "		ris.Add (new Triangle (ItemOrNull (pos' seq [0x00])' ItemOrNull (pos' seq [0x03])' ItemOrNull (pos' seq [0x06])' ItemOrNull (nor' seq [0x01])' ItemOrNull (nor' seq [0x04])' ItemOrNull (nor' seq [0x07])' ItemOrNull (tex' seq [0x02])' ItemOrNull (tex' seq [0x05])' ItemOrNull (tex' seq [0x08])' this.DefaultMaterial)); " is 316.
Long Statement,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,checkNormTeX,The length of the statement  "		this.nor = Utils.GenerateSmoothNormalsFromTriangles (this.pos' this.tri.Select (x => new Tuple<int' int' int> (x [0x00]' x [0x03]' x [0x06]))); " is 143.
Long Statement,Renderer.SceneBuilding,SceneGraphNode,C:\repos\KommuSoft_MoRen\MonoRenderer\SceneGraphNode.cs,MixWith,The length of the statement  "	return new SceneGraphNode (Matrix4.InterpolateParse (this.transformerString' other.transformerString' factor)' this.childNames' this.cameraFollowings' this.mesh' this.LightWrapper); " is 181.
Long Statement,Renderer.SceneBuilding,MaterialWrapper,C:\repos\KommuSoft_MoRen\MonoRenderer\MaterialWrapper.cs,GenerateMaterial,The length of the statement  "	return new Material (ambient' diffuse' specular' Shininess' Transparent' texture' reflection' bump' NI' NT' Reflectance' null' ReflectedThreshold); " is 147.
Long Statement,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,Execute,The length of the statement  "	CacheTexture blurCache = new CacheTexture ((int)description.CameraWrapper.Width' (int)description.CameraWrapper.Height); " is 120.
Long Statement,Renderer.SceneBuilding,EnvMapWrapper,C:\repos\KommuSoft_MoRen\MonoRenderer\EnvMapWrapper.cs,ToEnvironmentMap,The length of the statement  "			return new SphericalEnvironmentMap (parsed [0x00].Data.PerlinNullOrTexture ()' parsed [0x01].Data.PerlinNullOrTexture ()); " is 122.
Long Statement,Renderer.SceneBuilding,EnvMapWrapper,C:\repos\KommuSoft_MoRen\MonoRenderer\EnvMapWrapper.cs,ToEnvironmentMap,The length of the statement  "			return new CubicalEnvironmentMap (parsed [0x00].Data.PerlinNullOrTexture ()' parsed [0x01].Data.PerlinNullOrTexture ()' parsed [0x02].Data.PerlinNullOrTexture ()' parsed [0x03].Data.PerlinNullOrTexture ()' parsed [0x04].Data.PerlinNullOrTexture ()' parsed [0x05].Data.PerlinNullOrTexture ()); " is 292.
Long Statement,Renderer.SceneBuilding,TriangleLoader,C:\repos\KommuSoft_MoRen\MonoRenderer\TriangleLoader.cs,Inject,The length of the statement  "	items.Add (new Triangle (new Point3 (pa' transform)' new Point3 (pb' transform)' new Point3 (pc' transform)' Point3.NullOrTransformedNonShiftCopy (na' transform)' Point3.NullOrTransformedNonShiftCopy (nb' transform)' Point3.NullOrTransformedNonShiftCopy (nc' transform)' ta' tb' tc' this.DefaultMaterial)); " is 306.
Complex Conditional,Renderer,GridAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\GridAccelerator.cs,CalculateHit,The conditional expression  "x0 > inter.X || inter.X > x1 || y0 > inter.Y || inter.Y > y1 || z0 > inter.Z || inter.Z > z1"  is complex.
Complex Conditional,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,The conditional expression  "matrix2 == null || matrix2 == string.Empty || factor <= 0.0d || !m2.Success"  is complex.
Complex Conditional,Renderer,Matrix4,C:\repos\KommuSoft_MoRen\MonoRenderer\Matrix4.cs,InterpolateParse,The conditional expression  "matrix1 == null || matrix1 == string.Empty || factor >= 1.0d || !m1.Success"  is complex.
Complex Conditional,Renderer,OctTreeAccelerator,C:\repos\KommuSoft_MoRen\MonoRenderer\OctTreeAccelerator.cs,CalculateHit,The conditional expression  "x0 > inter.X || inter.X > x1 || y0 > inter.Y || inter.Y > y1 || z0 > inter.Z || inter.Z > z1"  is complex.
Complex Conditional,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,calculateOffset,The conditional expression  "y0 <= y && y <= y1 && z0 <= z && z <= z1"  is complex.
Empty Catch Block,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Parse,The method has an empty catch block.
Magic Number,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,PerlinGradient,The following statement contains a magic number: return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);  
Magic Number,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,InitializeNoiseBuffer,The following statement contains a magic number: for (int i = 0; i < 256; i++)  	permutationResult [256 + i] = permutationResult [i] = permutation [i];  
Magic Number,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,InitializeNoiseBuffer,The following statement contains a magic number: for (int i = 0; i < 256; i++)  	permutationResult [256 + i] = permutationResult [i] = permutation [i];  
Magic Number,Renderer,Perlin,C:\repos\KommuSoft_MoRen\MonoRenderer\Perlin.cs,InitializeNoiseBuffer,The following statement contains a magic number: permutationResult [256 + i] = permutationResult [i] = permutation [i];  
Magic Number,Renderer,Point3,C:\repos\KommuSoft_MoRen\MonoRenderer\Point3.cs,Order,The following statement contains a magic number: return (3 + (int)Math.Sign (x * a + b * y + c * z + d)) >> 1;  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The following statement contains a magic number: for (int j = yBase; j < yend; j++) {  	tx = txBase;  	offset1 = j * Width;  	offset2 = (ty >> 8) * tw;  	for (int i = xBase; i < xend; i++) {  		Pixel [i + offset1] = ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  		tx += dtx;  	}  	ty += dty;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The following statement contains a magic number: for (int j = yBase; j < yend; j++) {  	tx = txBase;  	offset1 = j * Width;  	offset2 = (ty >> 8) * tw;  	for (int i = xBase; i < xend; i++) {  		Pixel [i + offset1] = ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  		tx += dtx;  	}  	ty += dty;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The following statement contains a magic number: offset2 = (ty >> 8) * tw;  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The following statement contains a magic number: for (int i = xBase; i < xend; i++) {  	Pixel [i + offset1] = ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  	tx += dtx;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,Add,The following statement contains a magic number: Pixel [i + offset1] = ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The following statement contains a magic number: for (int j = yBase; j < yend; j++) {  	tx = txBase;  	offset1 = j * Width;  	offset2 = (ty >> 8) * tw;  	for (int i = xBase; i < xend; i++) {  		Pixel [i + offset1] = ColorUtils.AlphaChannel | ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  		tx += dtx;  	}  	ty += dty;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The following statement contains a magic number: for (int j = yBase; j < yend; j++) {  	tx = txBase;  	offset1 = j * Width;  	offset2 = (ty >> 8) * tw;  	for (int i = xBase; i < xend; i++) {  		Pixel [i + offset1] = ColorUtils.AlphaChannel | ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  		tx += dtx;  	}  	ty += dty;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The following statement contains a magic number: offset2 = (ty >> 8) * tw;  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The following statement contains a magic number: for (int i = xBase; i < xend; i++) {  	Pixel [i + offset1] = ColorUtils.AlphaChannel | ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  	tx += dtx;  }  
Magic Number,Renderer,Texture,C:\repos\KommuSoft_MoRen\MonoRenderer\Texture.cs,AddWithAlpha,The following statement contains a magic number: Pixel [i + offset1] = ColorUtils.AlphaChannel | ColorUtils.Add (texture.Pixel [(tx >> 8) + offset2]' Pixel [i + offset1]);  
Magic Number,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,TriangleSplitAt,The following statement contains a magic number: if (pbf != sweep) {  	lb = new ProxyRenderItem[2];  	if (pbf > sweep) {  		fac = (sweep - paf) / (pbf - paf);  		fad = 1.0d - fac;  		pabc = new Point3 (fac * pb.X + fad * pa.X' fac * pb.Y + fad * pa.Y' fac * pb.Z + fad * pa.Z);  		la [0x00] = new ProxyTriangle (parent' pa' pac' pabc);  		lb [0x00] = new ProxyTriangle (parent' pac' pb' pabc);  		lb [0x01] = new ProxyTriangle (parent' pac' pc' pb);  		return new Tuple<ProxyRenderItem[]' ProxyRenderItem[]> (la' lb);  	}  	else {  		fac = (sweep - pbf) / (pcf - pbf);  		fad = 1.0d - fac;  		pabc = new Point3 (fac * pc.X + fad * pb.X' fac * pc.Y + fad * pb.Y' fac * pc.Z + fad * pb.Z);  		la [0x00] = new ProxyTriangle (parent' pc' pac' pabc);  		lb [0x00] = new ProxyTriangle (parent' pac' pb' pabc);  		lb [0x01] = new ProxyTriangle (parent' pac' pa' pb);  		return new Tuple<ProxyRenderItem[]' ProxyRenderItem[]> (lb' la);  	}  }  else {  	lb = new ProxyRenderItem[1];  	la [0x00] = new ProxyTriangle (parent' pa' pac' pb);  	lb [0x00] = new ProxyTriangle (parent' pac' pc' pb);  	return new Tuple<ProxyRenderItem[]' ProxyRenderItem[]> (la' lb);  }  
Magic Number,Renderer,Triangle,C:\repos\KommuSoft_MoRen\MonoRenderer\Triangle.cs,TriangleSplitAt,The following statement contains a magic number: lb = new ProxyRenderItem[2];  
Magic Number,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoxHitpoint,The following statement contains a magic number: calculateOffset (ray' inter' other' ref t' 0' x0' x1' 1' y0' y1' 2' z0' z1);  
Magic Number,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoxHitpoint,The following statement contains a magic number: calculateOffset (ray' inter' other' ref t' 1' y0' y1' 0' x0' x1' 2' z0' z1);  
Magic Number,Renderer,Utils,C:\repos\KommuSoft_MoRen\MonoRenderer\Utils.cs,CalculateBoxHitpoint,The following statement contains a magic number: calculateOffset (ray' inter' other' ref t' 2' z0' z1' 0' x0' x1' 1' y0' y1);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromFrac,The following statement contains a magic number: return (r << 0x10) | (r << 8) | r;  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromFrac,The following statement contains a magic number: return (r << 0x10) | (g << 8) | b;  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,GetAverage,The following statement contains a magic number: return (((color & RedChannel) >> 0x10) + ((color & GreenChannel) >> 0x08) + (color & BlueChannel)) / 3;  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 350 || lambda > 780) {  	return 0x00;  }  else {  	uint r = 0x00;  	uint g = 0x00;  	uint b = 0x00;  	uint factor = 0xffff;  	if (lambda < 440) {  		r = (uint)((440 - lambda) * 0x02d8);  		b = 0xffff;  		if (lambda < 420) {  			factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  		}  	}  	else if (lambda < 490) {  		g = (uint)((lambda - 440) * 0x051e);  		b = 0xffff;  	}  	else if (lambda < 510) {  		g = 0xffff;  		b = (uint)((510 - lambda) * 0x0ccc);  	}  	else if (lambda < 580) {  		r = (uint)((lambda - 510) * 0x03a8);  		g = 0xffff;  	}  	else if (lambda < 645) {  		r = 0xffff;  		g = (uint)((645 - lambda) * 0x03f0);  	}  	else {  		r = 0xffff;  		if (lambda > 700) {  			factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  		}  	}  	r *= factor;  	g *= factor;  	b *= factor;  	r >>= 0x08;  	r &= RedChannel;  	g >>= 0x10;  	g &= GreenChannel;  	b >>= 0x18;  	return r | g | b;  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 440) {  	r = (uint)((440 - lambda) * 0x02d8);  	b = 0xffff;  	if (lambda < 420) {  		factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  	}  }  else if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: r = (uint)((440 - lambda) * 0x02d8);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 420) {  	factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 420) {  	factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 420) {  	factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: factor = (uint)(0x4ccc + 0xb332 * (lambda - 350) / 70);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 490) {  	g = (uint)((lambda - 440) * 0x051e);  	b = 0xffff;  }  else if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: g = (uint)((lambda - 440) * 0x051e);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 510) {  	g = 0xffff;  	b = (uint)((510 - lambda) * 0x0ccc);  }  else if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: b = (uint)((510 - lambda) * 0x0ccc);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 580) {  	r = (uint)((lambda - 510) * 0x03a8);  	g = 0xffff;  }  else if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: r = (uint)((lambda - 510) * 0x03a8);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda < 645) {  	r = 0xffff;  	g = (uint)((645 - lambda) * 0x03f0);  }  else {  	r = 0xffff;  	if (lambda > 700) {  		factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  	}  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: g = (uint)((645 - lambda) * 0x03f0);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda > 700) {  	factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda > 700) {  	factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: if (lambda > 700) {  	factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  }  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  
Magic Number,Renderer,ColorUtils,C:\repos\KommuSoft_MoRen\MonoRenderer\ColorUtils.cs,FromWavelength,The following statement contains a magic number: factor = (uint)(0x4ccc + 0xb332 * (780 - lambda) / 80);  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: switch (Maths.MaxIndex (ux' uy' uz)) {  case 0x00:  	//left-right  	ux = 1.0d / ux;  	p.Y = 0.5d - 0.5d * ray.DY * ux / 3.0d;  	if (ray.DX < 0x00) {  		//left  		p.X = 0.125d + 0.125d * ray.DZ * ux;  	}  	else {  		//right  		p.X = 0.625d - 0.125d * ray.DZ * ux;  	}  	break;  case 0x01:  	//down-up  	uy = 1.0d / uy;  	p.X = 0.375d + 0.125d * ray.DX * uy;  	if (ray.DY < 0x00) {  		//down  		p.Y = (2.5d - 0.5d * ray.DZ * uy) / 3;  	}  	else {  		//up  		p.Y = (0.5d + 0.5d * ray.DZ * uy) / 3;  	}  	break;  default:  	//front-back  	uz = 1.0d / uz;  	p.Y = 0.5d - 0.5d * ray.DY * uz / 3.0d;  	if (ray.DZ < 0x00) {  		//front  		p.X = 0.875d - 0.125d * ray.DX * uz;  	}  	else {  		//back  		p.X = 0.375d + 0.125d * ray.DX * uz;  	}  	break;  }  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: switch (Maths.MaxIndex (ux' uy' uz)) {  case 0x00:  	//left-right  	ux = 1.0d / ux;  	p.Y = 0.5d - 0.5d * ray.DY * ux / 3.0d;  	if (ray.DX < 0x00) {  		//left  		p.X = 0.125d + 0.125d * ray.DZ * ux;  	}  	else {  		//right  		p.X = 0.625d - 0.125d * ray.DZ * ux;  	}  	break;  case 0x01:  	//down-up  	uy = 1.0d / uy;  	p.X = 0.375d + 0.125d * ray.DX * uy;  	if (ray.DY < 0x00) {  		//down  		p.Y = (2.5d - 0.5d * ray.DZ * uy) / 3;  	}  	else {  		//up  		p.Y = (0.5d + 0.5d * ray.DZ * uy) / 3;  	}  	break;  default:  	//front-back  	uz = 1.0d / uz;  	p.Y = 0.5d - 0.5d * ray.DY * uz / 3.0d;  	if (ray.DZ < 0x00) {  		//front  		p.X = 0.875d - 0.125d * ray.DX * uz;  	}  	else {  		//back  		p.X = 0.375d + 0.125d * ray.DX * uz;  	}  	break;  }  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: if (ray.DY < 0x00) {  	//down  	p.Y = (2.5d - 0.5d * ray.DZ * uy) / 3;  }  else {  	//up  	p.Y = (0.5d + 0.5d * ray.DZ * uy) / 3;  }  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: if (ray.DY < 0x00) {  	//down  	p.Y = (2.5d - 0.5d * ray.DZ * uy) / 3;  }  else {  	//up  	p.Y = (0.5d + 0.5d * ray.DZ * uy) / 3;  }  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: p.Y = (2.5d - 0.5d * ray.DZ * uy) / 3;  
Magic Number,Renderer,CrossEnvironmentMap,C:\repos\KommuSoft_MoRen\MonoRenderer\CrossEnvironmentMap.cs,GetColorAt,The following statement contains a magic number: p.Y = (0.5d + 0.5d * ray.DZ * uy) / 3;  
Magic Number,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readJunk,The following statement contains a magic number: switch (this.currentJunk) {  case 0x4000:  	f = Utils.ReadZeroEndByteString (br);  	#if DEBUG  	Console.WriteLine ("Loaded \"{0}\""' f);  	#endif  	child = new ObjectJunk (f);  	break;  case 0x4100:  	child = new LoadModeJunk (LoadMode.Triangle);  	Console.WriteLine ("Starting triangle");  	break;  case 0x4110:  	List<Point3> vertexList = new List<Point3> ();  	Utils.ReadPoint3DFloatList (br' vertexList);  	child = new ListJunk<Point3> (vertexList' ListPurpose.Vertex);  	break;  case 0x4120:  	List<ushort> indices = new List<ushort> ();  	Utils.ReadUShortList (br' indices' 4);  	child = new IndexJunk (indices);  	break;  case 0x4130:  	f = Utils.ReadZeroEndByteString (br);  	List<ushort> faces = new List<ushort> ();  	Utils.ReadUShortList (br' faces' 0x01);  	child = new UseMaterialJunk (f' faces);  	break;  case 0x4140:  	List<Point3> textureList = new List<Point3> ();  	Utils.ReadPoint2DFloatList (br' textureList);  	child = new ListJunk<Point3> (textureList' ListPurpose.Texture);  	break;  case 0x4160:  	child = new MatrixJunk (Utils.ReadMatrixChunk (br));  	break;  case 0x3d3d:  	child = new MeshJunk ();  	break;  case 0xafff:  	child = new MaterialJunk ();  	break;  case 0xa000:  	f = Utils.ReadZeroEndByteString (br);  	child = new MaterialNameJunk (f);  	break;  case 0xa010:  	child = new MaterialColorJunk (Utils.ReadColorChunk (br)' MaterialColorType.Ambient);  	break;  case 0xa020:  	child = new MaterialColorJunk (Utils.ReadColorChunk (br)' MaterialColorType.Diffuse);  	break;  case 0xa030:  	child = new MaterialColorJunk (Utils.ReadColorChunk (br)' MaterialColorType.Specular);  	break;  case 0xa040:  	child = new MaterialPercentageJunk (Utils.ReadPercentageChunk (br)' MaterialPercentageType.Shininess);  	break;  case 0xa050:  	child = new MaterialPercentageJunk (Utils.ReadPercentageChunk (br)' MaterialPercentageType.Transparency);  	break;  case 0xa200:  	child = new MaterialTextureJunk (Utils.ReadPercentageChunk (br)' MaterialTextureType.Texture);  	break;  case 0xa220:  	child = new MaterialTextureJunk (Utils.ReadPercentageChunk (br)' MaterialTextureType.Reflection);  	break;  case 0xa230:  	child = new MaterialTextureJunk (Utils.ReadPercentageChunk (br)' MaterialTextureType.Bump);  	break;  case 0xa300:  	child = new TextureNameJunk (Utils.ReadZeroEndByteString (br));  	break;  case 0x351:  	child = new TextureFlagsJunk (br.ReadUInt16 ());  	break;  default:  	#if DEBUG  	Console.Error.WriteLine ("unknown chunk is {0}/{1} @ {2}"' this.currentJunk.ToString ("X")' this.nextJunkOffset.ToString ("X")' st.Position.ToString ("X"));  	#endif  	readToNext (br' st);  	return;  }  
Magic Number,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readJunk,The following statement contains a magic number: Utils.ReadUShortList (br' indices' 4);  
Magic Number,Renderer.SceneBuilding,Loader3ds,C:\repos\KommuSoft_MoRen\MonoRenderer\Loader3ds.cs,readToNext,The following statement contains a magic number: for (int i = 6; i < n; i++) {  	br.ReadByte ();  }  
Magic Number,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,AddPos,The following statement contains a magic number: pos.Add (new Point3 (double.Parse (m.Groups [1].Value' nfi)' double.Parse (m.Groups [2].Value' nfi)' double.Parse (m.Groups [3].Value' nfi)));  
Magic Number,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,AddPos,The following statement contains a magic number: pos.Add (new Point3 (double.Parse (m.Groups [1].Value' nfi)' double.Parse (m.Groups [2].Value' nfi)' double.Parse (m.Groups [3].Value' nfi)));  
Magic Number,Renderer.SceneBuilding,LoaderObj,C:\repos\KommuSoft_MoRen\MonoRenderer\LoaderObj.cs,AddTex,The following statement contains a magic number: tex.Add (new Point3 (double.Parse (m.Groups [2].Value' nfi)' double.Parse (m.Groups [1].Value' nfi)' 0.0d));  
Magic Number,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,buildCameraCalculateAt,The following statement contains a magic number: switch (this.RenderingTechnology) {  case RenderingTechnology.Normal:  	Camera cam = camw.Camera (acc' lights' es);  	cam.CalculateImage ();  	return cam.Raster;  case RenderingTechnology.Anaglyph:  	Camera camL = camw.Camera (acc' lights' es);  	camL.Displacement = -0.01 * camL.ScreenDistance;  	camL.CalculateImage ();  	Camera camR = camw.Camera (acc' lights' es);  	camR.Displacement = 0.01 * camR.ScreenDistance;  	camR.CalculateImage ();  	return Texture.ToCyanRed (camL.Raster' camR.Raster);  default:  	return null;  }  
Magic Number,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,buildCameraCalculateAt,The following statement contains a magic number: switch (this.RenderingTechnology) {  case RenderingTechnology.Normal:  	Camera cam = camw.Camera (acc' lights' es);  	cam.CalculateImage ();  	return cam.Raster;  case RenderingTechnology.Anaglyph:  	Camera camL = camw.Camera (acc' lights' es);  	camL.Displacement = -0.01 * camL.ScreenDistance;  	camL.CalculateImage ();  	Camera camR = camw.Camera (acc' lights' es);  	camR.Displacement = 0.01 * camR.ScreenDistance;  	camR.CalculateImage ();  	return Texture.ToCyanRed (camL.Raster' camR.Raster);  default:  	return null;  }  
Magic Number,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,buildCameraCalculateAt,The following statement contains a magic number: camL.Displacement = -0.01 * camL.ScreenDistance;  
Magic Number,Renderer.SceneBuilding,SuperCamera,C:\repos\KommuSoft_MoRen\MonoRenderer\SuperCamera.cs,buildCameraCalculateAt,The following statement contains a magic number: camR.Displacement = 0.01 * camR.ScreenDistance;  
Missing Default,Renderer.SceneBuilding,CameraFollowing,C:\repos\KommuSoft_MoRen\MonoRenderer\CameraFollowing.cs,Apply,The following switch statement is missing a default case: switch (this.ReferencePoint) {  case CameraReferencePoint.Lookat:  	wrapper.Lookat = p;  	break;  case CameraReferencePoint.Position:  	wrapper.Position = p;  	break;  }  
