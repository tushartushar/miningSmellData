Implementation smell,Namespace,Class,File,Method,Description
Long Statement,WsFedSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Startup.cs,ConfigureServices,The length of the statement  "                options.MetadataAddress = "https://login.windows.net/cdc690f9-b6b8-4023-813a-bae7143d1f87/FederationMetadata/2007-06/FederationMetadata.xml"; " is 141.
Long Statement,WsFedSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Startup.cs,Configure,The length of the statement  "                        await context.Response.WriteAsync($"<h1>Access Denied for user {HtmlEncode(context.User.Identity.Name)} to resource '{HtmlEncode(context.Request.Query["ReturnUrl"])}'</h1>"); " is 174.
Long Statement,WsFedSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Startup.cs,Configure,The length of the statement  "                if (context.Request.Path.Equals("/restricted") && !user.Identities.Any(identity => identity.HasClaim("special"' "true"))) " is 121.
Long Statement,WsFedSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Startup.cs,Configure,The length of the statement  "                    await WriteTableHeader(response' new string[] { "Claim Type"' "Value" }' context.User.Claims.Select(c => new string[] { c.Type' c.Value })); " is 140.
Long Statement,WsFedSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Startup.cs,WriteHtmlAsync,The length of the statement  "            var bootstrap = "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">"; " is 235.
Magic Number,WsFedSample,Program,D:\research\architectureSmells\repos\aspnet_Security\samples\WsFedSample\Program.cs,Main,The following statement contains a magic number: var host = new WebHostBuilder()                  .ConfigureLogging(factory =>                  {                      factory.AddConsole();                      factory.AddDebug();                      factory.AddFilter("Console"' level => level >= LogLevel.Information);                      factory.AddFilter("Debug"' level => level >= LogLevel.Information);                  })                  .UseKestrel(options =>                  {                      options.Listen(IPAddress.Loopback' 44307' listenOptions =>                      {                          // Configure SSL                          var serverCertificate = LoadCertificate();                          listenOptions.UseHttps(serverCertificate);                      });                  })                  .UseContentRoot(Directory.GetCurrentDirectory())                  .UseIISIntegration()                  .UseStartup<Startup>()                  .Build();
