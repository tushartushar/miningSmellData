Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookieConsentTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookieConsentTests.cs,GrantConsentSetsCookie,The following statement contains a magic number: Assert.Equal(2' cookies.Count);
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookieConsentTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookieConsentTests.cs,GrantConsentSetsCookie,The following statement contains a magic number: Assert.True(consentCookie.Expires.Value > DateTimeOffset.Now + TimeSpan.FromDays(364));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookieConsentTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookieConsentTests.cs,WithdrawConsentDeletesCookie,The following statement contains a magic number: Assert.Equal(2' cookies.Count);
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureAlwaysSetsSecure,The following statement contains a magic number: await RunTest("/secureAlways"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.Always                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureAlways"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureAlwaysSetsSecure,The following statement contains a magic number: await RunTest("/secureAlways"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.Always                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureAlways"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureNoneLeavesSecureUnchanged,The following statement contains a magic number: await RunTest("/secureNone"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.None                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureNone"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureNoneLeavesSecureUnchanged,The following statement contains a magic number: await RunTest("/secureNone"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.None                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureNone"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureSameUsesRequest,The following statement contains a magic number: await RunTest("/secureSame"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.SameAsRequest                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      })'                  new RequestTest("https://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureSameUsesRequest,The following statement contains a magic number: await RunTest("/secureSame"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.SameAsRequest                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      })'                  new RequestTest("https://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureSameUsesRequest,The following statement contains a magic number: await RunTest("/secureSame"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.SameAsRequest                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      })'                  new RequestTest("https://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SecureSameUsesRequest,The following statement contains a magic number: await RunTest("/secureSame"'                  new CookiePolicyOptions                  {                      Secure = CookieSecurePolicy.SameAsRequest                  }'                  SecureCookieAppends'                  new RequestTest("http://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      })'                  new RequestTest("https://example.com/secureSame"'                      transaction =>                      {                          Assert.NotNull(transaction.SetCookie);                          Assert.Equal("A=A; path=/; secure; samesite=lax"' transaction.SetCookie[0]);                          Assert.Equal("B=B; path=/; secure; samesite=lax"' transaction.SetCookie[1]);                          Assert.Equal("C=C; path=/; secure; samesite=lax"' transaction.SetCookie[2]);                          Assert.Equal("D=D; path=/; secure; samesite=lax"' transaction.SetCookie[3]);                      }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,HttpOnlyAlwaysSetsItAlways,The following statement contains a magic number: await RunTest("/httpOnlyAlways"'                  new CookiePolicyOptions                  {                      HttpOnly = HttpOnlyPolicy.Always                  }'                  HttpCookieAppends'                  new RequestTest("http://example.com/httpOnlyAlways"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax; httponly"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax; httponly"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax; httponly"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax; httponly"' transaction.SetCookie[3]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,HttpOnlyAlwaysSetsItAlways,The following statement contains a magic number: await RunTest("/httpOnlyAlways"'                  new CookiePolicyOptions                  {                      HttpOnly = HttpOnlyPolicy.Always                  }'                  HttpCookieAppends'                  new RequestTest("http://example.com/httpOnlyAlways"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax; httponly"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax; httponly"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax; httponly"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax; httponly"' transaction.SetCookie[3]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,HttpOnlyNoneLeavesItAlone,The following statement contains a magic number: await RunTest("/httpOnlyNone"'                  new CookiePolicyOptions                  {                      HttpOnly = HttpOnlyPolicy.None                  }'                  HttpCookieAppends'                  new RequestTest("http://example.com/httpOnlyNone"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax; httponly"' transaction.SetCookie[3]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,HttpOnlyNoneLeavesItAlone,The following statement contains a magic number: await RunTest("/httpOnlyNone"'                  new CookiePolicyOptions                  {                      HttpOnly = HttpOnlyPolicy.None                  }'                  HttpCookieAppends'                  new RequestTest("http://example.com/httpOnlyNone"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax; httponly"' transaction.SetCookie[3]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteStrictSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteStrict"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Strict                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteStrict"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=strict"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=strict"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=strict"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=strict"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteStrictSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteStrict"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Strict                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteStrict"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=strict"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=strict"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=strict"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=strict"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteStrictSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteStrict"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Strict                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteStrict"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=strict"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=strict"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=strict"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=strict"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteLaxSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteLax"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Lax                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteLax"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteLaxSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteLax"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Lax                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteLax"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteLaxSetsItAlways,The following statement contains a magic number: await RunTest("/sameSiteLax"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.Lax                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteLax"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/; samesite=lax"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/; samesite=lax"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteNoneLeavesItAlone,The following statement contains a magic number: await RunTest("/sameSiteNone"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.None                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteNone"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteNoneLeavesItAlone,The following statement contains a magic number: await RunTest("/sameSiteNone"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.None                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteNone"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,SameSiteNoneLeavesItAlone,The following statement contains a magic number: await RunTest("/sameSiteNone"'                  new CookiePolicyOptions                  {                      MinimumSameSitePolicy = Http.SameSiteMode.None                  }'                  SameSiteCookieAppends'                  new RequestTest("http://example.com/sameSiteNone"'                  transaction =>                  {                      Assert.NotNull(transaction.SetCookie);                      Assert.Equal("A=A; path=/"' transaction.SetCookie[0]);                      Assert.Equal("B=B; path=/"' transaction.SetCookie[1]);                      Assert.Equal("C=C; path=/; samesite=lax"' transaction.SetCookie[2]);                      Assert.Equal("D=D; path=/; samesite=lax"' transaction.SetCookie[3]);                      Assert.Equal("E=E; path=/; samesite=strict"' transaction.SetCookie[4]);                  }));
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyCanHijackAppend,The following statement contains a magic number: Assert.Equal("Hao=Hao; path=/; samesite=lax"' transaction.SetCookie[2]);
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyCanHijackAppend,The following statement contains a magic number: Assert.Equal("Hao=Hao; path=/; secure; samesite=lax"' transaction.SetCookie[3]);
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyAppliesToCookieAuthChunks,The following statement contains a magic number: var builder = new WebHostBuilder()                  .ConfigureServices(services =>                  {                      services.AddAuthentication().AddCookie(o =>                      {                          o.Cookie.Name = "TestCookie";                          o.Cookie.HttpOnly = false;                          o.Cookie.SecurePolicy = CookieSecurePolicy.None;                      });                  })                  .Configure(app =>                  {                      app.UseCookiePolicy(new CookiePolicyOptions                      {                          HttpOnly = HttpOnlyPolicy.Always'                          Secure = CookieSecurePolicy.Always'                      });                      app.UseAuthentication();                      app.Run(context =>                      {                          return context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme'                              new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity(new string('c'' 1024 * 5)' "Cookies"))));                      });                  });
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyAppliesToCookieAuthChunks,The following statement contains a magic number: var builder = new WebHostBuilder()                  .ConfigureServices(services =>                  {                      services.AddAuthentication().AddCookie(o =>                      {                          o.Cookie.Name = "TestCookie";                          o.Cookie.HttpOnly = false;                          o.Cookie.SecurePolicy = CookieSecurePolicy.None;                      });                  })                  .Configure(app =>                  {                      app.UseCookiePolicy(new CookiePolicyOptions                      {                          HttpOnly = HttpOnlyPolicy.Always'                          Secure = CookieSecurePolicy.Always'                      });                      app.UseAuthentication();                      app.Run(context =>                      {                          return context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme'                              new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity(new string('c'' 1024 * 5)' "Cookies"))));                      });                  });
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyAppliesToCookieAuthChunks,The following statement contains a magic number: Assert.Equal(3' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.CookiePolicy.Test,CookiePolicyTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\CookiePolicyTests.cs,CookiePolicyAppliesToCookieAuthChunks,The following statement contains a magic number: cookie = SetCookieHeaderValue.Parse(transaction.SetCookie[2]);
Magic Number,Microsoft.AspNetCore.CookiePolicy,TestExtensions,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.CookiePolicy.Test\TestExtensions.cs,Describe,The following statement contains a magic number: res.StatusCode = 200;
