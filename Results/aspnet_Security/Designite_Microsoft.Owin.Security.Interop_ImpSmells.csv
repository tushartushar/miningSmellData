Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,GetRequestCookie,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,Cyclomatic complexity of the method is 9
Long Statement,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,GetRequestCookie,The length of the statement  "                                "The chunked cookie is incomplete. Only {0} of the expected {1} chunks were found' totaling {2} characters. A client size limit may have been exceeded."' " is 153.
Long Statement,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,AppendResponseCookie,The length of the statement  "                throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data."); " is 120.
Long Statement,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,The length of the statement  "                rejectPredicate = value => predicate(value) && value.IndexOf("domain=" + options.Domain' StringComparison.OrdinalIgnoreCase) != -1; " is 131.
Long Statement,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,The length of the statement  "                rejectPredicate = value => predicate(value) && value.IndexOf("path=" + options.Path' StringComparison.OrdinalIgnoreCase) != -1; " is 127.
Long Statement,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,The length of the statement  "                responseHeaders.SetValues(Constants.Headers.SetCookie' existingValues.Where(value => !rejectPredicate(value)).ToArray()); " is 121.
Magic Number,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,ChunkingCookieManager,The following statement contains a magic number: ChunkSize = 4070;
Magic Number,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,AppendResponseCookie,The following statement contains a magic number: if (!ChunkSize.HasValue || ChunkSize.Value > templateLength + value.Length)              {                  responseCookies.Append(key' value' options);              }              else if (ChunkSize.Value < templateLength + 10)              {                  // 10 is the minimum data we want to put in an individual cookie' including the cookie chunk identifier "CXX".                  // No room for data' we can't chunk the options and name                  throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data.");              }              else              {                  // Break the cookie down into multiple cookies.                  // Key = CookieName' value = "Segment1Segment2Segment2"                  // Set-Cookie: CookieName=chunks-3; path=/                  // Set-Cookie: CookieNameC1="Segment1"; path=/                  // Set-Cookie: CookieNameC2="Segment2"; path=/                  // Set-Cookie: CookieNameC3="Segment3"; path=/                  var dataSizePerCookie = ChunkSize.Value - templateLength - 3; // Budget 3 chars for the chunkid.                  var cookieChunkCount = (int)Math.Ceiling(value.Length * 1.0 / dataSizePerCookie);                    responseCookies.Append(key' ChunkCountPrefix + cookieChunkCount.ToString(CultureInfo.InvariantCulture)' options);                    var offset = 0;                  for (var chunkId = 1; chunkId <= cookieChunkCount; chunkId++)                  {                      var remainingLength = value.Length - offset;                      var length = Math.Min(dataSizePerCookie' remainingLength);                      var segment = value.Substring(offset' length);                      offset += length;                        responseCookies.Append(key + ChunkKeySuffix + chunkId.ToString(CultureInfo.InvariantCulture)' segment' options);                  }              }
Magic Number,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,AppendResponseCookie,The following statement contains a magic number: if (!ChunkSize.HasValue || ChunkSize.Value > templateLength + value.Length)              {                  responseCookies.Append(key' value' options);              }              else if (ChunkSize.Value < templateLength + 10)              {                  // 10 is the minimum data we want to put in an individual cookie' including the cookie chunk identifier "CXX".                  // No room for data' we can't chunk the options and name                  throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data.");              }              else              {                  // Break the cookie down into multiple cookies.                  // Key = CookieName' value = "Segment1Segment2Segment2"                  // Set-Cookie: CookieName=chunks-3; path=/                  // Set-Cookie: CookieNameC1="Segment1"; path=/                  // Set-Cookie: CookieNameC2="Segment2"; path=/                  // Set-Cookie: CookieNameC3="Segment3"; path=/                  var dataSizePerCookie = ChunkSize.Value - templateLength - 3; // Budget 3 chars for the chunkid.                  var cookieChunkCount = (int)Math.Ceiling(value.Length * 1.0 / dataSizePerCookie);                    responseCookies.Append(key' ChunkCountPrefix + cookieChunkCount.ToString(CultureInfo.InvariantCulture)' options);                    var offset = 0;                  for (var chunkId = 1; chunkId <= cookieChunkCount; chunkId++)                  {                      var remainingLength = value.Length - offset;                      var length = Math.Min(dataSizePerCookie' remainingLength);                      var segment = value.Substring(offset' length);                      offset += length;                        responseCookies.Append(key + ChunkKeySuffix + chunkId.ToString(CultureInfo.InvariantCulture)' segment' options);                  }              }
Magic Number,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,The following statement contains a magic number: AppendResponseCookie(                  context'                  key'                  string.Empty'                  new CookieOptions()                  {                      Path = options.Path'                      Domain = options.Domain'                      Expires = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                  });
Magic Number,Microsoft.Owin.Security.Interop,ChunkingCookieManager,C:\repos\aspnet_Security\src\Microsoft.Owin.Security.Interop\ChunkingCookieManager.cs,DeleteCookie,The following statement contains a magic number: for (int i = 1; i <= chunks; i++)              {                  AppendResponseCookie(                      context'                      key + "C" + i.ToString(CultureInfo.InvariantCulture)'                      string.Empty'                      new CookieOptions()                      {                          Path = options.Path'                          Domain = options.Domain'                          Expires = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                      });              }
