Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationHandler.cs,ReadCookieTicket,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,GetRequestCookie,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,DeleteCookie,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.AspNetCore.Authentication.Cookies,CookieSignedInContext,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\Events\CookieSignedInContext.cs,CookieSignedInContext,The method has 5 parameters. Parameters: context' scheme' principal' properties' options
Long Parameter List,Microsoft.AspNetCore.Authentication.Cookies,CookieSigningInContext,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\Events\CookieSigningInContext.cs,CookieSigningInContext,The method has 6 parameters. Parameters: context' scheme' options' principal' properties' cookieOptions
Long Parameter List,Microsoft.AspNetCore.Authentication.Cookies,CookieSigningOutContext,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\Events\CookieSigningOutContext.cs,CookieSigningOutContext,The method has 5 parameters. Parameters: context' scheme' options' properties' cookieOptions
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationHandler.cs,HandleForbiddenAsync,The length of the statement  "            var redirectContext = new RedirectContext<CookieAuthenticationOptions>(Context' Scheme' Options' properties' BuildRedirectUri(accessDeniedUri)); " is 144.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationHandler.cs,HandleChallengeAsync,The length of the statement  "            var redirectContext = new RedirectContext<CookieAuthenticationOptions>(Context' Scheme' Options' properties' BuildRedirectUri(loginUri)); " is 137.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,PostConfigureCookieAuthenticationOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\PostConfigureCookieAuthenticationOptions.cs,PostConfigure,The length of the statement  "                var dataProtector = options.DataProtectionProvider.CreateProtector("Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware"' name' "v2"); " is 157.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,GetRequestCookie,The length of the statement  "                                    "The chunked cookie is incomplete. Only {0} of the expected {1} chunks were found' totaling {2} characters. A client size limit may have been exceeded."' " is 153.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,AppendResponseCookie,The length of the statement  "                throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data."); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,DeleteCookie,The length of the statement  "                rejectPredicate = value => predicate(value) && value.IndexOf("domain=" + options.Domain' StringComparison.OrdinalIgnoreCase) != -1; " is 131.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,DeleteCookie,The length of the statement  "                rejectPredicate = value => predicate(value) && value.IndexOf("path=" + options.Path' StringComparison.OrdinalIgnoreCase) != -1; " is 127.
Long Statement,Microsoft.AspNetCore.Builder,CookieAppBuilderExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAppBuilderExtensions.cs,UseCookieAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.AspNetCore.Builder,CookieAppBuilderExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAppBuilderExtensions.cs,UseCookieAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.Extensions.DependencyInjection,CookieExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieExtensions.cs,AddCookie,The length of the statement  "            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IPostConfigureOptions<CookieAuthenticationOptions>' PostConfigureCookieAuthenticationOptions>()); " is 159.
Long Statement,Microsoft.Extensions.DependencyInjection,CookieExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieExtensions.cs,AddCookie,The length of the statement  "            return builder.AddScheme<CookieAuthenticationOptions' CookieAuthenticationHandler>(authenticationScheme' displayName' configureOptions); " is 136.
Complex Conditional,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationHandler.cs,CheckForRefresh,The conditional expression  "issuedUtc != null && expiresUtc != null && Options.SlidingExpiration && allowRefresh"  is complex.
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationHandler.cs,ApplyHeaders,The following statement contains a magic number: if (shouldRedirectToReturnUrl && Response.StatusCode == 200)              {                  // set redirect uri in order:                  // 1. properties.RedirectUri                  // 2. query parameter ReturnUrlParameter                  //                  // Absolute uri is not allowed if it is from query string as query string is not                  // a trusted source.                  var redirectUri = properties.RedirectUri;                  if (string.IsNullOrEmpty(redirectUri))                  {                      redirectUri = Request.Query[Options.ReturnUrlParameter];                      if (string.IsNullOrEmpty(redirectUri) || !IsHostRelative(redirectUri))                      {                          redirectUri = null;                      }                  }                    if (redirectUri != null)                  {                      await Events.RedirectToReturnUrl(                          new RedirectContext<CookieAuthenticationOptions>(Context' Scheme' Options' properties' redirectUri));                  }              }
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieAuthenticationOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\CookieAuthenticationOptions.cs,CookieAuthenticationOptions,The following statement contains a magic number: ExpireTimeSpan = TimeSpan.FromDays(14);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,AppendResponseCookie,The following statement contains a magic number: if (!ChunkSize.HasValue || ChunkSize.Value > templateLength + value.Length)              {                  responseCookies.Append(key' value' options);              }              else if (ChunkSize.Value < templateLength + 10)              {                  // 10 is the minimum data we want to put in an individual cookie' including the cookie chunk identifier "CXX".                  // No room for data' we can't chunk the options and name                  throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data.");              }              else              {                  // Break the cookie down into multiple cookies.                  // Key = CookieName' value = "Segment1Segment2Segment2"                  // Set-Cookie: CookieName=chunks-3; path=/                  // Set-Cookie: CookieNameC1="Segment1"; path=/                  // Set-Cookie: CookieNameC2="Segment2"; path=/                  // Set-Cookie: CookieNameC3="Segment3"; path=/                  var dataSizePerCookie = ChunkSize.Value - templateLength - 3; // Budget 3 chars for the chunkid.                  var cookieChunkCount = (int)Math.Ceiling(value.Length * 1.0 / dataSizePerCookie);                    responseCookies.Append(key' ChunkCountPrefix + cookieChunkCount.ToString(CultureInfo.InvariantCulture)' options);                    var offset = 0;                  for (var chunkId = 1; chunkId <= cookieChunkCount; chunkId++)                  {                      var remainingLength = value.Length - offset;                      var length = Math.Min(dataSizePerCookie' remainingLength);                      var segment = value.Substring(offset' length);                      offset += length;                        responseCookies.Append(key + ChunkKeySuffix + chunkId.ToString(CultureInfo.InvariantCulture)' segment' options);                  }              }
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,AppendResponseCookie,The following statement contains a magic number: if (!ChunkSize.HasValue || ChunkSize.Value > templateLength + value.Length)              {                  responseCookies.Append(key' value' options);              }              else if (ChunkSize.Value < templateLength + 10)              {                  // 10 is the minimum data we want to put in an individual cookie' including the cookie chunk identifier "CXX".                  // No room for data' we can't chunk the options and name                  throw new InvalidOperationException("The cookie key and options are larger than ChunksSize' leaving no room for data.");              }              else              {                  // Break the cookie down into multiple cookies.                  // Key = CookieName' value = "Segment1Segment2Segment2"                  // Set-Cookie: CookieName=chunks-3; path=/                  // Set-Cookie: CookieNameC1="Segment1"; path=/                  // Set-Cookie: CookieNameC2="Segment2"; path=/                  // Set-Cookie: CookieNameC3="Segment3"; path=/                  var dataSizePerCookie = ChunkSize.Value - templateLength - 3; // Budget 3 chars for the chunkid.                  var cookieChunkCount = (int)Math.Ceiling(value.Length * 1.0 / dataSizePerCookie);                    responseCookies.Append(key' ChunkCountPrefix + cookieChunkCount.ToString(CultureInfo.InvariantCulture)' options);                    var offset = 0;                  for (var chunkId = 1; chunkId <= cookieChunkCount; chunkId++)                  {                      var remainingLength = value.Length - offset;                      var length = Math.Min(dataSizePerCookie' remainingLength);                      var segment = value.Substring(offset' length);                      offset += length;                        responseCookies.Append(key + ChunkKeySuffix + chunkId.ToString(CultureInfo.InvariantCulture)' segment' options);                  }              }
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,DeleteCookie,The following statement contains a magic number: AppendResponseCookie(                  context'                  key'                  string.Empty'                  new CookieOptions()                  {                      Path = options.Path'                      Domain = options.Domain'                      SameSite = options.SameSite'                      Expires = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                  });
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,ChunkingCookieManager,C:\repos\aspnet_Security\shared\Microsoft.AspNetCore.ChunkingCookieManager.Sources\ChunkingCookieManager.cs,DeleteCookie,The following statement contains a magic number: for (int i = 1; i <= chunks; i++)              {                  AppendResponseCookie(                      context'                      key + "C" + i.ToString(CultureInfo.InvariantCulture)'                      string.Empty'                      new CookieOptions()                      {                          Path = options.Path'                          Domain = options.Domain'                          SameSite = options.SameSite'                          Expires = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)'                      });              }
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _authSchemeSignedIn = LoggerMessage.Define<string>(                  eventId: 10'                  logLevel: LogLevel.Information'                  formatString: "AuthenticationScheme: {AuthenticationScheme} signed in.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.Cookies\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _authSchemeSignedOut = LoggerMessage.Define<string>(                  eventId: 11'                  logLevel: LogLevel.Information'                  formatString: "AuthenticationScheme: {AuthenticationScheme} signed out.");
