Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestSettings,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\TestSettings.cs,ValidateParameters,Cyclomatic complexity of the method is 14
Long Parameter List,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestSettings,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\TestSettings.cs,ValidateParameter,The method has 5 parameters. Parameters: parameterName' expectedValue' actualParams' errors' htmlEncoded
Long Identifier,Microsoft.AspNetCore.Authentication.WsFederation,CustomStateDataFormat,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\CustomStateDataFormat.cs,,The length of the parameter lastSavedAuthenticationProperties is 33.
Long Statement,Microsoft.AspNetCore.Authentication,TestHandler,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\DynamicSchemeTests.cs,HandleAuthenticateAsync,The length of the statement  "                return Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal' new AuthenticationProperties()' Scheme.Name))); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication,TestHandler,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\DynamicSchemeTests.cs,AuthenticateAsync,The length of the statement  "                return Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal' new AuthenticationProperties()' Scheme.Name))); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication,TestHandler2,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\PolicyTests.cs,AuthenticateAsync,The length of the statement  "                return Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal' new AuthenticationProperties()' Scheme.Name))); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication,RemoteAuthenticationTests<TOptions>,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\RemoteAuthenticationTests.cs,CreateServerWithServices,The length of the statement  "            //private static TestServer CreateServer(Action<IApplicationBuilder> configure' Action<IServiceCollection> configureServices' Func<HttpContext' Task<bool>> handler) " is 164.
Long Statement,Microsoft.AspNetCore.Authentication,RemoteAuthenticationTests<TOptions>,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\RemoteAuthenticationTests.cs,VerifySignInSchemeCannotBeSetToSelf,The length of the statement  "            var error = await Assert.ThrowsAsync<InvalidOperationException>(() => server.SendAsync("https://example.com/challenge")); " is 121.
Long Statement,Microsoft.AspNetCore.Authentication,RemoteAuthenticationTests<TOptions>,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\RemoteAuthenticationTests.cs,VerifySignInSchemeCannotBeSetToSelfUsingDefaultScheme,The length of the statement  "            var error = await Assert.ThrowsAsync<InvalidOperationException>(() => server.SendAsync("https://example.com/challenge")); " is 121.
Long Statement,Microsoft.AspNetCore.Authentication,RemoteAuthenticationTests<TOptions>,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\RemoteAuthenticationTests.cs,VerifySignInSchemeCannotBeSetToSelfUsingDefaultSignInScheme,The length of the statement  "            var error = await Assert.ThrowsAsync<InvalidOperationException>(() => server.SendAsync("https://example.com/challenge")); " is 121.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,SignInWrongAuthTypeThrows,The length of the statement  "            await Assert.ThrowsAsync<InvalidOperationException>(async () => await SendAsync(server' "http://example.com/testpath")); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,SignOutWrongAuthTypeThrows,The length of the statement  "            await Assert.ThrowsAsync<InvalidOperationException>(async () => await SendAsync(server' "http://example.com/testpath")); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,MapWillAffectChallengeOnlyWithUseAuth,The length of the statement  "                    app.Map("/login"' signoutApp => signoutApp.Run(context => context.ChallengeAsync("Cookies"' new AuthenticationProperties() { RedirectUri = "/" }))); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,ChallengeDoesNotSet401OnUnauthorized,The length of the statement  "                        await Assert.ThrowsAsync<InvalidOperationException>(() => context.ChallengeAsync(CookieAuthenticationDefaults.AuthenticationScheme)); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CanConfigureDefaultCookieInstance,The length of the statement  "                    app.Run(context => context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme' new ClaimsPrincipal(new ClaimsIdentity()))); " is 134.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,MapWillNotAffectAccessDenied,The length of the statement  "                .ConfigureServices(services => services.AddAuthentication().AddCookie(o => o.AccessDeniedPath = new PathString("/denied"))); " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,NestedMapWillNotAffectLogin,The length of the statement  "                        map.Map("/login"' signoutApp => signoutApp.Run(context => context.ChallengeAsync("Cookies"' new AuthenticationProperties() { RedirectUri = "/" }))); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,RedirectUriIsHoneredAfterSignin,The length of the statement  "                    new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' CookieAuthenticationDefaults.AuthenticationScheme)))' " is 121.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,RedirectUriInQueryIsHoneredAfterSignin,The length of the statement  "                    new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' CookieAuthenticationDefaults.AuthenticationScheme)))); " is 122.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,AbsoluteRedirectUriInQueryStringIsRejected,The length of the statement  "                    new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' CookieAuthenticationDefaults.AuthenticationScheme)))); " is 122.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,EnsurePrecedenceOfRedirectUriAfterSignin,The length of the statement  "                    new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' CookieAuthenticationDefaults.AuthenticationScheme)))' " is 121.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,NestedMapWillNotAffectAccessDenied,The length of the statement  "                    .ConfigureServices(services => services.AddAuthentication().AddCookie(o => o.AccessDeniedPath = new PathString("/denied"))); " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,FindClaimValue,The length of the statement  "            var claim = transaction.ResponseElement.Elements("claim").SingleOrDefault(elt => elt.Attribute("type").Value == claimType); " is 123.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,FindPropertiesValue,The length of the statement  "            var property = transaction.ResponseElement.Elements("extra").SingleOrDefault(elt => elt.Attribute("type").Value == key); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CreateServerWithServices,The length of the statement  "                            await context.ChallengeAsync(CookieAuthenticationDefaults.AuthenticationScheme' new AuthenticationProperties() { RedirectUri = "/CustomRedirect" }); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CreateServerWithServices,The length of the statement  "                            Describe(res' AuthenticateResult.Success(new AuthenticationTicket(context.User' new AuthenticationProperties()' CookieAuthenticationDefaults.AuthenticationScheme))); " is 165.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CreateServerWithServices,The length of the statement  "                            var result = await context.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme); // this used to be "Automatic" " is 127.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,Describe,The length of the statement  "                xml.Add(result.Ticket.Principal.Claims.Select(claim => new XElement("claim"' new XAttribute("type"' claim.Type)' new XAttribute("value"' claim.Value)))); " is 153.
Long Statement,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,Describe,The length of the statement  "                xml.Add(result.Ticket.Properties.Items.Select(extra => new XElement("extra"' new XAttribute("type"' extra.Key)' new XAttribute("value"' extra.Value)))); " is 152.
Long Statement,Microsoft.AspNetCore.Authentication.Facebook,FacebookTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\FacebookTests.cs,NestedMapWillNotAffectRedirect,The length of the statement  "                map.Map("/login"' signoutApp => signoutApp.Run(context => context.ChallengeAsync("Facebook"' new AuthenticationProperties() { RedirectUri = "/" }))); " is 149.
Long Statement,Microsoft.AspNetCore.Authentication.Facebook,FacebookTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\FacebookTests.cs,MapWillNotAffectRedirect,The length of the statement  "                    app.Map("/login"' signoutApp => signoutApp.Run(context => context.ChallengeAsync("Facebook"' new AuthenticationProperties() { RedirectUri = "/" }))); " is 149.
Long Statement,Microsoft.AspNetCore.Authentication.Facebook,FacebookTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\FacebookTests.cs,CustomUserInfoEndpointHasValidGraphQuery,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("FacebookTest")); " is 140.
Long Statement,Microsoft.AspNetCore.Authentication.Facebook,FacebookTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\FacebookTests.cs,CustomUserInfoEndpointHasValidGraphQuery,The length of the statement  "                                if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == FacebookDefaults.TokenEndpoint) " is 141.
Long Statement,Microsoft.AspNetCore.Authentication.Facebook,FacebookTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\FacebookTests.cs,CustomUserInfoEndpointHasValidGraphQuery,The length of the statement  "                                    new Uri(customUserInfoEndpoint).GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped)) " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ChallengeWillUseAuthenticationPropertiesParametersAsQueryArguments,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ChallengeWillUseAuthenticationPropertiesItemsAsParameters,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ChallengeWillUseAuthenticationPropertiesItemsAsQueryArgumentsButParametersWillOverwrite,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithoutStateQueryStringWillBeRejected,The length of the statement  "            var error = await Assert.ThrowsAnyAsync<Exception>(() => server.SendAsync("https://example.com/signin-google?code=TestCode")); " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithAccessDeniedErrorFails,The length of the statement  "            var sendTask = server.SendAsync("https://example.com/signin-google?error=access_denied&error_description=SoBad&error_uri=foobar&state=protected_state"' " is 151.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithAccessDeniedError_AllowsCustomizingPath,The length of the statement  "            var transaction = await server.SendAsync("https://example.com/signin-google?error=access_denied&error_description=SoBad&error_uri=foobar&state=protected_state"' " is 160.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithAccessDeniedError_AllowsCustomizingPath,The length of the statement  "            Assert.Equal("/custom-denied-page?rurl=http%3A%2F%2Fwww.google.com%2F"' transaction.Response.Headers.GetValues("Location").First()); " is 132.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithErrorFails,The length of the statement  "            var sendTask = server.SendAsync("https://example.com/signin-google?error=OMG&error_description=SoBad&error_uri=foobar&state=protected_state"' " is 141.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWithErrorFails,The length of the statement  "                Assert.Equal("/error?FailureMessage=OMG" + UrlEncoder.Default.Encode(";Description=SoBad;Uri=foobar")' transaction.Response.Headers.GetValues("Location").First()); " is 163.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillAuthenticateValidAuthorizeCodeAndState,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillAuthenticateValidAuthorizeCodeAndState,The length of the statement  "                        else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me") " is 162.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillThrowIfCodeIsInvalid,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillThrowIfCodeIsInvalid,The length of the statement  "                Assert.Equal("/error?FailureMessage=" + UrlEncoder.Default.Encode("OAuth token endpoint failure: Status: BadRequest;Headers: ;Body: {\"Error\":\"Error\"};")' " is 157.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillThrowIfCodeIsInvalid,The length of the statement  "                Assert.Equal("OAuth token endpoint failure: Status: BadRequest;Headers: ;Body: {\"Error\":\"Error\"};"' error.GetBaseException().Message); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillRejectIfAccessTokenIsMissing,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "                        else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me") " is 162.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "                        context.Principal.AddIdentity(new ClaimsIdentity(new Claim[] { new Claim("RefreshToken"' refreshToken' ClaimValueTypes.String' "Google") }' "Google")); " is 151.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,NullRedirectUriWillRedirectToSlash,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,NullRedirectUriWillRedirectToSlash,The length of the statement  "                        else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me") " is 162.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ValidateAuthenticatedContext,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ValidateAuthenticatedContext,The length of the statement  "                        else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me") " is 162.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,NoStateCausesException,The length of the statement  "            var error = await Assert.ThrowsAnyAsync<Exception>(() => server.SendAsync("https://example.com/signin-google?code=TestCode")); " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,CanRedirectOnError,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateAutomaticWhenAlreadySignedInSucceeds,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateGoogleWhenAlreadySignedInSucceeds,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateFacebookWhenAlreadySignedWithGoogleReturnsNull,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ChallengeFacebookWhenAlreadySignedWithGoogleSucceeds,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("GoogleTest")); " is 138.
Long Statement,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,CreateBackchannel,The length of the statement  "                    else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me") " is 162.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,ExceptionReportedInHeaderForAuthenticationFailures,The length of the statement  "            Assert.Equal($"Bearer error=\"invalid_token\"' error_description=\"{message}\""' response.Response.Headers.WwwAuthenticate.First().ToString()); " is 143.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,ExceptionsReportedInHeaderForMultipleAuthenticationFailures,The length of the statement  "            Assert.Equal("Bearer error=\"invalid_token\"' error_description=\"The audience is invalid; The signature key was not found\""' " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,CreateServer,The length of the statement  "                            await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignInAsync(JwtBearerDefaults.AuthenticationScheme' new ClaimsPrincipal())); " is 142.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,CreateServer,The length of the statement  "                            await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignOutAsync(JwtBearerDefaults.AuthenticationScheme)); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,CreateServer,The length of the statement  "                .ConfigureServices(services => services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options)); " is 121.
Long Statement,Microsoft.AspNetCore.Authentication.Tests.MicrosoftAccount,MicrosoftAccountTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\MicrosoftAccountTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("MsftTest")); " is 136.
Long Statement,Microsoft.AspNetCore.Authentication.Tests.MicrosoftAccount,MicrosoftAccountTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\MicrosoftAccountTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "                        else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://graph.microsoft.com/v1.0/me") " is 153.
Long Statement,Microsoft.AspNetCore.Authentication.Tests.MicrosoftAccount,MicrosoftAccountTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\MicrosoftAccountTests.cs,AuthenticatedEventCanGetRefreshToken,The length of the statement  "                        context.Principal.AddIdentity(new ClaimsIdentity(new Claim[] { new Claim("RefreshToken"' refreshToken' ClaimValueTypes.String' "Microsoft") }' "Microsoft")); " is 157.
Long Statement,Microsoft.AspNetCore.Authentication.OAuth,OAuthTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthTests.cs,HandleRequestAsync_RedirectsToAccessDeniedPathWhenExplicitlySet,The length of the statement  "            var transaction = await server.SendAsync("https://www.example.com/oauth-callback?error=access_denied&state=protected_state"' " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.OAuth,OAuthTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthTests.cs,HandleRequestAsync_RedirectsToAccessDeniedPathWhenExplicitlySet,The length of the statement  "            Assert.Equal("/access-denied?ReturnUrl=http%3A%2F%2Ftesthost%2Fredirect"' transaction.Response.Headers.Location.ToString()); " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.OAuth,OAuthTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthTests.cs,HandleRequestAsync_InvokesAccessDeniedEvent,The length of the statement  "            var transaction = await server.SendAsync("https://www.example.com/oauth-callback?error=access_denied&state=protected_state"' " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.OAuth,OAuthTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthTests.cs,HandleRequestAsync_InvokesRemoteFailureEventWhenAccessDeniedPathIsNotExplicitlySet,The length of the statement  "            var transaction = await server.SendAsync("https://www.example.com/oauth-callback?error=access_denied&state=protected_state"' " is 124.
Long Statement,Microsoft.AspNetCore.Authentication.OAuth,OAuthTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthTests.cs,RemoteAuthenticationFailed_OAuthError_IncludesProperties,The length of the statement  "            var transaction = await server.SendAsync("https://www.example.com/oauth-callback?error=custom_error&state=protected_state"' " is 123.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,ChallengeCanSetUserStateThroughProperties,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("OIDCTest")); " is 136.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,OnRedirectToIdentityProviderEventCanSetState,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("OIDCTest")); " is 136.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,OnRedirectToIdentityProviderEventCanReplaceValues,The length of the statement  "            var actual = res.Headers.Location.Query.Trim('?').Split('&').Single(seg => seg.StartsWith($"{OpenIdConnectParameterNames.ClientId}=")); " is 135.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,ChallengeSetsNonceAndStateCookies,The length of the statement  "            var nonceCookie = challengeCookies.Where(cookie => cookie.Name.StartsWith(OpenIdConnectDefaults.CookieNoncePrefix' StringComparison.Ordinal)).Single(); " is 151.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,ChallengeSetsNonceAndStateCookies,The length of the statement  "            var correlationCookie = challengeCookies.Where(cookie => cookie.Name.StartsWith(".AspNetCore.Correlation."' StringComparison.Ordinal)).Single(); " is 144.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_WithEmptyConfig_Fails,The length of the statement  "            Assert.Equal("Cannot redirect to the authorization endpoint' the configuration may be missing or invalid."' exception.Message); " is 127.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectConfigurationTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectConfigurationTests.cs,MetadataAddressIsGeneratedFromAuthorityWhenMissing,The length of the statement  "                        var handler = await resolver.GetHandlerAsync(context' OpenIdConnectDefaults.AuthenticationScheme) as OpenIdConnectHandler; " is 122.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectConfigurationTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectConfigurationTests.cs,MetadataAddressIsGeneratedFromAuthorityWhenMissing,The length of the statement  "                        Assert.Equal($"{TestServerBuilder.DefaultAuthority}/.well-known/openid-configuration"' handler.Options.MetadataAddress); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectConfigurationTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectConfigurationTests.cs,ThrowsWhenAuthorityIsMissing,The length of the statement  "                ex => Assert.Equal("Provide Authority' MetadataAddress' Configuration' or ConfigurationManager to OpenIdConnectOptions"' ex.Message) " is 132.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectConfigurationTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectConfigurationTests.cs,ThrowsWhenAuthorityIsNotHttps,The length of the statement  "                ex => Assert.Equal("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false."' ex.Message) " is 152.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectConfigurationTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectConfigurationTests.cs,ThrowsWhenMetadataAddressIsNotHttps,The length of the statement  "                ex => Assert.Equal("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false."' ex.Message) " is 152.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestBackchannel,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectEventTests.cs,SendAsync,The length of the statement  "                       new StringContent("{ \"id_token\": \"my_id_token\"' \"access_token\": \"my_access_token\" }"' Encoding.ASCII' "application/json") }); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestBackchannel,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectEventTests.cs,SendAsync,The length of the statement  "                    return Task.FromResult(new HttpResponseMessage() { Content = new StringContent("{ }"' Encoding.ASCII' "application/json") }); " is 125.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,SignOutWithCustomRedirectUri,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("OIDCTest")); " is 136.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,SignOutWith_Specific_RedirectUri_From_Authentication_Properites,The length of the statement  "            var stateFormat = new PropertiesDataFormat(new EphemeralDataProtectionProvider(NullLoggerFactory.Instance).CreateProtector("OIDCTest")); " is 136.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,SignOut_WithMissingConfig_Throws,The length of the statement  "            var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => server.SendAsync(DefaultHost + TestServerBuilder.Signout)); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,SignOut_WithMissingConfig_Throws,The length of the statement  "            Assert.Equal("Cannot redirect to the end session endpoint' the configuration may be missing or invalid."' exception.Message); " is 125.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,NonceCookieExpirationTime,The length of the statement  "            Assert.Equal(DateTime.MaxValue' GetNonceExpirationTime(noncePrefix + DateTime.MaxValue.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter' TimeSpan.FromHours(1))); " is 174.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,NonceCookieExpirationTime,The length of the statement  "            Assert.Equal(DateTime.MinValue + TimeSpan.FromHours(1)' GetNonceExpirationTime(noncePrefix + DateTime.MinValue.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter' TimeSpan.FromHours(1))); " is 198.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,NonceCookieExpirationTime,The length of the statement  "            Assert.Equal(utcNow + TimeSpan.FromHours(1)' GetNonceExpirationTime(noncePrefix + utcNow.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter' TimeSpan.FromHours(1))); " is 176.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,NonceCookieExpirationTime,The length of the statement  "            Assert.Equal(utcNow + TimeSpan.FromHours(1)' GetNonceExpirationTime(noncePrefix + utcNow.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter + utcNow.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter' TimeSpan.FromHours(1))); " is 247.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,NonceCookieExpirationTime,The length of the statement  "            Assert.Equal(DateTime.MinValue' GetNonceExpirationTime(utcNow.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter + utcNow.Ticks.ToString(CultureInfo.InvariantCulture) + nonceDelimiter' TimeSpan.FromHours(1))); " is 220.
Long Statement,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestSettings,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\TestSettings.cs,ValidateRedirectCore,The length of the statement  "                redirectUri.Query.TrimStart('?').Split('&').Select(part => part.Split('=')).ToDictionary(parts => parts[0]' parts => parts[1]); " is 127.
Long Statement,Microsoft.AspNetCore.Authentication.Tests,TestAuthHandler,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestHandlers.cs,HandleAuthenticateAsync,The length of the statement  "            return Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal' new AuthenticationProperties()' Scheme.Name))); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication.Tests,TestHandler,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestHandlers.cs,AuthenticateAsync,The length of the statement  "            return Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal' new AuthenticationProperties()' Scheme.Name))); " is 133.
Long Statement,Microsoft.AspNetCore.Authentication.Twitter,TwitterTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TwitterTests.cs,ThrowsIfClientIdMissing,The length of the statement  "            await Assert.ThrowsAsync<ArgumentException>("ConsumerKey"' async () => await server.SendAsync("http://example.com/challenge")); " is 127.
Long Statement,Microsoft.AspNetCore.Authentication.Twitter,TwitterTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TwitterTests.cs,ThrowsIfClientSecretMissing,The length of the statement  "            await Assert.ThrowsAsync<ArgumentException>("ConsumerSecret"' async () => await server.SendAsync("http://example.com/challenge")); " is 130.
Long Statement,Microsoft.AspNetCore.Authentication.Twitter,TwitterTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TwitterTests.cs,BackchannelRequestToken,The length of the statement  "                        new StringContent("oauth_callback_confirmed=true&oauth_token=test_oauth_token&oauth_token_secret=test_oauth_token_secret"' " is 122.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,MissingConfigurationThrows,The length of the statement  "            Assert.Equal("Provide MetadataAddress' Configuration' or ConfigurationManager to WsFederationOptions"' exception.Message); " is 122.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,ChallengeRedirects,The length of the statement  "            Assert.Equal("https://login.windows.net/4afbc689-805b-48cf-a24c-d4aa3248a248/wsfed"' response.Headers.Location.GetLeftPart(System.UriPartial.Path)); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,ChallengeRedirects,The length of the statement  "            Assert.True(queryItems["wctx"].ToString().Equals(CustomStateDataFormat.ValidStateData)' "wctx does not equal ValidStateData"); " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,MapWillNotAffectRedirect,The length of the statement  "            Assert.Equal("https://login.windows.net/4afbc689-805b-48cf-a24c-d4aa3248a248/wsfed"' response.Headers.Location.GetLeftPart(System.UriPartial.Path)); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,MapWillNotAffectRedirect,The length of the statement  "            Assert.True(queryItems["wctx"].ToString().Equals(CustomStateDataFormat.ValidStateData)' "wctx does not equal ValidStateData"); " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,PreMappedWillAffectRedirect,The length of the statement  "            Assert.Equal("https://login.windows.net/4afbc689-805b-48cf-a24c-d4aa3248a248/wsfed"' response.Headers.Location.GetLeftPart(System.UriPartial.Path)); " is 148.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,PreMappedWillAffectRedirect,The length of the statement  "            Assert.True(queryItems["wctx"].ToString().Equals(CustomStateDataFormat.ValidStateData)' "wctx does not equal ValidStateData"); " is 126.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,ValidUnsolicitedTokenIsRefused,The length of the statement  "            var exception = await Assert.ThrowsAsync<Exception>(() => httpClient.PostAsync(httpClient.BaseAddress + "signin-wsfed"' form)); " is 127.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,EventsResolvedFromDI,The length of the statement  "                        options.MetadataAddress = "https://login.windows.net/4afbc689-805b-48cf-a24c-d4aa3248a248/federationmetadata/2007-06/federationmetadata.xml"; " is 141.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,CreateClient,The length of the statement  "                        options.MetadataAddress = "https://login.windows.net/4afbc689-805b-48cf-a24c-d4aa3248a248/federationmetadata/2007-06/federationmetadata.xml"; " is 141.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,CreateClient,The length of the statement  "                                Assert.True((bool)context.HttpContext.Items["SecurityTokenReceived"]' "SecurityTokenReceived notification not invoked"); " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,CreateClient,The length of the statement  "                                //Change the request url to something different and skip Wsfed. This new url will handle the request and let us know if this notification was invoked. " is 150.
Long Statement,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,ConfigureApp,The length of the statement  "                    else if (!identity.HasClaim("Authenticated"' "true") || !identity.HasClaim("ReturnEndpoint"' "true") || !identity.HasClaim(identity.RoleClaimType' "Guest")) " is 156.
Empty Catch Block,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectTests.cs,GetNonceExpirationTime,The method has an empty catch block.
Magic Number,Microsoft.AspNetCore.Authentication,AuthenticationMiddlewareTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\AuthenticationMiddlewareTests.cs,OnlyInvokesCanHandleRequestHandlers,The following statement contains a magic number: Assert.Equal(607' (int)response.StatusCode);
Magic Number,Microsoft.AspNetCore.Authentication,Base64UrlTextEncoderTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\Base64UrlTextEncoderTests.cs,DataOfVariousLengthRoundTripCorrectly,The following statement contains a magic number: data[index] = (byte)(5 + length + (index * 23));
Magic Number,Microsoft.AspNetCore.Authentication,Base64UrlTextEncoderTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\Base64UrlTextEncoderTests.cs,DataOfVariousLengthRoundTripCorrectly,The following statement contains a magic number: data[index] = (byte)(5 + length + (index * 23));
Magic Number,Microsoft.AspNetCore.Authentication,Base64UrlTextEncoderTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\Base64UrlTextEncoderTests.cs,DataOfVariousLengthRoundTripCorrectly,The following statement contains a magic number: length != 256
Magic Number,Microsoft.AspNetCore.Authentication,ClaimActionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\ClaimActionTests.cs,CanMapArrayValueUserDataToClaims,The following statement contains a magic number: Assert.Equal(2' roleClaims.Count);
Magic Number,Microsoft.AspNetCore.Authentication,ClaimActionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\ClaimActionTests.cs,MapAllAllowesDulicateKeysWithUniqueValues,The following statement contains a magic number: Assert.Equal(2' identity.FindAll("name0").Count());
Magic Number,Microsoft.AspNetCore.Authentication,ClaimActionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\ClaimActionTests.cs,MapAllAllowesDulicateKeysWithUniqueValues,The following statement contains a magic number: Assert.Equal(2' identity.FindAll("name1").Count());
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestClock,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestClock.cs,TestClock,The following statement contains a magic number: UtcNow = new DateTimeOffset(2013' 6' 11' 12' 34' 56' 789' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Authentication,TestExtensions,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestExtensions.cs,Describe,The following statement contains a magic number: res.StatusCode = 200;
Magic Number,Microsoft.AspNetCore.Authentication,TestExtensions,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TestExtensions.cs,Describe,The following statement contains a magic number: res.StatusCode = 200;
Magic Number,Microsoft.AspNetCore.Authentication,TokenExtensionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TokenExtensionTests.cs,CanStoreMultipleTokens,The following statement contains a magic number: Assert.Equal(3' props.GetTokens().Count());
Magic Number,Microsoft.AspNetCore.Authentication,TokenExtensionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TokenExtensionTests.cs,CanUpdateTokens,The following statement contains a magic number: Assert.Equal(3' props.GetTokens().Count());
Magic Number,Microsoft.AspNetCore.Authentication,TokenExtensionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TokenExtensionTests.cs,CanUpdateTokenValues,The following statement contains a magic number: Assert.Equal(3' props.GetTokens().Count());
Magic Number,Microsoft.AspNetCore.Authentication,TokenExtensionTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\TokenExtensionTests.cs,UpdateTokenValueReturnsFalseForUnknownToken,The following statement contains a magic number: Assert.Equal(3' props.GetTokens().Count());
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationOptionIsIgnored,The following statement contains a magic number: var server = CreateServerWithServices(s => s.AddAuthentication().AddCookie(o =>              {                  o.Cookie.Name = "TestCookie";                  // this is currently ignored. Users should set o.ExpireTimeSpan instead                  o.Cookie.Expiration = TimeSpan.FromDays(10);              })' SignInAsAlice);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieStopsWorkingAfterExpiration,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;              }' SignInAsAlice);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieStopsWorkingAfterExpiration,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(7));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieStopsWorkingAfterExpiration,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(7));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInSignin,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))'                      new AuthenticationProperties() { ExpiresUtc = _clock.UtcNow.Add(TimeSpan.FromMinutes(5)) }));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInSignin,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))'                      new AuthenticationProperties() { ExpiresUtc = _clock.UtcNow.Add(TimeSpan.FromMinutes(5)) }));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInSignin,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(3));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInSignin,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(3));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,ExpiredCookieWithValidatorStillExpired,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,ExpiredCookieWithValidatorStillExpired,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(11));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRejectedAndSignedOutByValidator,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.RejectPrincipal();                          ctx.HttpContext.SignOutAsync("Cookies");                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieNotRenewedAfterSignOut,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidator,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidator,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidator,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(6));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidator,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeUpdatedByValidatorDuringRefresh,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          if (replace)                          {                              ctx.ShouldRenew = true;                              ctx.ReplacePrincipal(new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice2"' "Cookies2"))));                              ctx.Properties.Items["updated"] = "yes";                          }                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithSlidingExpiry,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithSlidingExpiry,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithSlidingExpiry,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(6));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithSlidingExpiry,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(11));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithModifiedProperties,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          var id = ctx.Principal.Identities.First();                          var claim = id.FindFirst("counter");                          if (claim == null)                          {                              id.AddClaim(new Claim("counter"' "1"));                          }                          else                          {                              id.RemoveClaim(claim);                              id.AddClaim(new Claim("counter"' claim.Value + "1"));                          }                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithModifiedProperties,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithModifiedProperties,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(6));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieCanBeRenewedByValidatorWithModifiedProperties,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(11));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieValidatorOnlyCalledOnce,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieValidatorOnlyCalledOnce,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieValidatorOnlyCalledOnce,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(6));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieValidatorOnlyCalledOnce,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,ShouldRenewUpdatesIssuedExpiredUtc,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = sliding;                  o.Events = new CookieAuthenticationEvents                  {                      OnValidatePrincipal = ctx =>                      {                          lastValidateIssuedDate = ctx.Properties.IssuedUtc;                          lastExpiresDate = ctx.Properties.ExpiresUtc;                          ctx.ShouldRenew = true;                          return Task.FromResult(0);                      }                  };              }'              context =>                  context.SignInAsync("Cookies"'                      new ClaimsPrincipal(new ClaimsIdentity(new GenericIdentity("Alice"' "Cookies")))));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,ShouldRenewUpdatesIssuedExpiredUtc,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(2));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInEvent,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents()                  {                      OnSigningIn = context =>                      {                          context.Properties.ExpiresUtc = _clock.UtcNow.Add(TimeSpan.FromMinutes(5));                          return Task.FromResult(0);                      }                  };              }'              SignInAsAlice);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInEvent,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = false;                  o.Events = new CookieAuthenticationEvents()                  {                      OnSigningIn = context =>                      {                          context.Properties.ExpiresUtc = _clock.UtcNow.Add(TimeSpan.FromMinutes(5));                          return Task.FromResult(0);                      }                  };              }'              SignInAsAlice);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInEvent,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(3));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieExpirationCanBeOverridenInEvent,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(3));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpiration,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = true;              }'              SignInAsAlice);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpiration,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpiration,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpiration,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpirationWithoutTransformations,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ExpireTimeSpan = TimeSpan.FromMinutes(10);                  o.SlidingExpiration = true;                  o.Events.OnValidatePrincipal = c =>                  {                      // https://github.com/aspnet/Security/issues/1607                      // On sliding refresh the transformed principal should not be serialized into the cookie' only the original principal.                      Assert.Single(c.Principal.Identities);                      Assert.True(c.Principal.Identities.First().HasClaim("marker"' "true"));                      return Task.CompletedTask;                  };              }'              SignInAsAlice'              claimsTransform: true);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpirationWithoutTransformations,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpirationWithoutTransformations,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CookieIsRenewedWithSlidingExpirationWithoutTransformations,The following statement contains a magic number: _clock.Add(TimeSpan.FromMinutes(4));
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,CreateServerWithServices,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.UseAuthentication();                      app.Use(async (context' next) =>                      {                          var req = context.Request;                          var res = context.Response;                          PathString remainder;                          if (req.Path == new PathString("/normal"))                          {                              res.StatusCode = 200;                          }                          else if (req.Path == new PathString("/forbid")) // Simulate forbidden                           {                              await context.ForbidAsync(CookieAuthenticationDefaults.AuthenticationScheme);                          }                          else if (req.Path == new PathString("/challenge"))                          {                              await context.ChallengeAsync(CookieAuthenticationDefaults.AuthenticationScheme);                          }                          else if (req.Path == new PathString("/signout"))                          {                              await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);                          }                          else if (req.Path == new PathString("/unauthorized"))                          {                              await context.ChallengeAsync(CookieAuthenticationDefaults.AuthenticationScheme' new AuthenticationProperties());                          }                          else if (req.Path == new PathString("/protected/CustomRedirect"))                          {                              await context.ChallengeAsync(CookieAuthenticationDefaults.AuthenticationScheme' new AuthenticationProperties() { RedirectUri = "/CustomRedirect" });                          }                          else if (req.Path == new PathString("/me"))                          {                              Describe(res' AuthenticateResult.Success(new AuthenticationTicket(context.User' new AuthenticationProperties()' CookieAuthenticationDefaults.AuthenticationScheme)));                          }                          else if (req.Path.StartsWithSegments(new PathString("/me")' out remainder))                          {                              var ticket = await context.AuthenticateAsync(remainder.Value.Substring(1));                              Describe(res' ticket);                          }                          else if (req.Path == new PathString("/testpath") && testpath != null)                          {                              await testpath(context);                          }                          else if (req.Path == new PathString("/checkforerrors"))                          {                              var result = await context.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme); // this used to be "Automatic"                              if (result.Failure != null)                              {                                  throw new Exception("Failed to authenticate"' result.Failure);                              }                              return;                          }                          else                          {                              await next();                          }                      });                  })                  .ConfigureServices(configureServices);
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,Describe,The following statement contains a magic number: res.StatusCode = 200;
Magic Number,Microsoft.AspNetCore.Authentication.Cookies,CookieTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\CookieTests.cs,SendAsync,The following statement contains a magic number: transaction.CookieNameValue = transaction.SetCookie.Split(new[] { ';' }' 2).First();
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillAuthenticateValidAuthorizeCodeAndState,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Id";                  o.ClientSecret = "Test Secret";                  o.SaveTokens = true;                  o.StateDataFormat = stateFormat;                  if (claimsIssuer != null)                  {                      o.ClaimsIssuer = claimsIssuer;                  }                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expires_in = 3600'                                  token_type = "Bearer"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  name = new                                  {                                      familyName = "Test Family Name"'                                      givenName = "Test Given Name"                                  }'                                  url = "Profile link"'                                  emails = new[]                                  {                                      new                                      {                                          value = "Test email"'                                          type = "account"                                      }                                  }                              });                          }                            throw new NotImplementedException(req.RequestUri.AbsoluteUri);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ReplyPathWillAuthenticateValidAuthorizeCodeAndState,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticatedEventCanGetRefreshToken,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Id";                  o.ClientSecret = "Test Secret";                  o.StateDataFormat = stateFormat;                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expires_in = 3600'                                  token_type = "Bearer"'                                  refresh_token = "Test Refresh Token"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  name = new                                  {                                      familyName = "Test Family Name"'                                      givenName = "Test Given Name"                                  }'                                  url = "Profile link"'                                  emails = new[]                                      {                                          new                                          {                                              value = "Test email"'                                              type = "account"                                          }                                      }                              });                          }                            throw new NotImplementedException(req.RequestUri.AbsoluteUri);                      }                  };                  o.Events = new OAuthEvents                  {                      OnCreatingTicket = context =>                      {                          var refreshToken = context.RefreshToken;                          context.Principal.AddIdentity(new ClaimsIdentity(new Claim[] { new Claim("RefreshToken"' refreshToken' ClaimValueTypes.String' "Google") }' "Google"));                          return Task.FromResult(0);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticatedEventCanGetRefreshToken,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,NullRedirectUriWillRedirectToSlash,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Id";                  o.ClientSecret = "Test Secret";                  o.StateDataFormat = stateFormat;                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expires_in = 3600'                                  token_type = "Bearer"'                                  refresh_token = "Test Refresh Token"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  name = new                                  {                                      familyName = "Test Family Name"'                                      givenName = "Test Given Name"                                  }'                                  url = "Profile link"'                                  emails = new[]                                      {                                          new                                          {                                              value = "Test email"'                                              type = "account"                                          }                                      }                              });                          }                            throw new NotImplementedException(req.RequestUri.AbsoluteUri);                      }                  };                  o.Events = new OAuthEvents                  {                      OnTicketReceived = context =>                      {                          context.Properties.RedirectUri = null;                          return Task.FromResult(0);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,NullRedirectUriWillRedirectToSlash,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ValidateAuthenticatedContext,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Id";                  o.ClientSecret = "Test Secret";                  o.StateDataFormat = stateFormat;                  o.AccessType = "offline";                  o.Events = new OAuthEvents()                  {                      OnCreatingTicket = context =>                      {                          Assert.NotNull(context.User);                          Assert.Equal("Test Access Token"' context.AccessToken);                          Assert.Equal("Test Refresh Token"' context.RefreshToken);                          Assert.Equal(TimeSpan.FromSeconds(3600)' context.ExpiresIn);                          Assert.Equal("Test email"' context.Identity.FindFirst(ClaimTypes.Email)?.Value);                          Assert.Equal("Test User ID"' context.Identity.FindFirst(ClaimTypes.NameIdentifier)?.Value);                          Assert.Equal("Test Name"' context.Identity.FindFirst(ClaimTypes.Name)?.Value);                          Assert.Equal("Test Family Name"' context.Identity.FindFirst(ClaimTypes.Surname)?.Value);                          Assert.Equal("Test Given Name"' context.Identity.FindFirst(ClaimTypes.GivenName)?.Value);                          return Task.FromResult(0);                      }                  };                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expires_in = 3600'                                  token_type = "Bearer"'                                  refresh_token = "Test Refresh Token"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  name = new                                  {                                      familyName = "Test Family Name"'                                      givenName = "Test Given Name"                                  }'                                  url = "Profile link"'                                  emails = new[]                                      {                                          new                                          {                                              value = "Test email"'                                              type = "account"                                          }                                      }                              });                          }                            throw new NotImplementedException(req.RequestUri.AbsoluteUri);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ValidateAuthenticatedContext,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Id";                  o.ClientSecret = "Test Secret";                  o.StateDataFormat = stateFormat;                  o.AccessType = "offline";                  o.Events = new OAuthEvents()                  {                      OnCreatingTicket = context =>                      {                          Assert.NotNull(context.User);                          Assert.Equal("Test Access Token"' context.AccessToken);                          Assert.Equal("Test Refresh Token"' context.RefreshToken);                          Assert.Equal(TimeSpan.FromSeconds(3600)' context.ExpiresIn);                          Assert.Equal("Test email"' context.Identity.FindFirst(ClaimTypes.Email)?.Value);                          Assert.Equal("Test User ID"' context.Identity.FindFirst(ClaimTypes.NameIdentifier)?.Value);                          Assert.Equal("Test Name"' context.Identity.FindFirst(ClaimTypes.Name)?.Value);                          Assert.Equal("Test Family Name"' context.Identity.FindFirst(ClaimTypes.Surname)?.Value);                          Assert.Equal("Test Given Name"' context.Identity.FindFirst(ClaimTypes.GivenName)?.Value);                          return Task.FromResult(0);                      }                  };                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expires_in = 3600'                                  token_type = "Bearer"'                                  refresh_token = "Test Refresh Token"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  name = new                                  {                                      familyName = "Test Family Name"'                                      givenName = "Test Given Name"                                  }'                                  url = "Profile link"'                                  emails = new[]                                      {                                          new                                          {                                              value = "Test email"'                                              type = "account"                                          }                                      }                              });                          }                            throw new NotImplementedException(req.RequestUri.AbsoluteUri);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateAutomaticWhenAlreadySignedInSucceeds,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateGoogleWhenAlreadySignedInSucceeds,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,AuthenticateFacebookWhenAlreadySignedWithGoogleReturnsNull,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,ChallengeFacebookWhenAlreadySignedWithGoogleSucceeds,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,CreateBackchannel,The following statement contains a magic number: return new TestHttpMessageHandler()              {                  Sender = req =>                  {                      if (req.RequestUri.AbsoluteUri == "https://www.googleapis.com/oauth2/v4/token")                      {                          return ReturnJsonResponse(new                          {                              access_token = "Test Access Token"'                              expires_in = 3600'                              token_type = "Bearer"                          });                      }                      else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://www.googleapis.com/plus/v1/people/me")                      {                          return ReturnJsonResponse(new                          {                              id = "Test User ID"'                              displayName = "Test Name"'                              name = new                              {                                  familyName = "Test Family Name"'                                  givenName = "Test Given Name"                              }'                              url = "Profile link"'                              emails = new[]                              {                                  new                                  {                                      value = "Test email"'                                      type = "account"                                  }                              }                          });                      }                        throw new NotImplementedException(req.RequestUri.AbsoluteUri);                  }              };
Magic Number,Microsoft.AspNetCore.Authentication.Google,GoogleTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\GoogleTests.cs,CreateServer,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.UseAuthentication();                      app.Use(async (context' next) =>                      {                          var req = context.Request;                          var res = context.Response;                          if (req.Path == new PathString("/challenge"))                          {                              await context.ChallengeAsync();                          }                          else if (req.Path == new PathString("/challengeFacebook"))                          {                              await context.ChallengeAsync("Facebook");                          }                          else if (req.Path == new PathString("/tokens"))                          {                              var result = await context.AuthenticateAsync(TestExtensions.CookieAuthenticationScheme);                              var tokens = result.Properties.GetTokens();                              res.Describe(tokens);                          }                          else if (req.Path == new PathString("/me"))                          {                              res.Describe(context.User);                          }                          else if (req.Path == new PathString("/authenticate"))                          {                              var result = await context.AuthenticateAsync(TestExtensions.CookieAuthenticationScheme);                              res.Describe(result.Principal);                          }                          else if (req.Path == new PathString("/authenticateGoogle"))                          {                              var result = await context.AuthenticateAsync("Google");                              res.Describe(result?.Principal);                          }                          else if (req.Path == new PathString("/authenticateFacebook"))                          {                              var result = await context.AuthenticateAsync("Facebook");                              res.Describe(result?.Principal);                          }                          else if (req.Path == new PathString("/unauthorized"))                          {                              // Simulate Authorization failure                              var result = await context.AuthenticateAsync("Google");                              await context.ChallengeAsync("Google");                          }                          else if (req.Path == new PathString("/unauthorizedAuto"))                          {                              var result = await context.AuthenticateAsync("Google");                              await context.ChallengeAsync("Google");                          }                          else if (req.Path == new PathString("/401"))                          {                              res.StatusCode = 401;                          }                          else if (req.Path == new PathString("/signIn"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignInAsync("Google"' new ClaimsPrincipal()));                          }                          else if (req.Path == new PathString("/signOut"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignOutAsync("Google"));                          }                          else if (req.Path == new PathString("/forbid"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.ForbidAsync("Google"));                          }                          else if (testpath != null)                          {                              await testpath(context);                          }                          else                          {                              await next();                          }                      });                  })                  .ConfigureServices(services =>                  {                      services.AddTransient<IClaimsTransformation' ClaimsTransformer>();                      services.AddAuthentication(TestExtensions.CookieAuthenticationScheme)                          .AddCookie(TestExtensions.CookieAuthenticationScheme' o => o.ForwardChallenge = GoogleDefaults.AuthenticationScheme)                          .AddGoogle(configureOptions)                          .AddFacebook(o =>                          {                              o.ClientId = "Test ClientId";                              o.ClientSecret = "Test AppSecrent";                          });                  });
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,BearerTokenValidation,The following statement contains a magic number: var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(new string('a'' 128)));
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,BearerTokenValidation,The following statement contains a magic number: var token = new JwtSecurityToken(                  issuer: "issuer.contoso.com"'                  audience: "audience.contoso.com"'                  claims: claims'                  expires: DateTime.Now.AddMinutes(30)'                  signingCredentials: creds);
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,SaveBearerToken,The following statement contains a magic number: var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(new string('a'' 128)));
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,SaveBearerToken,The following statement contains a magic number: var token = new JwtSecurityToken(                  issuer: "issuer.contoso.com"'                  audience: "audience.contoso.com"'                  claims: claims'                  expires: DateTime.Now.AddMinutes(30)'                  signingCredentials: creds);
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,ThrowAtAuthenticationFailedEvent,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.Events = new JwtBearerEvents                  {                      OnAuthenticationFailed = context =>                      {                          context.Response.StatusCode = 401;                          throw new Exception();                      }'                      OnMessageReceived = context =>                      {                          context.Token = "something";                          return Task.FromResult(0);                      }                  };                  o.SecurityTokenValidators.Clear();                  o.SecurityTokenValidators.Insert(0' new InvalidTokenValidator());              }'              async (context' next) =>              {                  try                  {                      await next();                      Assert.False(true' "Expected exception is not thrown");                  }                  catch (Exception)                  {                      context.Response.StatusCode = 401;                      await context.Response.WriteAsync("i got this");                  }              });
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,ThrowAtAuthenticationFailedEvent,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.Events = new JwtBearerEvents                  {                      OnAuthenticationFailed = context =>                      {                          context.Response.StatusCode = 401;                          throw new Exception();                      }'                      OnMessageReceived = context =>                      {                          context.Token = "something";                          return Task.FromResult(0);                      }                  };                  o.SecurityTokenValidators.Clear();                  o.SecurityTokenValidators.Insert(0' new InvalidTokenValidator());              }'              async (context' next) =>              {                  try                  {                      await next();                      Assert.False(true' "Expected exception is not thrown");                  }                  catch (Exception)                  {                      context.Response.StatusCode = 401;                      await context.Response.WriteAsync("i got this");                  }              });
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,CreateServer,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      if (handlerBeforeAuth != null)                      {                          app.Use(handlerBeforeAuth);                      }                        app.UseAuthentication();                      app.Use(async (context' next) =>                      {                          if (context.Request.Path == new PathString("/checkforerrors"))                          {                              var result = await context.AuthenticateAsync(JwtBearerDefaults.AuthenticationScheme); // this used to be "Automatic"                              if (result.Failure != null)                              {                                  throw new Exception("Failed to authenticate"' result.Failure);                              }                              return;                          }                          else if (context.Request.Path == new PathString("/oauth"))                          {                              if (context.User == null ||                                  context.User.Identity == null ||                                  !context.User.Identity.IsAuthenticated)                              {                                  context.Response.StatusCode = 401;                                  // REVIEW: no more automatic challenge                                  await context.ChallengeAsync(JwtBearerDefaults.AuthenticationScheme);                                  return;                              }                                var identifier = context.User.FindFirst(ClaimTypes.NameIdentifier);                              if (identifier == null)                              {                                  context.Response.StatusCode = 500;                                  return;                              }                                await context.Response.WriteAsync(identifier.Value);                          }                          else if (context.Request.Path == new PathString("/token"))                          {                              var token = await context.GetTokenAsync("access_token");                              await context.Response.WriteAsync(token);                          }                          else if (context.Request.Path == new PathString("/unauthorized"))                          {                              // Simulate Authorization failure                               var result = await context.AuthenticateAsync(JwtBearerDefaults.AuthenticationScheme);                              await context.ChallengeAsync(JwtBearerDefaults.AuthenticationScheme);                          }                          else if (context.Request.Path == new PathString("/signIn"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignInAsync(JwtBearerDefaults.AuthenticationScheme' new ClaimsPrincipal()));                          }                          else if (context.Request.Path == new PathString("/signOut"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignOutAsync(JwtBearerDefaults.AuthenticationScheme));                          }                          else                          {                              await next();                          }                      });                  })                  .ConfigureServices(services => services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options));
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\JwtBearerTests.cs,CreateServer,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      if (handlerBeforeAuth != null)                      {                          app.Use(handlerBeforeAuth);                      }                        app.UseAuthentication();                      app.Use(async (context' next) =>                      {                          if (context.Request.Path == new PathString("/checkforerrors"))                          {                              var result = await context.AuthenticateAsync(JwtBearerDefaults.AuthenticationScheme); // this used to be "Automatic"                              if (result.Failure != null)                              {                                  throw new Exception("Failed to authenticate"' result.Failure);                              }                              return;                          }                          else if (context.Request.Path == new PathString("/oauth"))                          {                              if (context.User == null ||                                  context.User.Identity == null ||                                  !context.User.Identity.IsAuthenticated)                              {                                  context.Response.StatusCode = 401;                                  // REVIEW: no more automatic challenge                                  await context.ChallengeAsync(JwtBearerDefaults.AuthenticationScheme);                                  return;                              }                                var identifier = context.User.FindFirst(ClaimTypes.NameIdentifier);                              if (identifier == null)                              {                                  context.Response.StatusCode = 500;                                  return;                              }                                await context.Response.WriteAsync(identifier.Value);                          }                          else if (context.Request.Path == new PathString("/token"))                          {                              var token = await context.GetTokenAsync("access_token");                              await context.Response.WriteAsync(token);                          }                          else if (context.Request.Path == new PathString("/unauthorized"))                          {                              // Simulate Authorization failure                               var result = await context.AuthenticateAsync(JwtBearerDefaults.AuthenticationScheme);                              await context.ChallengeAsync(JwtBearerDefaults.AuthenticationScheme);                          }                          else if (context.Request.Path == new PathString("/signIn"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignInAsync(JwtBearerDefaults.AuthenticationScheme' new ClaimsPrincipal()));                          }                          else if (context.Request.Path == new PathString("/signOut"))                          {                              await Assert.ThrowsAsync<InvalidOperationException>(() => context.SignOutAsync(JwtBearerDefaults.AuthenticationScheme));                          }                          else                          {                              await next();                          }                      });                  })                  .ConfigureServices(services => services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options));
Magic Number,Microsoft.AspNetCore.Authentication.Tests.MicrosoftAccount,MicrosoftAccountTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\MicrosoftAccountTests.cs,AuthenticatedEventCanGetRefreshToken,The following statement contains a magic number: var server = CreateServer(o =>              {                  o.ClientId = "Test Client Id";                  o.ClientSecret = "Test Client Secret";                  o.StateDataFormat = stateFormat;                  o.BackchannelHttpHandler = new TestHttpMessageHandler                  {                      Sender = req =>                      {                          if (req.RequestUri.AbsoluteUri == "https://login.microsoftonline.com/common/oauth2/v2.0/token")                          {                              return ReturnJsonResponse(new                              {                                  access_token = "Test Access Token"'                                  expire_in = 3600'                                  token_type = "Bearer"'                                  refresh_token = "Test Refresh Token"                              });                          }                          else if (req.RequestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.UriEscaped) == "https://graph.microsoft.com/v1.0/me")                          {                              return ReturnJsonResponse(new                              {                                  id = "Test User ID"'                                  displayName = "Test Name"'                                  givenName = "Test Given Name"'                                  surname = "Test Family Name"'                                  mail = "Test email"                              });                          }                            return null;                      }                  };                  o.Events = new OAuthEvents                  {                      OnCreatingTicket = context =>                      {                          var refreshToken = context.RefreshToken;                          context.Principal.AddIdentity(new ClaimsIdentity(new Claim[] { new Claim("RefreshToken"' refreshToken' ClaimValueTypes.String' "Microsoft") }' "Microsoft"));                          return Task.FromResult<object>(null);                      }                  };              });
Magic Number,Microsoft.AspNetCore.Authentication.Tests.MicrosoftAccount,MicrosoftAccountTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\MicrosoftAccountTests.cs,AuthenticatedEventCanGetRefreshToken,The following statement contains a magic number: Assert.Equal(2' transaction.SetCookie.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Test,OAuthChallengePropertiesTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthChallengePropertiesTest.cs,OidcMaxAge,The following statement contains a magic number: var properties = new OpenIdConnectChallengeProperties()              {                  MaxAge = TimeSpan.FromSeconds(200)              };
Magic Number,Microsoft.AspNetCore.Authentication.Test,OAuthChallengePropertiesTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthChallengePropertiesTest.cs,OidcMaxAge,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(200)' properties.MaxAge);
Magic Number,Microsoft.AspNetCore.Authentication.Test,OAuthChallengePropertiesTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthChallengePropertiesTest.cs,OidcMaxAge_NullValue,The following statement contains a magic number: properties.Parameters["max_age"] = TimeSpan.FromSeconds(500);
Magic Number,Microsoft.AspNetCore.Authentication.Test,OAuthChallengePropertiesTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OAuthChallengePropertiesTest.cs,OidcMaxAge_NullValue,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(500)' properties.MaxAge);
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,OnRedirectToIdentityProviderEventHandlesResponse,The following statement contains a magic number: var settings = new TestSettings(                  opts =>                  {                      opts.ClientId = "Test Id";                      opts.Authority = TestServerBuilder.DefaultAuthority;                      opts.Events = new OpenIdConnectEvents()                      {                          OnRedirectToIdentityProvider = context =>                          {                              context.Response.StatusCode = 410;                              context.Response.Headers.Add("tea"' "Oolong");                              context.HandleResponse();                                return Task.FromResult(0);                          }                      };                  }              );
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,ChallengeSetsNonceAndStateCookies,The following statement contains a magic number: Assert.Equal(2' challengeCookies.Count);
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_WithSpecificMaxAge_HasExpectedMaxAgeParam,The following statement contains a magic number: var settings = new TestSettings(                  opt =>                  {                      opt.ClientId = "Test Id";                      opt.Authority = TestServerBuilder.DefaultAuthority;                      opt.MaxAge = TimeSpan.FromMinutes(20);                  });
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_HasOverwrittenMaxAgeParam,The following statement contains a magic number: var settings = new TestSettings(opt =>              {                  opt.ClientId = "Test Id";                  opt.Authority = TestServerBuilder.DefaultAuthority;                  opt.MaxAge = TimeSpan.FromSeconds(500);              });
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_HasOverwrittenMaxAgeParam,The following statement contains a magic number: var properties = new OpenIdConnectChallengeProperties()              {                  MaxAge = TimeSpan.FromSeconds(1234)'              };
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_HasOverwrittenMaxAgeParaFromBaseAuthenticationPropertiesm,The following statement contains a magic number: var settings = new TestSettings(opt =>              {                  opt.ClientId = "Test Id";                  opt.Authority = TestServerBuilder.DefaultAuthority;                  opt.MaxAge = TimeSpan.FromSeconds(500);              });
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,OpenIdConnectChallengeTests,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\OpenIdConnectChallengeTests.cs,Challenge_HasOverwrittenMaxAgeParaFromBaseAuthenticationPropertiesm,The following statement contains a magic number: properties.SetParameter(OpenIdConnectChallengeProperties.MaxAgeKey' TimeSpan.FromSeconds(1234));
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestServerBuilder,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\TestServerBuilder.cs,CreateServer,The following statement contains a magic number: var builder = new WebHostBuilder()                  .Configure(app =>                  {                      app.UseAuthentication();                      app.Use(async (context' next) =>                      {                          var req = context.Request;                          var res = context.Response;                            if (req.Path == new PathString(Challenge))                          {                              await context.ChallengeAsync(OpenIdConnectDefaults.AuthenticationScheme);                          }                          else if (req.Path == new PathString(ChallengeWithProperties))                          {                              await context.ChallengeAsync(OpenIdConnectDefaults.AuthenticationScheme' properties);                          }                          else if (req.Path == new PathString(ChallengeWithOutContext))                          {                              res.StatusCode = 401;                          }                          else if (req.Path == new PathString(Signin))                          {                              await context.SignInAsync(OpenIdConnectDefaults.AuthenticationScheme' new ClaimsPrincipal());                          }                          else if (req.Path == new PathString(Signout))                          {                              await context.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme);                          }                          else if (req.Path == new PathString("/signout_with_specific_redirect_uri"))                          {                              await context.SignOutAsync(                                  OpenIdConnectDefaults.AuthenticationScheme'                                  new AuthenticationProperties() { RedirectUri = "http://www.example.com/specific_redirect_uri" });                          }                          else if (handler != null)                          {                              await handler(context);                          }                          else                          {                              await next();                          }                      });                  })                  .ConfigureServices(services =>                  {                      services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)                          .AddCookie()                          .AddOpenIdConnect(options);                  });
Magic Number,Microsoft.AspNetCore.Authentication.Test.OpenIdConnect,TestSettings,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\OpenIdConnect\TestSettings.cs,ValidateMaxAge,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(20)' _options.MaxAge.Value);
Magic Number,Microsoft.AspNetCore.Authentication.WsFederation,WsFederationTest,D:\research\architectureSmells\repos\aspnet_Security\test\Microsoft.AspNetCore.Authentication.Test\WsFederation\WsFederationTest.cs,ConfigureApp,The following statement contains a magic number: app.Run(async context =>              {                  var result = context.AuthenticateAsync();                  if (context.User == null || !context.User.Identity.IsAuthenticated)                  {                      await context.ChallengeAsync(WsFederationDefaults.AuthenticationScheme);                      await context.Response.WriteAsync("Unauthorized");                  }                  else                  {                      var identity = context.User.Identities.Single();                      if (identity.NameClaimType == "Name_Failed" && identity.RoleClaimType == "Role_Failed")                      {                          context.Response.StatusCode = 500;                          await context.Response.WriteAsync("SignIn_Failed");                      }                      else if (!identity.HasClaim("Authenticated"' "true") || !identity.HasClaim("ReturnEndpoint"' "true") || !identity.HasClaim(identity.RoleClaimType' "Guest"))                      {                          await context.Response.WriteAsync("Provider not invoked");                          return;                      }                      else                      {                          await context.Response.WriteAsync(WsFederationDefaults.AuthenticationScheme);                      }                  }              });
