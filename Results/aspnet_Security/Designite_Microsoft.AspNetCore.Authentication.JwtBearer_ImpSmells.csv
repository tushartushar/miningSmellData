Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,The method has 123 lines of code.
Complex Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,Cyclomatic complexity of the method is 14
Long Parameter List,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,JwtBearerHandler,The method has 5 parameters. Parameters: options' logger' encoder' dataProtection' clock
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,The length of the statement  "                            // Refresh the configuration for exceptions that may be caused by key rollovers. The user can also request a refresh in the event. " is 130.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                    if (options.RequireHttpsMetadata && !options.MetadataAddress.StartsWith("https://"' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                        throw new InvalidOperationException("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false."); " is 158.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                    options.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(options.MetadataAddress' new OpenIdConnectConfigurationRetriever()' " is 151.
Long Statement,Microsoft.AspNetCore.Builder,JwtBearerAppBuilderExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerAppBuilderExtensions.cs,UseJwtBearerAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.AspNetCore.Builder,JwtBearerAppBuilderExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerAppBuilderExtensions.cs,UseJwtBearerAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.Extensions.DependencyInjection,JwtBearerExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerExtensions.cs,AddJwtBearer,The length of the statement  "            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IPostConfigureOptions<JwtBearerOptions>' JwtBearerPostConfigureOptions>()); " is 137.
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleChallengeAsync,The following statement contains a magic number: Response.StatusCode = 401;
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The following statement contains a magic number: if (options.ConfigurationManager == null)              {                  if (options.Configuration != null)                  {                      options.ConfigurationManager = new StaticConfigurationManager<OpenIdConnectConfiguration>(options.Configuration);                  }                  else if (!(string.IsNullOrEmpty(options.MetadataAddress) && string.IsNullOrEmpty(options.Authority)))                  {                      if (string.IsNullOrEmpty(options.MetadataAddress) && !string.IsNullOrEmpty(options.Authority))                      {                          options.MetadataAddress = options.Authority;                          if (!options.MetadataAddress.EndsWith("/"' StringComparison.Ordinal))                          {                              options.MetadataAddress += "/";                          }                            options.MetadataAddress += ".well-known/openid-configuration";                      }                        if (options.RequireHttpsMetadata && !options.MetadataAddress.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))                      {                          throw new InvalidOperationException("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false.");                      }                        var httpClient = new HttpClient(options.BackchannelHttpHandler ?? new HttpClientHandler());                      httpClient.Timeout = options.BackchannelTimeout;                      httpClient.MaxResponseContentBufferSize = 1024 * 1024 * 10; // 10 MB                        options.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(options.MetadataAddress' new OpenIdConnectConfigurationRetriever()'                          new HttpDocumentRetriever(httpClient) { RequireHttps = options.RequireHttpsMetadata });                  }              }
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The following statement contains a magic number: if (options.ConfigurationManager == null)              {                  if (options.Configuration != null)                  {                      options.ConfigurationManager = new StaticConfigurationManager<OpenIdConnectConfiguration>(options.Configuration);                  }                  else if (!(string.IsNullOrEmpty(options.MetadataAddress) && string.IsNullOrEmpty(options.Authority)))                  {                      if (string.IsNullOrEmpty(options.MetadataAddress) && !string.IsNullOrEmpty(options.Authority))                      {                          options.MetadataAddress = options.Authority;                          if (!options.MetadataAddress.EndsWith("/"' StringComparison.Ordinal))                          {                              options.MetadataAddress += "/";                          }                            options.MetadataAddress += ".well-known/openid-configuration";                      }                        if (options.RequireHttpsMetadata && !options.MetadataAddress.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))                      {                          throw new InvalidOperationException("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false.");                      }                        var httpClient = new HttpClient(options.BackchannelHttpHandler ?? new HttpClientHandler());                      httpClient.Timeout = options.BackchannelTimeout;                      httpClient.MaxResponseContentBufferSize = 1024 * 1024 * 10; // 10 MB                        options.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(options.MetadataAddress' new OpenIdConnectConfigurationRetriever()'                          new HttpDocumentRetriever(httpClient) { RequireHttps = options.RequireHttpsMetadata });                  }              }
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The following statement contains a magic number: if (options.ConfigurationManager == null)              {                  if (options.Configuration != null)                  {                      options.ConfigurationManager = new StaticConfigurationManager<OpenIdConnectConfiguration>(options.Configuration);                  }                  else if (!(string.IsNullOrEmpty(options.MetadataAddress) && string.IsNullOrEmpty(options.Authority)))                  {                      if (string.IsNullOrEmpty(options.MetadataAddress) && !string.IsNullOrEmpty(options.Authority))                      {                          options.MetadataAddress = options.Authority;                          if (!options.MetadataAddress.EndsWith("/"' StringComparison.Ordinal))                          {                              options.MetadataAddress += "/";                          }                            options.MetadataAddress += ".well-known/openid-configuration";                      }                        if (options.RequireHttpsMetadata && !options.MetadataAddress.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))                      {                          throw new InvalidOperationException("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false.");                      }                        var httpClient = new HttpClient(options.BackchannelHttpHandler ?? new HttpClientHandler());                      httpClient.Timeout = options.BackchannelTimeout;                      httpClient.MaxResponseContentBufferSize = 1024 * 1024 * 10; // 10 MB                        options.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(options.MetadataAddress' new OpenIdConnectConfigurationRetriever()'                          new HttpDocumentRetriever(httpClient) { RequireHttps = options.RequireHttpsMetadata });                  }              }
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _tokenValidationSucceeded = LoggerMessage.Define(                  eventId: 2'                  logLevel: LogLevel.Information'                  formatString: "Successfully validated the token.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorProcessingMessage = LoggerMessage.Define(                  eventId: 3'                  logLevel: LogLevel.Error'                  formatString: "Exception occurred while processing message.");
