Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,The method has 123 lines of code.
Complex Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleChallengeAsync,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,CreateErrorDescription,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,Cyclomatic complexity of the method is 8
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleAuthenticateAsync,The length of the statement  "                            // Refresh the configuration for exceptions that may be caused by key rollovers. The user can also request a refresh in the event. " is 130.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                    if (options.RequireHttpsMetadata && !options.MetadataAddress.StartsWith("https://"' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                        throw new InvalidOperationException("The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false."); " is 158.
Long Statement,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerPostConfigureOptions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerPostConfigureOptions.cs,PostConfigure,The length of the statement  "                    options.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(options.MetadataAddress' new OpenIdConnectConfigurationRetriever()' " is 151.
Long Statement,Microsoft.AspNetCore.Builder,JwtBearerAppBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerAppBuilderExtensions.cs,UseJwtBearerAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.AspNetCore.Builder,JwtBearerAppBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerAppBuilderExtensions.cs,UseJwtBearerAuthentication,The length of the statement  "            throw new NotSupportedException("This method is no longer supported' see https://go.microsoft.com/fwlink/?linkid=845470"); " is 122.
Long Statement,Microsoft.Extensions.DependencyInjection,JwtBearerExtensions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerExtensions.cs,AddJwtBearer,The length of the statement  "            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IPostConfigureOptions<JwtBearerOptions>' JwtBearerPostConfigureOptions>()); " is 137.
Magic Number,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,HandleChallengeAsync,The following statement contains a magic number: Response.StatusCode = 401;
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _tokenValidationSucceeded = LoggerMessage.Define(                  eventId: 2'                  logLevel: LogLevel.Information'                  formatString: "Successfully validated the token.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorProcessingMessage = LoggerMessage.Define(                  eventId: 3'                  logLevel: LogLevel.Error'                  formatString: "Exception occurred while processing message.");
Missing Default,Microsoft.AspNetCore.Authentication.JwtBearer,JwtBearerHandler,D:\research\architectureSmells\repos\aspnet_Security\src\Microsoft.AspNetCore.Authentication.JwtBearer\JwtBearerHandler.cs,CreateErrorDescription,The following switch statement is missing a default case: switch (ex)                  {                      case SecurityTokenInvalidAudienceException _:                          messages.Add("The audience is invalid");                          break;                      case SecurityTokenInvalidIssuerException _:                          messages.Add("The issuer is invalid");                          break;                      case SecurityTokenNoExpirationException _:                          messages.Add("The token has no expiration");                          break;                      case SecurityTokenInvalidLifetimeException _:                          messages.Add("The token lifetime is invalid");                          break;                      case SecurityTokenNotYetValidException _:                          messages.Add("The token is not valid yet");                          break;                      case SecurityTokenExpiredException _:                          messages.Add("The token is expired");                          break;                      case SecurityTokenSignatureKeyNotFoundException _:                          messages.Add("The signature key was not found");                          break;                      case SecurityTokenInvalidSignatureException _:                          messages.Add("The signature is invalid");                          break;                  }
