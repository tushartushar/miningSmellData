Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The method has 152 lines of code.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                        await res.WriteAsync($"<h1>Access Denied for user {HtmlEncode(context.User.Identity.Name)} to resource '{HtmlEncode(context.Request.Query["ReturnUrl"])}'</h1>"); " is 161.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                if (context.Request.Path.Equals("/restricted") && !user.Identities.Any(identity => identity.HasClaim("special"' "true"))) " is 121.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                    if (int.TryParse(payload.Value<string>("expires_in")' NumberStyles.Integer' CultureInfo.InvariantCulture' out var seconds)) " is 123.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                        await WriteTableHeader(res' new string[] { "Token Type"' "Value" }' props.GetTokens().Select(token => new string[] { token.Name' token.Value })); " is 145.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                    await WriteTableHeader(res' new string[] { "Claim Type"' "Value" }' context.User.Claims.Select(c => new string[] { c.Type' c.Value })); " is 135.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,Configure,The length of the statement  "                    await WriteTableHeader(res' new string[] { "Token Type"' "Value" }' props.GetTokens().Select(token => new string[] { token.Name' token.Value })); " is 145.
Long Statement,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,WriteHtmlAsync,The length of the statement  "            var bootstrap = "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">"; " is 235.
Magic Number,OpenIdConnectSample,Program,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Program.cs,Main,The following statement contains a magic number: var host = new WebHostBuilder()                  .ConfigureLogging(factory =>                  {                      factory.AddConsole();                      factory.AddDebug();                      factory.AddFilter("Console"' level => level >= LogLevel.Information);                      factory.AddFilter("Debug"' level => level >= LogLevel.Information);                  })                  .UseKestrel(options =>                  {                      options.Listen(IPAddress.Loopback' 44318' listenOptions =>                      {                          // Configure SSL                          var serverCertificate = LoadCertificate();                          listenOptions.UseHttps(serverCertificate);                      });                  })                  .UseContentRoot(Directory.GetCurrentDirectory())                  .UseIISIntegration()                  .UseStartup<Startup>()                  .Build();
Magic Number,OpenIdConnectSample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\OpenIdConnectSample\Startup.cs,ConfigureServices,The following statement contains a magic number: services.AddAuthentication(sharedOptions =>              {                  sharedOptions.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;                  sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;                  sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;              })                  .AddCookie()                  .AddOpenIdConnect(o =>              {                  o.ClientId = Configuration["oidc:clientid"];                  o.ClientSecret = Configuration["oidc:clientsecret"]; // for code flow                  o.Authority = Configuration["oidc:authority"];                    o.ResponseType = OpenIdConnectResponseType.CodeIdToken;                  o.SaveTokens = true;                  o.GetClaimsFromUserInfoEndpoint = true;                  o.AccessDeniedPath = "/access-denied-from-remote";                    o.ClaimActions.MapAllExcept("aud"' "iss"' "iat"' "nbf"' "exp"' "aio"' "c_hash"' "uti"' "nonce");                    o.Events = new OpenIdConnectEvents()                  {                      OnAuthenticationFailed = c =>                      {                          c.HandleResponse();                            c.Response.StatusCode = 500;                          c.Response.ContentType = "text/plain";                          if (Environment.IsDevelopment())                          {                              // Debug only' in production do not share exceptions with the remote host.                              return c.Response.WriteAsync(c.Exception.ToString());                          }                          return c.Response.WriteAsync("An error occurred processing your authentication.");                      }                  };              });
