Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CookiePolicySample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\CookiePolicySample\Startup.cs,HomePage,The length of the statement  "            await response.WriteAsync($"<a href=\"{context.Request.PathBase}/CreateEssentialCookie\">Create Essential Cookie</a><br>\r\n"); " is 127.
Long Statement,CookiePolicySample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\CookiePolicySample\Startup.cs,HomePage,The length of the statement  "            await response.WriteAsync($"<a href=\"{context.Request.PathBase}/RemoveEssentialCookie\">Remove Essential Cookie</a><br>\r\n"); " is 127.
Missing Default,CookiePolicySample,Startup,D:\research\architectureSmells\repos\aspnet_Security\samples\CookiePolicySample\Startup.cs,NestedApp,The following switch statement is missing a default case: switch (path)                  {                      case "/Login":                          var user = new ClaimsPrincipal(new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name' "bob") }'                              CookieAuthenticationDefaults.AuthenticationScheme));                          await context.SignInAsync(user);                          break;                      case "/Logout":                          await context.SignOutAsync();                          break;                      case "/CreateTempCookie":                          context.Response.Cookies.Append("Temp"' "1");                          break;                      case "/RemoveTempCookie":                          context.Response.Cookies.Delete("Temp");                          break;                      case "/CreateEssentialCookie":                          context.Response.Cookies.Append("EssentialCookie"' "2"'                              new CookieOptions() { IsEssential = true });                          break;                      case "/RemoveEssentialCookie":                          context.Response.Cookies.Delete("EssentialCookie");                          break;                      case "/GrantConsent":                          context.Features.Get<ITrackingConsentFeature>().GrantConsent();                          break;                      case "/WithdrawConsent":                          context.Features.Get<ITrackingConsentFeature>().WithdrawConsent();                          break;                  }
