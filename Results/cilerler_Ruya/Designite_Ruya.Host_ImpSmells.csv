Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,ProcessArguments,Cyclomatic complexity of the method is 9
Complex Method,Ruya.Host,Server,C:\repos\cilerler_Ruya\Ruya.Host\Server.cs,Start,Cyclomatic complexity of the method is 9
Long Identifier,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,DefaultAction,The length of the parameter serverAddressFromConfiguration is 30.
Long Statement,Ruya.Host,DefaultHub,C:\repos\cilerler_Ruya\Ruya.Host\DefaultHub.cs,RemoveClient,The length of the statement  "	IEnumerable<string> localCopyOfMembers = GroupList.Where (gl => gl.Key == source.Key).Select (gl => gl.Value).ToList (); " is 120.
Long Statement,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,GetCopyrightMessage,The length of the statement  "	string output = "{FileVersionInfo.ProductName} v{FileVersionInfo.ProductVersion} [{Configuration}] {FileVersionInfo.LegalCopyright} {FileVersionInfo.LegalTrademarks} is trademark of {FileVersionInfo.CompanyName}' registered in the U.S.and other countries."; " is 257.
Long Statement,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,DefaultAction,The length of the statement  "	List<string> serverAddresses = serverAddressFromConfiguration.SplitCSV ().Select (address => address.Contains (Constants.WildCardStar) ? address : new FiddlerSupportedUri (address).Address.ToString ()).ToList (); " is 212.
Long Statement,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The length of the statement  "		const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp; " is 177.
Long Statement,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The length of the statement  "		xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") { " is 127.
Long Statement,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The length of the statement  "		const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>"; " is 131.
Long Statement,Ruya.Host,Server,C:\repos\cilerler_Ruya\Ruya.Host\Server.cs,Start,The length of the statement  "			MemoryMappedFileHelper.Write (serverAddressesJoined' Ruya.Connector.Interfaces.Constants.ServerMemoryMappedFileName' capacity' fileVersionInfo.ProductName' out memoryMappedFile); " is 178.
Long Statement,Ruya.Host,Startup,C:\repos\cilerler_Ruya\Ruya.Host\Startup.cs,Configuration,The length of the statement  "		httpConfiguration.Routes.MapHttpRoute (name: "DefaultApi"' routeTemplate: "api/{controller}/{action}/{id}"' defaults: new { " is 123.
Long Statement,Ruya.Host,Startup,C:\repos\cilerler_Ruya\Ruya.Host\Startup.cs,Configuration,The length of the statement  "	// following part shouldn’t be requried' but I ran into some issues that where it wasn’t set' SignalR was throwing null reference' but I’m guessing this will be fixed sooner or later. " is 183.
Long Statement,Ruya.Host,RollingXmlTest,C:\repos\cilerler_Ruya\Ruya.Host\Tests.cs,Run,The length of the statement  "		Tracer.Instance.TraceEvent (EnumHelper.GetRandomEnumItem<TraceEventType> ()' 0' StringHelper.GenerateRandomText (12' StringFeatures.LetterUpper | StringFeatures.LetterLower | StringFeatures.Number)); " is 199.
Empty Catch Block,Ruya.Host,ExceptionTest,C:\repos\cilerler_Ruya\Ruya.Host\Tests.cs,ThrowCoreException,The method has an empty catch block.
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,Main,The following statement contains a magic number: using (var mutex = new Mutex (false' ExecutingAssembly.GetName ().Name)) {  	const int mutexTimeout = 2;  	if (!mutex.WaitOne (TimeSpan.FromSeconds (mutexTimeout)' false)) {  		const string message = "Another instance is running.";  		Debug.WriteLine (message);  		return;  	}  	RunProgram (args);  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,Stop,The following statement contains a magic number: Tracer.Instance.TraceInformation (new string ('~'' 79));  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: try {  	mySource = new TraceSource ("TestSource") {  		Switch = new SourceSwitch ("switch1"' "All")  	};  	const TraceOptions baseTraceOutputOptions = TraceOptions.DateTime | TraceOptions.LogicalOperationStack | TraceOptions.ProcessId | TraceOptions.ThreadId | TraceOptions.Timestamp;  	xmlTraceListener = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\Output.svclog") {  		TraceOutputOptions = baseTraceOutputOptions'  		Filter = new EventTypeFilter (SourceLevels.All)  	};  	xmlTraceListenerWithCallStack = new XmlWriterTraceListener (@"C:\inetpub\wwwroot\des\dupage\Logs\OutputWithCallStack.svclog") {  		TraceOutputOptions = baseTraceOutputOptions | TraceOptions.Callstack'  		Filter = new EventTypeFilter (SourceLevels.Error)  	};  	mySource.Listeners.Add (xmlTraceListener);  	mySource.Listeners.Add (xmlTraceListenerWithCallStack);  	const string testString = "<Test><InnerElement Val=\"1\" /><InnerElement Val=\"Data\"/><AnotherElement>11</AnotherElement></Test>";  	var unEscapedXmlDiagnosticData = new UnescapedXmlDiagnosticData (testString);  	mySource.TraceEvent (TraceEventType.Start' 0' "Main Entry");  	mySource.TraceInformation ("Hello World!");  	mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  	mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  	mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  	Guid prevActivityId = Trace.CorrelationManager.ActivityId;  	Guid newActivityId = Guid.NewGuid ();  	Trace.CorrelationManager.ActivityId = newActivityId;  	mySource.TraceEvent (TraceEventType.Start' 0' "alpha");  	Trace.CorrelationManager.StartLogicalOperation ("WorkerThread");  	mySource.Listeners [0].Filter = new SourceFilter ("No match");  	mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  	mySource.TraceEvent (TraceEventType.Stop' 0' "zulu");  	Trace.CorrelationManager.ActivityId = prevActivityId;  	mySource.TraceTransfer (0' "transfer"' newActivityId);  	Trace.CorrelationManager.StartLogicalOperation ("AlphaThread");  	mySource.Listeners [0].Filter = new SourceFilter ("TestSource");  	mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.Listeners [0].Filter = null;  	Trace.CorrelationManager.StopLogicalOperation ();  	mySource.TraceEvent (TraceEventType.Stop' 0' "Main Exit");  	mySource.Flush ();  	mySource.Listeners.Clear ();  	mySource.Close ();  	xmlTraceListener = null;  	xmlTraceListenerWithCallStack = null;  }  finally {  	mySource = null;  	xmlTraceListener.Dispose ();  	xmlTraceListenerWithCallStack.Dispose ();  }  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceEvent (TraceEventType.Error' 5' "Hello World!");  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Critical' 11' 1' 2' 3);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Information' 11' 11' 214' 2.3' "Hello"' 't'' unEscapedXmlDiagnosticData);  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Error' 5' "SourceFilter should reject this message for the trace listener.");  
Magic Number,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,XmlTraceSourceSample,The following statement contains a magic number: mySource.TraceData (TraceEventType.Error' 6' "SourceFilter should let this message through on the trace listener.");  
Magic Number,Ruya.Host,Tests,C:\repos\cilerler_Ruya\Ruya.Host\Tests.cs,RunConsoleTests,The following statement contains a magic number: RollingXmlTest.Run (1500);  
Magic Number,Ruya.Host,RollingXmlTest,C:\repos\cilerler_Ruya\Ruya.Host\Tests.cs,Run,The following statement contains a magic number: for (var counter = 0; counter < number; counter++) {  	Tracer.Instance.TraceEvent (EnumHelper.GetRandomEnumItem<TraceEventType> ()' 0' StringHelper.GenerateRandomText (12' StringFeatures.LetterUpper | StringFeatures.LetterLower | StringFeatures.Number));  }  
Magic Number,Ruya.Host,RollingXmlTest,C:\repos\cilerler_Ruya\Ruya.Host\Tests.cs,Run,The following statement contains a magic number: Tracer.Instance.TraceEvent (EnumHelper.GetRandomEnumItem<TraceEventType> ()' 0' StringHelper.GenerateRandomText (12' StringFeatures.LetterUpper | StringFeatures.LetterLower | StringFeatures.Number));  
Missing Default,Ruya.Host,Program,C:\repos\cilerler_Ruya\Ruya.Host\Program.cs,ProcessArguments,The following switch statement is missing a default case: switch (parameters) {  case install:  	InstallService ();  	parameterProcessed = true;  	break;  case uninstall:  	UnInstallService ();  	parameterProcessed = true;  	break;  }  
