Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WithStartAndMatch_ExecutesCorrectQuery,The length of the statement  "                         "START movie=node(1) MATCH (movie)<-[:STARED_IN*1..5]-(actor) RETURN actor as actor' id(actor) as actor__Id' labels(actor) as actor__Labels' movie as movie' id(movie) as movie__Id' labels(movie) as movie__Labels");" is 214.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_UsingSetMethod_ExecutesCorrectQuery,The length of the statement  "                         @"MATCH (movie:arthouse) SET movie.requiresSubtitles = ""yes"" RETURN actor as actor' id(actor) as actor__Id' labels(actor) as actor__Labels' movie as movie' id(movie) as movie__Id' labels(movie) as movie__Labels");" is 215.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationship_ExecutesCorrectQuery,The length of the statement  "                         "START actor=node(1)' movie=node(2) CREATE (actor)-[actedIn:ACTED_IN]->(movie) RETURN actedIn as actedIn' id(actedIn) as actedIn__Id' type(actedIn) as actedIn__Type");" is 167.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationshipWithProperties_ExecutesCorrectQuery,The length of the statement  "                         @"START actor=node(1)' movie=node(2) CREATE (actor)-[actedIn:ACTED_IN {name:""mark""}]->(movie) RETURN actedIn as actedIn' id(actedIn) as actedIn__Id' type(actedIn) as actedIn__Type");" is 184.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationshipWithFloatProperty_SerializesValueWithDotNotComma,The length of the statement  "                @"START actor=node(1)' movie=node(2) CREATE (actor)-[actedIn:HAS_RATE {rate:4.56}]->(movie) RETURN actedIn as actedIn' id(actedIn) as actedIn__Id' type(actedIn) as actedIn__Type");" is 180.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WithStartMatchWhere_ExecutesCorrectQuery,The length of the statement  "                         "START movie=node(*) MATCH (movie)<-[:STARED_IN]-(actor) WHERE ((actor.name = 'Bob Dinero') OR (actor.role = 'Keyser SÃ¶ze')) RETURN actor as actor' id(actor) as actor__Id' labels(actor) as actor__Labels' movie as movie' id(movie) as movie__Id' labels(movie) as movie__Labels");" is 277.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_MatchByLabel_ExecutesCorrectQuery,The length of the statement  "                         "MATCH (actor:METHOD_ACTOR)-[:STARED_IN]->()-[directedBy:DIRECTED_BY]->(director) RETURN actor as actor' id(actor) as actor__Id' labels(actor) as actor__Labels' director as director' id(director) as director__Id' labels(director) as director__Labels");" is 252.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_StartAtNodeN_ExecutesCorrectQuery,The length of the statement  "                         "START actor=node(1) RETURN actor as actor' id(actor) as actor__Id' labels(actor) as actor__Labels ORDER BY actedIn.fgds' actedIn.name SKIP 2 LIMIT 1");" is 152.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WhereNot_ExecutesCorrectQuery,The length of the statement  "                         "START actor=node(1) MATCH (actor)-[:STARED_IN*0..]->(movie) WHERE not movie-[:DIRECTED_BY]->director RETURN movie as movie' id(movie) as movie__Id' labels(movie) as movie__Labels");" is 182.
Long Statement,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_OptionalMatch_ExecutesCorrectQuery,The length of the statement  "                         "START actor=node(1) MATCH (actor)-[:STARED_IN*0..]->(movie) OPTIONAL MATCH (movie)<-[:DIRECTED_BY]-(director) RETURN movie as movie' id(movie) as movie__Id' labels(movie) as movie__Labels");" is 191.
Long Statement,CypherNet.UnitTests,CypherSessionTransactionTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherSessionTransactionTests.cs,CreateNode_WithinCommitedTransaction_CallsCommit,The length of the statement  "                .Returns(() => BuildResponse(@"{""commit"":""" + CommitAddress + @"""'""results"":[]'""transaction"":{""expires"":""Wed' 02 Oct 2013 15:18:27 +0000""}'""errors"":[]}"));" is 169.
Long Statement,CypherNet.UnitTests,CypherSessionTransactionTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherSessionTransactionTests.cs,InitializeMockWebClient,The length of the statement  "                            @"{""statements"":[{""statement"":""CREATE (NewNode:person {param_0}) RETURN NewNode as NewNode' id(NewNode) as NewNode__Id' labels(NewNode) as NewNode__Labels;""'""parameters"":{""param_0"":{""name"":""" +" is 206.
Long Statement,CypherNet.UnitTests,CypherSessionTransactionTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherSessionTransactionTests.cs,InitializeMockWebClient,The length of the statement  "                                  @"""'""results"":[{""columns"":[""NewNode""'""NewNode__Id""'""NewNode__Labels""]'""data"":[{""row"": [{""name"":""" + Name + @"""}'15026'[""person""]]}]}]'""errors"":[]}"));" is 173.
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WithStartAndMatch_ExecutesCorrectQuery,The following statement contains a magic number: var results = query                 .Start(ctx => ctx.StartAtId(ctx.Vars.movie' 1))                 .Match(ctx => ctx.Node(ctx.Vars.movie).Incoming("STARED_IN"' 1' 5).From(ctx.Vars.actor))                 .Return(ctx => new { ctx.Vars.actor' ctx.Vars.movie })                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WithSimpleDelete_ExecutesCorrectQuery,The following statement contains a magic number: query                 .Start(ctx => ctx.StartAtId(ctx.Vars.movie' 1))                 .Match(ctx => ctx.Node(ctx.Vars.movie).Incoming("STARED_IN"' 1' 5).From(ctx.Vars.actor))                 .Delete(v => v.actor)                 .Execute();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_WithComplexDelete_ExecutesCorrectQuery,The following statement contains a magic number: query                 .Start(ctx => ctx.StartAtId(ctx.Vars.movie' 1))                 .Match(ctx => ctx.Node(ctx.Vars.movie).Incoming("STARED_IN"' 1' 5).From(ctx.Vars.actor))                 .Delete(v => new { v.actor' v.movie })                 .Execute();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationship_ExecutesCorrectQuery,The following statement contains a magic number: var results = query                 .Start(ctx => ctx.StartAtId(ctx.Vars.actor' 1).StartAtId(ctx.Vars.movie' 2))                 .Create(ctx => ctx.CreateRel(ctx.Vars.actor' ctx.Vars.actedIn' "ACTED_IN"' ctx.Vars.movie))                 .Return(ctx => ctx.Vars.actedIn)                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_ReturnScalarProperty_ExecutesCorrectQuery,The following statement contains a magic number: var results = query                 .Start(ctx => ctx.StartAtId(ctx.Vars.movie' 2))                 .Return(ctx => new { movieName = ctx.Prop(ctx.Vars.movie' "movieName") })                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationshipWithProperties_ExecutesCorrectQuery,The following statement contains a magic number: var results = query                 .Start(ctx => ctx.StartAtId(ctx.Vars.actor' 1).StartAtId(ctx.Vars.movie' 2))                 .Create(ctx => ctx.CreateRel(ctx.Vars.actor' ctx.Vars.actedIn' "ACTED_IN"' new { name = "mark" }' ctx.Vars.movie))                 .Return(ctx => new { ctx.Vars.actedIn })                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationshipWithFloatProperty_SerializesValueWithDotNotComma,The following statement contains a magic number: var results = query                 .Start(ctx => ctx                     .StartAtId(ctx.Vars.actor' 1)                     .StartAtId(ctx.Vars.movie' 2))                 .Create(ctx => ctx.CreateRel(ctx.Vars.actor' ctx.Vars.actedIn' "HAS_RATE"' new { rate = 4.56 }' ctx.Vars.movie))                 .Return(ctx => new { ctx.Vars.actedIn })                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_CreateRelationshipWithFloatProperty_SerializesValueWithDotNotComma,The following statement contains a magic number: var results = query                 .Start(ctx => ctx                     .StartAtId(ctx.Vars.actor' 1)                     .StartAtId(ctx.Vars.movie' 2))                 .Create(ctx => ctx.CreateRel(ctx.Vars.actor' ctx.Vars.actedIn' "HAS_RATE"' new { rate = 4.56 }' ctx.Vars.movie))                 .Return(ctx => new { ctx.Vars.actedIn })                 .Fetch();
Magic Number,CypherNet.UnitTests,CypherQueryTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\CypherQueryTests.cs,BuildCypherQuery_StartAtNodeN_ExecutesCorrectQuery,The following statement contains a magic number: var results = query                 .Start(ctx => ctx.StartAtId(ctx.Vars.actor' 1))                 .Return(ctx => new { ctx.Vars.actor })                 .OrderBy(p => p.actedIn.Get<int>("fgds")' p => p.actedIn.Get<string>("name"))                 .Skip(2)                 .Limit(1)                 .Fetch();
Magic Number,CypherNet.UnitTests,SerializationTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\DeserializationTests.cs,DerializeJson_EntitiesOnly_ReturnsCollectionOfEntities,The following statement contains a magic number: Assert.AreEqual(retval.Results.Count()' 2);
Magic Number,CypherNet.UnitTests,SerializationTests,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\DeserializationTests.cs,DerializeJson_EntitiesOnly_ReturnsCollectionOfEntities,The following statement contains a magic number: Assert.AreEqual(actor.age' 33);
Magic Number,CypherNet.UnitTests,MockHttpResponseMessage,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\MockHttpResponseMessage.cs,MockHttpResponseMessage,The following statement contains a magic number: IsSuccessStatusCode = (int) StatusCode >= 200 && (int) StatusCode < 300;
Magic Number,CypherNet.UnitTests,MockHttpResponseMessage,C:\research\architectureSmells\repos\mtranter_CypherNet\CypherNet.UnitTests\MockHttpResponseMessage.cs,MockHttpResponseMessage,The following statement contains a magic number: IsSuccessStatusCode = (int) StatusCode >= 200 && (int) StatusCode < 300;
