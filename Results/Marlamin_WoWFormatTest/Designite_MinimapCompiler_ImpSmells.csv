Implementation smell,Namespace,Class,File,Method,Description
Long Method,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The method has 105 lines of code.
Long Method,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The method has 129 lines of code.
Complex Method,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,Cyclomatic complexity of the method is 18
Complex Method,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,Cyclomatic complexity of the method is 14
Complex Method,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The length of the statement  "                Console.WriteLine("WMO has no minimaps directory (" + Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar) + "). Skipping.."); " is 158.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The length of the statement  "                string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*"); " is 150.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The length of the statement  "                    wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel); " is 203.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The length of the statement  "                Directory.CreateDirectory("done" + Path.DirectorySeparatorChar + "WMO" + Path.DirectorySeparatorChar + Path.GetDirectoryName(wmoname)); " is 135.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The length of the statement  "                wmobmp.Save("done" + Path.DirectorySeparatorChar + "WMO" + Path.DirectorySeparatorChar + Path.Combine(wmoname) + ".png"); " is 121.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The length of the statement  "                    string wmogroupfilename = wmodir + "\\" + wmoonlyname + "_" + groupid + "_" + cur_x.ToString().PadLeft(2' '0') + "_" + cur_y.ToString().PadLeft(2' '0') + ".blp"; " is 161.
Long Statement,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The length of the statement  "                g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel); " is 127.
Long Statement,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The length of the statement  "                                g.DrawImage(blpreader.bmp' (cur_x - min_x) * 256' (cur_y - min_y) * 256' new Rectangle(0' 0' 256' 256)' GraphicsUnit.Pixel); " is 124.
Long Statement,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The length of the statement  "                                super_g.DrawImage(blpreader.bmp' (cur_x - min_x) * 512' (cur_y - min_y) * 512' new Rectangle(0' 0' 512' 512)' GraphicsUnit.Pixel); " is 130.
Long Statement,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The length of the statement  "                        if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase)) " is 122.
Complex Conditional,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The conditional expression  "min_x == 0 && max_x == 0 && min_y == 0 && max_y == 0"  is complex.
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: int wmo_minx = 999999999;
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: int wmo_miny = 999999999;
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    if (drawx1 < wmo_minx) { wmo_minx = (int)drawx1; }                  if (drawx1 > wmo_maxx) { wmo_maxx = (int)drawx1; }                    if (drawy1 < wmo_miny) { wmo_miny = (int)drawy1; }                  if (drawy1 > wmo_maxy) { wmo_maxy = (int)drawy1; }                    if (drawx2 < wmo_minx) { wmo_minx = (int)drawx2; }                  if (drawx2 > wmo_maxx) { wmo_maxx = (int)drawx2; }                    if (drawy2 < wmo_miny) { wmo_minx = (int)drawy2; }                  if (drawy2 > wmo_maxy) { wmo_maxx = (int)drawy2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    if (drawx1 < wmo_minx) { wmo_minx = (int)drawx1; }                  if (drawx1 > wmo_maxx) { wmo_maxx = (int)drawx1; }                    if (drawy1 < wmo_miny) { wmo_miny = (int)drawy1; }                  if (drawy1 > wmo_maxy) { wmo_maxy = (int)drawy1; }                    if (drawx2 < wmo_minx) { wmo_minx = (int)drawx2; }                  if (drawx2 > wmo_maxx) { wmo_maxx = (int)drawx2; }                    if (drawy2 < wmo_miny) { wmo_minx = (int)drawy2; }                  if (drawy2 > wmo_maxy) { wmo_maxx = (int)drawy2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    if (drawx1 < wmo_minx) { wmo_minx = (int)drawx1; }                  if (drawx1 > wmo_maxx) { wmo_maxx = (int)drawx1; }                    if (drawy1 < wmo_miny) { wmo_miny = (int)drawy1; }                  if (drawy1 > wmo_maxy) { wmo_maxy = (int)drawy1; }                    if (drawx2 < wmo_minx) { wmo_minx = (int)drawx2; }                  if (drawx2 > wmo_maxx) { wmo_maxx = (int)drawx2; }                    if (drawy2 < wmo_miny) { wmo_minx = (int)drawy2; }                  if (drawy2 > wmo_maxy) { wmo_maxx = (int)drawy2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    if (drawx1 < wmo_minx) { wmo_minx = (int)drawx1; }                  if (drawx1 > wmo_maxx) { wmo_maxx = (int)drawx1; }                    if (drawy1 < wmo_miny) { wmo_miny = (int)drawy1; }                  if (drawy1 > wmo_maxy) { wmo_maxy = (int)drawy1; }                    if (drawx2 < wmo_minx) { wmo_minx = (int)drawx2; }                  if (drawx2 > wmo_maxx) { wmo_maxx = (int)drawx2; }                    if (drawy2 < wmo_miny) { wmo_minx = (int)drawy2; }                  if (drawy2 > wmo_maxy) { wmo_maxx = (int)drawy2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    if (drawx1 < wmo_minx) { wmo_minx = (int)drawx1; }                  if (drawx1 > wmo_maxx) { wmo_maxx = (int)drawx1; }                    if (drawy1 < wmo_miny) { wmo_miny = (int)drawy1; }                  if (drawy1 > wmo_maxy) { wmo_maxy = (int)drawy1; }                    if (drawx2 < wmo_minx) { wmo_minx = (int)drawx2; }                  if (drawx2 > wmo_maxx) { wmo_maxx = (int)drawx2; }                    if (drawy2 < wmo_miny) { wmo_minx = (int)drawy2; }                  if (drawy2 > wmo_maxy) { wmo_maxx = (int)drawy2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    if (greenx2 > wmoresx) { wmoresx = greenx2; }                  if (greeny2 > wmoresy) { wmoresy = greeny2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    if (greenx2 > wmoresx) { wmoresx = greenx2; }                  if (greeny2 > wmoresy) { wmoresy = greeny2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    if (greenx2 > wmoresx) { wmoresx = greenx2; }                  if (greeny2 > wmoresy) { wmoresy = greeny2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    if (greenx2 > wmoresx) { wmoresx = greenx2; }                  if (greeny2 > wmoresy) { wmoresy = greeny2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    if (greenx2 > wmoresx) { wmoresx = greenx2; }                  if (greeny2 > wmoresy) { wmoresy = greeny2; }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    /*                  //Check if minimaps wmo dir for this even exists                    string wmogroupfilename = Path.GetFileNameWithoutExtension(wmoname) + "_" + groupid;                  string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*");                    //check if there are any minimap blps for this group                  if (filePaths.Count() == 0)                  {                      Console.WriteLine("WMO has no blps in minimap directory. Skipping..");                      continue;                  }                  */                  Bitmap minimapbmp = CompileGroup(wmoname' groupid);                    if (minimapbmp.Width > 1)                  {                      wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel);                  }                  numtiles++;                  minimapbmp.Dispose();              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    /*                  //Check if minimaps wmo dir for this even exists                    string wmogroupfilename = Path.GetFileNameWithoutExtension(wmoname) + "_" + groupid;                  string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*");                    //check if there are any minimap blps for this group                  if (filePaths.Count() == 0)                  {                      Console.WriteLine("WMO has no blps in minimap directory. Skipping..");                      continue;                  }                  */                  Bitmap minimapbmp = CompileGroup(wmoname' groupid);                    if (minimapbmp.Width > 1)                  {                      wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel);                  }                  numtiles++;                  minimapbmp.Dispose();              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    /*                  //Check if minimaps wmo dir for this even exists                    string wmogroupfilename = Path.GetFileNameWithoutExtension(wmoname) + "_" + groupid;                  string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*");                    //check if there are any minimap blps for this group                  if (filePaths.Count() == 0)                  {                      Console.WriteLine("WMO has no blps in minimap directory. Skipping..");                      continue;                  }                  */                  Bitmap minimapbmp = CompileGroup(wmoname' groupid);                    if (minimapbmp.Width > 1)                  {                      wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel);                  }                  numtiles++;                  minimapbmp.Dispose();              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    /*                  //Check if minimaps wmo dir for this even exists                    string wmogroupfilename = Path.GetFileNameWithoutExtension(wmoname) + "_" + groupid;                  string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*");                    //check if there are any minimap blps for this group                  if (filePaths.Count() == 0)                  {                      Console.WriteLine("WMO has no blps in minimap directory. Skipping..");                      continue;                  }                  */                  Bitmap minimapbmp = CompileGroup(wmoname' groupid);                    if (minimapbmp.Width > 1)                  {                      wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel);                  }                  numtiles++;                  minimapbmp.Dispose();              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,Compile,The following statement contains a magic number: for (int i = 0; i < wmo.group.Count(); i++)              {                  string groupid = i.ToString().PadLeft(3' '0');                    double drawx1 = wmo.groupInfo[i].boundingBox1.X * 2;                  double drawy1 = wmo.groupInfo[i].boundingBox1.Y * 2;                    double drawx2 = wmo.groupInfo[i].boundingBox2.X * 2;                  double drawy2 = wmo.groupInfo[i].boundingBox2.Y * 2;                    int greenx1 = (int)drawx1 + Math.Abs(wmo_minx);                  int greeny1 = (int)drawy1 + Math.Abs(wmo_miny);                    int greenx2 = (int)drawx2 + Math.Abs(wmo_minx);                  int greeny2 = (int)drawy2 + Math.Abs(wmo_miny);                    /*                  //Check if minimaps wmo dir for this even exists                    string wmogroupfilename = Path.GetFileNameWithoutExtension(wmoname) + "_" + groupid;                  string[] filePaths = Directory.GetFiles(Path.Combine(basedir' "World"' "Minimaps"' wmodirname + Path.DirectorySeparatorChar)' wmogroupfilename + "*");                    //check if there are any minimap blps for this group                  if (filePaths.Count() == 0)                  {                      Console.WriteLine("WMO has no blps in minimap directory. Skipping..");                      continue;                  }                  */                  Bitmap minimapbmp = CompileGroup(wmoname' groupid);                    if (minimapbmp.Width > 1)                  {                      wmog.DrawImage(minimapbmp' greenx1' (wmoresy - (greeny1 + (greeny2 - greeny1)) + (greeny2 - greeny1))' new Rectangle(0' minimapbmp.Height' (greenx2 - greenx1)' -(greeny2 - greeny1))' GraphicsUnit.Pixel);                  }                  numtiles++;                  minimapbmp.Dispose();              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: int min_x = 64;
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: int min_y = 64;
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: for (int cur_x = 0; cur_x < 64; cur_x++)              {                  for (int cur_y = 0; cur_y < 64; cur_y++)                  {                      string wmogroupfilename = wmodir + "\\" + wmoonlyname + "_" + groupid + "_" + cur_x.ToString().PadLeft(2' '0') + "_" + cur_y.ToString().PadLeft(2' '0') + ".blp";                      //wmogroupfilename = wmogroupfilename.Replace("\\"' "\\\\");                      if (wmogroupfilename.Contains("000_00_00"))                      {                          Console.WriteLine("CHECKING " + wmogroupfilename);                      }                      if (CASC.cascHandler.FileExists(wmogroupfilename))                      {                          Console.WriteLine(wmogroupfilename + " exists!");                          filePaths.Add(wmogroupfilename);                      }                  }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: for (int cur_x = 0; cur_x < 64; cur_x++)              {                  for (int cur_y = 0; cur_y < 64; cur_y++)                  {                      string wmogroupfilename = wmodir + "\\" + wmoonlyname + "_" + groupid + "_" + cur_x.ToString().PadLeft(2' '0') + "_" + cur_y.ToString().PadLeft(2' '0') + ".blp";                      //wmogroupfilename = wmogroupfilename.Replace("\\"' "\\\\");                      if (wmogroupfilename.Contains("000_00_00"))                      {                          Console.WriteLine("CHECKING " + wmogroupfilename);                      }                      if (CASC.cascHandler.FileExists(wmogroupfilename))                      {                          Console.WriteLine(wmogroupfilename + " exists!");                          filePaths.Add(wmogroupfilename);                      }                  }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: for (int cur_x = 0; cur_x < 64; cur_x++)              {                  for (int cur_y = 0; cur_y < 64; cur_y++)                  {                      string wmogroupfilename = wmodir + "\\" + wmoonlyname + "_" + groupid + "_" + cur_x.ToString().PadLeft(2' '0') + "_" + cur_y.ToString().PadLeft(2' '0') + ".blp";                      //wmogroupfilename = wmogroupfilename.Replace("\\"' "\\\\");                      if (wmogroupfilename.Contains("000_00_00"))                      {                          Console.WriteLine("CHECKING " + wmogroupfilename);                      }                      if (CASC.cascHandler.FileExists(wmogroupfilename))                      {                          Console.WriteLine(wmogroupfilename + " exists!");                          filePaths.Add(wmogroupfilename);                      }                  }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: for (int cur_x = 0; cur_x < 64; cur_x++)              {                  for (int cur_y = 0; cur_y < 64; cur_y++)                  {                      string wmogroupfilename = wmodir + "\\" + wmoonlyname + "_" + groupid + "_" + cur_x.ToString().PadLeft(2' '0') + "_" + cur_y.ToString().PadLeft(2' '0') + ".blp";                      //wmogroupfilename = wmogroupfilename.Replace("\\"' "\\\\");                      if (wmogroupfilename.Contains("000_00_00"))                      {                          Console.WriteLine("CHECKING " + wmogroupfilename);                      }                      if (CASC.cascHandler.FileExists(wmogroupfilename))                      {                          Console.WriteLine(wmogroupfilename + " exists!");                          filePaths.Add(wmogroupfilename);                      }                  }              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  Console.WriteLine(path);                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                    if (x > max_x) { max_x = x; }                  if (y > max_y) { max_y = y; }                    if (x < min_x) { min_x = x; }                  if (y < min_y) { min_y = y; }                    // Console.WriteLine("[" + groupid + "] MIN: " + min_x + " " + min_y);                  // Console.WriteLine("[" + groupid + "] MAX: " + max_x + " " + max_y);                    lastpath = path;              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  Console.WriteLine(path);                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                    if (x > max_x) { max_x = x; }                  if (y > max_y) { max_y = y; }                    if (x < min_x) { min_x = x; }                  if (y < min_y) { min_y = y; }                    // Console.WriteLine("[" + groupid + "] MIN: " + min_x + " " + min_y);                  // Console.WriteLine("[" + groupid + "] MAX: " + max_x + " " + max_y);                    lastpath = path;              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  Console.WriteLine(path);                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                    if (x > max_x) { max_x = x; }                  if (y > max_y) { max_y = y; }                    if (x < min_x) { min_x = x; }                  if (y < min_y) { min_y = y; }                    // Console.WriteLine("[" + groupid + "] MIN: " + min_x + " " + min_y);                  // Console.WriteLine("[" + groupid + "] MAX: " + max_x + " " + max_y);                    lastpath = path;              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  Console.WriteLine(path);                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                    if (x > max_x) { max_x = x; }                  if (y > max_y) { max_y = y; }                    if (x < min_x) { min_x = x; }                  if (y < min_y) { min_y = y; }                    // Console.WriteLine("[" + groupid + "] MIN: " + min_x + " " + min_y);                  // Console.WriteLine("[" + groupid + "] MAX: " + max_x + " " + max_y);                    lastpath = path;              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: if (min_x == 0 && max_x == 0 && min_y == 0 && max_y == 0)              {                  var blpreader = new BLPReader();                  blpreader.LoadBLP(lastpath);                  res_x = blpreader.bmp.Width;                  res_y = blpreader.bmp.Height;              }              else              {                  res_x = (((max_x - min_x) * 256) + 256);                  res_y = (((max_y - min_y) * 256) + 256);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: if (min_x == 0 && max_x == 0 && min_y == 0 && max_y == 0)              {                  var blpreader = new BLPReader();                  blpreader.LoadBLP(lastpath);                  res_x = blpreader.bmp.Width;                  res_y = blpreader.bmp.Height;              }              else              {                  res_x = (((max_x - min_x) * 256) + 256);                  res_y = (((max_y - min_y) * 256) + 256);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: if (min_x == 0 && max_x == 0 && min_y == 0 && max_y == 0)              {                  var blpreader = new BLPReader();                  blpreader.LoadBLP(lastpath);                  res_x = blpreader.bmp.Width;                  res_y = blpreader.bmp.Height;              }              else              {                  res_x = (((max_x - min_x) * 256) + 256);                  res_y = (((max_y - min_y) * 256) + 256);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: if (min_x == 0 && max_x == 0 && min_y == 0 && max_y == 0)              {                  var blpreader = new BLPReader();                  blpreader.LoadBLP(lastpath);                  res_x = blpreader.bmp.Width;                  res_y = blpreader.bmp.Height;              }              else              {                  res_x = (((max_x - min_x) * 256) + 256);                  res_y = (((max_y - min_y) * 256) + 256);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,WMO,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\WMO.cs,CompileGroup,The following statement contains a magic number: foreach (string path in filePaths)              {                  x = int.Parse(path.Substring(path.Length - 9' 2));                  y = int.Parse(path.Substring(path.Length - 6' 2));                  var blpreader = new BLPReader();                  blpreader.LoadBLP(path);                  //  Console.WriteLine("BLP Width: " + blpreader.bmp.Width);                  //  Console.WriteLine("BLP Height: " + blpreader.bmp.Height);                  var draw_x = (x - min_x) * 256;                  var draw_y = (max_y - (y - min_y)) * 256;                  //Console.WriteLine("Drawing tile at " + draw_x + " & " + draw_y);                  g.DrawImage(blpreader.bmp' draw_x' draw_y' new Rectangle(0' 0' blpreader.bmp.Width' blpreader.bmp.Height)' GraphicsUnit.Pixel);              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
Magic Number,MinimapCompiler,Program,C:\repos\Marlamin_WoWFormatTest\MinimapCompiler\Program.cs,Main,The following statement contains a magic number: if (buildWMOmaps == true)              {                  List<string> linelist = new List<string>();                                    foreach(var line in File.ReadAllLines("listfile.txt"))                  {                       linelist.Add(line);                  }                    string[] unwantedExtensions = new string[513];                  for (int i = 0; i < 512; i++)                  {                      unwantedExtensions[i] = "_" + i.ToString().PadLeft(3' '0') + ".wmo";                  }                    unwantedExtensions[512] = "lod1.wmo";                  foreach (string s in linelist)                  {                      if (s.Length > 8 && !unwantedExtensions.Contains(s.Substring(s.Length - 8' 8)))                      {                          if ((!s.Contains("lod1.wmo") && !s.Contains("lod2.wmo")) && s.EndsWith(".wmo"' StringComparison.CurrentCultureIgnoreCase))                          {                              Console.WriteLine(s);                              WMO wmocompiler = new WMO();                              wmocompiler.Compile(s);                          }                      }                  }                  Console.ReadLine();              }
