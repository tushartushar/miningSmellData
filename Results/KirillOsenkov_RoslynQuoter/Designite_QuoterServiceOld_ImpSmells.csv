Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,QuoterService.Controllers,QuoterController,C:\repos\KirillOsenkov_RoslynQuoter\src\QuoterServiceOld\Controllers\QuoterController.cs,Get,The method has 7 parameters. Parameters: sourceText' nodeKind' openCurlyOnNewLine' closeCurlyOnNewLine' preserveOriginalWhitespace' keepRedundantApiCalls' avoidUsingStatic
Long Statement,QuoterService.Controllers,QuoterController,C:\repos\KirillOsenkov_RoslynQuoter\src\QuoterServiceOld\Controllers\QuoterController.cs,Get,The length of the statement  "                responseText = "Only strings shorter than 2000 characters are supported; your input string is " + sourceText.Length + " characters long."; " is 138.
Long Statement,QuoterService.Controllers,QuoterController,C:\repos\KirillOsenkov_RoslynQuoter\src\QuoterServiceOld\Controllers\QuoterController.cs,Get,The length of the statement  "                    prefix = "Congratulations! You've found a bug in Quoter! Please open an issue at <a href=\"https://github.com/KirillOsenkov/RoslynQuoter/issues/new\" target=\"_blank\">https://github.com/KirillOsenkov/RoslynQuoter/issues/new</a> and paste the code you've typed above and this stack:"; " is 284.
Magic Number,QuoterService.Controllers,QuoterController,C:\repos\KirillOsenkov_RoslynQuoter\src\QuoterServiceOld\Controllers\QuoterController.cs,Get,The following statement contains a magic number: if (string.IsNullOrEmpty(sourceText))              {                  responseText = "Please specify the source text.";              }              else if (sourceText.Length > 2000)              {                  responseText = "Only strings shorter than 2000 characters are supported; your input string is " + sourceText.Length + " characters long.";              }              else              {                  try                  {                      var quoter = new Quoter                      {                          OpenParenthesisOnNewLine = openCurlyOnNewLine'                          ClosingParenthesisOnNewLine = closeCurlyOnNewLine'                          UseDefaultFormatting = !preserveOriginalWhitespace'                          RemoveRedundantModifyingCalls = !keepRedundantApiCalls'                          ShortenCodeWithUsingStatic = !avoidUsingStatic                      };                        responseText = quoter.Quote(sourceText' nodeKind);                  }                  catch (Exception ex)                  {                      responseText = ex.ToString();                        prefix = "Congratulations! You've found a bug in Quoter! Please open an issue at <a href=\"https://github.com/KirillOsenkov/RoslynQuoter/issues/new\" target=\"_blank\">https://github.com/KirillOsenkov/RoslynQuoter/issues/new</a> and paste the code you've typed above and this stack:";                  }              }
