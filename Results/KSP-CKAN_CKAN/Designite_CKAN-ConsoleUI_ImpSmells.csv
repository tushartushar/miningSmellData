Implementation smell,Namespace,Class,File,Method,Description
Long Method,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The method has 135 lines of code.
Long Method,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The method has 134 lines of code.
Long Method,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The method has 244 lines of code.
Long Method,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The method has 102 lines of code.
Complex Method,CKAN.ConsoleUI,DownloadImportDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DownloadImportDialog.cs,ImportFiles,Cyclomatic complexity of the method is 10
Complex Method,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,Cyclomatic complexity of the method is 11
Complex Method,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,HostedOn,Cyclomatic complexity of the method is 13
Complex Method,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,Cyclomatic complexity of the method is 8
Complex Method,CKAN.ConsoleUI.Toolkit,ScreenContainer,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ScreenContainer.cs,DrawFooter,Cyclomatic complexity of the method is 9
Long Parameter List,CKAN.ConsoleUI,DownloadImportDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DownloadImportDialog.cs,ImportFiles,The method has 5 parameters. Parameters: gameInst' files' user' inst' installMod
Long Parameter List,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The method has 8 parameters. Parameters: l' t' r' b' title' color' doubleLine' releases
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleButton,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleButton.cs,ConsoleButton,The method has 5 parameters. Parameters: l' t' r' cap' onClick
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The method has 5 parameters. Parameters: m' hdr' c' renderer' comparer
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,ConsoleFrame,The method has 7 parameters. Parameters: l' t' r' b' title' borderColor' dblBorder
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,ConsoleDoubleFrame,The method has 9 parameters. Parameters: l' t' r' b' midY' topTitle' midTitle' borderColor' dblBorder
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleLabel,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleLabel.cs,ConsoleLabel,The method has 6 parameters. Parameters: l' t' r' lf' bgFunc' fgFunc
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,ConsoleListBox,The method has 10 parameters. Parameters: l' t' r' b' dataList' columnList' dfltSortCol' initialSortCol' initialSortDir' filt
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The method has 5 parameters. Parameters: m' btns' hdr' ta' vertOffset
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleMenuOption,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,ConsoleMenuOption,The method has 7 parameters. Parameters: cap' key' tt' close' exec' radio' submenu
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleProgressBar,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleProgressBar.cs,ConsoleProgressBar,The method has 5 parameters. Parameters: l' t' r' cf' pf
Long Parameter List,CKAN.ConsoleUI.Toolkit,ConsoleTextBox,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleTextBox.cs,ConsoleTextBox,The method has 8 parameters. Parameters: l' t' r' b' autoScroll' ta' bgFunc' fgFunc
Long Statement,CKAN.ConsoleUI,InstallScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\InstallScreen.cs,Run,The length of the statement  "                        RaiseError($"Module {ex.module} required but it is not listed in the index' or not available for your version of KSP. {ex.Message}"); " is 133.
Long Statement,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The length of the statement  "            drawCentered(12' $"{Symbols.upperLeftCornerDouble}##################################################{Symbols.upperRightCornerDouble}".Replace("#"' horiz)); " is 155.
Long Statement,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The length of the statement  "                drawCentered(ln' $"{Symbols.vertLineDouble}                                                  {Symbols.vertLineDouble}"); " is 120.
Long Statement,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The length of the statement  "            drawCentered(16' $"{Symbols.lowerLeftCornerDouble}##################################################{Symbols.lowerRightCornerDouble}".Replace("#"' horiz)); " is 155.
Complex Conditional,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The conditional expression  "minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)"  is complex.
Complex Conditional,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The conditional expression  "maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)"  is complex.
Complex Conditional,CKAN.ConsoleUI.Toolkit,ScreenContainer,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ScreenContainer.cs,Draw,The conditional expression  "objects.Count > 0                          && focusIndex >= 0                          && focusIndex < objects.Count                          && objects[focusIndex].Focusable()"  is complex.
Virtual Method Call from Constructor,CKAN.ConsoleUI,ConsoleCKAN,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ConsoleCKAN.cs,ConsoleCKAN,The constructor "ConsoleCKAN" calls a virtual method "Run".
Virtual Method Call from Constructor,CKAN.ConsoleUI,ConsoleCKAN,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ConsoleCKAN.cs,ConsoleCKAN,The constructor "ConsoleCKAN" calls a virtual method "Run".
Virtual Method Call from Constructor,CKAN.ConsoleUI,KSPScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPScreen.cs,KSPScreen,The constructor "KSPScreen" calls a virtual method "Valid".
Virtual Method Call from Constructor,CKAN.ConsoleUI,KSPScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPScreen.cs,KSPScreen,The constructor "KSPScreen" calls a virtual method "Save".
Virtual Method Call from Constructor,CKAN.ConsoleUI,RepoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\RepoScreen.cs,RepoScreen,The constructor "RepoScreen" calls a virtual method "Valid".
Virtual Method Call from Constructor,CKAN.ConsoleUI,RepoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\RepoScreen.cs,RepoScreen,The constructor "RepoScreen" calls a virtual method "Save".
Virtual Method Call from Constructor,CKAN.ConsoleUI.Toolkit,ScreenContainer,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ScreenContainer.cs,ScreenContainer,The constructor "ScreenContainer" calls a virtual method "DrawBackground".
Empty Catch Block,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,AddDependencies,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI,InstallScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\InstallScreen.cs,Run,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ViewSuggestions,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,GetAllMods,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,drawCentered,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,pathFieldChanged,The method has an empty catch block.
Empty Catch Block,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,Draw,The method has an empty catch block.
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: choices = new ConsoleListBox<KspVersion>(                  l + 2' t + 2' r - 2' b - 4'                  options'                  new List<ConsoleListBoxColumn<KspVersion>>() {                      new ConsoleListBoxColumn<KspVersion>() {                          Header   = "Predefined Version"'                          Width    = r - l - 5'                          Renderer = v => v.ToString()'                          Comparer = (v1' v2) => v1.CompareTo(v2)                      }                  }'                  0' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: choices = new ConsoleListBox<KspVersion>(                  l + 2' t + 2' r - 2' b - 4'                  options'                  new List<ConsoleListBoxColumn<KspVersion>>() {                      new ConsoleListBoxColumn<KspVersion>() {                          Header   = "Predefined Version"'                          Width    = r - l - 5'                          Renderer = v => v.ToString()'                          Comparer = (v1' v2) => v1.CompareTo(v2)                      }                  }'                  0' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: choices = new ConsoleListBox<KspVersion>(                  l + 2' t + 2' r - 2' b - 4'                  options'                  new List<ConsoleListBoxColumn<KspVersion>>() {                      new ConsoleListBoxColumn<KspVersion>() {                          Header   = "Predefined Version"'                          Width    = r - l - 5'                          Renderer = v => v.ToString()'                          Comparer = (v1' v2) => v1.CompareTo(v2)                      }                  }'                  0' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: choices = new ConsoleListBox<KspVersion>(                  l + 2' t + 2' r - 2' b - 4'                  options'                  new List<ConsoleListBoxColumn<KspVersion>>() {                      new ConsoleListBoxColumn<KspVersion>() {                          Header   = "Predefined Version"'                          Width    = r - l - 5'                          Renderer = v => v.ToString()'                          Comparer = (v1' v2) => v1.CompareTo(v2)                      }                  }'                  0' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: choices = new ConsoleListBox<KspVersion>(                  l + 2' t + 2' r - 2' b - 4'                  options'                  new List<ConsoleListBoxColumn<KspVersion>>() {                      new ConsoleListBoxColumn<KspVersion>() {                          Header   = "Predefined Version"'                          Width    = r - l - 5'                          Renderer = v => v.ToString()'                          Comparer = (v1' v2) => v1.CompareTo(v2)                      }                  }'                  0' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: manualEntry = new ConsoleField(                  l + 2' b - 2' r - 2              ) {                  GhostText = () => "<Enter a version>"              };
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: manualEntry = new ConsoleField(                  l + 2' b - 2' r - 2              ) {                  GhostText = () => "<Enter a version>"              };
Magic Number,CKAN.ConsoleUI,CompatibleVersionDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\CompatibleVersionDialog.cs,CompatibleVersionDialog,The following statement contains a magic number: manualEntry = new ConsoleField(                  l + 2' b - 2' r - 2              ) {                  GhostText = () => "<Enter a version>"              };
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  1' 2' -1'                  () => "Additional mods are recommended or suggested:"              ));
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: dependencyList = new ConsoleListBox<Dependency>(                  1' 4' -1' -2'                  new List<Dependency>(dependencies.Values)'                  new List<ConsoleListBoxColumn<Dependency>>() {                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Install"'                          Width    = 7'                          Renderer = (Dependency d) => StatusSymbol(d.identifier)'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Name"'                          Width    = 24'                          Renderer = (Dependency d) => d.identifier'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Sources"'                          Width    = 42'                          Renderer = (Dependency d) => string.Join("' "' d.dependents)                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: dependencyList = new ConsoleListBox<Dependency>(                  1' 4' -1' -2'                  new List<Dependency>(dependencies.Values)'                  new List<ConsoleListBoxColumn<Dependency>>() {                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Install"'                          Width    = 7'                          Renderer = (Dependency d) => StatusSymbol(d.identifier)'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Name"'                          Width    = 24'                          Renderer = (Dependency d) => d.identifier'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Sources"'                          Width    = 42'                          Renderer = (Dependency d) => string.Join("' "' d.dependents)                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: dependencyList = new ConsoleListBox<Dependency>(                  1' 4' -1' -2'                  new List<Dependency>(dependencies.Values)'                  new List<ConsoleListBoxColumn<Dependency>>() {                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Install"'                          Width    = 7'                          Renderer = (Dependency d) => StatusSymbol(d.identifier)'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Name"'                          Width    = 24'                          Renderer = (Dependency d) => d.identifier'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Sources"'                          Width    = 42'                          Renderer = (Dependency d) => string.Join("' "' d.dependents)                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: dependencyList = new ConsoleListBox<Dependency>(                  1' 4' -1' -2'                  new List<Dependency>(dependencies.Values)'                  new List<ConsoleListBoxColumn<Dependency>>() {                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Install"'                          Width    = 7'                          Renderer = (Dependency d) => StatusSymbol(d.identifier)'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Name"'                          Width    = 24'                          Renderer = (Dependency d) => d.identifier'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Sources"'                          Width    = 42'                          Renderer = (Dependency d) => string.Join("' "' d.dependents)                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,DependencyScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DependencyScreen.cs,DependencyScreen,The following statement contains a magic number: dependencyList = new ConsoleListBox<Dependency>(                  1' 4' -1' -2'                  new List<Dependency>(dependencies.Values)'                  new List<ConsoleListBoxColumn<Dependency>>() {                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Install"'                          Width    = 7'                          Renderer = (Dependency d) => StatusSymbol(d.identifier)'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Name"'                          Width    = 24'                          Renderer = (Dependency d) => d.identifier'                      }'                      new ConsoleListBoxColumn<Dependency>() {                          Header   = "Sources"'                          Width    = 42'                          Renderer = (Dependency d) => string.Join("' "' d.dependents)                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,DownloadImportDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\DownloadImportDialog.cs,ImportFiles,The following statement contains a magic number: foreach (FileInfo f in files) {                  int percent = i * 100 / files.Count;                  user.RaiseProgress($"Importing {f.Name}... ({percent}%)"' percent);                  // Calc SHA-1 sum                  string sha1 = GetFileHashSha1(f.FullName);                  // Find SHA-1 sum in registry (potentially multiple)                  if (index.ContainsKey(sha1)) {                      deletable.Add(f);                      List<CkanModule> matches = index[sha1];                      foreach (CkanModule mod in matches) {                          if (mod.IsCompatibleKSP(gameInst.VersionCriteria())) {                              installable.Add(mod.identifier);                          }                          if (inst.Cache.IsCachedZip(mod.download)) {                              user.RaiseMessage("Already cached: {0}"' f.Name);                          } else {                              user.RaiseMessage($"Importing {mod.identifier} {Formatting.StripEpoch(mod.version)}...");                              inst.Cache.Store(mod.download' f.FullName);                          }                      }                  } else {                      user.RaiseMessage("Not found in index: {0}"' f.Name);                  }                  ++i;              }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPEditScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPEditScreen.cs,KSPEditScreen,The following statement contains a magic number: if (registry != null) {                    // Need to edit a copy of the list so it doesn't save on cancel                  repoEditList = new SortedDictionary<string' Repository>();                  foreach (var kvp in registry.Repositories) {                      repoEditList.Add(kvp.Key' new Repository(                          kvp.Value.name'                          kvp.Value.uri.ToString()'                          kvp.Value.priority                      ));                  }                    // Also edit copy of the compatible versions                  compatEditList = new List<KspVersion>(ksp.GetCompatibleVersions());                    // I'm not a huge fan of this layout' but I think it's better than just a label                  AddObject(new ConsoleDoubleFrame(                      1' repoFrameTop' -1' compatFrameBottom' compatFrameTop'                      () => $"Mod List Sources"'                      () => $"Additional Compatible Versions"'                      () => ConsoleTheme.Current.LabelFg                  ));                    repoList = new ConsoleListBox<Repository>(                      3' repoListTop' -3' repoListBottom'                      new List<Repository>(repoEditList.Values)'                      new List<ConsoleListBoxColumn<Repository>>() {                          new ConsoleListBoxColumn<Repository>() {                              Header   = "Index"'                              Renderer = r => r.priority.ToString()'                              Width    = 7                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "Name"'                              Renderer = r => r.name'                              Width    = 16                          }' new ConsoleListBoxColumn<Repository>() {                              Header   = "URL"'                              Renderer = r => r.uri.ToString()'                              Width    = 50                          }                      }'                      1' 0' ListSortDirection.Ascending                  );                  AddObject(repoList);                  repoList.AddTip("A"' "Add");                  repoList.AddBinding(Keys.A' (object sender) => {                      LaunchSubScreen(new RepoAddScreen(repoEditList));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("R"' "Remove");                  repoList.AddBinding(Keys.R' (object sender) => {                      int oldPrio = repoList.Selection.priority;                      repoEditList.Remove(repoList.Selection.name);                      // Reshuffle the priorities to fill                      foreach (Repository r in repoEditList.Values) {                          if (r.priority > oldPrio) {                              --r.priority;                          }                      }                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("E"' "Edit");                  repoList.AddBinding(Keys.E' (object sender) => {                      LaunchSubScreen(new RepoEditScreen(repoEditList' repoList.Selection));                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                  repoList.AddTip("-"' "Up");                  repoList.AddBinding(Keys.Minus' (object sender) => {                      if (repoList.Selection.priority > 0) {                          Repository prev = SortedDictFind(repoEditList'                              r => r.priority == repoList.Selection.priority - 1);                          if (prev != null) {                              ++prev.priority;                          }                          --repoList.Selection.priority;                          repoList.SetData(new List<Repository>(repoEditList.Values));                      }                      return true;                  });                  repoList.AddTip("+"' "Down");                  repoList.AddBinding(Keys.Plus' (object sender) => {                      Repository next = SortedDictFind(repoEditList'                          r => r.priority == repoList.Selection.priority + 1);                      if (next != null) {                          --next.priority;                      }                      ++repoList.Selection.priority;                      repoList.SetData(new List<Repository>(repoEditList.Values));                      return true;                  });                    compatList = new ConsoleListBox<KspVersion>(                      3' compatListTop' -3' compatListBottom'                      compatEditList'                      new List<ConsoleListBoxColumn<KspVersion>>() {                          new ConsoleListBoxColumn<KspVersion>() {                              Header   = "Version"'                              Width    = 10'                              Renderer = v => v.ToString()'                              Comparer = (a' b) => a.CompareTo(b)                          }                      }'                      0' 0' ListSortDirection.Descending                  );                  AddObject(compatList);                    compatList.AddTip("A"' "Add");                  compatList.AddBinding(Keys.A' (object sender) => {                      CompatibleVersionDialog vd = new CompatibleVersionDialog();                      KspVersion newVersion = vd.Run();                      DrawBackground();                      if (newVersion != null && !compatEditList.Contains(newVersion)) {                          compatEditList.Add(newVersion);                          compatList.SetData(compatEditList);                      }                      return true;                  });                  compatList.AddTip("R"' "Remove"' () => compatList.Selection != null);                  compatList.AddBinding(Keys.R' (object sender) => {                      compatEditList.Remove(compatList.Selection);                      compatList.SetData(compatEditList);                      return true;                  });                } else {                    // Notify the user that the registry doesn't parse                  AddObject(new ConsoleLabel(                      1' repoFrameTop' -1'                      () => $"Failed to extract mod list sources from {KSPListScreen.InstallName(manager' ksp)}."                  ));                }
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  1' 2' -1'                  () => "Select a game instance:"              ));
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,KSPListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\KSPListScreen.cs,KSPListScreen,The following statement contains a magic number: kspList = new ConsoleListBox<KSP>(                  1' 4' -1' -2'                  manager.Instances.Values'                  new List<ConsoleListBoxColumn<KSP>>() {                      new ConsoleListBoxColumn<KSP>() {                          Header   = "Default"'                          Width    = 7'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Name"'                          Width    = 20'                          Renderer = k => InstallName(manager' k)                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Version"'                          Width    = 12'                          Renderer = k => k.Version().ToString()'                          Comparer = (a' b) => a.Version().CompareTo(b.Version())                      }' new ConsoleListBoxColumn<KSP>() {                          Header   = "Path"'                          Width    = 70'                          Renderer = k => k.GameDir()                      }                  }'                  1' 0' ListSortDirection.Descending              );
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: int midL = Console.WindowWidth / 2 - 1;
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  1' 2' -1'                  () => $"By {string.Join("' "' mod.author)}"              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleFrame(                  1' 3' midL' 7'                  () => ""'                  () => ConsoleTheme.Current.NormalFrameFg'                  false              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleFrame(                  1' 3' midL' 7'                  () => ""'                  () => ConsoleTheme.Current.NormalFrameFg'                  false              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 4' 11'                  () => "License:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 4' 11'                  () => "License:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 4' 11'                  () => "License:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 4' midL - 2'                  () => string.Join("' "' Array.ConvertAll<License' string>(                          mod.license.ToArray()' (l => l.ToString())))              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 4' midL - 2'                  () => string.Join("' "' Array.ConvertAll<License' string>(                          mod.license.ToArray()' (l => l.ToString())))              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 4' midL - 2'                  () => string.Join("' "' Array.ConvertAll<License' string>(                          mod.license.ToArray()' (l => l.ToString())))              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 5' 12'                  () => "Download:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 5' 12'                  () => "Download:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 5' 12'                  () => "Download:"'                  null'                  () => ConsoleTheme.Current.DimLabelFg              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 5' midL - 2'                  () => Formatting.FmtSize(mod.download_size)              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 5' midL - 2'                  () => Formatting.FmtSize(mod.download_size)              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  13' 5' midL - 2'                  () => Formatting.FmtSize(mod.download_size)              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 6' midL - 2'                  HostedOn              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 6' midL - 2'                  HostedOn              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  3' 6' midL - 2'                  HostedOn              ));
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  3' Math.Max(depsBot' versBot) + 2' -3' -2' false'                  TextAlign.Left'                  () => ConsoleTheme.Current.MainBg'                  () => ConsoleTheme.Current.LabelFg              );
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  3' Math.Max(depsBot' versBot) + 2' -3' -2' false'                  TextAlign.Left'                  () => ConsoleTheme.Current.MainBg'                  () => ConsoleTheme.Current.LabelFg              );
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  3' Math.Max(depsBot' versBot) + 2' -3' -2' false'                  TextAlign.Left'                  () => ConsoleTheme.Current.MainBg'                  () => ConsoleTheme.Current.LabelFg              );
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,ModInfoScreen,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  3' Math.Max(depsBot' versBot) + 2' -3' -2' false'                  TextAlign.Left'                  () => ConsoleTheme.Current.MainBg'                  () => ConsoleTheme.Current.LabelFg              );
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,LaunchURL,The following statement contains a magic number: d.Run(() => {                  Process.Start(new ProcessStartInfo() {                      UseShellExecute = true'                      FileName        = u.ToString()                  });                  System.Threading.Thread.Sleep(1500);              });
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addDependencies,The following statement contains a magic number: if (numDeps + numConfs > 0) {                  int midL = Console.WindowWidth / 2 - 1;                  int h    = Math.Min(11' numDeps + numConfs + 2);                  const int lblW = 16;                  int nameW = midL - 2 - lblW - 2;                    AddObject(new ConsoleFrame(                      1' top' midL' top + h - 1'                      () => "Dependencies"'                      () => ConsoleTheme.Current.NormalFrameFg'                      false                  ));                  if (numDeps > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1' 3 + lblW - 1'                          () => $"Required ({numDeps}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1' midL - 2' top + 1 + numDeps - 1' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      foreach (RelationshipDescriptor rd in mod.depends) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                                  + rd.name'                              nameW                          ));                      }                  }                  if (numConfs > 0) {                      AddObject(new ConsoleLabel(                          3' top + 1 + numDeps' 3 + lblW - 1'                          () => $"Conflicts ({numConfs}):"'                          null'                          () => ConsoleTheme.Current.DimLabelFg                      ));                      ConsoleTextBox tb = new ConsoleTextBox(                          3 + lblW' top + 1 + numDeps' midL - 2' top + h - 2' false'                          TextAlign.Left'                          () => ConsoleTheme.Current.MainBg'                          () => ConsoleTheme.Current.LabelFg                      );                      AddObject(tb);                      // FUTURE: Find mods that conflict with this one                      //         See GUI/MainModList.cs::ComputeConflictsFromModList                      foreach (RelationshipDescriptor rd in mod.conflicts) {                          tb.AddLine(ScreenObject.FormatExactWidth(                              // Show install status                              ModListScreen.StatusSymbol(plan.GetModStatus(manager' registry' rd.name))                              + rd.name'                              nameW                          ));                      }                  }                  return top + h - 1;              }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionDisplay,The following statement contains a magic number: int       boxLeft  = Console.WindowWidth / 2 + 1'                        boxTop   = 3;
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionDisplay,The following statement contains a magic number: int       boxLeft  = Console.WindowWidth / 2 + 1'                        boxTop   = 3;
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionDisplay,The following statement contains a magic number: const int boxRight = -1'                        boxH     = 5;
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModInfoScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModInfoScreen.cs,addVersionBox,The following statement contains a magic number: if (releases != null && releases.Count > 0) {                    Version    minMod = null' maxMod = null;                  KspVersion minKsp = null' maxKsp = null;                    foreach (CkanModule rel in releases) {                      if (minMod == null || minMod > rel.version) {                          minMod = rel.version;                      }                      if (maxMod == null || maxMod < rel.version) {                          maxMod = rel.version;                      }                      KspVersion relMin = rel.EarliestCompatibleKSP();                      KspVersion relMax = rel.LatestCompatibleKSP();                      if (minKsp == null || !minKsp.IsAny && (minKsp > relMin || relMin.IsAny)) {                          minKsp = relMin;                      }                      if (maxKsp == null || !maxKsp.IsAny && (maxKsp < relMax || relMax.IsAny)) {                          maxKsp = relMax;                      }                  }                    AddObject(new ConsoleLabel(                      l + 2' t + 1' r - 2'                      () => minMod == maxMod                          ? $"{Formatting.WithAndWithoutEpoch(minMod.ToString())}"                          : $"{Formatting.WithAndWithoutEpoch(minMod.ToString())} - {Formatting.WithAndWithoutEpoch(maxMod.ToString())}"'                      null'                      color                  ));                  AddObject(new ConsoleLabel(                      l + 2' t + 2' r - 2'                      () => "Compatible with:"'                      null'                      () => ConsoleTheme.Current.DimLabelFg                  ));                  AddObject(new ConsoleLabel(                      l + 4' t + 3' r - 2'                      () => VersionSpan(minKsp' maxKsp)'                      null'                      color                  ));                }
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: SetDimensions(9' 4' -9' -3);
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: SetDimensions(9' 4' -9' -3);
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: SetDimensions(9' 4' -9' -3);
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: SetDimensions(9' 4' -9' -3);
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: int btnW = 10;
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: int btnL = (Console.WindowWidth - btnW) / 2;
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox symbolTb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' Console.WindowWidth / 2 - 1' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox symbolTb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' Console.WindowWidth / 2 - 1' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox symbolTb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' Console.WindowWidth / 2 - 1' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox symbolTb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' Console.WindowWidth / 2 - 1' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox searchTb = new ConsoleTextBox(                  Console.WindowWidth / 2 + 1' GetTop() + 3' GetRight() - 2' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox searchTb = new ConsoleTextBox(                  Console.WindowWidth / 2 + 1' GetTop() + 3' GetRight() - 2' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox searchTb = new ConsoleTextBox(                  Console.WindowWidth / 2 + 1' GetTop() + 3' GetRight() - 2' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: ConsoleTextBox searchTb = new ConsoleTextBox(                  Console.WindowWidth / 2 + 1' GetTop() + 3' GetRight() - 2' GetBottom() - 4'                  false'                  TextAlign.Center'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI,ModListHelpDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListHelpDialog.cs,ModListHelpDialog,The following statement contains a magic number: AddObject(new ConsoleButton(                  btnL' GetBottom() - 2' btnL + btnW - 1'                  "OK"'                  Quit              ));
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: moduleList = new ConsoleListBox<CkanModule>(                  1' 4' -1' -2'                  GetAllMods()'                  new List<ConsoleListBoxColumn<CkanModule>>() {                      new ConsoleListBoxColumn<CkanModule>() {                          Header   = ""'                          Width    = 1'                          Renderer = StatusSymbol                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Name"'                          Width    = 44'                          Renderer = m => m.name ?? ""                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Version"'                          Width    = 10'                          Renderer = m => Formatting.StripEpoch(m.version?.ToString() ?? "")'                          Comparer = (a' b) => a.version.CompareTo(b.version)                      }' new ConsoleListBoxColumn<CkanModule>() {                          Header   = "Max KSP version"'                          Width    = 17'                          Renderer = m => registry.LatestCompatibleKSP(m.identifier)?.ToString() ?? ""'                          Comparer = (a' b) => registry.LatestCompatibleKSP(a.identifier).CompareTo(registry.LatestCompatibleKSP(b.identifier))                      }                  }'                  1' 0' ListSortDirection.Descending'                  (CkanModule m' string filter) => {                      if (filter.StartsWith("@")) {                          string authorFilt = filter.Substring(1);                          if (string.IsNullOrEmpty(authorFilt)) {                              return true;                          } else if (m.author != null) {                              foreach (string auth in m.author) {                                  if (auth.IndexOf(authorFilt' StringComparison.CurrentCultureIgnoreCase) == 0) {                                      return true;                                  }                              }                          }                          return false;                      } else if (filter.StartsWith("~")) {                          if (filter.Length <= 1) {                              // Don't blank the list for just "~" by itself                              return true;                          } else switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }                          return false;                      } else {                          return m.identifier.IndexOf(filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.name.IndexOf(      filter' StringComparison.CurrentCultureIgnoreCase) >= 0                              || m.@abstract.IndexOf( filter' StringComparison.CurrentCultureIgnoreCase) >= 0;                      }                  }              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: searchBox = new ConsoleField(-searchWidth' 2' -1) {                  GhostText = () => Focused() == searchBox                      ? "<Type to search>"                      : "<Ctrl+F to search>"              };
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  1' 2' -searchWidth - 2'                  () => $"{moduleList.VisibleRowCount()} mods"              ));
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  1' 2' -searchWidth - 2'                  () => $"{moduleList.VisibleRowCount()} mods"              ));
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following statement contains a magic number: AddObject(new ConsoleLabel(                  -searchWidth' -1' -2'                  () => {                      int days = daysSinceUpdated(registryFilePath());                      return days <  1 ? ""                          :  days == 1 ? $"Updated at least {days} day ago"                          :              $"Updated at least {days} days ago";                  }'                  null'                  () => {                      int daysSince = daysSinceUpdated(registryFilePath());                      if (daysSince < daysTillStale) {                          return ConsoleTheme.Current.RegistryUpToDate;                      } else if (daysSince < daystillVeryStale) {                          return ConsoleTheme.Current.RegistryStale;                      } else {                          return ConsoleTheme.Current.RegistryVeryStale;                      }                  }              ));
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,CaptureKey,The following statement contains a magic number: ConsoleMessageDialog output = new ConsoleMessageDialog(                  $"Key: {k.Key'18}\nKeyChar:           0x{(int)k.KeyChar:x2}\nModifiers: {k.Modifiers'12}"'                  new List<string> {"OK"}              );
Magic Number,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,CaptureKey,The following statement contains a magic number: ConsoleMessageDialog output = new ConsoleMessageDialog(                  $"Key: {k.Key'18}\nKeyChar:           0x{(int)k.KeyChar:x2}\nModifiers: {k.Modifiers'12}"'                  new List<string> {"OK"}              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: AddObject(new ConsoleDoubleFrame(                  1' 2' -1' -1' 8'                  () => "Progress"'                  () => "Messages"'                  () => ConsoleTheme.Current.NormalFrameFg              ));
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: AddObject(new ConsoleDoubleFrame(                  1' 2' -1' -1' 8'                  () => "Progress"'                  () => "Messages"'                  () => ConsoleTheme.Current.NormalFrameFg              ));
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: progress = new ConsoleProgressBar(                  3' 5' -3'                  () => topMessage'                  () => percent              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: progress = new ConsoleProgressBar(                  3' 5' -3'                  () => topMessage'                  () => percent              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: progress = new ConsoleProgressBar(                  3' 5' -3'                  () => topMessage'                  () => percent              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: messages = new ConsoleTextBox(                  3' 10' -3' -3              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: messages = new ConsoleTextBox(                  3' 10' -3' -3              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: messages = new ConsoleTextBox(                  3' 10' -3' -3              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,ProgressScreen,The following statement contains a magic number: messages = new ConsoleTextBox(                  3' 10' -3' -3              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,RaiseYesNoDialog,The following statement contains a magic number: ConsoleMessageDialog d = new ConsoleMessageDialog(                  // The installer's questions include embedded newlines for spacing in CmdLine                  question.Trim()'                  new List<string>() {"Yes"' "No"}'                  null'                  TextAlign.Center'                  -Console.WindowHeight / 2              );
Magic Number,CKAN.ConsoleUI,ProgressScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ProgressScreen.cs,Progress,The following statement contains a magic number: this.percent = percent / 100.0;
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(2' " #########  #### ######   ##########   ######   ####".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(3' "####   ###   #######      ###    ###    ######  ### ".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(4' "####         ######       ##########    ####### ### ".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(5' "####         ######       ##########    ### ####### ".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(6' "####   ###   #######      ###    ###    ###  ###### ".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(7' " #########  #### ######  ####    ####  ####   ######".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(8' "  ########  ####  #####  ####    ####  ####    #####".Replace("#"' block));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(10' "Comprehensive Kerbal Archive Network");
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(12' $"{Symbols.upperLeftCornerDouble}##################################################{Symbols.upperRightCornerDouble}".Replace("#"' horiz));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: for (int ln = 13; ln <= 15; ++ln) {                  drawCentered(ln' $"{Symbols.vertLineDouble}                                                  {Symbols.vertLineDouble}");              }
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: for (int ln = 13; ln <= 15; ++ln) {                  drawCentered(ln' $"{Symbols.vertLineDouble}                                                  {Symbols.vertLineDouble}");              }
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(14' $"Version {Meta.GetVersion()}");
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(16' $"{Symbols.lowerLeftCornerDouble}##################################################{Symbols.lowerRightCornerDouble}".Replace("#"' horiz));
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(18' $"(C) Copyright the CKAN Authors 2014-{DateTime.Now.Year}");
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: drawCentered(19' "https://github.com/KSP-CKAN/CKAN/graphs/contributors");
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: if (pressAny) {                  drawCentered(21' "Press any key to continue");              } else {                  drawCentered(21' "Loading...");              }
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,Draw,The following statement contains a magic number: if (pressAny) {                  drawCentered(21' "Press any key to continue");              } else {                  drawCentered(21' "Loading...");              }
Magic Number,CKAN.ConsoleUI,SplashScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\SplashScreen.cs,drawCentered,The following statement contains a magic number: int lp = (Console.WindowWidth - val.Length) / 2;
Magic Number,CKAN.ConsoleUI,ExitScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ExitScreen.cs,Run,The following statement contains a magic number: Console.SetCursorPosition(0' Console.WindowHeight - 2);
Magic Number,CKAN.ConsoleUI,ExitScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ExitScreen.cs,drawLine,The following statement contains a magic number: int boxW = Console.WindowWidth - 2 * horizMargin;
Magic Number,CKAN.ConsoleUI,ExitScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ExitScreen.cs,drawLine,The following statement contains a magic number: int leftPad = (boxW - textLen) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: List<string> msgLines = Formatting.WordWrap(m' w - 4);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: int h = 2 + msgLines.Count + 1 + 1 + c.Count + 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: int h = 2 + msgLines.Count + 1 + 1 + c.Count + 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: int t = (Console.WindowHeight - h) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  l + 2' t + 2' r - 2' t + 2 + msgLines.Count - 1'                  false'                  TextAlign.Left'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  l + 2' t + 2' r - 2' t + 2 + msgLines.Count - 1'                  false'                  TextAlign.Left'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  l + 2' t + 2' r - 2' t + 2 + msgLines.Count - 1'                  false'                  TextAlign.Left'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  l + 2' t + 2' r - 2' t + 2 + msgLines.Count - 1'                  false'                  TextAlign.Left'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: choices = new ConsoleListBox<ChoiceT>(                  l + 2' t + 2 + msgLines.Count + 1' r - 2' b - 2'                  c'                  new List<ConsoleListBoxColumn<ChoiceT>>() {                      new ConsoleListBoxColumn<ChoiceT>() {                          Header   = hdr'                          Width    = w - 6'                          Renderer = renderer'                          Comparer = comparer                      }                  }'                  0' 0' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: choices = new ConsoleListBox<ChoiceT>(                  l + 2' t + 2 + msgLines.Count + 1' r - 2' b - 2'                  c'                  new List<ConsoleListBoxColumn<ChoiceT>>() {                      new ConsoleListBoxColumn<ChoiceT>() {                          Header   = hdr'                          Width    = w - 6'                          Renderer = renderer'                          Comparer = comparer                      }                  }'                  0' 0' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: choices = new ConsoleListBox<ChoiceT>(                  l + 2' t + 2 + msgLines.Count + 1' r - 2' b - 2'                  c'                  new List<ConsoleListBoxColumn<ChoiceT>>() {                      new ConsoleListBoxColumn<ChoiceT>() {                          Header   = hdr'                          Width    = w - 6'                          Renderer = renderer'                          Comparer = comparer                      }                  }'                  0' 0' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: choices = new ConsoleListBox<ChoiceT>(                  l + 2' t + 2 + msgLines.Count + 1' r - 2' b - 2'                  c'                  new List<ConsoleListBoxColumn<ChoiceT>>() {                      new ConsoleListBoxColumn<ChoiceT>() {                          Header   = hdr'                          Width    = w - 6'                          Renderer = renderer'                          Comparer = comparer                      }                  }'                  0' 0' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleChoiceDialog<ChoiceT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleChoiceDialog.cs,ConsoleChoiceDialog,The following statement contains a magic number: choices = new ConsoleListBox<ChoiceT>(                  l + 2' t + 2 + msgLines.Count + 1' r - 2' b - 2'                  c'                  new List<ConsoleListBoxColumn<ChoiceT>>() {                      new ConsoleListBoxColumn<ChoiceT>() {                          Header   = hdr'                          Width    = w - 6'                          Renderer = renderer'                          Comparer = comparer                      }                  }'                  0' 0' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: int w = (Console.WindowWidth > idealW + 2 * hPad)                  ? idealW                  : Console.WindowWidth - 2 * hPad;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: int w = (Console.WindowWidth > idealW + 2 * hPad)                  ? idealW                  : Console.WindowWidth - 2 * hPad;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: int left  = (Console.WindowWidth - w) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddObject(new ConsoleLabel(                  left + 2' top + 2' left + 2 + labelW - 1'                  () => $"Directory:"'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              ));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddObject(new ConsoleLabel(                  left + 2' top + 2' left + 2 + labelW - 1'                  () => $"Directory:"'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              ));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddObject(new ConsoleLabel(                  left + 2' top + 2' left + 2 + labelW - 1'                  () => $"Directory:"'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              ));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: pathField = new ConsoleField(                  left + 2 + labelW' top + 2' right - 2'                  curDir.FullName              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: pathField = new ConsoleField(                  left + 2 + labelW' top + 2' right - 2'                  curDir.FullName              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: pathField = new ConsoleField(                  left + 2 + labelW' top + 2' right - 2'                  curDir.FullName              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddObject(new ConsoleLabel(                  left + 2' bottom - 1' right - 2'                  () => $"{chosenFiles.Count} selected' {Formatting.FmtSize(totalChosenSize())}"'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              ));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddObject(new ConsoleLabel(                  left + 2' bottom - 1' right - 2'                  () => $"{chosenFiles.Count} selected' {Formatting.FmtSize(totalChosenSize())}"'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              ));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: fileList = new ConsoleListBox<FileSystemInfo>(                  left + 2' top + 4' right - 2' bottom - 2'                  getFileList()'                  new List<ConsoleListBoxColumn<FileSystemInfo>>() {                      new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = toggleHeader'                          Width    = 8'                          Renderer = getRowSymbol                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Name"'                          Width    = 36'                          Renderer = getRowName'                          Comparer = compareNames                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Size"'                          // Longest: "1023.1 KB"                          Width    = 9'                          Renderer = (FileSystemInfo fi) => getLength(fi)'                          Comparer = (a' b) => {                              FileInfo fa = a as FileInfo' fb = b as FileInfo;                              return fa == null                                  ? (fb == null ? 0 : -1)                                  : (fb == null ? 1 : fa.Length.CompareTo(fb.Length));                          }                      }' new ConsoleListBoxColumn<FileSystemInfo>() {                          Header   = "Accessed"'                          Width    = 10'                          Renderer = (FileSystemInfo fi) => fi.LastWriteTime.ToString("yyyy-MM-dd")'                          Comparer = (a' b) => a.LastWriteTime.CompareTo(b.LastWriteTime)                      }                  }'                  1' 1' ListSortDirection.Ascending              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddBinding(Keys.F10' (object sender) => {                  fileList.SortMenu().Run(right - 2' top + 2);                  DrawBackground();                  return true;              });
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFileMultiSelectDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFileMultiSelectDialog.cs,ConsoleFileMultiSelectDialog,The following statement contains a magic number: AddBinding(Keys.F10' (object sender) => {                  fileList.SortMenu().Run(right - 2' top + 2);                  DrawBackground();                  return true;              });
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: left   =     Console.WindowWidth  / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: top    =     Console.WindowHeight / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: right  = 3 * Console.WindowWidth  / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: right  = 3 * Console.WindowWidth  / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: bottom = 3 * Console.WindowHeight / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,ConsoleDialog,The following statement contains a magic number: bottom = 3 * Console.WindowHeight / 4;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawShadow,The following statement contains a magic number: if (r < Console.WindowWidth - 2) {                  // Right shadow                  for (int y = t + 1; y <= b; ++y) {                      if (y >= 0 && y < Console.WindowHeight - 1) {                          Console.SetCursorPosition(r + 1' y);                          Console.Write("  ");                      }                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawShadow,The following statement contains a magic number: if (l + w + 2 > Console.WindowWidth) {                  w = Console.WindowWidth - l - 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawShadow,The following statement contains a magic number: if (l + w + 2 > Console.WindowWidth) {                  w = Console.WindowWidth - l - 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawShadow,The following statement contains a magic number: if (b < Console.WindowHeight - 1) {                  Console.SetCursorPosition(l + 2' b + 1);                  Console.Write("".PadRight(w));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,SetDimensions,The following statement contains a magic number: left   = validX(l) ? l :  2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,SetDimensions,The following statement contains a magic number: right  = validX(r) ? r : -2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawBackground,The following statement contains a magic number: string fullHorizLineDouble = new string(Symbols.horizLineDouble' w - 2);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawBackground,The following statement contains a magic number: string midSpace            = new string(' ''                     w - 2);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDialog.cs,DrawBackground,The following statement contains a magic number: for (int y = GetTop(); y <= GetBottom(); ++y) {                  if (y < 0 || y >= Console.WindowHeight) {                      continue;                  }                  Console.SetCursorPosition(GetLeft()' y);                  if (y == GetTop()) {                      // Top row                      string curTitle = CenterHeader();                      if (string.IsNullOrEmpty(curTitle)) {                          Console.Write(Symbols.upperLeftCornerDouble + fullHorizLineDouble + Symbols.upperRightCornerDouble);                      } else {                          // Title centered                          Console.Write(Symbols.upperLeftCornerDouble                              + ScreenObject.PadCenter($" {curTitle} "' w - 2' Symbols.horizLineDouble)                              + Symbols.upperRightCornerDouble);                      }                  } else if (y == GetBottom()) {                      // Bottom row                      Console.Write(Symbols.lowerLeftCornerDouble + fullHorizLineDouble + Symbols.lowerRightCornerDouble);                  } else {                      // Blank lines' mostly padding                      Console.Write(Symbols.vertLineDouble + midSpace + Symbols.vertLineDouble);                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: if (title.Length > 0) {                  int topLeftSidePad  = (w - 4 - title.Length) / 2;                  int topRightSidePad = (w - 4 - title.Length) - topLeftSidePad;                  if (topLeftSidePad < 0 || topRightSidePad < 0) {                      topLeftSidePad  = 0;                      topRightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topLeftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topRightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: if (title.Length > 0) {                  int topLeftSidePad  = (w - 4 - title.Length) / 2;                  int topRightSidePad = (w - 4 - title.Length) - topLeftSidePad;                  if (topLeftSidePad < 0 || topRightSidePad < 0) {                      topLeftSidePad  = 0;                      topRightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topLeftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topRightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: if (title.Length > 0) {                  int topLeftSidePad  = (w - 4 - title.Length) / 2;                  int topRightSidePad = (w - 4 - title.Length) - topLeftSidePad;                  if (topLeftSidePad < 0 || topRightSidePad < 0) {                      topLeftSidePad  = 0;                      topRightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topLeftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topRightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: if (title.Length > 0) {                  int topLeftSidePad  = (w - 4 - title.Length) / 2;                  int topRightSidePad = (w - 4 - title.Length) - topLeftSidePad;                  if (topLeftSidePad < 0 || topRightSidePad < 0) {                      topLeftSidePad  = 0;                      topRightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topLeftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topRightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: if (title.Length > 0) {                  int topLeftSidePad  = (w - 4 - title.Length) / 2;                  int topRightSidePad = (w - 4 - title.Length) - topLeftSidePad;                  if (topLeftSidePad < 0 || topRightSidePad < 0) {                      topLeftSidePad  = 0;                      topRightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topLeftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' topRightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleFrame.cs,Draw,The following statement contains a magic number: Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,Draw,The following statement contains a magic number: Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,writeTitleRow,The following statement contains a magic number: if (title.Length > 0) {                  int leftSidePad  = (w - 4 - title.Length) / 2;                  int rightSidePad = (w - 4 - title.Length) - leftSidePad;                  if (leftSidePad < 0 || rightSidePad < 0) {                      leftSidePad  = 0;                      rightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' leftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' rightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,writeTitleRow,The following statement contains a magic number: if (title.Length > 0) {                  int leftSidePad  = (w - 4 - title.Length) / 2;                  int rightSidePad = (w - 4 - title.Length) - leftSidePad;                  if (leftSidePad < 0 || rightSidePad < 0) {                      leftSidePad  = 0;                      rightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' leftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' rightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,writeTitleRow,The following statement contains a magic number: if (title.Length > 0) {                  int leftSidePad  = (w - 4 - title.Length) / 2;                  int rightSidePad = (w - 4 - title.Length) - leftSidePad;                  if (leftSidePad < 0 || rightSidePad < 0) {                      leftSidePad  = 0;                      rightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' leftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' rightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,writeTitleRow,The following statement contains a magic number: if (title.Length > 0) {                  int leftSidePad  = (w - 4 - title.Length) / 2;                  int rightSidePad = (w - 4 - title.Length) - leftSidePad;                  if (leftSidePad < 0 || rightSidePad < 0) {                      leftSidePad  = 0;                      rightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' leftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' rightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleDoubleFrame,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleDoubleFrame.cs,writeTitleRow,The following statement contains a magic number: if (title.Length > 0) {                  int leftSidePad  = (w - 4 - title.Length) / 2;                  int rightSidePad = (w - 4 - title.Length) - leftSidePad;                  if (leftSidePad < 0 || rightSidePad < 0) {                      leftSidePad  = 0;                      rightSidePad = 0;                      title = title.Substring(0' w - 4);                  }                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' leftSidePad));                  Console.Write($" {title} ");                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' rightSidePad));              } else {                  Console.Write(new string(doubleBorder ? Symbols.horizLineDouble : Symbols.horizLine' w - 2));              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,Draw,The following statement contains a magic number: if (topRow > selectedRow) {                  // Scroll up to reveal selected row                  topRow = selectedRow;              } else if (topRow < selectedRow - h + 2) {                  // Scroll down to reveal selected row                  topRow = selectedRow - h + 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,Draw,The following statement contains a magic number: if (topRow > selectedRow) {                  // Scroll up to reveal selected row                  topRow = selectedRow;              } else if (topRow < selectedRow - h + 2) {                  // Scroll down to reveal selected row                  topRow = selectedRow - h + 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleListBox<RowT>,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleListBox.cs,Draw,The following statement contains a magic number: if (needScrollbar) {                  DrawScrollbar(                      r' t + scrollTop' b'                      sortedFilteredData.Count > 0                          ? t + 1 + scrollTop + (h - 2 - scrollTop) * selectedRow / sortedFilteredData.Count                          : -1                  );              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int w      = Math.Max(minWidth' Math.Min(maxLen + 6' Console.WindowWidth - 4));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int w      = Math.Max(minWidth' Math.Min(maxLen + 6' Console.WindowWidth - 4));
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int l      = (Console.WindowWidth - w) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (w < btnW + 4) {                  // Widen the window to fit the buttons                  // Buttons will NOT wrap - use ConsoleChoiceDialog                  // if you have many large options.                  w = btnW + 4;                  l = (Console.WindowWidth - w) / 2;                  r = Console.WindowWidth - l;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (w < btnW + 4) {                  // Widen the window to fit the buttons                  // Buttons will NOT wrap - use ConsoleChoiceDialog                  // if you have many large options.                  w = btnW + 4;                  l = (Console.WindowWidth - w) / 2;                  r = Console.WindowWidth - l;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (w < btnW + 4) {                  // Widen the window to fit the buttons                  // Buttons will NOT wrap - use ConsoleChoiceDialog                  // if you have many large options.                  w = btnW + 4;                  l = (Console.WindowWidth - w) / 2;                  r = Console.WindowWidth - l;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: List<string> messageLines = Formatting.WordWrap(m' w - 4);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int h = 2 + messageLines.Count + (btns.Count > 0 ? 2 : 0) + 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int h = 2 + messageLines.Count + (btns.Count > 0 ? 2 : 0) + 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int h = 2 + messageLines.Count + (btns.Count > 0 ? 2 : 0) + 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (h > Console.WindowHeight - 4) {                  h = Console.WindowHeight - 4;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (h > Console.WindowHeight - 4) {                  h = Console.WindowHeight - 4;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (vertOffset <= 0) {                  t = (Console.WindowHeight - h) / 2 + vertOffset;                  if (t < 1) {                      t = 2;                  }                  b = t + h - 1;              } else {                  b = (Console.WindowHeight - h) / 2 + h - 1;                  if (b >= Console.WindowHeight - 1) {                      b = Console.WindowHeight - 1;                  }                  t = b - h + 1;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (vertOffset <= 0) {                  t = (Console.WindowHeight - h) / 2 + vertOffset;                  if (t < 1) {                      t = 2;                  }                  b = t + h - 1;              } else {                  b = (Console.WindowHeight - h) / 2 + h - 1;                  if (b >= Console.WindowHeight - 1) {                      b = Console.WindowHeight - 1;                  }                  t = b - h + 1;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: if (vertOffset <= 0) {                  t = (Console.WindowHeight - h) / 2 + vertOffset;                  if (t < 1) {                      t = 2;                  }                  b = t + h - 1;              } else {                  b = (Console.WindowHeight - h) / 2 + h - 1;                  if (b >= Console.WindowHeight - 1) {                      b = Console.WindowHeight - 1;                  }                  t = b - h + 1;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int btnRow = GetBottom() - 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' GetRight() - 2' GetBottom() - 2 - (btns.Count > 0 ? 2 : 0)'                  false'                  ta'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' GetRight() - 2' GetBottom() - 2 - (btns.Count > 0 ? 2 : 0)'                  false'                  ta'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' GetRight() - 2' GetBottom() - 2 - (btns.Count > 0 ? 2 : 0)'                  false'                  ta'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' GetRight() - 2' GetBottom() - 2 - (btns.Count > 0 ? 2 : 0)'                  false'                  ta'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: ConsoleTextBox tb = new ConsoleTextBox(                  GetLeft() + 2' GetTop() + 2' GetRight() - 2' GetBottom() - 2 - (btns.Count > 0 ? 2 : 0)'                  false'                  ta'                  () => ConsoleTheme.Current.PopupBg'                  () => ConsoleTheme.Current.PopupFg              );
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int boxH = GetBottom() - 2 - (btns.Count > 0 ? 2 : 0) - (GetTop() + 2) + 1;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int boxH = GetBottom() - 2 - (btns.Count > 0 ? 2 : 0) - (GetTop() + 2) + 1;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int boxH = GetBottom() - 2 - (btns.Count > 0 ? 2 : 0) - (GetTop() + 2) + 1;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleMessageDialog,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleMessageDialog.cs,ConsoleMessageDialog,The following statement contains a magic number: int btnLeft = (Console.WindowWidth - btnW) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,ConsolePopupMenu,The following statement contains a magic number: foreach (ConsoleMenuOption opt in options) {                  if (opt != null) {                      int len = opt.Caption.Length + (                          string.IsNullOrEmpty(opt.Key) ? 0 : 2 + opt.Key.Length                      ) + (                          opt.SubMenu     != null ? 3 :                          opt.RadioActive != null ? 4 :                          0                      );                      if (longestLength < len) {                          longestLength = len;                      }                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,ConsolePopupMenu,The following statement contains a magic number: foreach (ConsoleMenuOption opt in options) {                  if (opt != null) {                      int len = opt.Caption.Length + (                          string.IsNullOrEmpty(opt.Key) ? 0 : 2 + opt.Key.Length                      ) + (                          opt.SubMenu     != null ? 3 :                          opt.RadioActive != null ? 4 :                          0                      );                      if (longestLength < len) {                          longestLength = len;                      }                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,ConsolePopupMenu,The following statement contains a magic number: foreach (ConsoleMenuOption opt in options) {                  if (opt != null) {                      int len = opt.Caption.Length + (                          string.IsNullOrEmpty(opt.Key) ? 0 : 2 + opt.Key.Length                      ) + (                          opt.SubMenu     != null ? 3 :                          opt.RadioActive != null ? 4 :                          0                      );                      if (longestLength < len) {                          longestLength = len;                      }                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Run,The following statement contains a magic number: do {                  Draw(right' top);                  ConsoleKeyInfo k = Console.ReadKey(true);                  switch (k.Key) {                      case ConsoleKey.UpArrow:                          do {                              selectedOption = (selectedOption + options.Count - 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.DownArrow:                          do {                              selectedOption = (selectedOption + 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.Enter:                          if (options[selectedOption].CloseParent) {                              done = true;                          }                          if (options[selectedOption].OnExec != null) {                              val = options[selectedOption].OnExec();                          }                          if (options[selectedOption].SubMenu != null) {                              options[selectedOption].SubMenu.Run(                                  right - 2'                                  top + selectedOption + 2                              );                          }                          break;                      case ConsoleKey.F10:                      case ConsoleKey.Escape:                          done = true;                          break;                  }              } while (!done);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Run,The following statement contains a magic number: do {                  Draw(right' top);                  ConsoleKeyInfo k = Console.ReadKey(true);                  switch (k.Key) {                      case ConsoleKey.UpArrow:                          do {                              selectedOption = (selectedOption + options.Count - 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.DownArrow:                          do {                              selectedOption = (selectedOption + 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.Enter:                          if (options[selectedOption].CloseParent) {                              done = true;                          }                          if (options[selectedOption].OnExec != null) {                              val = options[selectedOption].OnExec();                          }                          if (options[selectedOption].SubMenu != null) {                              options[selectedOption].SubMenu.Run(                                  right - 2'                                  top + selectedOption + 2                              );                          }                          break;                      case ConsoleKey.F10:                      case ConsoleKey.Escape:                          done = true;                          break;                  }              } while (!done);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Draw,The following statement contains a magic number: if (options.Count > 0) {                  right = Formatting.ConvertCoord(right' Console.WindowWidth);                  top   = Formatting.ConvertCoord(top'   Console.WindowHeight);                  Console.CursorVisible = false;                  // Space' vertical line' space' options' space' vertical line' space                  int w = longestLength + 6;                  // Horizontal lines before and after the options                  int h = options.Count + 2;                    Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                  Console.ForegroundColor = ConsoleTheme.Current.MenuFg;                  string fullHorizLine = new string(Symbols.horizLine' longestLength + 2);                  for (int index = -1' y = top; y < top + h; ++index' ++y) {                      Console.SetCursorPosition(right - w + 1' y);                      // Left padding                      Console.Write(" ");                      if (index < 0) {                          // Draw top line                          Console.Write(Symbols.upperLeftCorner + fullHorizLine + Symbols.upperRightCorner);                      } else if (index >= options.Count) {                          // Draw bottom line                          Console.Write(Symbols.lowerLeftCorner + fullHorizLine + Symbols.lowerRightCorner);                      } else {                          ConsoleMenuOption opt = options[index];                          if (opt == null) {                              // Draw separator                              Console.Write(Symbols.leftTee + fullHorizLine + Symbols.rightTee);                          } else {                              // Draw menu option                              Console.Write(Symbols.vertLine);                              if (index == selectedOption) {                                  // Draw highlighted menu option                                  Console.BackgroundColor = ConsoleTheme.Current.MenuSelectedBg;                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                                  Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                              } else {                                  // Draw normal menu option                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                              }                              Console.Write(Symbols.vertLine);                          }                      }                      // Right padding                      Console.Write(" ");                  }                  ConsoleDialog.DrawShadow(right - w + 1' top' right' top + h - 1);                  DrawFooter();                  Console.SetCursorPosition(right - longestLength - 3' top + selectedOption + 1);                  Console.CursorVisible = true;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Draw,The following statement contains a magic number: if (options.Count > 0) {                  right = Formatting.ConvertCoord(right' Console.WindowWidth);                  top   = Formatting.ConvertCoord(top'   Console.WindowHeight);                  Console.CursorVisible = false;                  // Space' vertical line' space' options' space' vertical line' space                  int w = longestLength + 6;                  // Horizontal lines before and after the options                  int h = options.Count + 2;                    Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                  Console.ForegroundColor = ConsoleTheme.Current.MenuFg;                  string fullHorizLine = new string(Symbols.horizLine' longestLength + 2);                  for (int index = -1' y = top; y < top + h; ++index' ++y) {                      Console.SetCursorPosition(right - w + 1' y);                      // Left padding                      Console.Write(" ");                      if (index < 0) {                          // Draw top line                          Console.Write(Symbols.upperLeftCorner + fullHorizLine + Symbols.upperRightCorner);                      } else if (index >= options.Count) {                          // Draw bottom line                          Console.Write(Symbols.lowerLeftCorner + fullHorizLine + Symbols.lowerRightCorner);                      } else {                          ConsoleMenuOption opt = options[index];                          if (opt == null) {                              // Draw separator                              Console.Write(Symbols.leftTee + fullHorizLine + Symbols.rightTee);                          } else {                              // Draw menu option                              Console.Write(Symbols.vertLine);                              if (index == selectedOption) {                                  // Draw highlighted menu option                                  Console.BackgroundColor = ConsoleTheme.Current.MenuSelectedBg;                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                                  Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                              } else {                                  // Draw normal menu option                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                              }                              Console.Write(Symbols.vertLine);                          }                      }                      // Right padding                      Console.Write(" ");                  }                  ConsoleDialog.DrawShadow(right - w + 1' top' right' top + h - 1);                  DrawFooter();                  Console.SetCursorPosition(right - longestLength - 3' top + selectedOption + 1);                  Console.CursorVisible = true;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Draw,The following statement contains a magic number: if (options.Count > 0) {                  right = Formatting.ConvertCoord(right' Console.WindowWidth);                  top   = Formatting.ConvertCoord(top'   Console.WindowHeight);                  Console.CursorVisible = false;                  // Space' vertical line' space' options' space' vertical line' space                  int w = longestLength + 6;                  // Horizontal lines before and after the options                  int h = options.Count + 2;                    Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                  Console.ForegroundColor = ConsoleTheme.Current.MenuFg;                  string fullHorizLine = new string(Symbols.horizLine' longestLength + 2);                  for (int index = -1' y = top; y < top + h; ++index' ++y) {                      Console.SetCursorPosition(right - w + 1' y);                      // Left padding                      Console.Write(" ");                      if (index < 0) {                          // Draw top line                          Console.Write(Symbols.upperLeftCorner + fullHorizLine + Symbols.upperRightCorner);                      } else if (index >= options.Count) {                          // Draw bottom line                          Console.Write(Symbols.lowerLeftCorner + fullHorizLine + Symbols.lowerRightCorner);                      } else {                          ConsoleMenuOption opt = options[index];                          if (opt == null) {                              // Draw separator                              Console.Write(Symbols.leftTee + fullHorizLine + Symbols.rightTee);                          } else {                              // Draw menu option                              Console.Write(Symbols.vertLine);                              if (index == selectedOption) {                                  // Draw highlighted menu option                                  Console.BackgroundColor = ConsoleTheme.Current.MenuSelectedBg;                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                                  Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                              } else {                                  // Draw normal menu option                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                              }                              Console.Write(Symbols.vertLine);                          }                      }                      // Right padding                      Console.Write(" ");                  }                  ConsoleDialog.DrawShadow(right - w + 1' top' right' top + h - 1);                  DrawFooter();                  Console.SetCursorPosition(right - longestLength - 3' top + selectedOption + 1);                  Console.CursorVisible = true;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Draw,The following statement contains a magic number: if (options.Count > 0) {                  right = Formatting.ConvertCoord(right' Console.WindowWidth);                  top   = Formatting.ConvertCoord(top'   Console.WindowHeight);                  Console.CursorVisible = false;                  // Space' vertical line' space' options' space' vertical line' space                  int w = longestLength + 6;                  // Horizontal lines before and after the options                  int h = options.Count + 2;                    Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                  Console.ForegroundColor = ConsoleTheme.Current.MenuFg;                  string fullHorizLine = new string(Symbols.horizLine' longestLength + 2);                  for (int index = -1' y = top; y < top + h; ++index' ++y) {                      Console.SetCursorPosition(right - w + 1' y);                      // Left padding                      Console.Write(" ");                      if (index < 0) {                          // Draw top line                          Console.Write(Symbols.upperLeftCorner + fullHorizLine + Symbols.upperRightCorner);                      } else if (index >= options.Count) {                          // Draw bottom line                          Console.Write(Symbols.lowerLeftCorner + fullHorizLine + Symbols.lowerRightCorner);                      } else {                          ConsoleMenuOption opt = options[index];                          if (opt == null) {                              // Draw separator                              Console.Write(Symbols.leftTee + fullHorizLine + Symbols.rightTee);                          } else {                              // Draw menu option                              Console.Write(Symbols.vertLine);                              if (index == selectedOption) {                                  // Draw highlighted menu option                                  Console.BackgroundColor = ConsoleTheme.Current.MenuSelectedBg;                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                                  Console.BackgroundColor = ConsoleTheme.Current.MenuBg;                              } else {                                  // Draw normal menu option                                  Console.Write(" " + AnnotatedCaption(opt) + " ");                              }                              Console.Write(Symbols.vertLine);                          }                      }                      // Right padding                      Console.Write(" ");                  }                  ConsoleDialog.DrawShadow(right - w + 1' top' right' top + h - 1);                  DrawFooter();                  Console.SetCursorPosition(right - longestLength - 3' top + selectedOption + 1);                  Console.CursorVisible = true;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,DrawSelectedHamburger,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth - 3' 0);
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,LeftCenterRight,The following statement contains a magic number: if (center.Length > width - left.Length - right.Length - 4) {                  center = center.Substring(0' width - left.Length - right.Length - 4);              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,LeftCenterRight,The following statement contains a magic number: if (center.Length > width - left.Length - right.Length - 4) {                  center = center.Substring(0' width - left.Length - right.Length - 4);              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,LeftCenterRight,The following statement contains a magic number: int leftSideWidth = (width - center.Length) / 2;
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,LeftCenterRight,The following statement contains a magic number: if (leftSideWidth < left.Length + 2) {                  leftSideWidth = left.Length + 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleScreen.cs,LeftCenterRight,The following statement contains a magic number: if (leftSideWidth < left.Length + 2) {                  leftSideWidth = left.Length + 2;              }
Magic Number,CKAN.ConsoleUI.Toolkit,ConsoleTextBox,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleTextBox.cs,Draw,The following statement contains a magic number: if (lines.Count > h) {                  DrawScrollbar(                      GetRight()' GetTop()' GetBottom()'                      GetTop() + 1 + (h - 3) * topLine / (lines.Count - h)                  );              }
Magic Number,CKAN.ConsoleUI.Toolkit,Formatting,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\Formatting.cs,FmtSize,The following statement contains a magic number: const double K = 1024;
Magic Number,CKAN.ConsoleUI.Toolkit,ScreenContainer,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ScreenContainer.cs,DrawFooter,The following statement contains a magic number: foreach (var tipList in tipLists) {                  for (int i = 0; i < tipList.Count; ++i) {                      if (tipList[i].DisplayIf()) {                          if (Console.CursorLeft + tipSeparator.Length + tipList[i].Key.Length + 5 > Console.WindowWidth) {                              // Stop drawing if not even enough room for the key                              break;                          }                          if (first) {                              first = false;                          } else {                              Console.ForegroundColor = ConsoleTheme.Current.FooterSeparatorFg;                              Console.Write(tipSeparator);                          }                          Console.ForegroundColor = ConsoleTheme.Current.FooterKeyFg;                          Console.Write(tipList[i].Key);                          Console.ForegroundColor = ConsoleTheme.Current.FooterDescriptionFg;                          string remainder;                          if (tipList[i].Key == tipList[i].Description.Substring(0' 1)) {                              remainder = tipList[i].Description.Substring(1);                          } else {                              remainder = $" - {tipList[i].Description}";                          }                          int maxW = Console.WindowWidth - Console.CursorLeft - 1;                          if (remainder.Length > maxW && maxW > 0) {                              Console.Write(remainder.Substring(0' maxW));                          } else {                              Console.Write(remainder);                          }                      }                  }              }
Magic Number,CKAN.ConsoleUI.Toolkit,ScreenObject,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ScreenObject.cs,PadCenter,The following statement contains a magic number: if (s.Length > w) {                  return s.Substring(0' w);              } else {                  int lp = (w - s.Length) / 2;                  return FormatExactWidth(s' w - lp' pad).PadLeft(w' pad);              }
Missing Default,CKAN.ConsoleUI,ModListScreen,C:\repos\KSP-CKAN_CKAN\ConsoleUI\ModListScreen.cs,ModListScreen,The following switch statement is missing a default case: switch (filter.Substring(1' 1)) {                              case "i":                                  return registry.IsInstalled(m.identifier' false);                              case "u":                                  return registry.HasUpdate(m.identifier' manager.CurrentInstance.VersionCriteria());                              case "n":                                  // Filter new                                  return recent.Contains(m.identifier);                              case "c":                                  if (m.conflicts != null) {                                      string conflictsWith = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.conflicts) {                                          if (rel.name.IndexOf(conflictsWith' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                              case "d":                                  if (m.depends != null) {                                      string dependsOn = filter.Substring(2);                                      // Search for mods depending on a given mod                                      foreach (var rel in m.depends) {                                          if (rel.name.IndexOf(dependsOn' StringComparison.CurrentCultureIgnoreCase) == 0) {                                              return true;                                          }                                      }                                  }                                  return false;                          }
Missing Default,CKAN.ConsoleUI.Toolkit,ConsoleButton,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleButton.cs,OnKeyPress,The following switch statement is missing a default case: switch (k.Key) {                  case ConsoleKey.Tab:                      Blur((k.Modifiers & ConsoleModifiers.Shift) == 0);                      break;                  case ConsoleKey.Spacebar:                  case ConsoleKey.Enter:                      choiceEvent();                      break;                  case ConsoleKey.UpArrow:                  case ConsoleKey.LeftArrow:                      Blur(false);                      break;                  case ConsoleKey.DownArrow:                  case ConsoleKey.RightArrow:                      Blur(true);                      break;              }
Missing Default,CKAN.ConsoleUI.Toolkit,ConsolePopupMenu,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsolePopupMenu.cs,Run,The following switch statement is missing a default case: switch (k.Key) {                      case ConsoleKey.UpArrow:                          do {                              selectedOption = (selectedOption + options.Count - 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.DownArrow:                          do {                              selectedOption = (selectedOption + 1) % options.Count;                          } while (options[selectedOption] == null);                          break;                      case ConsoleKey.Enter:                          if (options[selectedOption].CloseParent) {                              done = true;                          }                          if (options[selectedOption].OnExec != null) {                              val = options[selectedOption].OnExec();                          }                          if (options[selectedOption].SubMenu != null) {                              options[selectedOption].SubMenu.Run(                                  right - 2'                                  top + selectedOption + 2                              );                          }                          break;                      case ConsoleKey.F10:                      case ConsoleKey.Escape:                          done = true;                          break;                  }
Missing Default,CKAN.ConsoleUI.Toolkit,ConsoleTextBox,C:\repos\KSP-CKAN_CKAN\ConsoleUI\Toolkit\ConsoleTextBox.cs,Draw,The following switch statement is missing a default case: switch (align) {                          case TextAlign.Left:                              Console.Write(lines[index].PadRight(w));                              break;                          case TextAlign.Center:                              Console.Write(ScreenObject.PadCenter(lines[index]' w));                              break;                          case TextAlign.Right:                              Console.Write(lines[index].PadLeft(w));                              break;                      }
