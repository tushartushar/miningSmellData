Implementation smell,Namespace,Class,File,Method,Description
Long Method,CKAN,ConsoleUser,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\ConsoleUser.cs,RaiseSelectionDialog,The method has 123 lines of code.
Long Method,CKAN.NetKAN.Transformers,CurseTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,TransformOne,The method has 164 lines of code.
Complex Method,CKAN,ConsoleUser,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\ConsoleUser.cs,RaiseSelectionDialog,Cyclomatic complexity of the method is 19
Complex Method,CKAN.NetKAN.Model,Metadata,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Model\Metadata.cs,Metadata,Cyclomatic complexity of the method is 14
Complex Method,CKAN.NetKAN.Services,CachingHttpService,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Services\CachingHttpService.cs,DownloadPackage,Cyclomatic complexity of the method is 9
Complex Method,CKAN.NetKAN.Services,ModuleService,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Services\ModuleService.cs,GetInternalAvc,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Sources.Avc,JsonAvcToKspVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,Cyclomatic complexity of the method is 9
Complex Method,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Sources.Github,GithubApi,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Github\GithubApi.cs,GetAllReleases,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Transformers,AvcTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,ApplyVersions,Cyclomatic complexity of the method is 13
Complex Method,CKAN.NetKAN.Transformers,CurseTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,TransformOne,Cyclomatic complexity of the method is 34
Complex Method,CKAN.NetKAN.Transformers,GithubTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,TransformOne,Cyclomatic complexity of the method is 11
Complex Method,CKAN.NetKAN.Transformers,SpacedockTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\SpacedockTransformer.cs,TransformOne,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Transformers,StripNetkanMetadataTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\StripNetkanMetadataTransformer.cs,Strip,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Transformers,VersionEditTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\VersionEditTransformer.cs,GetVersionEditInfo,Cyclomatic complexity of the method is 12
Complex Method,CKAN.NetKAN.Transformers,VersionedOverrideTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\VersionedOverrideTransformer.cs,ProcessOverrideStanza,Cyclomatic complexity of the method is 14
Complex Method,CKAN.NetKAN.Validators,InstallValidator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Validators\InstallValidator.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,CKAN.NetKAN.Validators,LicensesValidator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Validators\LicensesValidator.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,CKAN.NetKAN.Validators,RelationshipsValidator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Validators\RelationshipsValidator.cs,Validate,Cyclomatic complexity of the method is 9
Long Parameter List,CKAN.NetKAN.Processors,QueueHandler,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Processors\QueueHandler.cs,QueueHandler,The method has 6 parameters. Parameters: inputQueueName' outputQueueName' cacheDir' overwriteCache' githubToken' prerelease
Long Parameter List,CKAN.NetKAN.Processors,QueueHandler,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Processors\QueueHandler.cs,inflationMessage,The method has 5 parameters. Parameters: ckan' netkan' opts' success' err
Long Parameter List,CKAN.NetKAN.Transformers,GithubTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,TransformOne,The method has 5 parameters. Parameters: metadata' json' ghRef' ghRepo' ghRelease
Long Parameter List,CKAN.NetKAN.Transformers,NetkanTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\NetkanTransformer.cs,NetkanTransformer,The method has 5 parameters. Parameters: http' fileService' moduleService' githubToken' prerelease
Long Identifier,CKAN.NetKAN.Transformers,CurseTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,TransformOne,The length of the parameter useDownloadNameVersionMetadata is 30.
Long Statement,CKAN.NetKAN.Sources.Curse,CurseMod,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Curse\CurseMod.cs,GetPageUrl,The length of the statement  "                _pageUrl = new Uri(Regex.Replace(CurseApi.ResolveRedirect(new Uri(GetProjectUrl())).ToString()' "\\?.*$"' "")).ToString(); " is 122.
Long Statement,CKAN.NetKAN.Transformers,GithubTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,TransformOne,The length of the statement  "                        if (char.IsLower(repoName[i - 1]) && char.IsUpper(repoName[i]) || repoName[i - 1] != ' ' && char.IsUpper(repoName[i]) && char.IsLower(repoName[i + 1])) " is 151.
Long Statement,CKAN.NetKAN.Validators,AlphaNumericIdentifierValidator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Validators\AlphaNumericIdentifierValidator.cs,Validate,The length of the statement  "                throw new Kraken("CKAN identifiers must consist only of letters' numbers' and dashes' and must start with a letter or number."); " is 128.
Long Statement,CKAN.NetKAN.Validators,MatchesKnownGameVersionsValidator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Validators\MatchesKnownGameVersionsValidator.cs,Validate,The length of the statement  "                throw new Kraken($"{metadata.Identifier} doesn't match any valid game version: {KspVersionRange.VersionSpan(minKsp' maxKsp)}"); " is 127.
Complex Conditional,CKAN.NetKAN.Transformers,GithubTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,TransformOne,The conditional expression  "char.IsLower(repoName[i - 1]) && char.IsUpper(repoName[i]) || repoName[i - 1] != ' ' && char.IsUpper(repoName[i]) && char.IsLower(repoName[i + 1])"  is complex.
Empty Catch Block,CKAN.NetKAN.Processors,Inflator,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Processors\Inflator.cs,FindCache,The method has an empty catch block.
Magic Number,CKAN.NetKAN,Program,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Program.cs,Main,The following statement contains a magic number: var queues = Options.Queues.Split(new char[] { ''' }' 2);
Magic Number,CKAN.NetKAN,Program,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Program.cs,WriteCkan,The following statement contains a magic number: writer.Indentation = 4;
Magic Number,CKAN.NetKAN.Processors,QueueHandler,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Processors\QueueHandler.cs,Process,The following statement contains a magic number: handleMessages(inputQueueURL' 10' 30);
Magic Number,CKAN.NetKAN.Processors,QueueHandler,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Processors\QueueHandler.cs,Process,The following statement contains a magic number: handleMessages(inputQueueURL' 10' 30);
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToKspVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                      break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToKspVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                      break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Curse,CurseApi,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Sources\Curse\CurseApi.cs,ResolveRedirect,The following statement contains a magic number: redirects > 6
Missing Default,CKAN.NetKAN.Transformers,StripNetkanMetadataTransformer,D:\research\architectureSmells\repos\KSP-CKAN_CKAN\Netkan\Transformers\StripNetkanMetadataTransformer.cs,Strip,The following switch statement is missing a default case: switch (property.Value.Type)                  {                      case JTokenType.Object:                          Strip((JObject)property.Value);                          break;                      case JTokenType.Array:                          foreach (var element in ((JArray)property.Value).Where(i => i.Type == JTokenType.Object))                          {                              Strip((JObject)element);                          }                          break;                  }
