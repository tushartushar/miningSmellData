Implementation smell,Namespace,Class,File,Method,Description
Long Method,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,Transform,The method has 113 lines of code.
Long Method,CKAN.NetKAN.Transformers,CurseTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,Transform,The method has 163 lines of code.
Complex Method,CKAN.NetKAN.Model,Metadata,C:\repos\KSP-CKAN_CKAN\Netkan\Model\Metadata.cs,Metadata,Cyclomatic complexity of the method is 10
Complex Method,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,Transform,Cyclomatic complexity of the method is 15
Complex Method,CKAN.NetKAN.Transformers,CurseTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,Transform,Cyclomatic complexity of the method is 12
Complex Method,CKAN.NetKAN.Transformers,GithubTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,Transform,Cyclomatic complexity of the method is 9
Complex Method,CKAN.NetKAN.Transformers,VersionedOverrideTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\VersionedOverrideTransformer.cs,ProcessOverrideStanza,Cyclomatic complexity of the method is 13
Long Parameter List,CKAN.NetKAN.Transformers,NetkanTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\NetkanTransformer.cs,NetkanTransformer,The method has 5 parameters. Parameters: http' fileService' moduleService' githubToken' prerelease
Long Identifier,CKAN.NetKAN.Transformers,CurseTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\CurseTransformer.cs,Transform,The length of the parameter useDownloadNameVersionMetadata is 30.
Long Identifier,CKAN.NetKAN.Transformers,JenkinsTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\JenkinsTransformer.cs,Transform,The length of the parameter jenkinsUseFilenameVersionMetadata is 33.
Long Statement,CKAN.NetKAN.Sources.Curse,CurseMod,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Curse\CurseMod.cs,GetPageUrl,The length of the statement  "                _pageUrl = new Uri(Regex.Replace(CurseApi.ResolveRedirect(new Uri(GetProjectUrl())).ToString()' "\\?.*$"' "")).ToString(); " is 122.
Long Statement,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,GetRemoteAvcUri,The length of the statement  "            // https://github.com/CYBUTEK/KSPAddonVersionChecker/blob/ff94000144a666c8ff637c71b802e1baee9c15cd/KSP-AVC/AddonInfo.cs#L199 " is 124.
Long Statement,CKAN.NetKAN.Transformers,GithubTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,Transform,The length of the statement  "                            if (char.IsLower(repoName[i - 1]) && char.IsUpper(repoName[i]) || repoName[i - 1] != ' ' && char.IsUpper(repoName[i]) && char.IsLower(repoName[i + 1])) " is 151.
Complex Conditional,CKAN.NetKAN.Transformers,GithubTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\GithubTransformer.cs,Transform,The conditional expression  "char.IsLower(repoName[i - 1]) && char.IsUpper(repoName[i]) || repoName[i - 1] != ' ' && char.IsUpper(repoName[i]) && char.IsLower(repoName[i + 1])"  is complex.
Empty Catch Block,CKAN.NetKAN,Program,C:\repos\KSP-CKAN_CKAN\Netkan\Program.cs,FindCache,The method has an empty catch block.
Magic Number,CKAN.NetKAN,Program,C:\repos\KSP-CKAN_CKAN\Netkan\Program.cs,WriteCkan,The following statement contains a magic number: using (var writer = new JsonTextWriter(sw))              {                  writer.Formatting = Formatting.Indented;                  writer.Indentation = 4;                  writer.IndentChar = ' ';                    var serializer = new JsonSerializer();                  serializer.Serialize(writer' metadata.Json());              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToKspVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                      break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToKspVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                      break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Avc,JsonAvcToVersion,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Avc\JsonAvcToKspVersion.cs,ReadJson,The following statement contains a magic number: switch (token.Type)              {                  case JTokenType.String:                      var tokenArray = token.ToString().Split('.');                        if (tokenArray.Length > 0)                      {                          major = tokenArray[0];                      }                        if (tokenArray.Length > 1)                      {                          minor = tokenArray[1];                      }                        if (tokenArray.Length > 2)                      {                          patch = tokenArray[2];                      }                        if (tokenArray.Length > 3)                      {                          build = tokenArray[3];                      }                        break;                  case JTokenType.Object:                      major = (string) token["MAJOR"];                      minor = (string) token["MINOR"];                      patch = (string) token["PATCH"];                      build = (string) token["BUILD"];                      break;                  default:                      throw new InvalidCastException("Trying to convert non-JSON object to Version object");              }
Magic Number,CKAN.NetKAN.Sources.Curse,CurseApi,C:\repos\KSP-CKAN_CKAN\Netkan\Sources\Curse\CurseApi.cs,ResolveRedirect,The following statement contains a magic number: while (response.Headers["Location"] != null)              {                  redirects++;                  if (redirects > 6)                      throw new Kraken("More than 6 redirects when resolving the following url: " + url);                  redirUrl = new Uri(redirUrl' response.Headers["Location"]);                  request = (HttpWebRequest) WebRequest.Create(redirUrl);                  request.AllowAutoRedirect = false;                  request.UserAgent = Net.UserAgentString;                  response = (HttpWebResponse) request.GetResponse();                  response.Close();              }
Magic Number,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,GetRemoteAvcUri,The following statement contains a magic number: if (string.Compare(remoteUri.Host' "github.com"' StringComparison.OrdinalIgnoreCase) == 0)              {                  // We expect a non-raw URI to be in one of two forms:                  //  1. https://github.com/<USER>/<PROJECT>/blob/<BRANCH>/<PATH>                  //  2. https://github.com/<USER>/<PROJECT>/tree/<BRANCH>/<PATH>                  //                  // Therefore' we expect at least six segments in the path:                  //  1. "/"                  //  2. "<USER>/"                  //  3. "<PROJECT>/"                  //  4. "blob/" or "tree/"                  //  5. "<BRANCH>/"                  //  6+. "<PATH>"                  //                  // And that the forth segment (index 3) is either "blob/" or "tree/"                    var remoteUriBuilder = new UriBuilder(remoteUri)                  {                      // Replace host with raw host                      Host = "raw.githubusercontent.com"                  };                    // Check that the path is what we expect                  var segments = remoteUri.Segments.ToList();                    if (segments.Count < 6 ||                      string.Compare(segments[3]' "blob/"' StringComparison.OrdinalIgnoreCase) != 0 &&                      string.Compare(segments[3]' "tree/"' StringComparison.OrdinalIgnoreCase) != 0)                  {                      Log.WarnFormat("Remote non-raw GitHub URL is in an unknown format' using as is.");                      return remoteUri;                  }                    // Remove "blob/" or "tree/" segment from raw URI                  segments.RemoveAt(3);                  remoteUriBuilder.Path = string.Join(""' segments);                    Log.InfoFormat("Canonicalized non-raw GitHub URL to: {0}"' remoteUriBuilder.Uri);                    return remoteUriBuilder.Uri;              }
Magic Number,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,GetRemoteAvcUri,The following statement contains a magic number: if (string.Compare(remoteUri.Host' "github.com"' StringComparison.OrdinalIgnoreCase) == 0)              {                  // We expect a non-raw URI to be in one of two forms:                  //  1. https://github.com/<USER>/<PROJECT>/blob/<BRANCH>/<PATH>                  //  2. https://github.com/<USER>/<PROJECT>/tree/<BRANCH>/<PATH>                  //                  // Therefore' we expect at least six segments in the path:                  //  1. "/"                  //  2. "<USER>/"                  //  3. "<PROJECT>/"                  //  4. "blob/" or "tree/"                  //  5. "<BRANCH>/"                  //  6+. "<PATH>"                  //                  // And that the forth segment (index 3) is either "blob/" or "tree/"                    var remoteUriBuilder = new UriBuilder(remoteUri)                  {                      // Replace host with raw host                      Host = "raw.githubusercontent.com"                  };                    // Check that the path is what we expect                  var segments = remoteUri.Segments.ToList();                    if (segments.Count < 6 ||                      string.Compare(segments[3]' "blob/"' StringComparison.OrdinalIgnoreCase) != 0 &&                      string.Compare(segments[3]' "tree/"' StringComparison.OrdinalIgnoreCase) != 0)                  {                      Log.WarnFormat("Remote non-raw GitHub URL is in an unknown format' using as is.");                      return remoteUri;                  }                    // Remove "blob/" or "tree/" segment from raw URI                  segments.RemoveAt(3);                  remoteUriBuilder.Path = string.Join(""' segments);                    Log.InfoFormat("Canonicalized non-raw GitHub URL to: {0}"' remoteUriBuilder.Uri);                    return remoteUriBuilder.Uri;              }
Magic Number,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,GetRemoteAvcUri,The following statement contains a magic number: if (string.Compare(remoteUri.Host' "github.com"' StringComparison.OrdinalIgnoreCase) == 0)              {                  // We expect a non-raw URI to be in one of two forms:                  //  1. https://github.com/<USER>/<PROJECT>/blob/<BRANCH>/<PATH>                  //  2. https://github.com/<USER>/<PROJECT>/tree/<BRANCH>/<PATH>                  //                  // Therefore' we expect at least six segments in the path:                  //  1. "/"                  //  2. "<USER>/"                  //  3. "<PROJECT>/"                  //  4. "blob/" or "tree/"                  //  5. "<BRANCH>/"                  //  6+. "<PATH>"                  //                  // And that the forth segment (index 3) is either "blob/" or "tree/"                    var remoteUriBuilder = new UriBuilder(remoteUri)                  {                      // Replace host with raw host                      Host = "raw.githubusercontent.com"                  };                    // Check that the path is what we expect                  var segments = remoteUri.Segments.ToList();                    if (segments.Count < 6 ||                      string.Compare(segments[3]' "blob/"' StringComparison.OrdinalIgnoreCase) != 0 &&                      string.Compare(segments[3]' "tree/"' StringComparison.OrdinalIgnoreCase) != 0)                  {                      Log.WarnFormat("Remote non-raw GitHub URL is in an unknown format' using as is.");                      return remoteUri;                  }                    // Remove "blob/" or "tree/" segment from raw URI                  segments.RemoveAt(3);                  remoteUriBuilder.Path = string.Join(""' segments);                    Log.InfoFormat("Canonicalized non-raw GitHub URL to: {0}"' remoteUriBuilder.Uri);                    return remoteUriBuilder.Uri;              }
Magic Number,CKAN.NetKAN.Transformers,AvcTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\AvcTransformer.cs,GetRemoteAvcUri,The following statement contains a magic number: if (string.Compare(remoteUri.Host' "github.com"' StringComparison.OrdinalIgnoreCase) == 0)              {                  // We expect a non-raw URI to be in one of two forms:                  //  1. https://github.com/<USER>/<PROJECT>/blob/<BRANCH>/<PATH>                  //  2. https://github.com/<USER>/<PROJECT>/tree/<BRANCH>/<PATH>                  //                  // Therefore' we expect at least six segments in the path:                  //  1. "/"                  //  2. "<USER>/"                  //  3. "<PROJECT>/"                  //  4. "blob/" or "tree/"                  //  5. "<BRANCH>/"                  //  6+. "<PATH>"                  //                  // And that the forth segment (index 3) is either "blob/" or "tree/"                    var remoteUriBuilder = new UriBuilder(remoteUri)                  {                      // Replace host with raw host                      Host = "raw.githubusercontent.com"                  };                    // Check that the path is what we expect                  var segments = remoteUri.Segments.ToList();                    if (segments.Count < 6 ||                      string.Compare(segments[3]' "blob/"' StringComparison.OrdinalIgnoreCase) != 0 &&                      string.Compare(segments[3]' "tree/"' StringComparison.OrdinalIgnoreCase) != 0)                  {                      Log.WarnFormat("Remote non-raw GitHub URL is in an unknown format' using as is.");                      return remoteUri;                  }                    // Remove "blob/" or "tree/" segment from raw URI                  segments.RemoveAt(3);                  remoteUriBuilder.Path = string.Join(""' segments);                    Log.InfoFormat("Canonicalized non-raw GitHub URL to: {0}"' remoteUriBuilder.Uri);                    return remoteUriBuilder.Uri;              }
Missing Default,CKAN.NetKAN.Transformers,StripNetkanMetadataTransformer,C:\repos\KSP-CKAN_CKAN\Netkan\Transformers\StripNetkanMetadataTransformer.cs,Strip,The following switch statement is missing a default case: switch (property.Value.Type)                  {                      case JTokenType.Object:                          Strip((JObject)property.Value);                          break;                      case JTokenType.Array:                          foreach (var element in ((JArray)property.Value).Where(i => i.Type == JTokenType.Object))                          {                              Strip((JObject)element);                          }                          break;                  }
