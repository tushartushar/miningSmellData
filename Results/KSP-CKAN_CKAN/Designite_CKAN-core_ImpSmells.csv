Implementation smell,Namespace,Class,File,Method,Description
Long Method,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,FindInstallableFiles,The method has 104 lines of code.
Long Method,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,UpdateRegistry,The method has 167 lines of code.
Long Method,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,The method has 118 lines of code.
Complex Method,CKAN,KSPPathUtils,C:\repos\KSP-CKAN_CKAN\Core\KSPPathUtils.cs,KSPSteamPath,Cyclomatic complexity of the method is 8
Complex Method,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,UpdateRegistry,Cyclomatic complexity of the method is 17
Complex Method,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,RelationshipsAreEquivalent,Cyclomatic complexity of the method is 12
Complex Method,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,DeSerialisationFixes,Cyclomatic complexity of the method is 10
Complex Method,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,Cyclomatic complexity of the method is 16
Complex Method,CKAN,SanityChecker,C:\repos\KSP-CKAN_CKAN\Core\Relationships\SanityChecker.cs,ConsistencyErrors,Cyclomatic complexity of the method is 10
Complex Method,CKAN,ModuleInstallDescriptor,C:\repos\KSP-CKAN_CKAN\Core\Types\ModuleInstallDescriptor.cs,IsWanted,Cyclomatic complexity of the method is 9
Complex Method,CKAN,Version,C:\repos\KSP-CKAN_CKAN\Core\Types\Version.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,CKAN.Versioning,KspVersion,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersion.cs,TryParse,Cyclomatic complexity of the method is 12
Long Parameter List,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,CachedOrDownload,The method has 5 parameters. Parameters: identifier' version' url' cache' filename
Long Parameter List,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,Update,The method has 5 parameters. Parameters: registry_manager' ksp' user' clear' repo
Long Parameter List,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,UpdateRegistry,The method has 5 parameters. Parameters: repo' registry' ksp' user' clear
Long Parameter List,CKAN,Repo,C:\repos\KSP-CKAN_CKAN\Core\Net\Repo.cs,Update,The method has 5 parameters. Parameters: registry_manager' ksp' user' clear' repo
Long Parameter List,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,Registry,The method has 5 parameters. Parameters: installed_modules' installed_dlls' available_modules' installed_files' repositories
Long Parameter List,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,The method has 5 parameters. Parameters: stanza' reason' options' soft_resolve' old_stanza
Long Identifier,CKAN,RelationshipResolverOptions,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,,The length of the parameter without_toomanyprovides_kraken is 30.
Long Statement,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckZip,The length of the statement  "            if (buffer.SequenceEqual(zip_identifier) || buffer.SequenceEqual(zip_identifier_empty) || buffer.SequenceEqual(zip_identifier_spanned)) " is 135.
Long Statement,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,IdentifyFile,The length of the statement  "                using (ICSharpCode.SharpZipLib.GZip.GZipInputStream gz_stream = new ICSharpCode.SharpZipLib.GZip.GZipInputStream (stream)) " is 122.
Long Statement,CKAN,KSPManager,C:\repos\KSP-CKAN_CKAN\Core\KSPManager.cs,_GetPreferredInstance,The length of the statement  "                // This is neccessary so we can indicate that the user wants to reset the current AutoStartInstance without clearing the windows registry keys! " is 143.
Long Statement,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,Upgrade,The length of the statement  "            var resolver = new RelationshipResolver(identifiers.ToList()' options' registry_manager.registry' ksp.VersionCriteria()); " is 121.
Long Statement,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,Upgrade,The length of the statement  "                        throw new ModuleNotFoundKraken(ident' module.version.ToString()' String.Format("Can't upgrade {0} as it was not installed by CKAN. \r\n Please remove manually before trying to install it."' ident)); " is 198.
Long Statement,CKAN,AutoUpdate,C:\repos\KSP-CKAN_CKAN\Core\Net\AutoUpdate.cs,StartUpdateProcess,The length of the statement  "                Arguments = String.Format(@"{0} ""{1}"" ""{2}"" {3}"' pid' path' ckanFilename' launchCKANAfterUpdate ? "launch" : "nolaunch")' " is 126.
Long Statement,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,DeSerialisationFixes,The length of the statement  "            if (repositories != null && repositories.TryGetValue(Repository.default_ckan_repo_name' out default_repo) && default_repo.uri == oldDefaultRepo) " is 144.
Long Statement,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,Available,The length of the statement  "            CkanModule[] modules_for_current_version = available_modules.Values.Select(pair => pair.Latest(ksp_version)).Where(mod => mod != null).ToArray(); " is 145.
Long Statement,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,FindReverseDependencies,The length of the statement  "                log.DebugFormat("Started with {0}' removing {1}' and keeping {2}; our dlls are {3}"' string.Join("' "' orig_installed)' string.Join("' "' modules_to_remove)' string.Join("' "' hypothetical)' string.Join("' "' dlls)); " is 216.
Long Statement,CKAN,RegistryManager,C:\repos\KSP-CKAN_CKAN\Core\Registry\RegistryManager.cs,GetLock,The length of the statement  "                lockfileStream = new FileStream(lockfilePath' FileMode.CreateNew' FileAccess.Write' FileShare.None' 512' FileOptions.DeleteOnClose); " is 132.
Long Statement,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,The length of the statement  "                        log.ErrorFormat("Dependency on {0} found but it is not listed in the index' or not available for your version of KSP."' dep_name); " is 130.
Long Statement,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,The length of the statement  "                    log.InfoFormat("{0} is recommended/suggested but it is not listed in the index' or not available for your version of KSP."' dep_name); " is 134.
Long Statement,CKAN,RelationshipResolver,C:\repos\KSP-CKAN_CKAN\Core\Relationships\RelationshipResolver.cs,ResolveStanza,The length of the statement  "                        List<CkanModule> provide = candidates.Where(can => old_stanza.Where(relation => can.identifier == relation.name).Any()).ToList(); " is 129.
Long Statement,CKAN,RegistryInUseKraken,C:\repos\KSP-CKAN_CKAN\Core\Types\Kraken.cs,ToString,The length of the statement  "            return String.Format("CKAN is already running for this instance!\n\nIf you're certain this is not the case' then delete:\n\"{0}\"\n"' lockfilePath); " is 148.
Empty Catch Block,CKAN,Net,C:\repos\KSP-CKAN_CKAN\Core\Net\Net.cs,Download,The method has an empty catch block.
Empty Catch Block,CKAN,Net,C:\repos\KSP-CKAN_CKAN\Core\Net\Net.cs,Download,The method has an empty catch block.
Empty Catch Block,CKAN,NetFileCache,C:\repos\KSP-CKAN_CKAN\Core\Net\NetFileCache.cs,GetCachedZip,The method has an empty catch block.
Empty Catch Block,CKAN,Platform,C:\repos\KSP-CKAN_CKAN\Core\Platform.cs,IsRunningOnMac,The method has an empty catch block.
Empty Catch Block,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,LatestAvailableWithProvides,The method has an empty catch block.
Empty Catch Block,CKAN,RegistryManager,C:\repos\KSP-CKAN_CKAN\Core\Registry\RegistryManager.cs,CheckStaleLock,The method has an empty catch block.
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckASCII,The following statement contains a magic number: byte[] buffer = new byte[1024 * 32];
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckASCII,The following statement contains a magic number: byte[] buffer = new byte[1024 * 32];
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckGZip,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckTar,The following statement contains a magic number: byte[] buffer = new byte[5];
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckTar,The following statement contains a magic number: for(int i = 0; i < 257; i++)              {                  stream.ReadByte();              }
Magic Number,CKAN,FileIdentifier,C:\repos\KSP-CKAN_CKAN\Core\FileIdentifier.cs,CheckZip,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,CKAN,KSPManager,C:\repos\KSP-CKAN_CKAN\Core\KSPManager.cs,GetNextValidInstanceName,The following statement contains a magic number: var validName = Enumerable.Repeat(name' 1000)                  .Select((s' i) => s + " (" + i + ")")                  .FirstOrDefault(InstanceNameIsValid);
Magic Number,CKAN,KSPPathUtils,C:\repos\KSP-CKAN_CKAN\Core\KSPPathUtils.cs,KSPSteamPath,The following statement contains a magic number: if (File.Exists(configPath))              {                  log.InfoFormat("Found Steam config file at {0}"' configPath);                  StreamReader reader = new StreamReader(configPath);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      // Found Steam library                      if (line.Contains("BaseInstallFolder"))                      {                                                    // This assumes config file is valid' we just skip it if it looks funny.                          string[] split_line = line.Split('"');                            if (split_line.Length > 3)                          {                              log.DebugFormat("Found a Steam Libary Location at {0}"' split_line[3]);                                installPath = KSPDirectory(split_line[3]);                              if (installPath != null)                              {                                  log.InfoFormat("Found a KSP install at {0}"' installPath);                                  return installPath;                              }                          }                      }                  }              }
Magic Number,CKAN,KSPPathUtils,C:\repos\KSP-CKAN_CKAN\Core\KSPPathUtils.cs,KSPSteamPath,The following statement contains a magic number: if (File.Exists(configPath))              {                  log.InfoFormat("Found Steam config file at {0}"' configPath);                  StreamReader reader = new StreamReader(configPath);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      // Found Steam library                      if (line.Contains("BaseInstallFolder"))                      {                                                    // This assumes config file is valid' we just skip it if it looks funny.                          string[] split_line = line.Split('"');                            if (split_line.Length > 3)                          {                              log.DebugFormat("Found a Steam Libary Location at {0}"' split_line[3]);                                installPath = KSPDirectory(split_line[3]);                              if (installPath != null)                              {                                  log.InfoFormat("Found a KSP install at {0}"' installPath);                                  return installPath;                              }                          }                      }                  }              }
Magic Number,CKAN,KSPPathUtils,C:\repos\KSP-CKAN_CKAN\Core\KSPPathUtils.cs,KSPSteamPath,The following statement contains a magic number: if (File.Exists(configPath))              {                  log.InfoFormat("Found Steam config file at {0}"' configPath);                  StreamReader reader = new StreamReader(configPath);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      // Found Steam library                      if (line.Contains("BaseInstallFolder"))                      {                                                    // This assumes config file is valid' we just skip it if it looks funny.                          string[] split_line = line.Split('"');                            if (split_line.Length > 3)                          {                              log.DebugFormat("Found a Steam Libary Location at {0}"' split_line[3]);                                installPath = KSPDirectory(split_line[3]);                              if (installPath != null)                              {                                  log.InfoFormat("Found a KSP install at {0}"' installPath);                                  return installPath;                              }                          }                      }                  }              }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  for (int i = 0; i < modsToInstall.Count; i++)                  {                      int percent_complete = (i * 100) / modsToInstall.Count;                        User.RaiseProgress(String.Format("Installing mod \"{0}\""' modsToInstall[i])'                                           percent_complete);                        Install(modsToInstall[i]);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();                }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  for (int i = 0; i < modsToInstall.Count; i++)                  {                      int percent_complete = (i * 100) / modsToInstall.Count;                        User.RaiseProgress(String.Format("Installing mod \"{0}\""' modsToInstall[i])'                                           percent_complete);                        Install(modsToInstall[i]);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();                }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  for (int i = 0; i < modsToInstall.Count; i++)                  {                      int percent_complete = (i * 100) / modsToInstall.Count;                        User.RaiseProgress(String.Format("Installing mod \"{0}\""' modsToInstall[i])'                                           percent_complete);                        Install(modsToInstall[i]);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();                }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: User.RaiseProgress("Rescanning GameData"' 90);
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: User.RaiseProgress("Done!\r\n"' 100);
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  var enumeratedMods = modules.Select((m' i) => new { Idx = i' Module = m });                  foreach (var item in enumeratedMods)                  {                      var percentComplete = (item.Idx * 100) / modules.Count;                      User.RaiseProgress(string.Format("Installing mod \"{0}\""' item.Module)' percentComplete);                      Install(item.Module);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();              }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  var enumeratedMods = modules.Select((m' i) => new { Idx = i' Module = m });                  foreach (var item in enumeratedMods)                  {                      var percentComplete = (item.Idx * 100) / modules.Count;                      User.RaiseProgress(string.Format("Installing mod \"{0}\""' item.Module)' percentComplete);                      Install(item.Module);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();              }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,InstallList,The following statement contains a magic number: using (TransactionScope transaction = CkanTransaction.CreateTransactionScope())              {                  var enumeratedMods = modules.Select((m' i) => new { Idx = i' Module = m });                  foreach (var item in enumeratedMods)                  {                      var percentComplete = (item.Idx * 100) / modules.Count;                      User.RaiseProgress(string.Format("Installing mod \"{0}\""' item.Module)' percentComplete);                      Install(item.Module);                  }                    User.RaiseProgress("Updating registry"' 70);                    registry_manager.Save(!options.without_enforce_consistency);                    User.RaiseProgress("Commiting filesystem changes"' 80);                    transaction.Complete();              }
Magic Number,CKAN,ModuleInstaller,C:\repos\KSP-CKAN_CKAN\Core\ModuleInstaller.cs,CopyZipEntry,The following statement contains a magic number: if (entry.IsDirectory)              {                  // Skip if we're not making directories for this install.                  if (!makeDirs)                  {                      log.DebugFormat("Skipping {0}' we don't make directories for this path"' fullPath);                      return;                  }                    log.DebugFormat("Making directory {0}"' fullPath);                  file_transaction.CreateDirectory(fullPath);              }              else              {                  log.DebugFormat("Writing file {0}"' fullPath);                    // Sometimes there are zipfiles that don't contain entries for the                  // directories their files are in. No' I understand either' but                  // the result is we have to make sure our directories exist' just in case.                  if (makeDirs)                  {                      string directory = Path.GetDirectoryName(fullPath);                      file_transaction.CreateDirectory(directory);                  }                    // We don't allow for the overwriting of files. See #208.                  if (File.Exists(fullPath))                  {                      throw new FileExistsKraken(fullPath' string.Format("Trying to write {0} but it already exists."' fullPath));                  }                    // Snapshot whatever was there before. If there's nothing' this will just                  // remove our file on rollback. We still need this even thought we won't                  // overwite files' as it ensures deletiion on rollback.                  file_transaction.Snapshot(fullPath);                    try                  {                      // It's a file! Prepare the streams                      using (Stream zipStream = zipfile.GetInputStream(entry))                      using (FileStream writer = File.Create(fullPath))                      {                          // 4k is the block size on practically every disk and OS.                          byte[] buffer = new byte[4096];                          StreamUtils.Copy(zipStream' writer' buffer);                      }                  }                  catch (DirectoryNotFoundException ex)                  {                      throw new DirectoryNotFoundKraken(""' ex.Message' ex);                  }              }
Magic Number,CKAN,Net,C:\repos\KSP-CKAN_CKAN\Core\Net\Net.cs,ResolveRedirect,The following statement contains a magic number: const int maximumRequest = 5;
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,DownloadCurl,The following statement contains a magic number: for (int i = 0; i < downloads.Count; i++)              {                  log.DebugFormat("Downloading {0}"' downloads[i].url);                  User.RaiseMessage("Downloading \"{0}\" (libcurl)"' downloads[i].url);                    // Open our file' and make an easy object...                  FileStream stream = File.OpenWrite(downloads[i].path);                  CurlEasy easy = Curl.CreateEasy(downloads[i].url' stream);                    // We need a separate variable for our closure' this is it.                  int index = i;                    // Curl recommends xferinfofunction' but this doesn't seem to                  // be supported by curlsharp' so we use the progress function                  // instead.                  easy.ProgressFunction = delegate(object extraData' double dlTotal' double dlNow' double ulTotal' double ulNow)                  {                      log.DebugFormat("Progress function called... {0}/{1}"' dlNow'dlTotal);                        int percent;                        if (dlTotal > 0)                      {                          percent = (int) dlNow * 100 / (int) dlTotal;                      }                      else                      {                          log.Debug("Unknown download size' skipping progress.");                          return 0;                      }                        FileProgressReport(                          index'                          percent'                          Convert.ToInt64(dlNow)'                          Convert.ToInt64(dlTotal)                      );                        // If the user has told us to cancel' then bail out now.                      if (download_canceled)                      {                          log.InfoFormat("Bailing out of download {0} at user request"' index);                          // Bail out!                          return 1;                      }                        // Returning 0 means we want to continue the download.                      return 0;                  };                    // Download' little curl' fulfill your destiny!                  Thread thread = new Thread(new ThreadStart(delegate                  {                      CurlWatchThread(index' easy' stream);                  }));                    // Keep track of our threads so we can clean them up later.                  curl_threads.Add(thread);                    // Background threads will mostly look after themselves.                  thread.IsBackground = true;                    // Let's go!                  thread.Start();              }
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,FileProgressReport,The following statement contains a magic number: if (timeSpan.Seconds >= 3.0)              {                  long bytesChange = bytesDownloaded - download.lastProgressUpdateSize;                  download.lastProgressUpdateSize = (int) bytesDownloaded;                  download.lastProgressUpdateTime = now;                  download.bytesPerSecond = (int) bytesChange/timeSpan.Seconds;              }
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,FileProgressReport,The following statement contains a magic number: int totalPercentage = (int)(((totalSize - totalBytesLeft) * 100) / (totalSize));
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,FileProgressReport,The following statement contains a magic number: if (!download_canceled)              {                  // Math.Ceiling was added to avoid showing 0 MiB left when finishing                  User.RaiseProgress(                      String.Format("{0} kbps - downloading - {1:f0} MB left"'                          totalBytesPerSecond/1024'                          Math.Ceiling((double)totalBytesLeft/1024/1024))'                      totalPercentage);              }
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,FileProgressReport,The following statement contains a magic number: if (!download_canceled)              {                  // Math.Ceiling was added to avoid showing 0 MiB left when finishing                  User.RaiseProgress(                      String.Format("{0} kbps - downloading - {1:f0} MB left"'                          totalBytesPerSecond/1024'                          Math.Ceiling((double)totalBytesLeft/1024/1024))'                      totalPercentage);              }
Magic Number,CKAN,NetAsyncDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncDownloader.cs,FileProgressReport,The following statement contains a magic number: if (!download_canceled)              {                  // Math.Ceiling was added to avoid showing 0 MiB left when finishing                  User.RaiseProgress(                      String.Format("{0} kbps - downloading - {1:f0} MB left"'                          totalBytesPerSecond/1024'                          Math.Ceiling((double)totalBytesLeft/1024/1024))'                      totalPercentage);              }
Magic Number,CKAN,NetAsyncModulesDownloader,C:\repos\KSP-CKAN_CKAN\Core\Net\NetAsyncModulesDownloader.cs,ModuleDownloadsComplete,The following statement contains a magic number: if (urls != null)              {                  // spawn up to 3 dialogs                  int errorDialogsLeft = 3;                    for (int i = 0; i < errors.Length; i++)                  {                      if (errors[i] != null)                      {                          if (errorDialogsLeft > 0)                          {                              User.RaiseError("Failed to download \"{0}\" - error: {1}"' urls[i]' errors[i].Message);                              errorDialogsLeft--;                          }                      }                      else                      {                          // Even if some of our downloads failed' we want to cache the                          // ones which succeeded.                            // This doesn't work :(                          // for some reason the tmp files get deleted before we get here and we get a nasty exception                          // not only that but then we try _to install_ the rest of the mods and then CKAN crashes                          // and the user's registry gets corrupted forever                          // commenting out until this is resolved                          // ~ nlight                            try                          {                              cache.Store(urls[i]' filenames[i]' modules[i].StandardName());                          }                          catch (FileNotFoundException e)                          {                              log.WarnFormat("cache.Store(): FileNotFoundException: {0}"' e.Message);                          }                      }                  }              }
Magic Number,CKAN,NetFileCache,C:\repos\KSP-CKAN_CKAN\Core\Net\NetFileCache.cs,CreateURLHash,The following statement contains a magic number: using (var sha1 = new SHA1Cng())              {                  byte[] hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(url.ToString()));                    return BitConverter.ToString(hash).Replace("-"' "").Substring(0' 8);              }
Magic Number,CKAN,Platform,C:\repos\KSP-CKAN_CKAN\Core\Platform.cs,IsRunningOnMac,The following statement contains a magic number: try              {                  buf = Marshal.AllocHGlobal(8192);                  // This is a hacktastic way of getting sysname from uname ()                  if (uname(buf) == 0)                  {                      string os = Marshal.PtrToStringAnsi(buf);                      if (os == "Darwin")                          return true;                  }              }              catch              {              }              finally              {                  if (buf != IntPtr.Zero)                      Marshal.FreeHGlobal(buf);              }
Magic Number,CKAN,AvailableModule,C:\repos\KSP-CKAN_CKAN\Core\Registry\AvailableModule.cs,FullMetadata,The following statement contains a magic number: using (JsonTextWriter writer = new JsonTextWriter(sw) {                      Formatting  = Formatting.Indented'                      Indentation = 4'                      IndentChar  = ' '                  })              {                  new JsonSerializer().Serialize(writer' this);              }
Magic Number,CKAN,Registry,C:\repos\KSP-CKAN_CKAN\Core\Registry\Registry.cs,DeSerialisationFixes,The following statement contains a magic number: if (registry_version < 2)              {                  InstalledModule control_lock_entry;                  const string old_ident = "001ControlLock";                  const string new_ident = "ControlLock";                    if (installed_modules.TryGetValue("001ControlLock"' out control_lock_entry))                  {                      if (ksp == null)                      {                          throw new Kraken("Internal bug: No KSP instance provided on registry deserialisation");                      }                        log.WarnFormat("Older registry detected. Reindexing {0} as {1}. This may take a moment."' old_ident' new_ident);                        // Remove old record.                      installed_modules.Remove(old_ident);                        // Extract the old module metadata                      CkanModule control_lock_mod = control_lock_entry.Module;                        // Change to the correct ident.                      control_lock_mod.identifier = new_ident;                        // Prepare to re-index.                      var new_control_lock_installed = new InstalledModule(                          ksp'                          control_lock_mod'                          control_lock_entry.Files                      );                        // Re-insert into registry.                      installed_modules[new_control_lock_installed.identifier] = new_control_lock_installed;                        // Re-index files.                      ReindexInstalled();                  }              }
Magic Number,CKAN,RegistryManager,C:\repos\KSP-CKAN_CKAN\Core\Registry\RegistryManager.cs,GetLock,The following statement contains a magic number: try              {                  CheckStaleLock();                    lockfileStream = new FileStream(lockfilePath' FileMode.CreateNew' FileAccess.Write' FileShare.None' 512' FileOptions.DeleteOnClose);                    // Write the current process ID to the file.                  lockfileWriter = new StreamWriter(lockfileStream);                  lockfileWriter.Write(Process.GetCurrentProcess().Id);                  lockfileWriter.Flush();                  // The lock file is now locked and open.              }              catch (IOException)              {                  return false;              }
Magic Number,CKAN,CkanModule,C:\repos\KSP-CKAN_CKAN\Core\Types\CkanModule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (identifier.GetHashCode() * 397) ^ version.GetHashCode();              }
Magic Number,CKAN.Versioning,KspVersion,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = _major.GetHashCode();                  hashCode = (hashCode*397) ^ _minor.GetHashCode();                  hashCode = (hashCode*397) ^ _patch.GetHashCode();                  hashCode = (hashCode*397) ^ _build.GetHashCode();                  return hashCode;              }
Magic Number,CKAN.Versioning,KspVersion,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = _major.GetHashCode();                  hashCode = (hashCode*397) ^ _minor.GetHashCode();                  hashCode = (hashCode*397) ^ _patch.GetHashCode();                  hashCode = (hashCode*397) ^ _build.GetHashCode();                  return hashCode;              }
Magic Number,CKAN.Versioning,KspVersion,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = _major.GetHashCode();                  hashCode = (hashCode*397) ^ _minor.GetHashCode();                  hashCode = (hashCode*397) ^ _patch.GetHashCode();                  hashCode = (hashCode*397) ^ _build.GetHashCode();                  return hashCode;              }
Magic Number,CKAN.Versioning,KspVersionBound,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersionBound.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Value != null ? Value.GetHashCode() : 0)*397) ^ Inclusive.GetHashCode();              }
Magic Number,CKAN.Versioning,KspVersionRange,C:\repos\KSP-CKAN_CKAN\Core\Versioning\KspVersionRange.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Lower != null ? Lower.GetHashCode() : 0)*397) ^ (Upper != null ? Upper.GetHashCode() : 0);              }
Missing Default,CKAN,ReleaseStatus,C:\repos\KSP-CKAN_CKAN\Core\Types\ReleaseStatus.cs,ReleaseStatus,The following switch statement is missing a default case: switch (status)              {                  // As per the spec' if the status is null' we assume stable.                  case null:                      status = "stable";                      break;                    // For compatibility with older metadata' we map 'alpha' and 'beta'                  // to 'development' and 'testing'.                    case "alpha":                      status = "development";                      break;                    case "beta":                      status = "testing";                      break;              }
