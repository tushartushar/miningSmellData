Implementation smell,Namespace,Class,File,Method,Description
Long Method,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The method has 237 lines of code.
Long Method,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The method has 101 lines of code.
Complex Method,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,Cyclomatic complexity of the method is 11
Complex Method,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,Cyclomatic complexity of the method is 9
Long Parameter List,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ProcessSearchResults,The method has 9 parameters. Parameters: extensions' backups' allowParsingErrors' formattingManager' matchingObjects' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' warningEncountered
Long Parameter List,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The method has 8 parameters. Parameters: fileInfo' formattingManager' backups' allowParsingErrors' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' warningEncountered
Long Parameter List,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,WriteResultFile,The method has 5 parameters. Parameters: targetFilePath' replaceFromFolderPath' replaceToFolderPath' warningEncountered' newFileContents
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                    _generalResourceManager = new FrameworkClassReplacements.SingleAssemblyResourceManager("GeneralLanguageContent"' Assembly.GetExecutingAssembly()' typeof(Program)); " is 163.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                    _generalResourceManager = new FrameworkClassReplacements.SingleAssemblyResourceManager("GeneralLanguageContent"' Assembly.GetExecutingAssembly()' typeof(Program)); " is 163.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                _generalResourceManager = new FrameworkClassReplacements.SingleAssemblyResourceManager("GeneralLanguageContent"' Assembly.GetExecutingAssembly()' typeof(Program)); " is 163.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                        Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ErrorDetailMessageFragment")' parseException.Message)); " is 128.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                if (!ProcessSearchResults(extensions' backups' allowParsingErrors' formattingManager' matchingObjects' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered)) " is 189.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The length of the statement  "                    Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("NoFilesFoundWarningMessage")' remainingArgs[0]' string.Join("'"' extensions.ToArray()))); " is 162.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ProcessSearchResults,The length of the statement  "                        ReFormatFile((FileInfo)fsEntry' formattingManager' backups' allowParsingErrors' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered); " is 166.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ProcessSearchResults,The length of the statement  "                    if (ProcessSearchResults(extensions' backups' allowParsingErrors' formattingManager' ((System.IO.DirectoryInfo)fsEntry).GetFileSystemInfos()' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered)) " is 228.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "            //TODO: consider whether to keep same output encoding as source file' or always use same' and if so whether to make parameter-based. " is 132.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "                Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("FileReadFailureWarningMessage")' fileInfo.FullName)); " is 126.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "                    Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ParsingErrorWarningMessage")' fileInfo.FullName)); " is 123.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "                        Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ErrorDetailMessageFragment")' parseException.Message)); " is 128.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "                        Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("BackupFailureWarningMessage")' fileInfo.FullName' Environment.NewLine)); " is 145.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The length of the statement  "                                Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("FolderCreationFailureWarningMessage")' targetFolder)); " is 127.
Long Statement,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,WriteResultFile,The length of the statement  "                Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ContentWriteFailureWarningMessage")' targetFilePath)); " is 127.
Complex Conditional,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,ReFormatFile,The conditional expression  "!parsingError                  && (                          (newFileContents.Length > 0                           && !oldFileContents.Equals(newFileContents)                          )                          || singleFileWriter != null                          || (replaceFromFolderPath != null && replaceToFolderPath != null)                      )"  is complex.
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: var options = new PoorMansTSqlFormatterLib.Formatters.TSqlStandardFormatterOptions                  {                      KeywordStandardization = true'                      IndentString = "\t"'                      SpacesPerTab = 4'  					MaxLineWidth = 999'  					NewStatementLineBreaks = 2'  					NewClauseLineBreaks = 1'  					TrailingCommas = false'                      SpaceAfterExpandedComma = false'                      ExpandBetweenConditions = true'                      ExpandBooleanExpressions = true'                      ExpandCaseStatements = true'                      ExpandCommaLists = true'                      BreakJoinOnSections = false'                      UppercaseKeywords = true'  					ExpandInLists = true                  };
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: var options = new PoorMansTSqlFormatterLib.Formatters.TSqlStandardFormatterOptions                  {                      KeywordStandardization = true'                      IndentString = "\t"'                      SpacesPerTab = 4'  					MaxLineWidth = 999'  					NewStatementLineBreaks = 2'  					NewClauseLineBreaks = 1'  					TrailingCommas = false'                      SpaceAfterExpandedComma = false'                      ExpandBetweenConditions = true'                      ExpandBooleanExpressions = true'                      ExpandCaseStatements = true'                      ExpandCommaLists = true'                      BreakJoinOnSections = false'                      UppercaseKeywords = true'  					ExpandInLists = true                  };
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: var options = new PoorMansTSqlFormatterLib.Formatters.TSqlStandardFormatterOptions                  {                      KeywordStandardization = true'                      IndentString = "\t"'                      SpacesPerTab = 4'  					MaxLineWidth = 999'  					NewStatementLineBreaks = 2'  					NewClauseLineBreaks = 1'  					TrailingCommas = false'                      SpaceAfterExpandedComma = false'                      ExpandBetweenConditions = true'                      ExpandBooleanExpressions = true'                      ExpandCaseStatements = true'                      ExpandCommaLists = true'                      BreakJoinOnSections = false'                      UppercaseKeywords = true'  					ExpandInLists = true                  };
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(stdInput))              {                  string formattedOutput = null;                  bool parsingError = false;                  Exception parseException = null;                  try                  {                      formattedOutput = formattingManager.Format(stdInput' ref parsingError);                        //hide any handled parsing issues if they were requested to be allowed                      if (allowParsingErrors) parsingError = false;                  }                  catch (Exception ex)                  {                      parseException = ex;                      parsingError = true;                  }                    if (parsingError)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ParsingErrorWarningMessage")' "STDIN"));                      if (parseException != null)                          Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ErrorDetailMessageFragment")' parseException.Message));                      warningEncountered = true;                  }                  else                  {                      if (!string.IsNullOrEmpty(outputFileOrFolder))                      {                          WriteResultFile(outputFileOrFolder' null' null' ref warningEncountered' formattedOutput);                      }                      else                      {                          Console.OutputEncoding = Encoding.UTF8;                          Console.Out.WriteLine(formattedOutput);                      }                  }                }              else              {                  System.IO.DirectoryInfo baseDirectory = null;                  string searchPattern = Path.GetFileName(remainingArgs[0]);                  string baseDirectoryName = Path.GetDirectoryName(remainingArgs[0]);                  if (baseDirectoryName.Length == 0)                  {                      baseDirectoryName = ".";                      if (searchPattern.Equals("."))                          searchPattern = "";                  }                  System.IO.FileSystemInfo[] matchingObjects = null;                  try                  {                      baseDirectory = new System.IO.DirectoryInfo(baseDirectoryName);                      if (searchPattern.Length > 0)                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos(searchPattern);                          else                              matchingObjects = baseDirectory.GetFiles(searchPattern);                      }                      else                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos();                          else                              matchingObjects = new FileSystemInfo[0];                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("PathPatternErrorMessage")' e.Message));                      return 2;                  }                    System.IO.StreamWriter singleFileWriter = null;                  string replaceFromFolderPath = null;                  string replaceToFolderPath = null;                  if (!string.IsNullOrEmpty(outputFileOrFolder))                  {                      //ignore the backups setting - wouldn't make sense to back up the source files if we're                       // writing to another file anyway...                      backups = false;                        if (Directory.Exists(outputFileOrFolder)                          && (File.GetAttributes(outputFileOrFolder) & FileAttributes.Directory) == FileAttributes.Directory                          )                      {                          replaceFromFolderPath = baseDirectory.FullName;                          replaceToFolderPath = new DirectoryInfo(outputFileOrFolder).FullName;                      }                      else                      {                          try                          {                              //let's not worry too hard about releasing this resource - this is a command-line program'                               // when it ends or dies all will be released anyway.                              singleFileWriter = new StreamWriter(outputFileOrFolder);                          }                          catch (Exception e)                          {                              Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("OutputFileCreationErrorMessage")' e.Message));                              return 3;                          }                      }                  }                    if (!ProcessSearchResults(extensions' backups' allowParsingErrors' formattingManager' matchingObjects' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered))                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("NoFilesFoundWarningMessage")' remainingArgs[0]' string.Join("'"' extensions.ToArray())));                      return 4;                  }                    if (singleFileWriter != null)                  {                      singleFileWriter.Flush();                      singleFileWriter.Close();                      singleFileWriter.Dispose();                  }              }
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(stdInput))              {                  string formattedOutput = null;                  bool parsingError = false;                  Exception parseException = null;                  try                  {                      formattedOutput = formattingManager.Format(stdInput' ref parsingError);                        //hide any handled parsing issues if they were requested to be allowed                      if (allowParsingErrors) parsingError = false;                  }                  catch (Exception ex)                  {                      parseException = ex;                      parsingError = true;                  }                    if (parsingError)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ParsingErrorWarningMessage")' "STDIN"));                      if (parseException != null)                          Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ErrorDetailMessageFragment")' parseException.Message));                      warningEncountered = true;                  }                  else                  {                      if (!string.IsNullOrEmpty(outputFileOrFolder))                      {                          WriteResultFile(outputFileOrFolder' null' null' ref warningEncountered' formattedOutput);                      }                      else                      {                          Console.OutputEncoding = Encoding.UTF8;                          Console.Out.WriteLine(formattedOutput);                      }                  }                }              else              {                  System.IO.DirectoryInfo baseDirectory = null;                  string searchPattern = Path.GetFileName(remainingArgs[0]);                  string baseDirectoryName = Path.GetDirectoryName(remainingArgs[0]);                  if (baseDirectoryName.Length == 0)                  {                      baseDirectoryName = ".";                      if (searchPattern.Equals("."))                          searchPattern = "";                  }                  System.IO.FileSystemInfo[] matchingObjects = null;                  try                  {                      baseDirectory = new System.IO.DirectoryInfo(baseDirectoryName);                      if (searchPattern.Length > 0)                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos(searchPattern);                          else                              matchingObjects = baseDirectory.GetFiles(searchPattern);                      }                      else                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos();                          else                              matchingObjects = new FileSystemInfo[0];                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("PathPatternErrorMessage")' e.Message));                      return 2;                  }                    System.IO.StreamWriter singleFileWriter = null;                  string replaceFromFolderPath = null;                  string replaceToFolderPath = null;                  if (!string.IsNullOrEmpty(outputFileOrFolder))                  {                      //ignore the backups setting - wouldn't make sense to back up the source files if we're                       // writing to another file anyway...                      backups = false;                        if (Directory.Exists(outputFileOrFolder)                          && (File.GetAttributes(outputFileOrFolder) & FileAttributes.Directory) == FileAttributes.Directory                          )                      {                          replaceFromFolderPath = baseDirectory.FullName;                          replaceToFolderPath = new DirectoryInfo(outputFileOrFolder).FullName;                      }                      else                      {                          try                          {                              //let's not worry too hard about releasing this resource - this is a command-line program'                               // when it ends or dies all will be released anyway.                              singleFileWriter = new StreamWriter(outputFileOrFolder);                          }                          catch (Exception e)                          {                              Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("OutputFileCreationErrorMessage")' e.Message));                              return 3;                          }                      }                  }                    if (!ProcessSearchResults(extensions' backups' allowParsingErrors' formattingManager' matchingObjects' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered))                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("NoFilesFoundWarningMessage")' remainingArgs[0]' string.Join("'"' extensions.ToArray())));                      return 4;                  }                    if (singleFileWriter != null)                  {                      singleFileWriter.Flush();                      singleFileWriter.Close();                      singleFileWriter.Dispose();                  }              }
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(stdInput))              {                  string formattedOutput = null;                  bool parsingError = false;                  Exception parseException = null;                  try                  {                      formattedOutput = formattingManager.Format(stdInput' ref parsingError);                        //hide any handled parsing issues if they were requested to be allowed                      if (allowParsingErrors) parsingError = false;                  }                  catch (Exception ex)                  {                      parseException = ex;                      parsingError = true;                  }                    if (parsingError)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ParsingErrorWarningMessage")' "STDIN"));                      if (parseException != null)                          Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("ErrorDetailMessageFragment")' parseException.Message));                      warningEncountered = true;                  }                  else                  {                      if (!string.IsNullOrEmpty(outputFileOrFolder))                      {                          WriteResultFile(outputFileOrFolder' null' null' ref warningEncountered' formattedOutput);                      }                      else                      {                          Console.OutputEncoding = Encoding.UTF8;                          Console.Out.WriteLine(formattedOutput);                      }                  }                }              else              {                  System.IO.DirectoryInfo baseDirectory = null;                  string searchPattern = Path.GetFileName(remainingArgs[0]);                  string baseDirectoryName = Path.GetDirectoryName(remainingArgs[0]);                  if (baseDirectoryName.Length == 0)                  {                      baseDirectoryName = ".";                      if (searchPattern.Equals("."))                          searchPattern = "";                  }                  System.IO.FileSystemInfo[] matchingObjects = null;                  try                  {                      baseDirectory = new System.IO.DirectoryInfo(baseDirectoryName);                      if (searchPattern.Length > 0)                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos(searchPattern);                          else                              matchingObjects = baseDirectory.GetFiles(searchPattern);                      }                      else                      {                          if (recursiveSearch)                              matchingObjects = baseDirectory.GetFileSystemInfos();                          else                              matchingObjects = new FileSystemInfo[0];                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("PathPatternErrorMessage")' e.Message));                      return 2;                  }                    System.IO.StreamWriter singleFileWriter = null;                  string replaceFromFolderPath = null;                  string replaceToFolderPath = null;                  if (!string.IsNullOrEmpty(outputFileOrFolder))                  {                      //ignore the backups setting - wouldn't make sense to back up the source files if we're                       // writing to another file anyway...                      backups = false;                        if (Directory.Exists(outputFileOrFolder)                          && (File.GetAttributes(outputFileOrFolder) & FileAttributes.Directory) == FileAttributes.Directory                          )                      {                          replaceFromFolderPath = baseDirectory.FullName;                          replaceToFolderPath = new DirectoryInfo(outputFileOrFolder).FullName;                      }                      else                      {                          try                          {                              //let's not worry too hard about releasing this resource - this is a command-line program'                               // when it ends or dies all will be released anyway.                              singleFileWriter = new StreamWriter(outputFileOrFolder);                          }                          catch (Exception e)                          {                              Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("OutputFileCreationErrorMessage")' e.Message));                              return 3;                          }                      }                  }                    if (!ProcessSearchResults(extensions' backups' allowParsingErrors' formattingManager' matchingObjects' singleFileWriter' replaceFromFolderPath' replaceToFolderPath' ref warningEncountered))                  {                      Console.Error.WriteLine(string.Format(_generalResourceManager.GetString("NoFilesFoundWarningMessage")' remainingArgs[0]' string.Join("'"' extensions.ToArray())));                      return 4;                  }                    if (singleFileWriter != null)                  {                      singleFileWriter.Flush();                      singleFileWriter.Close();                      singleFileWriter.Dispose();                  }              }
Magic Number,PoorMansTSqlFormatterCmdLine,Program,C:\repos\TaoK_PoorMansTSqlFormatter\PoorMansTSqlFormatterCmdLine\Program.cs,Main,The following statement contains a magic number: if (warningEncountered)                  return 5; //general "there were warnings" return code              else                  return 0;
