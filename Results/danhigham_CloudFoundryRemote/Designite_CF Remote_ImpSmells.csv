Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The method has 163 lines of code.
Complex Method,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,SQLite,Orm,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,SqlType,Cyclomatic complexity of the method is 9
Complex Method,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,Cyclomatic complexity of the method is 13
Complex Method,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,ReadCol,Cyclomatic complexity of the method is 19
Complex Method,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,Cyclomatic complexity of the method is 26
Complex Method,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,GetSqlName,Cyclomatic complexity of the method is 10
Long Parameter List,CloudFoundryRemote,HomeViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\HomeViewController.cs,ViewDidLoad,The method has 10 parameters.
Long Parameter List,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The method has 8 parameters.
Long Parameter List,CloudFoundryRemote.Helpers.Tables,FSEntryTableSource,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Helpers\FSEntryTableSource.cs,FSEntryTableSource,The method has 6 parameters.
Long Parameter List,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CreateTable,The method has 5 parameters.
Long Parameter List,SQLite,SQLite3,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,Prepare2,The method has 5 parameters.
Long Parameter List,SQLite,SQLite3,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindText,The method has 5 parameters.
Long Parameter List,SQLite,SQLite3,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindBlob,The method has 5 parameters.
Long Parameter List,CloudFoundryRemote.Data.Models,Connection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\Models\Connection.cs,CreateOrUpdateConnection,The method has 5 parameters.
Long Statement,CloudFoundryRemote,OrgsViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\OrgsViewController.cs,ViewDidLoad,The length of the statement  "	UITableView tblOrgs = new UITableView (new RectangleF (0f' 0f' View.Frame.Width' View.Frame.Height)' UITableViewStyle.Plain); " is 125.
Long Statement,CloudFoundryRemote,SpacesViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\SpacesViewController.cs,ViewDidLoad,The length of the statement  "	UITableView tblSpaces = new UITableView (new RectangleF (0' 0' View.Frame.Width' View.Frame.Height)' UITableViewStyle.Plain); " is 125.
Long Statement,CloudFoundryRemote,AppsViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\AppsViewController.cs,ViewDidLoad,The length of the statement  "	UITableView tblApps = new UITableView (new RectangleF (0' 0' View.Frame.Width' View.Frame.Height)' UITableViewStyle.Plain); " is 123.
Long Statement,CloudFoundryRemote,AppDetailViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\AppDetailViewController.cs,ViewDidLoad,The length of the statement  "	_tblDetail = new UITableView (new RectangleF (0' 40f' View.Frame.Width' View.Frame.Height + 20f)' UITableViewStyle.Grouped); " is 124.
Long Statement,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The length of the statement  "					var appDetailController = NavigationController.ViewControllers [NavigationController.ViewControllers.Length - 2] as AppDetailViewController; " is 140.
Long Statement,CloudFoundryRemote,BrowseFSViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\BrowseFSViewController.cs,ViewDidLoad,The length of the statement  "		UITableView tblFiles = new UITableView (new RectangleF (0f' 0f' View.Frame.Width' View.Frame.Height)' UITableViewStyle.Plain); " is 126.
Long Statement,Mono.CFoundry,Client,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Mono.CFoundry\Client.cs,RefreshToken,The length of the statement  "	var response = HttpRequest<JObject> (loginURL' headers' "POST"' "grant_type=refresh_token&refresh_token=" + _refreshToken); " is 123.
Long Statement,CloudFoundryRemote.Helpers,VisualHelper,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Helpers\VisualHelper.cs,ShowPleaseWait,The length of the statement  "	UIActivityIndicatorView spinner = new UIActivityIndicatorView (new RectangleF ((pleaseWaitView.Frame.Width / 2) - 15f' (pleaseWaitView.Frame.Height / 2) - 15f' 30f' 30f)); " is 171.
Long Statement,CloudFoundryRemote.Helpers,VisualHelper,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Helpers\VisualHelper.cs,ShowConnectionPicker,The length of the statement  "	UIView pickerContainer = new UIView (new RectangleF (10f' (callingView.Frame.Height / 2) - 100f' callingView.Frame.Width - 20f' 200f)); " is 135.
Long Statement,CloudFoundryRemote.Helpers,VisualHelper,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Helpers\VisualHelper.cs,ShowConnectionPicker,The length of the statement  "	UIPickerView picker = new UIPickerView (new RectangleF (0f' 0f' pickerContainer.Frame.Width' pickerContainer.Frame.Height - 50f)); " is 130.
Long Statement,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,Execute,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,ExecuteScalar,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,DoSavePointExecute,The length of the statement  "	throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint"); " is 129.
Long Statement,SQLite,Orm,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,SqlType,The length of the statement  "	if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,GenerateCommand,The length of the statement  "			var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,CloudFoundryRemote.Data.Models,Connection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\Models\Connection.cs,CreateOrUpdateConnection,The length of the statement  "	var connection = db.Table<Connection> ().Where (c => c.Username == username && c.Endpoint == endpoint).FirstOrDefault (); " is 121.
Complex Conditional,SQLite,Orm,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Magic Number,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The following statement contains a magic number: btnApply.TouchUpInside += (object sender' EventArgs e) =>  {  	int memSliderValue = (int)memorySlider.Value;  	int instanceSliderValue = (int)instanceSlider.Value;  	bool scale = false;  	bool restart = false;  	bool stop = false;  	if ((memSliderValue != _app.Memory) || (instanceSliderValue != _app.Instances))  		scale = true;  	if (((memSliderValue != _app.Memory) || (instanceSliderValue != _app.Instances)) && startSwitch.On)  		restart = true;  	if (!startSwitch.On)  		stop = true;  	if ((startSwitch.On) && (_app.State.ToLower () == "stopped"))  		restart = true;  	if (!scale && !restart && !stop) {  		NavigationController.PopViewControllerAnimated (true);  		return;  	}  	var alert = new UIAlertView ("Apply"' "Apply changes?"' null' "Cancel"' new string[] {  		"OK"  	});  	alert.Clicked += (object sender2' UIButtonEventArgs e2) =>  {  		if (e2.ButtonIndex > 0) {  			pleaseWait = VisualHelper.ShowPleaseWait ("Scaling..."' View' () =>  {  				if (scale == true)  					_client.Scale (_app.Guid' (int)memorySlider.Value' (int)instanceSlider.Value);  				if (stop || restart) {  					App app = App.FromJToken (_client.Stop (_app.Guid) ["entity"]);  					_app.State = app.State;  				}  				if (restart) {  					App app = App.FromJToken (_client.Start (_app.Guid) ["entity"]);  					_app.State = app.State;  				}  				var appDetailController = NavigationController.ViewControllers [NavigationController.ViewControllers.Length - 2] as AppDetailViewController;  				if (appDetailController != null) {  					List<InstanceStats> stats = new List<InstanceStats> ();  					if (_app.State.ToLower () == "started")  						stats = _client.GetInstanceStats (_app.Guid);  					appDetailController.LoadData (_client.GetApp (_app.Guid)' stats);  				}  				if (pleaseWait != null) {  					VisualHelper.HidePleaseWait (pleaseWait' () =>  {  						pleaseWait.RemoveFromSuperview ();  						NavigationController.PopViewControllerAnimated (true);  					});  				}  			});  		}  	};  	alert.Show ();  };  
Magic Number,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The following statement contains a magic number: alert.Clicked += (object sender2' UIButtonEventArgs e2) =>  {  	if (e2.ButtonIndex > 0) {  		pleaseWait = VisualHelper.ShowPleaseWait ("Scaling..."' View' () =>  {  			if (scale == true)  				_client.Scale (_app.Guid' (int)memorySlider.Value' (int)instanceSlider.Value);  			if (stop || restart) {  				App app = App.FromJToken (_client.Stop (_app.Guid) ["entity"]);  				_app.State = app.State;  			}  			if (restart) {  				App app = App.FromJToken (_client.Start (_app.Guid) ["entity"]);  				_app.State = app.State;  			}  			var appDetailController = NavigationController.ViewControllers [NavigationController.ViewControllers.Length - 2] as AppDetailViewController;  			if (appDetailController != null) {  				List<InstanceStats> stats = new List<InstanceStats> ();  				if (_app.State.ToLower () == "started")  					stats = _client.GetInstanceStats (_app.Guid);  				appDetailController.LoadData (_client.GetApp (_app.Guid)' stats);  			}  			if (pleaseWait != null) {  				VisualHelper.HidePleaseWait (pleaseWait' () =>  {  					pleaseWait.RemoveFromSuperview ();  					NavigationController.PopViewControllerAnimated (true);  				});  			}  		});  	}  };  
Magic Number,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The following statement contains a magic number: if (e2.ButtonIndex > 0) {  	pleaseWait = VisualHelper.ShowPleaseWait ("Scaling..."' View' () =>  {  		if (scale == true)  			_client.Scale (_app.Guid' (int)memorySlider.Value' (int)instanceSlider.Value);  		if (stop || restart) {  			App app = App.FromJToken (_client.Stop (_app.Guid) ["entity"]);  			_app.State = app.State;  		}  		if (restart) {  			App app = App.FromJToken (_client.Start (_app.Guid) ["entity"]);  			_app.State = app.State;  		}  		var appDetailController = NavigationController.ViewControllers [NavigationController.ViewControllers.Length - 2] as AppDetailViewController;  		if (appDetailController != null) {  			List<InstanceStats> stats = new List<InstanceStats> ();  			if (_app.State.ToLower () == "started")  				stats = _client.GetInstanceStats (_app.Guid);  			appDetailController.LoadData (_client.GetApp (_app.Guid)' stats);  		}  		if (pleaseWait != null) {  			VisualHelper.HidePleaseWait (pleaseWait' () =>  {  				pleaseWait.RemoveFromSuperview ();  				NavigationController.PopViewControllerAnimated (true);  			});  		}  	});  }  
Magic Number,CloudFoundryRemote,ScaleAppViewController,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Screens\ScaleAppViewController.cs,ViewDidLoad,The following statement contains a magic number: pleaseWait = VisualHelper.ShowPleaseWait ("Scaling..."' View' () =>  {  	if (scale == true)  		_client.Scale (_app.Guid' (int)memorySlider.Value' (int)instanceSlider.Value);  	if (stop || restart) {  		App app = App.FromJToken (_client.Stop (_app.Guid) ["entity"]);  		_app.State = app.State;  	}  	if (restart) {  		App app = App.FromJToken (_client.Start (_app.Guid) ["entity"]);  		_app.State = app.State;  	}  	var appDetailController = NavigationController.ViewControllers [NavigationController.ViewControllers.Length - 2] as AppDetailViewController;  	if (appDetailController != null) {  		List<InstanceStats> stats = new List<InstanceStats> ();  		if (_app.State.ToLower () == "started")  			stats = _client.GetInstanceStats (_app.Guid);  		appDetailController.LoadData (_client.GetApp (_app.Guid)' stats);  	}  	if (pleaseWait != null) {  		VisualHelper.HidePleaseWait (pleaseWait' () =>  {  			pleaseWait.RemoveFromSuperview ();  			NavigationController.PopViewControllerAnimated (true);  		});  	}  });  
Magic Number,Mono.CFoundry,Client,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Mono.CFoundry\Client.cs,HttpRequest,The following statement contains a magic number: while (count > 0) {  	sb.Append (new String (read' 0' count));  	count = readStream.Read (read' 0' 256);  }  
Magic Number,Mono.CFoundry,Client,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Mono.CFoundry\Client.cs,HttpRequest,The following statement contains a magic number: count = readStream.Read (read' 0' 256);  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,Execute,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,ExecuteScalar,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) {  	int depth;  	if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) {  		// TODO: Mild race here' but inescapable without locking almost everywhere.  		if (0 <= depth && depth < _transactionDepth) {  			#if NETFX_CORE  			                        Volatile.Write (ref _transactionDepth' depth); #elif SILVERLIGHT  			#						_transactionDepth = depth; #else  			Thread.VolatileWrite (ref _transactionDepth' depth);  			#endif  			Execute (cmd + savepoint);  			return;  		}  	}  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value == null) {  	SQLite3.BindNull (stmt' index);  }  else {  	if (value is Int32) {  		SQLite3.BindInt (stmt' index' (int)value);  	}  	else if (value is String) {  		SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  	}  	else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  		SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  	}  	else if (value is Boolean) {  		SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  	}  	else if (value is UInt32 || value is Int64) {  		SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  	}  	else if (value is Single || value is Double || value is Decimal) {  		SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  	}  	else if (value is DateTime) {  		if (storeDateTimeAsTicks) {  			SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  		}  		else {  			SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  		}  		#if !NETFX_CORE  	}  	else if (value.GetType ().IsEnum) {  		#else  						} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  		SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  	}  	else if (value is byte[]) {  		SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  	}  	else if (value is Guid) {  		SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  	}  	else {  		throw new NotSupportedException ("Cannot store type: " + value.GetType ());  	}  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Int32) {  	SQLite3.BindInt (stmt' index' (int)value);  }  else if (value is String) {  	SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  }  else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  }  else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  }  else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is String) {  	SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  }  else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  }  else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  }  else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  }  else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  }  else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  }  else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  }  else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  }  else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  }  else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	}  	else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  	#if !NETFX_CORE  }  else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  }  else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  }  else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  }  else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BindParameter,The following statement contains a magic number: SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,SQLite,TableQuery,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Missing Default,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
Missing Default,SQLite,SQLiteConnection,C:\repos\danhigham_CloudFoundryRemote\CloudFoundryRemote\Data\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
