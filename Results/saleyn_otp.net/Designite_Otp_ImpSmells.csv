Implementation smell,Namespace,Class,File,Method,Description
Long Method,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The method has 272 lines of code.
Long Method,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_publish,The method has 100 lines of code.
Complex Method,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,Cyclomatic complexity of the method is 39
Complex Method,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,headerType,Cyclomatic complexity of the method is 16
Complex Method,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvName,Cyclomatic complexity of the method is 8
Complex Method,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_lookupPort,Cyclomatic complexity of the method is 9
Complex Method,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_publish,Cyclomatic complexity of the method is 9
Complex Method,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_publish,Cyclomatic complexity of the method is 13
Complex Method,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_long,Cyclomatic complexity of the method is 9
Complex Method,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_any,Cyclomatic complexity of the method is 14
Complex Method,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,encode_size,Cyclomatic complexity of the method is 20
Complex Method,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,Cyclomatic complexity of the method is 15
Complex Method,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,pvariable,Cyclomatic complexity of the method is 19
Complex Method,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,pformat,Cyclomatic complexity of the method is 15
Complex Method,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,create,Cyclomatic complexity of the method is 15
Complex Method,Otp.Erlang,List,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\List.cs,List,Cyclomatic complexity of the method is 12
Complex Method,Otp.Erlang,Tuple,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Tuple.cs,Tuple,Cyclomatic complexity of the method is 14
Complex Method,Otp.Erlang,Var,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Var.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,Amir_Harel.Cloning,BaseObject,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\CloneObject.cs,Clone,Cyclomatic complexity of the method is 10
Long Parameter List,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,encodeRPC,The method has 5 parameters. Parameters: from' mod' fun' args' gleader
Long Parameter List,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,encodeRPCcast,The method has 5 parameters. Parameters: from' mod' fun' args' gleader
Long Parameter List,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,encodeRPC,The method has 5 parameters. Parameters: from' mod' fun' args' gleader
Long Parameter List,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,encodeRPCcast,The method has 5 parameters. Parameters: from' mod' fun' args' gleader
Long Parameter List,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,rpcCall,The method has 5 parameters. Parameters: node' mod' fun' args' timeout
Long Parameter List,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,rpcCall,The method has 5 parameters. Parameters: node' mod' fun' args' timeout
Long Parameter List,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,sendRPC,The method has 5 parameters. Parameters: node' mod' fun' args' ioServer
Long Parameter List,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,sendRPC,The method has 5 parameters. Parameters: node' mod' fun' args' ioServer
Long Parameter List,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,sendRPCcast,The method has 5 parameters. Parameters: node' mod' fun' args' ioServer
Long Parameter List,Otp,OtpMsg,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMsg.cs,OtpMsg,The method has 5 parameters. Parameters: tag' from' to' eref' reason
Long Parameter List,Otp,OtpMsg,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMsg.cs,OtpMsg,The method has 5 parameters. Parameters: tag' from' toName' eref' reason
Long Parameter List,Otp,OtpMsg,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMsg.cs,OtpMsg,The method has 6 parameters. Parameters: tag' from' to' eref' reason' paybuf
Long Parameter List,Otp,OtpMsg,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMsg.cs,OtpMsg,The method has 6 parameters. Parameters: tag' from' to' eref' reason' paybuf
Long Parameter List,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,OtpNode,The method has 5 parameters. Parameters: node' acceptConnections' cookie' port' shortName
Long Parameter List,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,ptuple,The method has 5 parameters. Parameters: fmt' pos' items' argc' args
Long Parameter List,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,plist,The method has 5 parameters. Parameters: fmt' pos' items' argc' args
Long Parameter List,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,pformat,The method has 5 parameters. Parameters: fmt' pos' items' argc' args
Long Statement,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendChallenge,The length of the statement  "                OtpTrace.TraceEvent("-> " + "HANDSHAKE sendChallenge" + " flags=" + flags + " dist=" + dist + " challenge=" + challenge + " local=" + self); " is 140.
Long Statement,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallenge,The length of the statement  "                OtpTrace.TraceEvent("<- " + "HANDSHAKE recvChallenge" + " from=" + peer._node + " challenge=" + challenge + " local=" + self); " is 126.
Long Statement,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendChallengeReply,The length of the statement  "                OtpTrace.TraceEvent("-> " + "HANDSHAKE sendChallengeReply" + " challenge=" + challenge + " digest=" + hex(digest) + " local=" + self); " is 134.
Long Statement,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallengeReply,The length of the statement  "                OtpTrace.TraceEvent("<- " + "HANDSHAKE recvChallengeReply" + " from=" + peer._node + " challenge=" + challenge + " digest=" + hex(her_digest) + " local=" + self); " is 162.
Long Statement,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallengeAck,The length of the statement  "                OtpTrace.TraceEvent("<- " + "HANDSHAKE recvChallengeAck" + " from=" + peer._node + " digest=" + hex(her_digest) + " local=" + self); " is 132.
Long Statement,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The length of the statement  "            return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff)); " is 133.
Long Statement,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_string,The length of the statement  "                    throw new Erlang.Exception("Wrong tag encountered' expected " + OtpExternal.stringTag + " or " + OtpExternal.listTag + "' got " + tag); " is 135.
Long Statement,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write_double,The length of the statement  "            //UPGRADE_TODO: The equivalent in .NETÂ for Class C#.math.BigDecimal.ROUND_HALF_EVEN will be considered in a future release.; " is 124.
Long Statement,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Equals,The length of the statement  "			return ((this._creation == pid._creation) && (this._serial == pid._serial) && (this._id == pid._id) && (_node.CompareTo(pid._node) == 0)); " is 138.
Long Statement,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Equals,The length of the statement  "				return (this._ids[0] == ref_Renamed._ids[0] && this._ids[1] == ref_Renamed._ids[1] && this._ids[2] == ref_Renamed._ids[2]); " is 123.
Virtual Method Call from Constructor,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,AbstractConnection,The constructor "AbstractConnection" calls a virtual method "recvName".
Virtual Method Call from Constructor,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,AbstractConnection,The constructor "AbstractConnection" calls a virtual method "close".
Virtual Method Call from Constructor,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,AbstractConnection,The constructor "AbstractConnection" calls a virtual method "doAccept".
Virtual Method Call from Constructor,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,AbstractConnection,The constructor "AbstractConnection" calls a virtual method "cookie".
Virtual Method Call from Constructor,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,AbstractConnection,The constructor "AbstractConnection" calls a virtual method "doConnect".
Virtual Method Call from Constructor,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The constructor "OtpCookedConnection" calls a virtual method "cookie".
Virtual Method Call from Constructor,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,OtpOutputStream,The constructor "OtpOutputStream" calls a virtual method "write4BE".
Virtual Method Call from Constructor,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,OtpOutputStream,The constructor "OtpOutputStream" calls a virtual method "poke4BE".
Virtual Method Call from Constructor,Otp,OtpSelf,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSelf.cs,OtpSelf,The constructor "OtpSelf" calls a virtual method "createPid".
Virtual Method Call from Constructor,Otp,OtpServer,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpServer.cs,OtpServer,The constructor "OtpServer" calls a virtual method "cookie".
Virtual Method Call from Constructor,Otp.Erlang,Byte,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Byte.cs,Byte,The constructor "Byte" calls a virtual method "byteValue".
Virtual Method Call from Constructor,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Pid,The constructor "Pid" calls a virtual method "createPid".
Virtual Method Call from Constructor,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Pid,The constructor "Pid" calls a virtual method "node".
Virtual Method Call from Constructor,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Pid,The constructor "Pid" calls a virtual method "id".
Virtual Method Call from Constructor,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Pid,The constructor "Pid" calls a virtual method "serial".
Virtual Method Call from Constructor,Otp.Erlang,Pid,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Pid.cs,Pid,The constructor "Pid" calls a virtual method "creation".
Virtual Method Call from Constructor,Otp.Erlang,Port,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Port.cs,Port,The constructor "Port" calls a virtual method "createPort".
Virtual Method Call from Constructor,Otp.Erlang,Port,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Port.cs,Port,The constructor "Port" calls a virtual method "node".
Virtual Method Call from Constructor,Otp.Erlang,Port,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Port.cs,Port,The constructor "Port" calls a virtual method "id".
Virtual Method Call from Constructor,Otp.Erlang,Port,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Port.cs,Port,The constructor "Port" calls a virtual method "creation".
Virtual Method Call from Constructor,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The constructor "Ref" calls a virtual method "createRef".
Virtual Method Call from Constructor,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The constructor "Ref" calls a virtual method "node".
Virtual Method Call from Constructor,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The constructor "Ref" calls a virtual method "creation".
Virtual Method Call from Constructor,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The constructor "Ref" calls a virtual method "ids".
Virtual Method Call from Constructor,Otp.Erlang,UInt,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\UInt.cs,UInt,The constructor "UInt" calls a virtual method "uIntValue".
Virtual Method Call from Constructor,Otp.Erlang,UInt,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\UInt.cs,UInt,The constructor "UInt" calls a virtual method "uIntValue".
Virtual Method Call from Constructor,Otp.Erlang,UShort,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\UShort.cs,UShort,The constructor "UShort" calls a virtual method "uShortValue".
Virtual Method Call from Constructor,Otp.Erlang,UShort,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\UShort.cs,UShort,The constructor "UShort" calls a virtual method "uShortValue".
Empty Catch Block,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The method has an empty catch block.
Empty Catch Block,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,close,The method has an empty catch block.
Empty Catch Block,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,doConnect,The method has an empty catch block.
Empty Catch Block,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,hex,The method has an empty catch block.
Empty Catch Block,Otp,AbstractNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractNode.cs,AbstractNode,The method has an empty catch block.
Empty Catch Block,Otp,GenericQueue,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\GenericQueue.cs,close,The method has an empty catch block.
Empty Catch Block,Otp,GenericQueue,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\GenericQueue.cs,get,The method has an empty catch block.
Empty Catch Block,Otp,GenericQueue,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\GenericQueue.cs,get,The method has an empty catch block.
Empty Catch Block,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,deliver,The method has an empty catch block.
Empty Catch Block,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,deliver,The method has an empty catch block.
Empty Catch Block,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,exit,The method has an empty catch block.
Empty Catch Block,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,exit2,The method has an empty catch block.
Empty Catch Block,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,unlink,The method has an empty catch block.
Empty Catch Block,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,unPublishPort,The method has an empty catch block.
Empty Catch Block,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,unPublishPort,The method has an empty catch block.
Empty Catch Block,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_lookupPort,The method has an empty catch block.
Empty Catch Block,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_lookupPort,The method has an empty catch block.
Empty Catch Block,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,remoteStatus,The method has an empty catch block.
Empty Catch Block,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,localStatus,The method has an empty catch block.
Empty Catch Block,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,connAttempt,The method has an empty catch block.
Empty Catch Block,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,epmdFailedConnAttempt,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,receive,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,send,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,send,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,exit,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,link,The method has an empty catch block.
Empty Catch Block,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,unlink,The method has an empty catch block.
Empty Catch Block,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,ping,The method has an empty catch block.
Empty Catch Block,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,netKernel,The method has an empty catch block.
Empty Catch Block,Otp,Acceptor,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,closeSock,The method has an empty catch block.
Empty Catch Block,Otp,Acceptor,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,closeSock,The method has an empty catch block.
Empty Catch Block,Otp,OtpSelf,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSelf.cs,unPublishPort,The method has an empty catch block.
Empty Catch Block,Otp,OtpSelf,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSelf.cs,accept,The method has an empty catch block.
Empty Catch Block,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The method has an empty catch block.
Empty Catch Block,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The method has an empty catch block.
Empty Catch Block,Otp.Erlang,Binary,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Binary.cs,fromByteArray,The method has an empty catch block.
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendBuf,The following statement contains a magic number: header.write_tuple_head(4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendBuf,The following statement contains a magic number: header.poke4BE(0' header.count() + payload.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendBuf,The following statement contains a magic number: header.write_tuple_head(3);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendBuf,The following statement contains a magic number: header.poke4BE(0' header.count() + payload.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The following statement contains a magic number: header.write_tuple_head(4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The following statement contains a magic number: Erlang.Object[] msg = new Erlang.Object[2];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The following statement contains a magic number: Erlang.Object[] msgbody = new Erlang.Object[3];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The following statement contains a magic number: msgbody[2] = new Erlang.List();
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,cookieError,The following statement contains a magic number: header.poke4BE(0' header.count() + payload.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendLink,The following statement contains a magic number: header.write_tuple_head(3);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendLink,The following statement contains a magic number: header.poke4BE(0' header.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendUnlink,The following statement contains a magic number: header.write_tuple_head(3);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendUnlink,The following statement contains a magic number: header.poke4BE(0' header.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendExit,The following statement contains a magic number: header.write_tuple_head(4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendExit,The following statement contains a magic number: header.poke4BE(0' header.count() - 4);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: byte[] header = new byte[4];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: byte[] payloadBuf = new byte[1024 * 1024];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: byte[] payloadBuf = new byte[1024 * 1024];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The following statement contains a magic number: switch (tag)                      {                          case OtpMsg.Tag.sendTag:                          case OtpMsg.Tag.sendTTTag:                              // { SEND' Cookie' ToPid' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(1) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(1);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(to' ibuf));                              break;                            case OtpMsg.Tag.regSendTag:                          case OtpMsg.Tag.regSendTTTag:                              // { REG_SEND' FromPid' Cookie' ToName' TraceToken }                              if (!cookieOk)                              {                                  // we only check this once' he can send us bad cookies later if he likes                                  if (!(head.elementAt(2) is Erlang.Atom))                                  {                                      goto receive_loop_brk;                                  }                                  cookie = (Erlang.Atom)head.elementAt(2);                                  if (sendCookie)                                  {                                      if (!cookie.atomValue().Equals(auth_cookie))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  else                                  {                                      if (!cookie.atomValue().Equals(""))                                      {                                          cookieError(self' cookie);                                      }                                  }                                  cookieOk = true;                              }                                if (traceLevel >= OtpTrace.Type.sendThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                                    /*show received payload too */                                  long mark = ibuf.Position;                                  traceobj = ibuf.read_any();                                    if (traceobj != null)                                      OtpTrace.TraceEvent("   " + traceobj.ToString());                                  else                                      OtpTrace.TraceEvent("   (null)");                                  ibuf.Seek(mark' System.IO.SeekOrigin.Begin);                              }                                from = (Erlang.Pid)(head.elementAt(1));                              toName = (Erlang.Atom)(head.elementAt(3));                                deliver(new OtpMsg(from' toName.atomValue()' ibuf));                              break;                            case OtpMsg.Tag.exitTag:                          case OtpMsg.Tag.exit2Tag:                              // { EXIT2' FromPid' ToPid' Reason }                              if (!(head.elementAt(3) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(3);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.exitTTTag:                          case OtpMsg.Tag.exit2TTTag:                              // { EXIT2' FromPid' ToPid' TraceToken' Reason }                              // as above' but bifferent element number                              if (!(head.elementAt(4) is Erlang.Atom))                              {                                  goto receive_loop_brk;                              }                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              reason = (Erlang.Atom)head.elementAt(4);                                deliver(new OtpMsg(tag' from' to' reason));                              break;                            case OtpMsg.Tag.linkTag:                          case OtpMsg.Tag.unlinkTag:                              // { UNLINK' FromPid' ToPid}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                                from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                                deliver(new OtpMsg(tag' from' to));                              break;                            // absolutely no idea what to do with these' so we ignore them...                          case OtpMsg.Tag.groupLeaderTag:                          case OtpMsg.Tag.nodeLinkTag:                              // { NODELINK }                              // (just show trace)                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              break;                            case OtpMsg.Tag.monitorPTag:                          // {MONITOR_P' FromPid' ToProc' Ref}                          case OtpMsg.Tag.demonitorPTag:                              // {DEMONITOR_P' FromPid' ToProc' Ref}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                              deliver(new OtpMsg(tag' from' to' eref));                              break;                            case OtpMsg.Tag.monitorPexitTag:                              // {MONITOR_P_EXIT' FromPid' ToProc' Ref' Reason}                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- " + headerType(head) + " " + head.ToString());                              }                              from = (Erlang.Pid)(head.elementAt(1));                              to = (Erlang.Pid)(head.elementAt(2));                              eref = (Erlang.Ref)(head.elementAt(3));                                deliver(new OtpMsg(tag' from' to' eref' reason));                              break;                            default:                              // garbage?                              if (traceLevel >= OtpTrace.Type.ctrlThreshold)                              {                                  OtpTrace.TraceEvent("<- Unknown tag " + headerType(head) + " " + head.ToString());                              }                              goto receive_loop_brk;                      }
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,decodeRPC,The following statement contains a magic number: t.arity() == 2
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,decodeIO,The following statement contains a magic number: Erlang.Tuple data = t[3] as Erlang.Tuple;
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,decodeIO,The following statement contains a magic number: t.arity() == 4
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,do_send,The following statement contains a magic number: Erlang.Object h = (header.getOtpInputStream(5)).read_any();
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,do_send,The following statement contains a magic number: Erlang.Object h = (header.getOtpInputStream(5)).read_any();
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,readSock,The following statement contains a magic number: onReadWrite(this' Operation.Read' got + 4 /* header len */' receivedBytes' receivedMsgs);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,doConnect,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,hex0,The following statement contains a magic number: uint_Renamed |= (1 << 7);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,hex0,The following statement contains a magic number: return "" + tab[SupportClass.URShift(uint_Renamed' 4)] + tab[uint_Renamed & 0xF];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,genDigest,The following statement contains a magic number: ch2 = 1L << 31;
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendName,The following statement contains a magic number: obuf.write2BE(str.Length + 7);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendChallenge,The following statement contains a magic number: obuf.write2BE((short)str.Length + 11);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,read2BytePackage,The following statement contains a magic number: byte[] lbuf = new byte[2];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvName,The following statement contains a magic number: peer._distLow < 5
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvName,The following statement contains a magic number: tmpname = new byte[len - 7];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallenge,The following statement contains a magic number: byte[] tmpname = new byte[buf.Length - 11];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendChallengeReply,The following statement contains a magic number: obuf.write2BE(21);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,digests_equals,The following statement contains a magic number: i < 16
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallengeReply,The following statement contains a magic number: byte[] her_digest = new byte[16];
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,sendChallengeAck,The following statement contains a magic number: obuf.write2BE(17);
Magic Number,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,recvChallengeAck,The following statement contains a magic number: byte[] her_digest = new byte[16];
Magic Number,Otp,Links,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Links.cs,addLink,The following statement contains a magic number: Link[] tmp = new Link[_count * 2];
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.links = new Links(25);
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.links = new Links(25);
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,OtpCookedConnection,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_lookupPort,The following statement contains a magic number: byte[] tmpbuf = new byte[100];
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_lookupPort,The following statement contains a magic number: s.GetStream().Read(tmpbuf' 0' 100);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_lookupPort,The following statement contains a magic number: byte[] tmpbuf = new byte[100];
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_lookupPort,The following statement contains a magic number: int n = s.GetStream().Read(tmpbuf' 0' 100);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_publish,The following statement contains a magic number: obuf.write2BE(node.getAlive().Length + 3);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_publish,The following statement contains a magic number: byte[] tmpbuf = new byte[100];
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r3_publish,The following statement contains a magic number: int n = s.GetStream().Read(tmpbuf' 0' 100);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_publish,The following statement contains a magic number: obuf.write2BE(node.getAlive().Length + 13);
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_publish,The following statement contains a magic number: byte[] tmpbuf = new byte[100];
Magic Number,Otp,OtpEpmd,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpEpmd.cs,r4_publish,The following statement contains a magic number: int n = s.GetStream().Read(tmpbuf' 0' 100);
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,OtpInputStream,The following statement contains a magic number: m_buf2 = new byte[2];
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,OtpInputStream,The following statement contains a magic number: m_buf4 = new byte[4];
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,OtpInputStream,The following statement contains a magic number: m_buf8 = new byte[8];
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,peek,The following statement contains a magic number: i += 256;
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read2BE,The following statement contains a magic number: return ((((int)m_buf2[0] << 8) & 0xff00) + (((int)m_buf2[1]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: System.Diagnostics.Debug.Assert(b.Length == 4);
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4BE,The following statement contains a magic number: return (int)((((int)b[0] << 24) & 0xff000000) + (((int)b[1] << 16) & 0xff0000) + (((int)b[2] << 8) & 0xff00) + (((int)b[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i1 = (System.UInt64)((((int)m_buf8[0] << 24) & 0xff000000)                               + (((int)m_buf8[1] << 16) & 0xff0000)                               + (((int)m_buf8[2] << 8) & 0xff00)                               + (((int)m_buf8[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i1 = (System.UInt64)((((int)m_buf8[0] << 24) & 0xff000000)                               + (((int)m_buf8[1] << 16) & 0xff0000)                               + (((int)m_buf8[2] << 8) & 0xff00)                               + (((int)m_buf8[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i1 = (System.UInt64)((((int)m_buf8[0] << 24) & 0xff000000)                               + (((int)m_buf8[1] << 16) & 0xff0000)                               + (((int)m_buf8[2] << 8) & 0xff00)                               + (((int)m_buf8[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i1 = (System.UInt64)((((int)m_buf8[0] << 24) & 0xff000000)                               + (((int)m_buf8[1] << 16) & 0xff0000)                               + (((int)m_buf8[2] << 8) & 0xff00)                               + (((int)m_buf8[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i1 = (System.UInt64)((((int)m_buf8[0] << 24) & 0xff000000)                               + (((int)m_buf8[1] << 16) & 0xff0000)                               + (((int)m_buf8[2] << 8) & 0xff00)                               + (((int)m_buf8[3]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read8BE,The following statement contains a magic number: System.UInt64 i2 = (i1 << 32) & 0xffffffff00000000                               + (System.UInt64)((((int)m_buf8[4] << 24) & 0xff000000)                               + (((int)m_buf8[5] << 16) & 0xff0000)                               + (((int)m_buf8[6] << 8) & 0xff00)                               + (((int)m_buf8[7]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read2LE,The following statement contains a magic number: return ((((int)m_buf2[1] << 8) & 0xff00) + (((int)m_buf2[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4LE,The following statement contains a magic number: return (int)((((int)m_buf4[3] << 24) & 0xff000000) + (((int)m_buf4[2] << 16) & 0xff0000)                  + (((int)m_buf4[1] << 8) & 0xff00) + (((int)m_buf4[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4LE,The following statement contains a magic number: return (int)((((int)m_buf4[3] << 24) & 0xff000000) + (((int)m_buf4[2] << 16) & 0xff0000)                  + (((int)m_buf4[1] << 8) & 0xff00) + (((int)m_buf4[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4LE,The following statement contains a magic number: return (int)((((int)m_buf4[3] << 24) & 0xff000000) + (((int)m_buf4[2] << 16) & 0xff0000)                  + (((int)m_buf4[1] << 8) & 0xff00) + (((int)m_buf4[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4LE,The following statement contains a magic number: return (int)((((int)m_buf4[3] << 24) & 0xff000000) + (((int)m_buf4[2] << 16) & 0xff0000)                  + (((int)m_buf4[1] << 8) & 0xff00) + (((int)m_buf4[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read4LE,The following statement contains a magic number: return (int)((((int)m_buf4[3] << 24) & 0xff000000) + (((int)m_buf4[2] << 16) & 0xff0000)                  + (((int)m_buf4[1] << 8) & 0xff00) + (((int)m_buf4[0]) & 0xff));
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_float,The following statement contains a magic number: System.Math.Abs(d - f) >= 1.0E-20
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,getFloatOrDouble,The following statement contains a magic number: strbuf = new byte[31];
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_long,The following statement contains a magic number: switch (tag)              {                  case OtpExternal.smallIntTag:                      val = this.read1();                      break;                  case OtpExternal.intTag:                      val = this.read4BE();                      break;                  case OtpExternal.smallBigTag:                      {                          arity = this.read1();                          sign = this.read1();                            byte[] nb = new byte[arity];                          if (arity != this.readN(nb))                          {                              throw new Erlang.Exception("Cannot read from input stream. Expected smallBigTag arity " + arity);                          }                          if (arity > 8)                              throw new Erlang.Exception("Value too large for long type (arity=" + arity + ")");                            val = 0;                          for (int i = 0; i < arity; i++)                          {                              val |= (long)nb[i] << (i * 8);                          }                            val = (sign == 0 ? val : -val); // should deal with overflow                            if (sign == 1 && !signed)                              throw new Erlang.Exception("Requested unsigned' but read signed long value: " + val.ToString());                            break;                      }                  case OtpExternal.largeBigTag:                  default:                      throw new Erlang.Exception("Not valid integer tag: " + tag);              }
Magic Number,Otp,OtpInputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpInputStream.cs,read_long,The following statement contains a magic number: switch (tag)              {                  case OtpExternal.smallIntTag:                      val = this.read1();                      break;                  case OtpExternal.intTag:                      val = this.read4BE();                      break;                  case OtpExternal.smallBigTag:                      {                          arity = this.read1();                          sign = this.read1();                            byte[] nb = new byte[arity];                          if (arity != this.readN(nb))                          {                              throw new Erlang.Exception("Cannot read from input stream. Expected smallBigTag arity " + arity);                          }                          if (arity > 8)                              throw new Erlang.Exception("Value too large for long type (arity=" + arity + ")");                            val = 0;                          for (int i = 0; i < arity; i++)                          {                              val |= (long)nb[i] << (i * 8);                          }                            val = (sign == 0 ? val : -val); // should deal with overflow                            if (sign == 1 && !signed)                              throw new Erlang.Exception("Requested unsigned' but read signed long value: " + val.ToString());                            break;                      }                  case OtpExternal.largeBigTag:                  default:                      throw new Erlang.Exception("Not valid integer tag: " + tag);              }
Magic Number,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,init,The following statement contains a magic number: refId = new int[3];
Magic Number,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,init,The following statement contains a magic number: refId[2] = 0;
Magic Number,Otp,OtpLocalNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpLocalNode.cs,createRef,The following statement contains a magic number: refId[2]++;
Magic Number,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,OtpMbox,The following statement contains a magic number: this.links = new Links(10);
Magic Number,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,OtpMbox,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,OtpMbox,The following statement contains a magic number: this.monitors = new System.Collections.Hashtable(49' (float)0.95);
Magic Number,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,exit,The following statement contains a magic number: exit(2' to' reason);
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,init,The following statement contains a magic number: connections = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,init,The following statement contains a magic number: connections = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,getPingTuple,The following statement contains a magic number: Erlang.Object[] ping = new Erlang.Object[3];
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,getPingTuple,The following statement contains a magic number: Erlang.Object[] pid = new Erlang.Object[2];
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,getPingTuple,The following statement contains a magic number: Erlang.Object[] _node = new Erlang.Object[2];
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,getPingTuple,The following statement contains a magic number: ping[2] = new Erlang.Tuple(_node);
Magic Number,Otp,OtpNode,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,netKernel,The following statement contains a magic number: Erlang.Object[] pong = new Erlang.Object[2];
Magic Number,Otp,Mailboxes,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,Mailboxes,The following statement contains a magic number: byPid = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,Mailboxes,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,Mailboxes,The following statement contains a magic number: byPid = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,Mailboxes,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,Mailboxes,The following statement contains a magic number: byName = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,Mailboxes,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpNode.cs,Mailboxes,The following statement contains a magic number: byName = new System.Collections.Hashtable(17' (float) 0.95);
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,OtpOutputStream,The following statement contains a magic number: poke4BE(0' this._count - 4);
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write2BE,The following statement contains a magic number: write((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4BE,The following statement contains a magic number: write((byte) ((n & 0xff000000) >> 24));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4BE,The following statement contains a magic number: write((byte) ((n & 0xff0000) >> 16));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4BE,The following statement contains a magic number: write((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write2LE,The following statement contains a magic number: write((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4LE,The following statement contains a magic number: write((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4LE,The following statement contains a magic number: write((byte) ((n & 0xff0000) >> 16));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write4LE,The following statement contains a magic number: write((byte) ((n & 0xff000000) >> 24));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,poke4BE,The following statement contains a magic number: buf[offset + 0] = ((byte) ((n & 0xff000000) >> 24));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,poke4BE,The following statement contains a magic number: buf[offset + 1] = ((byte) ((n & 0xff0000) >> 16));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,poke4BE,The following statement contains a magic number: buf[offset + 2] = ((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,poke4BE,The following statement contains a magic number: buf[offset + 2] = ((byte) ((n & 0xff00) >> 8));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,poke4BE,The following statement contains a magic number: buf[offset + 3] = ((byte) (n & 0xff));
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,encode_size,The following statement contains a magic number: return 1 + 2 + o.atomValue().Length;
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,long_arity,The following statement contains a magic number: int sz = 3;
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,long_arity,The following statement contains a magic number: v >>= 8;
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write_ref,The following statement contains a magic number: arity = 3;
Magic Number,Otp,OtpOutputStream,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpOutputStream.cs,write_ref,The following statement contains a magic number: arity > 3
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,OtpSystem,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpSystem.cs,useExtendedPidsPorts,The following statement contains a magic number: switch (Convert.ToInt32(rel))                  {                      case 1:                      case 2:                      case 3:                      case 4:                      case 5:                      case 6:                      case 7:                      case 8:                      case 9:                          xpidsports = false;                          break;                      case 0:                      default:                          break;                  }
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: ok = node.ping(remote' 1000);
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: Erlang.Object[] rpc = new Erlang.Object[2];
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: Erlang.Object[] call = new Erlang.Object[5];
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: call[2] = new Erlang.Atom("reverse");
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: call[3] = new Erlang.List(new Erlang.List("Hello Erlang world!"));
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: call[4] = mbox.self();
Magic Number,Otp,Test,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Test.cs,Main,The following statement contains a magic number: Erlang.Object reply = mbox.receive(1000);
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Atom,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Atom.cs,escapeSpecialChars,The following statement contains a magic number: switch (c)  				{  					case '\b':   						so.Append("\\b");  						break;    					case (char) (127):  						so.Append("\\d");  						break;    					case (char) (27):  						so.Append("\\e");  						break;    					case '\f':  						so.Append("\\f");  						break;    					case '\n':  						so.Append("\\n");  						break;    					case '\r':  						so.Append("\\r");  						break;    					case '\t':  						so.Append("\\t");  						break;    					case (char) (11):  						so.Append("\\v");  						break;    					case '\\':  						so.Append("\\\\");  						break;    					case '\'':  						so.Append("\\'");  						break;    					case '\"':  						so.Append("\\\"");  						break;    					default:  						// some other character classes  						if (c < 23)  						{  							// control chars show as "\^@"' "\^A" etc  							so.Append("\\^" + (char) (('A' - 1) + c));  						}  						else if (c > 126)  						{  							// 8-bit chars show as \345 \344 \366 etc  							so.Append("\\" + System.Convert.ToString(c' 8));  						}  						else  						{  							// character is printable without modification!  							so.Append(c);  						}  						break;    				}
Magic Number,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,pvariable,The following statement contains a magic number: i = pos + 2;
Magic Number,Otp.Erlang,Formatter,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Format.cs,pvariable,The following statement contains a magic number: pos = i + 2;
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The following statement contains a magic number: this._ids = new int[3];
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The following statement contains a magic number: this._ids[2] = 0;
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The following statement contains a magic number: len = 3;
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Ref,The following statement contains a magic number: len > 3
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Equals,The following statement contains a magic number: return (this._ids[0] == ref_Renamed._ids[0] && this._ids[1] == ref_Renamed._ids[1] && this._ids[2] == ref_Renamed._ids[2]);
Magic Number,Otp.Erlang,Ref,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\Ref.cs,Equals,The following statement contains a magic number: return (this._ids[0] == ref_Renamed._ids[0] && this._ids[1] == ref_Renamed._ids[1] && this._ids[2] == ref_Renamed._ids[2]);
Magic Number,Otp.Erlang,VarBind,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\Erlang\VarBind.cs,VarBind,The following statement contains a magic number: this.m_dict = new Dictionary<string' Erlang.Object>(23);
Duplicate Code,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,Start,The method contains a code clone-set at the following line numbers (starting from the method definition): ((99' 130)' (147' 178))
Missing Default,Otp,AbstractConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\AbstractConnection.cs,headerType,The following switch statement is missing a default case: switch (tag)              {                  case OtpMsg.Tag.linkTag:                      return "LINK";                    case OtpMsg.Tag.sendTag:                      return "SEND";                    case OtpMsg.Tag.exitTag:                      return "EXIT";                    case OtpMsg.Tag.unlinkTag:                      return "UNLINK";                    case OtpMsg.Tag.nodeLinkTag:                      return "NODELINK";                    case OtpMsg.Tag.regSendTag:                      return "REG_SEND";                    case OtpMsg.Tag.groupLeaderTag:                      return "GROUP_LEADER";                    case OtpMsg.Tag.exit2Tag:                      return "EXIT2";                    case OtpMsg.Tag.sendTTTag:                      return "SEND_TT";                    case OtpMsg.Tag.exitTTTag:                      return "EXIT_TT";                    case OtpMsg.Tag.regSendTTTag:                      return "REG_SEND_TT";                    case OtpMsg.Tag.exit2TTTag:                      return "EXIT2_TT";                    case OtpMsg.Tag.monitorPTag:                      return "MONITOR_P";                    case OtpMsg.Tag.demonitorPTag:                      return "DEMONITOR_P";                    case OtpMsg.Tag.monitorPexitTag:                      return "MONITOR_P_EXIT";              }
Missing Default,Otp,OtpCookedConnection,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpCookedConnection.cs,deliver,The following switch statement is missing a default case: switch (msg.type())  			{  				case OtpMsg.Tag.linkTag:  					if (delivered)  					{  						links.addLink(msg.getRecipientPid()' msg.getSenderPid());  					}  					else  						try  						{  							// no such pid - send exit to sender  							base.sendExit(msg.getRecipientPid()' msg.getSenderPid()' "noproc");  						}  						catch (System.IO.IOException)  						{  						}  					break;                    case OtpMsg.Tag.monitorPTag:                      if (delivered)                          monitors[msg.getSenderPid()] = msg.getMsg();                      else                          try                          {                              base.sendExit(msg.getRecipientPid()' msg.getSenderPid()' "noproc");                          }                          catch (System.IO.IOException)                          {                          }                      break;                    case OtpMsg.Tag.demonitorPTag:                  case OtpMsg.Tag.monitorPexitTag:                      monitors.Remove(msg.getSenderPid());                      break;                    case OtpMsg.Tag.unlinkTag:                  case OtpMsg.Tag.exitTag:  					links.removeLink(msg.getRecipientPid()' msg.getSenderPid());  					break;                    case OtpMsg.Tag.exit2Tag:  					break;  			}
Missing Default,Otp,OtpMbox,D:\research\architectureSmells\repos1\saleyn_otp.net\Otp\OtpMbox.cs,exit,The following switch statement is missing a default case: switch (arity)  					{  						case 1:   							conn.exit(_self' to' reason);  							break;  						  						case 2:   							conn.exit2(_self' to' reason);  							break;  						  					}
