Implementation smell,Namespace,Class,File,Method,Description
Long Method,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The method has 105 lines of code.
Long Method,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The method has 113 lines of code.
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Pid pid = new Erlang.Pid("abc"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Pid pid = new Erlang.Pid("abc"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Port p = new Erlang.Port("abc"' 1' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Ref p = new Erlang.Ref("abc"' new int[3] { 1' 2' 3 }' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Ref p = new Erlang.Ref("abc"' new int[3] { 1' 2' 3 }' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Ref p = new Erlang.Ref("abc"' new int[3] { 1' 2' 3 }' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestEncodeDecode,The following statement contains a magic number: Erlang.Ref p = new Erlang.Ref("abc"' new int[3] { 1' 2' 3 }' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.AreEqual(3' binding.Count);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.AreEqual(10' binding["A"].longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.IsTrue(binding.find("E").Cast<Erlang.Tuple>().arity() == 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Object obj = Erlang.Object.Format(exp' (int)3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.AreEqual(3' binding.find("T").intValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Object obj = Erlang.Object.Format(exp' (long)100);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.AreEqual(100' binding.find("T").longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Object obj = Erlang.Object.Format(exp' 100.0);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Assert.AreEqual(100.0' binding.find("T").doubleValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Pid pid = new Erlang.Pid("tmp"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Pid pid = new Erlang.Pid("tmp"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Ref reference = new Erlang.Ref("tmp"' 1' 2);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.List obj = new Erlang.List(new Erlang.Int(10)' new Erlang.Double(30.0)'                      new Erlang.String("abc")' new Erlang.Atom("a")'                      new Erlang.Binary(new byte[] { 1' 2' 3 })' false' new Erlang.Boolean(true));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.List obj = new Erlang.List(new Erlang.Int(10)' new Erlang.Double(30.0)'                      new Erlang.String("abc")' new Erlang.Atom("a")'                      new Erlang.Binary(new byte[] { 1' 2' 3 })' false' new Erlang.Boolean(true));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.List obj = new Erlang.List(new Erlang.Int(10)' new Erlang.Double(30.0)'                      new Erlang.String("abc")' new Erlang.Atom("a")'                      new Erlang.Binary(new byte[] { 1' 2' 3 })' false' new Erlang.Boolean(true));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.List obj = new Erlang.List(new Erlang.Int(10)' new Erlang.Double(30.0)'                      new Erlang.String("abc")' new Erlang.Atom("a")'                      new Erlang.Binary(new byte[] { 1' 2' 3 })' false' new Erlang.Boolean(true));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Object expected = Erlang.Object.Format("[10' 30.0' \"abc\"' 'a'' ~w' \'false\'' true]"'                      new Erlang.Binary(new byte[] { 1' 2' 3 }));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestPatternMatch,The following statement contains a magic number: Erlang.Object expected = Erlang.Object.Format("[10' 30.0' \"abc\"' 'a'' ~w' \'false\'' true]"'                      new Erlang.Binary(new byte[] { 1' 2' 3 }));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(4' t.arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(true' t[2].boolValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(false't[3].boolValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(1.23' (obj1 as Erlang.Double).doubleValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(2' (obj1 as Erlang.List).arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(2' ((obj1 as Erlang.List)[0] as Erlang.Tuple).arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(3' (obj1 as Erlang.Tuple).arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Erlang.Object obj2 = Erlang.Object.Format("{~w' ~w'~w}"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Erlang.Object obj2 = Erlang.Object.Format("{~w' ~w'~w}"' 1' 2' 3);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(3' (obj2 as Erlang.Tuple).arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(2' ((obj2 as Erlang.Tuple)[1] as Erlang.Long).longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.IsInstanceOf(typeof(Erlang.Long)' (obj2 as Erlang.Tuple)[2]);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(3' ((obj2 as Erlang.Tuple)[2] as Erlang.Long).longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(3' ((obj2 as Erlang.Tuple)[2] as Erlang.Long).longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Erlang.Object obj2 = Erlang.Object.Format("{~w' ~w'~w'~w' ~w}"' 1.0' 'a'' "abc"' 2' true);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(5' (obj2 as Erlang.Tuple).arity());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.IsInstanceOf(typeof(Erlang.String)' (obj2 as Erlang.Tuple)[2]);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual("abc"' ((obj2 as Erlang.Tuple)[2] as Erlang.String).stringValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.IsInstanceOf(typeof(Erlang.Long)' (obj2 as Erlang.Tuple)[3]);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(2' ((obj2 as Erlang.Tuple)[3] as Erlang.Long).longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(2' ((obj2 as Erlang.Tuple)[3] as Erlang.Long).longValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.IsInstanceOf(typeof(Erlang.Boolean)' (obj2 as Erlang.Tuple)[4]);
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestFormat,The following statement contains a magic number: Assert.AreEqual(true' ((obj2 as Erlang.Tuple)[4] as Erlang.Boolean).booleanValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,TestMatchVariable,The following statement contains a magic number: var cases = new KeyValueList<string' Erlang.Object> {                  { "B"'              new Erlang.Int(1) }'                  { "B"'              new Erlang.Atom("abc") }'                  { "B"'              new Erlang.String("efg") }'                  { "B"'              new Erlang.Double(10.0) }'                  { "B::int()"'       new Erlang.Int(10) }'                  { "B::integer()"'   new Erlang.Int(20) }'                  { "B::string()"'    new Erlang.String("xxx") }'                  { "B::atom()"'      new Erlang.Atom("xyz") }'                  { "B::float()"'     new Erlang.Double(5.0) }'                  { "B::double()"'    new Erlang.Double(3.0) }'                  { "B::binary()"'    new Erlang.Binary(new byte[] {1'2'3}) }'                  { "B::bool()"'      new Erlang.Boolean(true) }'                  { "B::boolean()"'   new Erlang.Boolean(false) }'                  { "B::byte()"'      new Erlang.Byte(1) }'                  { "B::char()"'      new Erlang.Char('a') }'                  { "B::list()"'      new Erlang.List(1' 2' 3) }'                  { "B::tuple()"'     new Erlang.Tuple(new Erlang.Char('a')' 1' "aaa") }'                  { "B::pid()"'       new Erlang.Pid("xxx"' 1' 2' 3) }'                  { "B::ref()"'       new Erlang.Ref("xxx"' 1' 3) }'                  { "B::reference()"' new Erlang.Ref("xxx"' 1' 3) }'                  { "B::port()"'      new Erlang.Port("xxx"' 1' 3) }              };
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(10' state.Value["A"].intValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(2'  pm.Match(Erlang.Object.Format("{11' status}")));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(11' state.Value["A"].intValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(3'  pm.Match(Erlang.Object.Format("{12' {status' ~w}}"' new Erlang.Atom("a"))));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(12' state.Value["A"].intValue());
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(4'  pm.Match(Erlang.Object.Format("{13' {config' ~w}}"' new Erlang.List())));
Magic Number,Otp,UnitTest1,D:\research\architectureSmells\repos1\saleyn_otp.net\UnitTest\UnitTest.cs,PatternMatchCollectionTest,The following statement contains a magic number: Assert.AreEqual(13' state.Value["A"].intValue());
