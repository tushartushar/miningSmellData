Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR,GenericDelegates<T;TResult;T1;T2;T3>,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ThenWithArgs,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Statement,Microsoft.AspNet.SignalR.Stress.Performance,RedisMessageBusRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\RedisMessageBusRun.cs,CreateMessageBus,The length of the statement  "            var configuration = new RedisScaleoutConfiguration(RunData.RedisServer' RunData.RedisPort' RunData.RedisPassword' "Stress"); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,Send,The length of the statement  "            return Host.Post("http://foo/" + Endpoint + "/send?transport=" + RunData.Transport + "&connectionToken=" + senderIndex.ToString()' postData); " is 141.
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,ProcessRequest,The length of the statement  "            return Host.Get("http://foo/" + Endpoint + "/connect?transport=" + RunData.Transport + "&connectionToken=" + connectionToken + "&disableResponseBody=true"); " is 156.
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,Abort,The length of the statement  "            return Host.Post("http://foo/" + Endpoint + "/abort?transport=" + RunData.Transport + "&connectionToken=" + connectionToken' data: null); " is 137.
Long Statement,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The length of the statement  "                    Console.WriteLine("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join("'"' countDown.Left.Select(i => i.ToString()))); " is 163.
Magic Number,Microsoft.AspNet.SignalR.Stress,ConnectionRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\ConnectionRun.cs,CreateReceiver,The following statement contains a magic number: return _transportConnection.Receive(messageId: null'                                                  callback: (_' __) => TaskAsyncHelper.True'                                                  maxMessages: 10'                                                  state: null);
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads(32' 32);
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads(32' 32);
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Run,The following statement contains a magic number: Thread.Sleep(Warmup * 1000);
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Dispose,The following statement contains a magic number: if (!_disposed)              {                  if (disposing)                  {                      CancellationTokenSource.Cancel();                        // Wait for all senders to stop                      _countDown.Wait(TimeSpan.FromMilliseconds(1000 * Senders));                        _receivers.ForEach(s => s.Dispose());                        _receivers.Clear();                  }                    _disposed = true;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: double median = values[values.Length / 2];
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0)              {                  median = (median + values[(values.Length / 2) - 1]) / 2;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0)              {                  median = (median + values[(values.Length / 2) - 1]) / 2;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0)              {                  median = (median + values[(values.Length / 2) - 1]) / 2;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (average > 0)              {                  var sumOfSquares = values.Sum(i => Math.Pow(i - average' 2.0));                  stdDevP = Math.Sqrt(sumOfSquares / values.Length) / average * 100;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (average > 0)              {                  var sumOfSquares = values.Sum(i => Math.Pow(i - average' 2.0));                  stdDevP = Math.Sqrt(sumOfSquares / values.Length) / average * 100;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: host.Configure(app =>              {                  var config = new HubConfiguration()                  {                      Resolver = new DefaultDependencyResolver()                  };                    app.MapSignalR(config);                    var configuration = config.Resolver.Resolve<IConfigurationManager>();                  // The below effectively sets the heartbeat interval to five seconds.                  configuration.KeepAlive = TimeSpan.FromSeconds(10);              });
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: try              {                  connection.Start(new Client.Transports.LongPollingTransport(host)).Wait();                    proxy.Invoke("Join"' "foo").Wait();                    for (int i = 0; i < max; i++)                  {                      proxy.Invoke("Send"' "foo"' i).Wait();                  }                    proxy.Invoke("Leave"' "foo").Wait();                    for (int i = max + 1; i < max + 50; i++)                  {                      proxy.Invoke("Send"' "foo"' i).Wait();                  }                    if (!countDown.Wait(TimeSpan.FromSeconds(10)))                  {                      Console.WriteLine("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join("'"' countDown.Left.Select(i => i.ToString())));                      Debugger.Break();                  }              }              finally              {                  connection.Stop();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: try              {                  connection.Start(new Client.Transports.LongPollingTransport(host)).Wait();                    proxy.Invoke("Join"' "foo").Wait();                    for (int i = 0; i < max; i++)                  {                      proxy.Invoke("Send"' "foo"' i).Wait();                  }                    proxy.Invoke("Leave"' "foo").Wait();                    for (int i = max + 1; i < max + 50; i++)                  {                      proxy.Invoke("Send"' "foo"' i).Wait();                  }                    if (!countDown.Wait(TimeSpan.FromSeconds(10)))                  {                      Console.WriteLine("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join("'"' countDown.Left.Select(i => i.ToString())));                      Debugger.Break();                  }              }              finally              {                  connection.Stop();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: host.Configure(app =>              {                  var config = new HubConfiguration()                  {                      Resolver = new DefaultDependencyResolver()                  };                    app.MapSignalR(config);                    var configuration = config.Resolver.Resolve<IConfigurationManager>();                  // The below effectively sets the heartbeat interval to five seconds.                  configuration.KeepAlive = TimeSpan.FromSeconds(10);                    var connectionManager = config.Resolver.Resolve<IConnectionManager>();                  context = connectionManager.GetHubContext("SimpleEchoHub");              });
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: try              {                  connection.Start(host).Wait();                    Thread.Sleep(1000);              }              finally              {                  connection.Stop();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunConnectDisconnect,The following statement contains a magic number: for (int i = 0; i < connections; i++)              {                  var connection = new HubConnection("http://foo");                  var proxy = connection.CreateHubProxy("SimpleEchoHub");                  var wh = new ManualResetEventSlim(false);                    proxy.On("echo"' _ => wh.Set());                    try                  {                      connection.Start(client).Wait();                        proxy.Invoke("Echo"' "foo").Wait();                        if (!wh.Wait(TimeSpan.FromSeconds(10)))                      {                          Debugger.Break();                      }                  }                  finally                  {                      connection.Stop();                  }              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,Scaleout,The following statement contains a magic number: for (var i = 0; i < nodes; ++i)              {                  var host = new MemoryHost();                    host.Configure(app =>                  {                      var config = new HubConfiguration()                      {                          Resolver = new DefaultDependencyResolver()                      };                        var delay = i % 2 == 0 ? TimeSpan.Zero : TimeSpan.FromSeconds(1);                      var bus = new DelayedMessageBus(host.InstanceName' eventBus' config.Resolver' delay);                      config.Resolver.Register(typeof(IMessageBus)' () => bus);                        app.MapSignalR(config);                        config.Resolver.Register(typeof(IProtectedData)' () => protectedData);                  });                    hosts[i] = host;              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,SendLoop,The following statement contains a magic number: try              {                  connection.Start(new Client.Transports.LongPollingTransport(host)).Wait();                    while (true)                  {                      proxy.Invoke("Echo"' "foo").Wait();                        if (!wh.Wait(TimeSpan.FromSeconds(10)))                      {                          Debugger.Break();                      }                        wh.Reset();                  }              }              catch              {                  connection.Stop();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: connection.Reconnected += () =>              {                  connection.Send(new { type = 3' group = "test"' message = "Reconnected" }).Wait();              };
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: if (!wh.Wait(TimeSpan.FromSeconds(10)))              {                  Debugger.Break();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BroadcastFive,The following statement contains a magic number: try              {                  for (int i = 0; i < 5; i++)                  {                      var payload = new                      {                          type = MessageType.Broadcast'                          value = "message " + i.ToString()                      };                        connection.Send(payload).Wait();                  }                }              catch (Exception ex)              {                  Console.Error.WriteLine("========ERROR==========");                  Console.Error.WriteLine(ex.GetBaseException().ToString());                  Console.Error.WriteLine("=======================");              }              finally              {                  connection.Stop();              }
Magic Number,Microsoft.AspNet.SignalR.Stress,MyGroupConnection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,OnReceived,The following statement contains a magic number: if (type == 1)                  {                      return Groups.Add(connectionId' group);                  }                  else if (type == 2)                  {                      return Groups.Remove(connectionId' group);                  }                  else if (type == 3)                  {                      return Groups.Send(group' operation.Value<string>("message"));                  }
Magic Number,Microsoft.AspNet.SignalR.Stress,MyGroupConnection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,OnReceived,The following statement contains a magic number: if (type == 1)                  {                      return Groups.Add(connectionId' group);                  }                  else if (type == 2)                  {                      return Groups.Remove(connectionId' group);                  }                  else if (type == 3)                  {                      return Groups.Send(group' operation.Value<string>("message"));                  }
Magic Number,Microsoft.AspNet.SignalR.Stress.Infrastructure,Utility,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Infrastructure\Utility.cs,FormatBytes,The following statement contains a magic number: const int scale = 1024;
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,ConcurrentCallsRun,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\ConcurrentCallsRun.cs,InvokeAndWait,The following statement contains a magic number: return mre.WaitOne(TimeSpan.FromSeconds(180));
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,StressRunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRunBase.cs,Run,The following statement contains a magic number: Thread.Sleep(RunData.Duration*1000);
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,StressRunBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRunBase.cs,Dispose,The following statement contains a magic number: if (!_disposed)              {                  if (disposing)                  {                      CancellationTokenSource.Cancel();                        // Wait for all senders to stop                      _countDown.Wait(TimeSpan.FromMilliseconds(1000 * RunData.Senders));                        _receivers.ForEach(s => s.Dispose());                        _receivers.Clear();                  }                    _disposed = true;              }
