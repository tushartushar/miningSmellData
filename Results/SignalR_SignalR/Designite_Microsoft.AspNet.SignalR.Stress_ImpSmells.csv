Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Record,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR,GenericDelegates<T;TResult;T1;T2;T3>,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ThenWithArgs,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,Send,The length of the statement  "            return Host.Post("http://foo/" + Endpoint + "/send?transport=" + RunData.Transport + "&connectionToken=" + senderIndex.ToString()' postData); " is 141.
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,ProcessRequest,The length of the statement  "            return Host.Get("http://foo/" + Endpoint + "/connect?transport=" + RunData.Transport + "&connectionToken=" + connectionToken + "&disableResponseBody=true"); " is 156.
Long Statement,Microsoft.AspNet.SignalR.Stress,SendReceiveRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\SendReceiveRun.cs,Abort,The length of the statement  "            return Host.Post("http://foo/" + Endpoint + "/abort?transport=" + RunData.Transport + "&connectionToken=" + connectionToken' data: null); " is 137.
Long Statement,Microsoft.AspNet.SignalR.Stress.Performance,RedisMessageBusRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\RedisMessageBusRun.cs,CreateMessageBus,The length of the statement  "            var configuration = new RedisScaleoutConfiguration(RunData.RedisServer' RunData.RedisPort' RunData.RedisPassword' "Stress"); " is 124.
Long Statement,Microsoft.AspNet.SignalR,TaskAsyncHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Delay,The length of the statement  "            var timer = new Timer((state) => ((TaskCompletionSource<object>)state).TrySetResult(null)' tcs' timeOut' TimeSpan.FromMilliseconds(-1)); " is 136.
Magic Number,Microsoft.AspNet.SignalR.Stress.Infrastructure,Utility,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Infrastructure\Utility.cs,FormatBytes,The following statement contains a magic number: const int scale = 1024;
Magic Number,Microsoft.AspNet.SignalR.Stress,ConnectionRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Performance\ConnectionRun.cs,CreateReceiver,The following statement contains a magic number: return _transportConnection.Receive(messageId: null'                                                  callback: (_' __) => TaskAsyncHelper.True'                                                  maxMessages: 10'                                                  state: null);
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads(32' 32);
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads(32' 32);
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Run,The following statement contains a magic number: Thread.Sleep(Warmup * 1000);
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Dispose,The following statement contains a magic number: _countDown.Wait(TimeSpan.FromMilliseconds(1000 * Senders));
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: double median = values[values.Length / 2];
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: median = (median + values[(values.Length / 2) - 1]) / 2;
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: median = (median + values[(values.Length / 2) - 1]) / 2;
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: values.Length % 2 == 0
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: var sumOfSquares = values.Sum(i => Math.Pow(i - average' 2.0));
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: stdDevP = Math.Sqrt(sumOfSquares / values.Length) / average * 100;
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: host.Configure(app =>              {                  var config = new HubConfiguration()                  {                      Resolver = new DefaultDependencyResolver()                  };                    app.MapSignalR(config);                    var configuration = config.Resolver.Resolve<IConfigurationManager>();                  // The below effectively sets the heartbeat interval to five seconds.                  configuration.KeepAlive = TimeSpan.FromSeconds(10);              });
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: i < max + 50
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: host.Configure(app =>              {                  var config = new HubConfiguration()                  {                      Resolver = new DefaultDependencyResolver()                  };                    app.MapSignalR(config);                    var configuration = config.Resolver.Resolve<IConfigurationManager>();                  // The below effectively sets the heartbeat interval to five seconds.                  configuration.KeepAlive = TimeSpan.FromSeconds(10);                    var connectionManager = config.Resolver.Resolve<IConnectionManager>();                  context = connectionManager.GetHubContext("SimpleEchoHub");              });
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunConnectDisconnect,The following statement contains a magic number: !wh.Wait(TimeSpan.FromSeconds(10))
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,Scaleout,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration()                      {                          Resolver = new DefaultDependencyResolver()                      };                        var delay = i % 2 == 0 ? TimeSpan.Zero : TimeSpan.FromSeconds(1);                      var bus = new DelayedMessageBus(host.InstanceName' eventBus' config.Resolver' delay);                      config.Resolver.Register(typeof(IMessageBus)' () => bus);                        app.MapSignalR(config);                        config.Resolver.Register(typeof(IProtectedData)' () => protectedData);                  });
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,SendLoop,The following statement contains a magic number: !wh.Wait(TimeSpan.FromSeconds(10))
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: connection.Reconnected += () =>              {                  connection.Send(new { type = 3' group = "test"' message = "Reconnected" }).Wait();              };
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: !wh.Wait(TimeSpan.FromSeconds(10))
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BroadcastFive,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,ConcurrentCallsRun,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\ConcurrentCallsRun.cs,InvokeAndWait,The following statement contains a magic number: return mre.WaitOne(TimeSpan.FromSeconds(180));
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,StressRunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRunBase.cs,Run,The following statement contains a magic number: Thread.Sleep(RunData.Duration*1000);
Magic Number,Microsoft.AspNet.SignalR.Stress.Stress,StressRunBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRunBase.cs,Dispose,The following statement contains a magic number: _countDown.Wait(TimeSpan.FromMilliseconds(1000 * RunData.Senders));
