Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,RegisterSignalREndpoints,The method has 216 lines of code.
Complex Method,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Configuration,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,CommonCommandLine,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\CommonCommandLine.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,TracingTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TracingTestHost.cs,Initialize,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,ExternalTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ExternalTestHost.cs,Initialize,The method has 7 parameters. Parameters: keepAlive' connectionTimeout' disconnectTimeout' transportConnectTimeout' maxIncomingWebSocketMessageSize' enableAutoRejoiningGroups' type
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,ITestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ITestHost.cs,Initialize,The method has 7 parameters. Parameters: keepAlive' connectionTimeout' disconnectTimeout' transportConnectTimeout' maxIncomingWebSocketMessageSize' enableAutoRejoiningGroups' messageBusType
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,MemoryTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\MemoryTestHost.cs,Initialize,The method has 7 parameters. Parameters: keepAlive' connectionTimeout' disconnectTimeout' transportConnectTimeout' maxIncomingWebSocketMessageSize' enableAutoRejoiningGroups' messageBusType
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,OwinTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\OwinTestHost.cs,Initialize,The method has 7 parameters. Parameters: keepAlive' connectionTimeout' disconnectTimeout' transportConnectTimeout' maxIncomingWebSocketMessageSize' enableAutoRejoiningGroups' messageBusType
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,TracingTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TracingTestHost.cs,Initialize,The method has 7 parameters. Parameters: keepAlive' connectionTimeout' disconnectTimeout' transportConnectTimeout' maxIncomingWebSocketMessageSize' enableAutoRejoiningGroups' type
Long Parameter List,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The method has 5 parameters. Parameters: task' milliseconds' memberName' filePath' lineNumber
Long Parameter List,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The method has 5 parameters. Parameters: task' timeout' memberName' filePath' lineNumber
Long Parameter List,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The method has 5 parameters. Parameters: task' milliseconds' memberName' filePath' lineNumber
Long Parameter List,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The method has 5 parameters. Parameters: task' timeout' memberName' filePath' lineNumber
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Start,The length of the parameter attachToPreSendRequestHeadersRaw is 32.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Configuration,The length of the parameter maxIncomingWebSocketMessageSizeRaw is 34.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Configuration,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,ExternalTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ExternalTestHost.cs,Initialize,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,ITestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ITestHost.cs,Initialize,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,MemoryTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\MemoryTestHost.cs,Initialize,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,OwinTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\OwinTestHost.cs,Initialize,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Identifier,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,TracingTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TracingTestHost.cs,Initialize,The length of the parameter maxIncomingWebSocketMessageSize is 31.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Start,The length of the statement  "            string logFileName = Path.Combine(HttpRuntime.AppDomainAppPath' ConfigurationManager.AppSettings["logFileName"] + ".server.trace.log"); " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,Start,The length of the statement  "            if (Boolean.TryParse(attachToPreSendRequestHeadersRaw' out attachToPreSendRequestHeaders) && attachToPreSendRequestHeaders) " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The length of the statement  "                throw new NotSupportedException("Cannot use Azure SignalR unless the tests were built with the AzureSignalRTests MSBuild property set to 'true'."); " is 147.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The length of the statement  "            AppBuilderUseExtensions.Use(app' CreateRedirector("/redirect-query-string"' "/redirect-query-string2?name1=value1&name2=value2")); " is 130.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The length of the statement  "            AppBuilderUseExtensions.Use(app' CreateRedirector("/redirect-query-string-clear"' "/redirect-query-string-clear2?clearedName=clearedValue")); " is 141.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The length of the statement  "            AppBuilderUseExtensions.Use(app' CreateRedirector("/redirect-query-string-invalid"' "/signalr?redirect=invalid&/?=/&")); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,CreateRedirector,The length of the statement  "                        throw new Exception("Client didn't include query string from the RedirectUrl returned by /redirect-query-string-clear."); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ConnectionDataVerifierHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ConnectionDataVerifierHub.cs,ValidConnectionData,The length of the statement  "            if (Context.Request.QueryString["connectionData"] == null || !Context.Request.QueryString["connectionData"].ToLower().Contains("connectiondataverifierhub")) " is 156.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,CommonCommandLine,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\CommonCommandLine.cs,Run,The length of the statement  "            this.process.StartInfo.Arguments = string.Format("/c ( \"{0}\" {1} ) > {2} 2>&1"' this.FileName' this.Arguments' this.LogFileName); " is 131.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateHubConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateHubConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthHubConnection,The length of the statement  "                var response = httpClient.PostAsync(host.Url + "/cookieauth/Account/Login"' new StringContent(content' Encoding.UTF8' "application/x-www-form-urlencoded")).Result; " is 163.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthHubConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthConnection,The length of the statement  "                var response = httpClient.PostAsync(host.Url + "/cookieauth/Account/Login"' new StringContent(content' Encoding.UTF8' "application/x-www-form-urlencoded")).Result; " is 163.
Long Statement,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthConnection,The length of the statement  "            connection.TransportConnectTimeout = TimeSpan.FromSeconds(10); // Adds 10 seconds to the server's connect timeout (5 seconds) for a total of 15 seconds. " is 152.
Long Statement,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The length of the statement  "            var completed = await Task.WhenAny(task' Task.Delay(Debugger.IsAttached ? Timeout.InfiniteTimeSpan : timeout' cts.Token)); " is 122.
Long Statement,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrTimeout,The length of the statement  "            var completed = await Task.WhenAny(task' Task.Delay(Debugger.IsAttached ? Timeout.InfiniteTimeSpan : timeout' cts.Token)); " is 122.
Long Statement,System.Threading.Tasks,TaskExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TaskExtensions.cs,OrThrowIfOtherFails,The length of the statement  "                // Await the task we were asked to await. Either it's finished' or the otherTask finished successfully' and it's not our job to check that " is 138.
Long Statement,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,InlineScriptTag,The length of the statement  "            return "WAITING for Script Tag to replace this.<script>$(\"#inlineScriptTag\").html('Success! Replaced by inline Script Tag');</script>"; " is 137.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,ProcessExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ProcessExtensions.cs,GetUniqueInstanceName,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,ProcessExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\ProcessExtensions.cs,GetUniqueInstanceName,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The following statement contains a magic number: app.Use((context' next) =>              {                  if(context.Request.Path.StartsWithSegments(new PathString("/aspnetcore-signalr")))                  {                      // Send an ASP.NET Core SignalR negotiate response                      context.Response.StatusCode = 200;                      context.Response.ContentType = "application/json";                      using (var writer = new JsonTextWriter(new StreamWriter(context.Response.Body)))                      {                          writer.WriteStartObject();                          writer.WritePropertyName("connectionId");                          writer.WriteValue("fakeConnectionId");                          writer.WritePropertyName("availableTransports");                          writer.WriteStartArray();                          writer.WriteEndArray();                          writer.WriteEndObject();                      }                      return Task.CompletedTask;                  }                  return next();              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,ConfigureRoutes,The following statement contains a magic number: app.Use((context' next) =>              {                  if(context.Request.Path.StartsWithSegments(new PathString("/negotiate-error")))                  {                      // Send an error response                      context.Response.StatusCode = 200;                      context.Response.ContentType = "application/json";                      using (var writer = new JsonTextWriter(new StreamWriter(context.Response.Body)))                      {                          writer.WriteStartObject();                          writer.WritePropertyName("ProtocolVersion");                          writer.WriteValue("2.0");                          writer.WritePropertyName("Error");                          writer.WriteValue("Server-provided negotiate error message!");                          writer.WriteEndObject();                      }                      return Task.CompletedTask;                  }                  return next();              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,RegisterSignalREndpoints,The following statement contains a magic number: app.Map("/basicauth"' map =>              {                  map.Use(async (context' next) =>                  {                      var authorization = context.Request.Headers.Get("Authorization");                      if (string.IsNullOrEmpty(authorization))                      {                          context.Response.StatusCode = 401;                          context.Response.Headers.Add("WWW-Authenticate"' new string[] { "Basic" });                      }                      else                      {                          var base64Encoded = authorization.Replace("Basic "' "");                          byte[] base64EncodedBytes = Convert.FromBase64String(base64Encoded);                          var base64Decoded = System.Text.ASCIIEncoding.ASCII.GetString(base64EncodedBytes);                          var credentials = base64Decoded.Split(':');                          var identity = new ClaimsIdentity("Basic");                          identity.AddClaim(new Claim(ClaimTypes.Name' credentials[0]));                          context.Request.User = new ClaimsPrincipal(identity);                          await next();                      }                  });                    var subConfig = new ConnectionConfiguration                  {                      Resolver = resolver                  };                    map.MapSignalR<AuthenticatedEchoConnection>("/echo"' subConfig);                    var subHubsConfig = new HubConfiguration                  {                      Resolver = resolver                  };                    map.MapSignalR(subHubsConfig);              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,RegisterSignalREndpoints,The following statement contains a magic number: app.Map("/force-lp-reconnect"' map =>              {                  var startReceived = new ManualResetEvent(false);                    map.Use((context' next) =>                  {                      if (context.Request.QueryString.Value.Contains("transport=longPolling"))                      {                          // To test reconnect scenarios we need to make sure that the transport is                           // successfully started before we disconnect the client. For long polling                          // this means we need to make sure that we don't break the poll request                          // before we send a response to the start request. Note that the first poll                           // request is likely to arrive before the start request. The assumption here                          // is that there is only one active long polling connection at a time.                          if (context.Request.Path.Value.Contains("/connect"))                          {                              // a new connection was started                              startReceived.Reset();                          }                          else if (context.Request.Path.Value.Contains("/start"))                          {                              // unblock breaking the poll after start request                              return next().ContinueWith(t => startReceived.Set());                          }                          else if (context.Request.Path.Value.Contains("/poll"))                          {                              return Task.Run(async () =>                              {                                  // don't break the poll until start request is handled or a timeout                                   // if it is a subsequent poll                                  startReceived.WaitOne(3000);                                  // give the start request some additional head start                                  await Task.Delay(100);                                  //subsequent long polling request should not break immediately                                  startReceived.Reset();                                  context.Response.StatusCode = 500;                                  return TaskAsyncHelper.Empty;                              });                          }                      }                        return next();                  });                  map.MapSignalR<ExamineReconnectPath>("/examine-reconnect"' config);                  map.MapSignalR(hubConfig);              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,RegisterSignalREndpoints,The following statement contains a magic number: app.Map("/force-lp-reconnect"' map =>              {                  var startReceived = new ManualResetEvent(false);                    map.Use((context' next) =>                  {                      if (context.Request.QueryString.Value.Contains("transport=longPolling"))                      {                          // To test reconnect scenarios we need to make sure that the transport is                           // successfully started before we disconnect the client. For long polling                          // this means we need to make sure that we don't break the poll request                          // before we send a response to the start request. Note that the first poll                           // request is likely to arrive before the start request. The assumption here                          // is that there is only one active long polling connection at a time.                          if (context.Request.Path.Value.Contains("/connect"))                          {                              // a new connection was started                              startReceived.Reset();                          }                          else if (context.Request.Path.Value.Contains("/start"))                          {                              // unblock breaking the poll after start request                              return next().ContinueWith(t => startReceived.Set());                          }                          else if (context.Request.Path.Value.Contains("/poll"))                          {                              return Task.Run(async () =>                              {                                  // don't break the poll until start request is handled or a timeout                                   // if it is a subsequent poll                                  startReceived.WaitOne(3000);                                  // give the start request some additional head start                                  await Task.Delay(100);                                  //subsequent long polling request should not break immediately                                  startReceived.Reset();                                  context.Response.StatusCode = 500;                                  return TaskAsyncHelper.Empty;                              });                          }                      }                        return next();                  });                  map.MapSignalR<ExamineReconnectPath>("/examine-reconnect"' config);                  map.MapSignalR(hubConfig);              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,RegisterSignalREndpoints,The following statement contains a magic number: app.Map("/force-lp-reconnect"' map =>              {                  var startReceived = new ManualResetEvent(false);                    map.Use((context' next) =>                  {                      if (context.Request.QueryString.Value.Contains("transport=longPolling"))                      {                          // To test reconnect scenarios we need to make sure that the transport is                           // successfully started before we disconnect the client. For long polling                          // this means we need to make sure that we don't break the poll request                          // before we send a response to the start request. Note that the first poll                           // request is likely to arrive before the start request. The assumption here                          // is that there is only one active long polling connection at a time.                          if (context.Request.Path.Value.Contains("/connect"))                          {                              // a new connection was started                              startReceived.Reset();                          }                          else if (context.Request.Path.Value.Contains("/start"))                          {                              // unblock breaking the poll after start request                              return next().ContinueWith(t => startReceived.Set());                          }                          else if (context.Request.Path.Value.Contains("/poll"))                          {                              return Task.Run(async () =>                              {                                  // don't break the poll until start request is handled or a timeout                                   // if it is a subsequent poll                                  startReceived.WaitOne(3000);                                  // give the start request some additional head start                                  await Task.Delay(100);                                  //subsequent long polling request should not break immediately                                  startReceived.Reset();                                  context.Response.StatusCode = 500;                                  return TaskAsyncHelper.Empty;                              });                          }                      }                        return next();                  });                  map.MapSignalR<ExamineReconnectPath>("/examine-reconnect"' config);                  map.MapSignalR(hubConfig);              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,Initializer,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\App_Start\Initializer.cs,CreateRedirector,The following statement contains a magic number: return (context' next) =>              {                  if (context.Request.Path.StartsWithSegments(new PathString(sourcePath)))                  {                      if (context.Request.Path.StartsWithSegments(new PathString("/redirect-query-string-clear2")) &&                          context.Request.Query["clearedName"] != "clearedValue")                      {                          throw new Exception("Client didn't include query string from the RedirectUrl returned by /redirect-query-string-clear.");                      }                        var redirectUrl = $"{context.Request.Scheme}://{context.Request.Host.Value}{targetPath}";                        if (context.Request.Path.StartsWithSegments(new PathString("/redirect-query-string2")) &&                          !string.IsNullOrEmpty(context.Request.Query["name1"]))                      {                          // We're running a test where redirect targetPath should already include a query string with a "name1" value.                          redirectUrl += "&origName1=" + context.Request.Query["name1"];                      }                        // Send a redirect response                      context.Response.StatusCode = 200;                      context.Response.ContentType = "application/json";                      using (var writer = new JsonTextWriter(new StreamWriter(context.Response.Body)))                      {                          writer.WriteStartObject();                          writer.WritePropertyName("ProtocolVersion");                            // Redirect results are always protocol 2.0' even if the client requested a different protocol.                          writer.WriteValue(protocolVersion ?? "2.0");                            writer.WritePropertyName("RedirectUrl");                          writer.WriteValue(redirectUrl);                          writer.WritePropertyName("AccessToken");                          writer.WriteValue("TestToken");                          writer.WriteEndObject();                      }                      return Task.CompletedTask;                  }                  return next();              };
Magic Number,Microsoft.AspNet.SignalR.Tests.Common,FallbackToLongPollingConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Connections\FallbackToLongPollingConnection.cs,OnConnected,The following statement contains a magic number: await Task.Delay(7000);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Connections,StatusCodeConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Connections\StatusCodeConnection.cs,ProcessRequest,The following statement contains a magic number: int statusCode = 200;
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,DelayedOnConnectedHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\DelayedOnConnectedHub.cs,OnConnected,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,EchoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\EchoHub.cs,EchoAndDelayCallback,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,OnConnectedBufferHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\OnConnectedBufferHub.cs,OnConnected,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,DoLongRunningJob,The following statement contains a magic number: i <= 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,SendProgressAfterMethodReturn,The following statement contains a magic number: Task.Run(async () =>              {                  await Task.Delay(50);                  try                  {                      progress.Report(100);                      Clients.Caller.sendProgressAfterMethodReturnResult(false);                  }                  catch (InvalidOperationException)                  {                      Clients.Caller.sendProgressAfterMethodReturnResult(true);                  }              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,SendProgressAfterMethodReturn,The following statement contains a magic number: Task.Run(async () =>              {                  await Task.Delay(50);                  try                  {                      progress.Report(100);                      Clients.Caller.sendProgressAfterMethodReturnResult(false);                  }                  catch (InvalidOperationException)                  {                      Clients.Caller.sendProgressAfterMethodReturnResult(true);                  }              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,ReportProgressInt,The following statement contains a magic number: progress.Report(100);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,ReportProgressTyped,The following statement contains a magic number: progress.Report(new ProgressUpdate { Percent = 100' Message = "Progress is 100%" });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,ProgressHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\ProgressHub.cs,ReportProgressDynamic,The following statement contains a magic number: progress.Report(new { Percent = 100' Message = "Progress is 100%" });
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Hubs,RedirectTestHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Hubs\RedirectTestHub.cs,GetAccessToken,The following statement contains a magic number: return header.Substring(7);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,CommonCommandLine,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\CommonCommandLine.cs,CommonCommandLine,The following statement contains a magic number: this.Timeout = 30000;
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateHubConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateHubConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthHubConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,HostedTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\HostedTest.cs,CreateAuthConnection,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,OwinTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\OwinTestHost.cs,GetUrl,The following statement contains a magic number: var url = string.Format("http://localhost:{0}/"' Random.Next(5000' 10000));
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,OwinTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\OwinTestHost.cs,GetUrl,The following statement contains a magic number: var url = string.Format("http://localhost:{0}/"' Random.Next(5000' 10000));
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,OwinTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\OwinTestHost.cs,GetUrl,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Tests.Common.Infrastructure,TracingTestHost,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests.Common\Infrastructure\TracingTestHost.cs,Initialize,The following statement contains a magic number: switch (type)              {                  case MessageBusType.Default:                      break;                  case MessageBusType.Fake:                      bus = new FakeScaleoutBus(Resolver' streams: 1);                      break;                  case MessageBusType.FakeMultiStream:                      bus =  new FakeScaleoutBus(Resolver' streams: 3);                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GetValue,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  Thread.Sleep(5000);                  return 10;              });
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GetValue,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  Thread.Sleep(5000);                  return 10;              });
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,PlainTask,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GenericTaskWithContinueWith,The following statement contains a magic number: return await Task.Run(() => 2 + 2).ContinueWith(task => task.Result);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GenericTaskWithContinueWith,The following statement contains a magic number: return await Task.Run(() => 2 + 2).ContinueWith(task => task.Result);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,MultipleCalls,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,MultipleCalls,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReportProgress,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReportProgress,The following statement contains a magic number: i <= 100
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReturnLargePayload,The following statement contains a magic number: return new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,D:\research\architectureSmells\repos1\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReturnLargePayload,The following statement contains a magic number: return new string('a'' 64 * 1024);
