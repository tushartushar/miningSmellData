Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionUsesClientSetTransportConnectTimeout,The length of the parameter defaultTransportConnectTimeout is 30.
Long Statement,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,MarkActiveStopsConnectionIfCalledAfterExtendedPeriod,The length of the statement  "                    // The MarkActive interval should check the reconnect window. Since this is short it should force the connection to disconnect. " is 127.
Long Statement,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnectsWithFastBeatInterval,The length of the statement  "                    // Set reconnect window to zero so the second we attempt to reconnect we can ensure that the reconnect window is verified. " is 122.
Long Statement,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ConnectionFailsWithHelpfulErrorWhenAttemptingToConnectToAspNetCoreApp,The length of the statement  "                    var ex = await Assert.ThrowsAsync<InvalidOperationException>(() => connection.Start(host.TransportFactory())).OrTimeout(); " is 122.
Long Statement,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ConnectionFailsWithHelpfulErrorWhenAttemptingToConnectToAspNetCoreApp,The length of the statement  "                        "Detected a connection attempt to an ASP.NET Core SignalR Server. This client only supports connecting to an ASP.NET SignalR Server. See https://aka.ms/signalr-core-differences for details."' " is 191.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportTimesOutIfNoInitMessage,The length of the statement  "                    await Assert.ThrowsAsync<HttpClientException>(() => hubConnection.Start(host.Transport)).OrTimeout(TimeSpan.FromSeconds(10)); " is 125.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,ClientCallbackArgumentTypeMismatchExceptionThrown,The length of the statement  "                    Assert.Equal(thrown.Message' "A client callback for event foo with 1 argument(s) was found' however an error occurred because Could not convert string to integer: arg1. Path ''."); " is 180.
Long Statement,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,OnConnectionSlowTest,The length of the statement  "                    ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromSeconds(21)' TimeSpan.FromSeconds(7)' TimeSpan.FromSeconds(5)); " is 143.
Long Statement,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,InitDoesNotHaveToBeFirstMessage,The length of the statement  "            await longPollingTransport.Start(mockConnection.Object' string.Empty' disconnectCts.Token).OrTimeout(TimeSpan.FromSeconds(15)); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Tests,NegotiateFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\NegotiateFacts.cs,DoesNotMergeUserQueryStringWithRedirectQueryString,The length of the statement  "                    // Verify query string value set via (Hub)Connection ctor is absent. In practice' the redirect should reflect the query string. " is 127.
Long Statement,Microsoft.AspNet.SignalR.Tests,NegotiateFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\NegotiateFacts.cs,DoesNotMergeUserQueryStringWithRedirectQueryString,The length of the statement  "                    // IConnection.QueryString contains only what was set via redirect. This is what's used by the client to actually build URLs. " is 125.
Long Statement,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ServerCannotReceiveMessagesOver64KBViaWebSockets,The length of the statement  "                    await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 64 * 1024))).OrTimeout(); " is 132.
Long Statement,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeReduced,The length of the statement  "                    await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 8 * 1024)).OrTimeout()); " is 131.
Long Statement,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ProcessRequest,The length of the statement  "                return host.Get("http://foo/echo/connect?transport=" + transport + "&connectionToken=" + connectionToken' r => { }' isLongRunning: true); " is 137.
Long Statement,Microsoft.AspNet.SignalR.Tests,ServerRestarter,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,Post,The length of the statement  "                    Task<Client.Http.IResponse> task = ((Client.Http.IHttpClient)_server).Post(url' prepareRequest' postData' isLongRunning); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CancelledTask,The length of the statement  "                    await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("CancelledTask")).OrTimeout(TimeSpan.FromSeconds(10)); " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CancelledGenericTask,The length of the statement  "                    await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("CancelledGenericTask")).OrTimeout(TimeSpan.FromSeconds(10)); " is 130.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,DetailedErrorsAreAlwaysGivenForHubExceptionsWithoutErrorData,The length of the statement  "                    var hubEx = await Assert.ThrowsAsync<Client.HubException>(() => hub.Invoke("HubExceptionWithoutErrorData").OrTimeout()); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,UnsupportedOverloads,The length of the statement  "                    var ex = await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("UnsupportedOverload"' 13177).OrTimeout()); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ChangeHubUrl,The length of the statement  "                var connection = new HubConnection("http://site/foo"' useDefaultUrl: false' queryString: new Dictionary<string' string> { { "test"' "ChangeHubUrl" } }); " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,AddingToMultipleGroups,The length of the statement  "                        Assert.True(false' "Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join("'"' countDown.Left.Select(i => i.ToString()))); " is 164.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The length of the statement  "                        Assert.True(false' "Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join("'"' countDown.Left.Select(i => i.ToString()))); " is 164.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The length of the statement  "                        Assert.True(false' "Didn't receive " + max + " messages. Got " + (max - countDownAfterReconnect.Count) + " missed " + String.Join("'"' countDownAfterReconnect.Left.Select(i => i.ToString()))); " is 192.
Long Statement,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToSpecificConnections,The length of the statement  "                    await hub1.Invoke("SendToConnections"' new List<string> { connection1.ConnectionId' connection2.ConnectionId }).OrTimeout(); " is 124.
Long Statement,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,SecurityFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\SecurityFacts.cs,GetUrl,The length of the statement  "            var groupsToken = protectedData.Protect(JsonConvert.SerializeObject(new[] { connection.ConnectionToken })' Purposes.Groups); " is 124.
Empty Catch Block,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterTransportIsBeingStoppedMidRequest,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,MarkActiveStopsConnectionIfCalledAfterExtendedPeriod,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnectsWithFastBeatInterval,The following statement contains a magic number: host.Initialize(keepAlive: 9' messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnectsWithFastBeatInterval,The following statement contains a magic number: SetReconnectDelay(host.Transport' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnectsWithFastBeatInterval,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnectsWithFastBeatInterval,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnects,The following statement contains a magic number: connection.Reconnecting += () =>                      {                          ((Client.IConnection)connection).ReconnectWindow = TimeSpan.FromMilliseconds(500);                          reconnectWh.TrySetResult(null);                      };
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnects,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnects,The following statement contains a magic number: await reconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectExceedingReconnectWindowDisconnects,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,NoReconnectsAfterFallback,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,TransportConnectTimeoutDoesNotAddupOverNegotiateRequests,The following statement contains a magic number: connection.TransportConnectTimeout = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ABlockedReceivedCallbackWillTriggerAnError,The following statement contains a magic number: Assert.IsType<SlowCallbackException>(await wh.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,RequestHeadersSetCorrectly,The following statement contains a magic number: await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,RequestHeadersCanBeSetOnceConnected,The following statement contains a magic number: await mre.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectRequestPathEndsInReconnect,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  connectionTimeout: 2'                                  disconnectTimeout: 6);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ReconnectRequestPathEndsInReconnect,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  connectionTimeout: 2'                                  disconnectTimeout: 6);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\ConnectionFacts.cs,ConnectionFunctionsCorrectlyAfterCallingStartMutlipleTimes,The following statement contains a magic number: await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportTimesOutIfNoInitMessage,The following statement contains a magic number: await Assert.ThrowsAsync<HttpClientException>(() => hubConnection.Start(host.Transport)).OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,WebSocketTransportDoesntHangIfConnectReturnsCancelledTask,The following statement contains a magic number: await RunWebSocketTransportWithConnectTask(() =>              {                  var tcs = new TaskCompletionSource<object>();                  tcs.TrySetCanceled();                  return tcs.Task;              }).OrTimeout(10000);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,WebSocketTransportDoesntHangIfConnectReturnsFaultedTask,The following statement contains a magic number: await RunWebSocketTransportWithConnectTask(                  () => TaskAsyncHelper.FromError(new InvalidOperationException())).OrTimeout(10000);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportsQueueIncomingMessagesCorrectly,The following statement contains a magic number: proxy.On("pong"' () =>                      {                          Assert.Equal(2' bufferMeCalls);                            wh.TrySetResult(null);                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportsQueueIncomingMessagesCorrectly,The following statement contains a magic number: Assert.Equal(2' bufferMeCalls);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportsQueueIncomingMessagesCorrectly,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportCanJoinGroupInOnConnected,The following statement contains a magic number: proxy.On("ping"' () =>                      {                          if (++pingCount == 2)                          {                              wh.TrySetResult(null);                          }                            Assert.True(pingCount <= 2);                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportCanJoinGroupInOnConnected,The following statement contains a magic number: proxy.On("ping"' () =>                      {                          if (++pingCount == 2)                          {                              wh.TrySetResult(null);                          }                            Assert.True(pingCount <= 2);                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,TransportCanJoinGroupInOnConnected,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,EndToEndTest,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,HubNamesAreNotCaseSensitive,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,RequestHeadersSetCorrectly,The following statement contains a magic number: await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,WaitingOnHubInvocationDoesNotDeadlock,The following statement contains a magic number: proxy.On<string>("echo"' message =>                      {                          callbackInvokedCount++;                          if (callbackInvokedCount == 4)                          {                              mre.TrySetResult(null);                          }                          else                          {                              proxy.Invoke("EchoCallback"' message);                          }                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\HubProxyFacts.cs,WaitingOnHubInvocationDoesNotDeadlock,The following statement contains a magic number: await mre.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,ReconnectionSuccesfulTest,The following statement contains a magic number: ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,ReconnectionSuccesfulTest,The following statement contains a magic number: await mre.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,SuccessiveTimeoutTest,The following statement contains a magic number: host.Initialize(keepAlive: 5' messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,SuccessiveTimeoutTest,The following statement contains a magic number: ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromMilliseconds(300));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,SuccessiveTimeoutTest,The following statement contains a magic number: Assert.True(await mre.WaitAsync(TimeSpan.FromSeconds(15)));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,SuccessiveTimeoutTest,The following statement contains a magic number: Assert.True(await mre.WaitAsync(TimeSpan.FromSeconds(15)));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,OnConnectionSlowTest,The following statement contains a magic number: ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromSeconds(21)' TimeSpan.FromSeconds(7)' TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,OnConnectionSlowTest,The following statement contains a magic number: ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromSeconds(21)' TimeSpan.FromSeconds(7)' TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,OnConnectionSlowTest,The following statement contains a magic number: ((Client.IConnection)connection).KeepAliveData = new KeepAliveData(TimeSpan.FromSeconds(21)' TimeSpan.FromSeconds(7)' TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\KeepAliveFacts.cs,OnConnectionSlowTest,The following statement contains a magic number: await tcs.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterClose,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterClose,The following statement contains a magic number: await                  longPollingTransport.Start(mockConnection.Object' string.Empty' disconnectCts.Token)                      .OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterClose,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterTransportIsBeingStoppedMidRequest,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterTransportIsBeingStoppedMidRequest,The following statement contains a magic number: await longPollingTransport.Start(mockConnection.Object' string.Empty' disconnectCts.Token)                      .OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterTransportIsBeingStoppedMidRequest,The following statement contains a magic number: await pollingTcs.Task.OrTimeout(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,LongPollingDoesNotPollAfterTransportIsBeingStoppedMidRequest,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,InitDoesNotHaveToBeFirstMessage,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(500));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,InitDoesNotHaveToBeFirstMessage,The following statement contains a magic number: await longPollingTransport.Start(mockConnection.Object' string.Empty' disconnectCts.Token).OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,PollingLoopNotRestartedIfStartFails,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(500));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,PollingLoopNotRestartedIfStartFails,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() =>                  longPollingTransport.Start(mockConnection.Object' string.Empty' disconnectCts.Token))                      .OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,LongPollingFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\LongPollingFacts.cs,PollingLoopNotRestartedIfStartFails,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ClientCanReceiveMessagesOver64KBViaWebSockets,The following statement contains a magic number: var result = await hub.Invoke<string>("ReturnLargePayload").OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ClientCanReceiveMessagesOver64KBViaWebSockets,The following statement contains a magic number: Assert.Equal(new string('a'' 64 * 1024)' result);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ClientCanReceiveMessagesOver64KBViaWebSockets,The following statement contains a magic number: Assert.Equal(new string('a'' 64 * 1024)' result);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ServerCannotReceiveMessagesOver64KBViaWebSockets,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 64 * 1024))).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,ServerCannotReceiveMessagesOver64KBViaWebSockets,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 64 * 1024))).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeDisabled,The following statement contains a magic number: var payload = new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeDisabled,The following statement contains a magic number: var payload = new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeIncreased,The following statement contains a magic number: host.Initialize(maxIncomingWebSocketMessageSize: 128 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeIncreased,The following statement contains a magic number: host.Initialize(maxIncomingWebSocketMessageSize: 128 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeIncreased,The following statement contains a magic number: var payload = new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeIncreased,The following statement contains a magic number: var payload = new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeReduced,The following statement contains a magic number: host.Initialize(maxIncomingWebSocketMessageSize: 8 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeReduced,The following statement contains a magic number: host.Initialize(maxIncomingWebSocketMessageSize: 8 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeReduced,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 8 * 1024)).OrTimeout());
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,MaxIncomingWebSocketMessageSizeCanBeReduced,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke<string>("EchoReturn"' new string('a'' 8 * 1024)).OrTimeout());
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,SendingDuringWebSocketReconnectFails,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  disconnectTimeout: 6'                                  connectionTimeout: 2'                                  enableAutoRejoiningGroups: true);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,SendingDuringWebSocketReconnectFails,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  disconnectTimeout: 6'                                  connectionTimeout: 2'                                  enableAutoRejoiningGroups: true);
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,SendingDuringWebSocketReconnectFails,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Client\WebSocketFacts.cs,SendingDuringWebSocketReconnectFails,The following statement contains a magic number: await wh2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,FailedWriteCompletesRequestAfterDisconnectTimeout,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,FailedWriteCompletesRequestAfterDisconnectTimeout,The following statement contains a magic number: await processRequestTask.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientCallsStop,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new ConnectionConfiguration                      {                          Resolver = dr                      };                        app.MapSignalR<MyConnection>("/echo"' config);                        configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                        dr.Register(typeof(MyConnection)' () => new MyConnection(connectWh' disconnectWh));                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientCallsStop,The following statement contains a magic number: var disconnectWait = TimeSpan.FromTicks(configuration.HeartbeatInterval().Ticks * 3);
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientCallsStop,The following statement contains a magic number: await connectWh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientDisconnects,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new ConnectionConfiguration                      {                          Resolver = dr                      };                        app.MapSignalR<MyConnection>("/echo"' config);                        configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                        dr.Register(typeof(MyConnection)' () => new MyConnection(connectWh' disconnectWh));                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientDisconnects,The following statement contains a magic number: await connectWh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForPersistentConnectionWhenClientDisconnects,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(20));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientCallsStop,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = dr                      };                        app.MapSignalR("/signalr"' config);                        configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      dr.Register(typeof(MyHub)' () => new MyHub(connectWh' disconnectWh));                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientCallsStop,The following statement contains a magic number: var disconnectWait = TimeSpan.FromTicks(configuration.HeartbeatInterval().Ticks * 3);
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientCallsStop,The following statement contains a magic number: await connectWh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientDisconnects,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = dr                      };                        app.MapSignalR("/signalr"' config);                        configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      dr.Register(typeof(MyHub)' () => new MyHub(connectWh' disconnectWh));                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientDisconnects,The following statement contains a magic number: await connectWh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,DisconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\DisconnectFacts.cs,DisconnectFiresForHubsWhenClientDisconnects,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(20));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ConnectionsWithTheSameConnectionIdSSECloseGracefully,The following statement contains a magic number: i < 1000
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ConnectionsWithTheSameConnectionIdLongPollingCloseGracefully,The following statement contains a magic number: i < 1000
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendToClientFromOutsideOfConnection,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendToClientsFromOutsideOfConnection,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendToGroupFromOutsideOfConnection,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendToGroupsFromOutsideOfConnection,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,BasicAuthCredentialsFlow,The following statement contains a magic number: Assert.Equal("Hello World"' await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendRaisesOnReceivedFromAllEvents,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendRaisesOnReceivedFromAllEvents,The following statement contains a magic number: Assert.Equal(4' results.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendRaisesOnReceivedFromAllEvents,The following statement contains a magic number: Assert.Equal("OnReceivedAsync1"' results[2]);
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendRaisesOnReceivedFromAllEvents,The following statement contains a magic number: Assert.Equal("OnReceivedAsync2"' results[3]);
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendCanBeCalledAfterStateChangedEvent,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,OnConnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,SendCanBeCalledAfterStateChangedEvent,The following statement contains a magic number: Assert.Equal(4' results.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,OnReconnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ReconnectDoesntFireAfterTimeOut,The following statement contains a magic number: host.Configure(app =>                      {                          var config = new ConnectionConfiguration                          {                              Resolver = new DefaultDependencyResolver()                          };                            UseMessageBus(messageBusType' config.Resolver);                            app.MapSignalR<MyReconnect>("/endpoint"' config);                          var configuration = config.Resolver.Resolve<IConfigurationManager>();                          configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                          configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                          configuration.KeepAlive = null;                            config.Resolver.Register(typeof(MyReconnect)' () => new MyReconnect(() => reconnects++));                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,OnReconnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ReconnectDoesntFireAfterTimeOut,The following statement contains a magic number: host.Configure(app =>                      {                          var config = new ConnectionConfiguration                          {                              Resolver = new DefaultDependencyResolver()                          };                            UseMessageBus(messageBusType' config.Resolver);                            app.MapSignalR<MyReconnect>("/endpoint"' config);                          var configuration = config.Resolver.Resolve<IConfigurationManager>();                          configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                          configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                          configuration.KeepAlive = null;                            config.Resolver.Register(typeof(MyReconnect)' () => new MyReconnect(() => reconnects++));                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,OnReconnectedAsync,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,ReconnectDoesntFireAfterTimeOut,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsReceiveMessages,The following statement contains a magic number: await connection.Send(new { type = 3' group = "test"' message = "hello to group test" }).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsReceiveMessages,The following statement contains a magic number: await connection.Send(new { type = 2' group = "test" }).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsReceiveMessages,The following statement contains a magic number: await connection.Send(new { type = 3' group = "test"' message = "goodbye to group test" }).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsReceiveMessages,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: host.Initialize(keepAlive: null'                                      disconnectTimeout: 6'                                      connectionTimeout: 2'                                      messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: host.Initialize(keepAlive: null'                                      disconnectTimeout: 6'                                      connectionTimeout: 2'                                      messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: await connection.Send(new { type = 3' group = "test"' message = "hello to group test" }).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: await connection.Send(new { type = 3' group = "test"' message = "goodbye to group test" }).OrTimeout();
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Tests,GroupTest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,GroupsRejoinedWhenOnRejoiningGroupsOverridden,The following statement contains a magic number: Assert.Equal(2' list.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.Equal(3' results.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.Equal("OnDisconnectAsync"' results[2].Method);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.NotNull(results[2].Headers);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.NotNull(results[2].Query);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.True(results[2].Headers.Count > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.True(results[2].Query.Count > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,Owin,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\PersistentConnectionFacts.cs,EnvironmentIsAvailable,The following statement contains a magic number: Assert.True(results[2].OwinKeys.Length > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,ReconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,ReconnectFiresAfterHostShutdown,The following statement contains a magic number: await pollEvent.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ReconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,ReconnectFiresAfterHostShutdown,The following statement contains a magic number: await reconnectedEvent.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ReconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,ReconnectFiresAfterHostShutdown,The following statement contains a magic number: Assert.Equal(2' serverStarts);
Magic Number,Microsoft.AspNet.SignalR.Tests,ReconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,GroupsWorkAfterServerRestart,The following statement contains a magic number: await reconnectedEvent.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,ReconnectFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ReconnectFacts.cs,GroupsWorkAfterServerRestart,The following statement contains a magic number: await sendEvent.Task.OrTimeout(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToGroupFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToUserFromOutsideOfHub,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToUsersFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToUsersFromOutsideOfHub,The following statement contains a magic number: await wh2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToGroupsFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToSpecificClientFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToSpecificClientsFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToAllFromOutsideOfHub,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,GetHubContextFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\GetHubContextFacts.cs,SendToAllFromOutsideOfHub,The following statement contains a magic number: await wh2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanReceiveHubMessagesFromAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanInvokeMethodsInAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanReceiveHubMessagesFromHubsInheritingFromAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanInvokeMethodsInHubsInheritingFromAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedAndAuthorizedUserCanReceiveHubMessagesFromHubsAuthorizedWithRoles,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedAndAuthorizedUserCanInvokeMethodsInHubsAuthorizedWithRoles,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedAndAuthorizedUserCanReceiveHubMessagesFromHubsAuthorizedSpecifyingUserAndRole,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedAndAuthorizedUserCanInvokeMethodsInHubsAuthorizedSpecifyingUserAndRole,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,UnauthenticatedUserCanReceiveHubMessagesFromIncomingAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanReceiveHubMessagesFromIncomingAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedUserCanInvokeMethodsInIncomingAuthorizedHubs,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubAuthFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubAuthFacts.cs,AuthenticatedAndAuthorizedUserCanInvokeAuthorizedHubMethods,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReadingStateFromVB,The following statement contains a magic number: await mre.Task.OrTimeout(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,BasicAuthCredentialsFlow,The following statement contains a magic number: Assert.Equal("Hello World"' await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToUserConnectDisconnectEvents,The following statement contains a magic number: hub1.On<string>("SendUserOnConnected"' (user) =>                  {                      if (++connected >= 2)                      {                          wh1.TrySetResult(null);                      }                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.Equal(3' results.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.Equal("OnDisconnected"' results[2].Method);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.NotNull(results[2].Headers);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.NotNull(results[2].Query);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.True(results[2].Headers.Count > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.True(results[2].Query.Count > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,VerifyOwinContext,The following statement contains a magic number: Assert.True(results[2].OwinKeys.Length > 0);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CancelledTask,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("CancelledTask")).OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CancelledGenericTask,The following statement contains a magic number: await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("CancelledGenericTask")).OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,GetValueFromServer,The following statement contains a magic number: Assert.Equal(10' result);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,GenericTaskWithContinueWith,The following statement contains a magic number: Assert.Equal(4' result);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CallbackDataWithPlus,The following statement contains a magic number: Assert.Equal("+"' await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,UnsupportedOverloads,The following statement contains a magic number: var ex = await Assert.ThrowsAsync<InvalidOperationException>(() => hub.Invoke("UnsupportedOverload"' 13177).OrTimeout());
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ChangeHubUrl,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ChangeHubUrlAspNet,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,GuidTest,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RemainsConnectedWithHubsAppendedToUrl,The following statement contains a magic number: hub.On<Guid>("TestGuid"' id =>                      {                          testGuidInvocations++;                          if (testGuidInvocations < 2)                          {                              hub.Invoke("TestGuid").ContinueWithPreservedCulture(t =>                                  {                                      if (t.IsFaulted)                                      {                                          tcs.SetUnwrappedException(t.Exception);                                      }                                      else if (t.IsCanceled)                                      {                                          tcs.TrySetCanceled();                                      }                                  }'                                  TaskContinuationOptions.NotOnRanToCompletion);                          }                          else                          {                              tcs.TrySetResult(null);                          }                      });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RemainsConnectedWithHubsAppendedToUrl,The following statement contains a magic number: await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ComplexPersonState,The following statement contains a magic number: var person = new SignalR.Samples.Hubs.DemoHub.DemoHub.Person                      {                          Address = new SignalR.Samples.Hubs.DemoHub.DemoHub.Address                          {                              Street = "Redmond"'                              Zip = "98052"                          }'                          Age = 25'                          Name = "David"                      };
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ComplexPersonState,The following statement contains a magic number: Assert.Equal(25' person1.Age);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ComplexPersonState,The following statement contains a magic number: Assert.Equal(25' person2.Age);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,DynamicInvokeTest,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,AddingToMultipleGroups,The following statement contains a magic number: var max = 10;
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,AddingToMultipleGroups,The following statement contains a magic number: await countDown.WaitAsync().OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  disconnectTimeout: 6'                                  connectionTimeout: 2'                                  enableAutoRejoiningGroups: true'                                  messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: host.Initialize(keepAlive: null'                                  disconnectTimeout: 6'                                  connectionTimeout: 2'                                  enableAutoRejoiningGroups: true'                                  messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: var max = 10;
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: i < 2 * max
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: await countDown.WaitAsync().OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,HubGroupsRejoinWhenAutoRejoiningGroupsEnabled,The following statement contains a magic number: await countDownAfterReconnect.WaitAsync().OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RejoiningGroupsOnlyReceivesGroupsBelongingToHub,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = new DefaultDependencyResolver()                      };                        app.MapSignalR("/signalr"' config);                        config.Resolver.Resolve<IHubPipeline>().AddModule(logRejoiningGroups);                      var configuration = config.Resolver.Resolve<IConfigurationManager>();                      // The following sets the heartbeat to 1 s                      configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      configuration.KeepAlive = null;                      configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RejoiningGroupsOnlyReceivesGroupsBelongingToHub,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = new DefaultDependencyResolver()                      };                        app.MapSignalR("/signalr"' config);                        config.Resolver.Resolve<IHubPipeline>().AddModule(logRejoiningGroups);                      var configuration = config.Resolver.Resolve<IConfigurationManager>();                      // The following sets the heartbeat to 1 s                      configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      configuration.KeepAlive = null;                      configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RejoiningGroupsOnlyReceivesGroupsBelongingToHub,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,RejoiningGroupsOnlyReceivesGroupsBelongingToHub,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromConnectAndDisconnectAccepted,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = new DefaultDependencyResolver()                      };                        app.MapSignalR("/signalr"' config);                        var configuration = config.Resolver.Resolve<IConfigurationManager>();                      // The below effectively sets the heartbeat interval to one second.                      configuration.KeepAlive = TimeSpan.FromSeconds(2);                      config.Resolver.Register(typeof(SomeHub)' () => mockHub.Object);                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromConnectAndDisconnectAccepted,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromReconnectAccepted,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = new DefaultDependencyResolver()                      };                        app.MapSignalR("/signalr"' config);                        var configuration = config.Resolver.Resolve<IConfigurationManager>();                      // The following sets the heartbeat to 1 s                      configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      configuration.KeepAlive = null;                      configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                      config.Resolver.Register(typeof(SomeHub)' () => mockHub.Object);                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromReconnectAccepted,The following statement contains a magic number: host.Configure(app =>                  {                      var config = new HubConfiguration                      {                          Resolver = new DefaultDependencyResolver()                      };                        app.MapSignalR("/signalr"' config);                        var configuration = config.Resolver.Resolve<IConfigurationManager>();                      // The following sets the heartbeat to 1 s                      configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);                      configuration.KeepAlive = null;                      configuration.ConnectionTimeout = TimeSpan.FromSeconds(2);                      config.Resolver.Register(typeof(SomeHub)' () => mockHub.Object);                  });
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromReconnectAccepted,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,ReturningNullFromReconnectAccepted,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,JoiningGroupMultipleTimesGetsMessageOnce,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToAllButCaller,The following statement contains a magic number: await wh2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToAllButCallerInGroup,The following statement contains a magic number: await tcs2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToAll,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToAll,The following statement contains a magic number: await wh2.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,SendToSelf,The following statement contains a magic number: await wh1.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,JoinAndSendToGroupRenamedHub,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,JoinAndSendToGroupRenamedHub,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,JoinAndSendToGroupRenamedHub,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,JoinAndSendToGroupRenamedHub,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Tests,HubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,CanSuppressExceptionsInHubPipelineModuleOnIncomingError,The following statement contains a magic number: Assert.Equal(42' await hub.Invoke<int>("TaskWithException"));
Magic Number,Microsoft.AspNet.SignalR.Tests,SuppressErrorModule,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubFacts.cs,OnIncomingError,The following statement contains a magic number: exceptionContext.Result = 42;
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionCanAddAnotherConnectionOnAnotherHostToAGroup,The following statement contains a magic number: host1.Configure(app =>                      {                          var resolver = new DefaultDependencyResolver();                          var ackHandler = new SignalR.Infrastructure.AckHandler(                              completeAcksOnTimeout: true'                              ackThreshold: TimeSpan.FromSeconds(10)'                              ackInterval: TimeSpan.FromSeconds(1));                            resolver.Register(typeof(SignalR.Infrastructure.IAckHandler)' () => ackHandler);                          resolver.Register(typeof(IMessageBus)' () => sharedBus);                            app.MapSignalR<MyGroupConnection>("/groups"' new ConnectionConfiguration                          {                              Resolver = resolver                          });                      });
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionCanAddAnotherConnectionOnAnotherHostToAGroup,The following statement contains a magic number: await connection1.Send(new                          {                              // Send to group                              type = 3'                              group = "testGroup"'                              message = "testMessage"                          });
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionCanAddAnotherConnectionOnAnotherHostToAGroup,The following statement contains a magic number: Assert.Equal("testMessage"' await messageTcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ThrownWebExceptionShouldBeUnwrapped,The following statement contains a magic number: host.Initialize(messageBusType: messageBusType' transportConnectTimeout: 30);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionUsesClientSetTransportConnectTimeout,The following statement contains a magic number: var newTimeout = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,PrefixMatchingIsNotGreedyNotStartingWithSlashes,The following statement contains a magic number: Assert.Equal("MyConnection2"' await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,PrefixMatchingIsNotGreedyExactMatch,The following statement contains a magic number: Assert.Equal("MyConnection"' await tcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ManuallyRestartedClientMaintainsConsistentState,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ManuallyRestartedClientMaintainsConsistentState,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ManuallyRestartedClientMaintainsConsistentState,The following statement contains a magic number: Assert.Equal(15' timesStopped);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,AwaitingOnStartAndThenStoppingDoesntHang,The following statement contains a magic number: Assert.True(DateTime.UtcNow - startTime < TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStopsReconnectingAfterDisconnectTimeout,The following statement contains a magic number: host.Initialize(disconnectTimeout: 6' messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStopsReconnectingAfterDisconnectTimeout,The following statement contains a magic number: await reconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(25));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStopsReconnectingAfterDisconnectTimeout,The following statement contains a magic number: await disconnectWh.Task.OrTimeout(TimeSpan.FromSeconds(25));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: host.Initialize(keepAlive: null'                                      connectionTimeout: 2'                                      disconnectTimeout: 8' // 8s because the default heartbeat time span is 5s                                      messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: host.Initialize(keepAlive: null'                                      connectionTimeout: 2'                                      disconnectTimeout: 8' // 8s because the default heartbeat time span is 5s                                      messageBusType: messageBusType);
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: await reconnectingWh.Task.OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: await reconnectedWh.Task.OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ClientStaysReconnectedAfterDisconnectTimeout,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(8));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionErrorCapturesExceptionsThrownInReceived,The following statement contains a magic number: connection.Error += e =>                          {                              caught = e;                              if (Interlocked.Increment(ref errorsCaught) == 2)                              {                                  wh.TrySetResult(null);                              }                          };
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\ConnectionFacts.cs,ConnectionErrorCapturesExceptionsThrownInReceived,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Connections,FarmFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\FarmFacts.cs,FarmDisconnectRaisesUncleanDisconnects,The following statement contains a magic number: const int nodeCount = 3;
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Connections,FarmFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\FarmFacts.cs,FarmDisconnectRaisesUncleanDisconnects,The following statement contains a magic number: configurationManager.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Connections,FarmFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\FarmFacts.cs,FarmDisconnectRaisesUncleanDisconnects,The following statement contains a magic number: cts.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Connections,FarmFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\FarmFacts.cs,FarmDisconnectRaisesUncleanDisconnects,The following statement contains a magic number: instancesDisconnected.Count == 3
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Connections,FarmFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Connections\FarmFacts.cs,FarmGroupAddCompletesSuccessfully,The following statement contains a magic number: const int nodeCount = 2;
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server,DateFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\DateFacts.cs,DateAsStringRoundtrip,The following statement contains a magic number: await wh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressIsReportedSuccessfully,The following statement contains a magic number: cts.CancelAfter(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressIsReportedSuccessfully,The following statement contains a magic number: var expected = updatesSeen * 10;
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressIsReportedSuccessfully,The following statement contains a magic number: updatesSeen < 10 && progressUpdates.Reader.TryRead(out var item)
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressIsReportedSuccessfully,The following statement contains a magic number: updatesSeen < 10 && await progressUpdates.Reader.WaitToReadAsync(cts.Token)
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressIsReportedSuccessfully,The following statement contains a magic number: Assert.Equal(10' updatesSeen);
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressReportsProgressForInt,The following statement contains a magic number: await proxy.Invoke<int>("ReportProgressInt"' progress => Assert.Equal(100' progress));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressReportsProgressForCustomType,The following statement contains a magic number: await proxy.Invoke<ProgressUpdate>("ReportProgressTyped"' progress =>                      {                          Assert.Equal(100' progress.Percent);                          Assert.Equal("Progress is 100%"' progress.Message);                      });
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\HubProgressFacts.cs,HubProgressReportsProgressForDynamic,The following statement contains a magic number: await proxy.Invoke<dynamic>("ReportProgressDynamic"' progress =>                      {                          Assert.Equal(100' (int)progress.Percent);                          Assert.Equal("Progress is 100%"' (string)progress.Message);                      });
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,SecurityFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\SecurityFacts.cs,GroupsTokenIsPerConnectionId,The following statement contains a magic number: await inGroup.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,SecurityFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\SecurityFacts.cs,GroupsTokenIsPerConnectionId,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,TypedHubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\TypedHubFacts.cs,CanInvokeMethodsAndReceiveMessagesFromValidTypedHub,The following statement contains a magic number: Assert.Equal("arbitrary message"' await echoTcs.Task.OrTimeout(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Hubs,TypedHubFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Hubs\TypedHubFacts.cs,CanInvokeMethodsAndReceiveMessagesFromValidTypedHub,The following statement contains a magic number: await pingWh.Task.OrTimeout(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Transports,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Transports\WebSocketFacts.cs,ReturningUnserializableObjectsForcesImmediateReconnectWithWebSockets,The following statement contains a magic number: await reconnectedWh.Task.OrTimeout(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.AspNet.SignalR.FunctionalTests.Server.Transports,ReturnsUnserializableObjectHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.FunctionalTests\Server\Transports\WebSocketFacts.cs,GetStuff,The following statement contains a magic number: yield return 2;
