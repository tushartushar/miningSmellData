Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunHubConnectionAPI,The length of the statement  "            string leaveGroupResponse = await hubProxy.Invoke<string>("LeaveGroup"' hubConnection.ConnectionId' "CommonClientGroup"); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunHubConnectionAPI,The length of the statement  "            await hubProxy.Invoke("DisplayMessageGroup"' "CommonClientGroup"' "Hello Group Members! (caller should not see this message)"); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunAuth,The length of the statement  "                var response = httpClient.PostAsync(url + "/Account/Login"' new StringContent(content' Encoding.UTF8' "application/x-www-form-urlencoded")).Result; " is 147.
Long Statement,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunAuth,The length of the statement  "            hubProxy.On<string' string>("invoked"' (connectionId' date) => hubConnection.TraceWriter.WriteLine("connectionId={0}' date={1}"' connectionId' date)); " is 150.
Long Statement,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunWindowsAuth,The length of the statement  "            hubProxy.On<string' string>("invoked"' (connectionId' date) => hubConnection.TraceWriter.WriteLine("connectionId={0}' date={1}"' connectionId' date)); " is 150.
Magic Number,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunPendingCallbacks,The following statement contains a magic number: int callbacks = 1000;
Magic Number,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunPendingCallbacks,The following statement contains a magic number: hubProxy.On<int>("serverIsWaiting"' (i) =>              {                  if (i % 100 == 0)                  {                      hubConnection.TraceWriter.WriteLine("{0} serverIsWaiting: {1}"' DateTime.Now' i);                  }                    if (i == callbacks)                  {                      event1.Set();                  }              });
Magic Number,Microsoft.AspNet.SignalR.Client.Samples,CommonClient,C:\repos\SignalR_SignalR\samples\Common\CommonClient.cs,RunPendingCallbacks,The following statement contains a magic number: for (int messageNumber = 1; messageNumber <= callbacks; messageNumber++)              {  #pragma warning disable 4014                  hubProxy.Invoke("LongRunningMethod"' messageNumber).ContinueWith(task =>                  {                      int i = Interlocked.Increment(ref counter);                      if (i % 100 == 0)                      {                          hubConnection.TraceWriter.WriteLine("{0} completed: {1} task.Status={2}"' DateTime.Now' i' task.Status);                      }                        if (i == callbacks)                      {                          event2.Set();                      }                  });  #pragma warning restore 4014              }
