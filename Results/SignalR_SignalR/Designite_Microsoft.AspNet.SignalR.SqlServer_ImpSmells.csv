Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,The method has 127 lines of code.
Complex Method,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR,GenericDelegates<T;TResult;T1;T2;T3>,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ThenWithArgs,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ObservableDbOperation,The method has 5 parameters. Parameters: connectionString' commandText' traceSource' dbProviderFactory' dbBehavior
Long Parameter List,Microsoft.AspNet.SignalR.SqlServer,SqlReceiver,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlReceiver.cs,SqlReceiver,The method has 5 parameters. Parameters: connectionString' tableName' traceSource' tracePrefix' dbProviderFactory
Long Parameter List,Microsoft.AspNet.SignalR.SqlServer,SqlStream,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlStream.cs,SqlStream,The method has 5 parameters. Parameters: streamIndex' connectionString' tableName' traceSource' dbProviderFactory
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,The length of the statement  "                                    Trace.TraceVerbose("{0}Records were returned by the command that sets up the SQL notification' restarting the receive loop"' TracePrefix); " is 138.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,The length of the statement  "                                        Trace.TraceError("{0}A SQL notification was already running. Overlapping receive loops detected' this should never happen. BUG!"' TracePrefix); " is 143.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,The length of the statement  "                                        // Failed to change _notificationState from ProcessingUpdates to AwaitingNotification' it was already NotificationReceived " is 122.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,ExecuteReaderWithUpdates,The length of the statement  "                                        Trace.TraceVerbose("{0}The SQL notification fired before the receive loop returned' restarting the receive loop"' TracePrefix); " is 127.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The length of the statement  "                    Trace.TraceVerbose("{0}SQL notification details: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info); " is 121.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The length of the statement  "                    Trace.TraceError("{0}Unexpected SQL notification details: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info); " is 130.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The length of the statement  "                    Faulted(new SqlMessageBusException(String.Format(CultureInfo.InvariantCulture' Resources.Error_UnexpectedSqlNotificationType' e.Type' e.Source' e.Info))); " is 154.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The length of the statement  "                Debug.Assert(e.Info != SqlNotificationInfo.Invalid' "Ensure the SQL query meets the requirements for query notifications at http://msdn.microsoft.com/en-US/library/ms181122.aspx"); " is 180.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The length of the statement  "                Trace.TraceError("{0}SQL notification subscription error: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info); " is 130.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlInstaller,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlInstaller.cs,Install,The length of the statement  "            script = script.Replace("SET @MESSAGE_TABLE_NAME = 'Messages';"' "SET @MESSAGE_TABLE_NAME = '" + _messagesTableNamePrefix + "';"); " is 130.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,DbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\DbOperation.cs,TraceCommand,The length of the statement  "                Trace.TraceVerbose("Created DbCommand: CommandType={0}' CommandText={1}' Parameters={2}"' command.CommandType' command.CommandText' " is 131.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,DbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\DbOperation.cs,TraceCommand,The length of the statement  "                        .Aggregate(string.Empty' (msg' p) => string.Format(CultureInfo.InvariantCulture' "{0} [Name={1}' Value={2}]"' msg' p.ParameterName' p.Value)) " is 141.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlReceiver,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlReceiver.cs,Receive,The length of the statement  "            _trace.TraceVerbose("{0}Executing receive reader' initial payload ID parameter={1}"' _tracePrefix' _dbOperation.Parameters[0].Value); " is 133.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlReceiver,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlReceiver.cs,ProcessRecord,The length of the statement  "                _trace.TraceError("{0}Missed message(s) from SQL Server. Expected payload ID {1} but got {2}."' _tracePrefix' _lastPayloadId + 1' id); " is 134.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlReceiver,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlReceiver.cs,ProcessRecord,The length of the statement  "                _trace.TraceInformation("{0}Duplicate message(s) or payload ID reset from SQL Server. Last payload ID {1}' this payload ID {2}"' _tracePrefix' _lastPayloadId' id); " is 163.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlReceiver,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlReceiver.cs,ProcessRecord,The length of the statement  "            _trace.TraceVerbose("{0}Updated receive reader initial payload ID parameter={1}"' _tracePrefix' _dbOperation.Parameters[0].Value); " is 130.
Long Statement,Microsoft.AspNet.SignalR.SqlServer,SqlStream,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlStream.cs,Send,The length of the statement  "            _trace.TraceVerbose("{0}Saving payload with {1} messages(s) to SQL server"' _tracePrefix' messages.Count' _streamIndex); " is 120.
Empty Catch Block,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.SqlServer,ObservableDbOperation,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\ObservableDbOperation.cs,SqlDependency_OnChange,The following statement contains a magic number: if (e.Type == SqlNotificationType.Change)              {                  if (e.Info == SqlNotificationInfo.Update)                  {                      Trace.TraceVerbose("{0}SQL notification details: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info);                  }                  else if (e.Source == SqlNotificationSource.Timeout)                  {                      Trace.TraceVerbose("{0}SQL notification timed out"' TracePrefix);                  }                  else                  {                      Trace.TraceError("{0}Unexpected SQL notification details: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info);                        Faulted(new SqlMessageBusException(String.Format(CultureInfo.InvariantCulture' Resources.Error_UnexpectedSqlNotificationType' e.Type' e.Source' e.Info)));                  }              }              else if (e.Type == SqlNotificationType.Subscribe)              {                  Debug.Assert(e.Info != SqlNotificationInfo.Invalid' "Ensure the SQL query meets the requirements for query notifications at http://msdn.microsoft.com/en-US/library/ms181122.aspx");                    Trace.TraceError("{0}SQL notification subscription error: Type={1}' Source={2}' Info={3}"' TracePrefix' e.Type' e.Source' e.Info);                    if (e.Info == SqlNotificationInfo.TemplateLimit)                  {                      // We've hit a subscription limit' pause for a bit then start again                      Thread.Sleep(2000);                  }                  else                  {                      // Unknown subscription error' let's stop using query notifications                      _notificationState = NotificationState.Disabled;                      try                      {                          SqlDependency.Stop(ConnectionString);                      }                      catch (Exception) { }                  }              }
Magic Number,Microsoft.AspNet.SignalR.SqlServer,SqlMessageBus,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlMessageBus.cs,Initialize,The following statement contains a magic number: while (true)              {                  try                  {                      var installer = new SqlInstaller(_connectionString' _tableNamePrefix' _configuration.TableCount' _trace);                      installer.Install();                      break;                  }                  catch (Exception ex)                  {                      // Exception while installing                      for (var i = 0; i < _configuration.TableCount; i++)                      {                          OnError(i' ex);                      }                        _trace.TraceError("Error trying to install SQL server objects' trying again in 2 seconds: {0}"' ex);                        // Try again in a little bit                      Thread.Sleep(2000);                  }              }
Magic Number,Microsoft.AspNet.SignalR.SqlServer,SqlMessageBus,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.SqlServer\SqlMessageBus.cs,StartReceiving,The following statement contains a magic number: stream.StartReceiving()                  // Open the stream once receiving has started                  .Then(() => Open(streamIndex))                  // Starting the receive loop failed                  .Catch(ex =>                  {                      OnError(streamIndex' ex);                        // Try again in a little bit                      Thread.Sleep(2000);                      StartReceiving(streamIndex);                  }'                  _trace);
