Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.AspNet.SignalR.Client.JS.Tests,Startup,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.JS.Tests\Startup.cs,Configuration,The length of the statement  "                    await context.Response.WriteAsync($"window._server = {{ azureSignalR: {(string.IsNullOrEmpty(AzureSignalRConnectionString) ? "false" : "true")} }}"); " is 149.
Magic Number,Microsoft.AspNet.SignalR.Client.JS.Tests,Startup,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.JS.Tests\Startup.cs,Configuration,The following statement contains a magic number: app.Use((context' next) =>              {                  if (context.Request.Path.StartsWithSegments(new PathString("/status")))                  {                      context.Response.StatusCode = 200;                      return Task.CompletedTask;                  }                  return next();              });
Magic Number,Microsoft.AspNet.SignalR.Client.JS.Tests,Startup,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.JS.Tests\Startup.cs,Configuration,The following statement contains a magic number: app.Use(async (context' next) =>              {                  if (context.Request.Path.StartsWithSegments(new PathString("/js/server-info.js")))                  {                      // Inject server settings in to the javascript                      context.Response.StatusCode = 200;                      context.Response.ContentType = "application/javascript";                      await context.Response.WriteAsync($"window._server = {{ azureSignalR: {(string.IsNullOrEmpty(AzureSignalRConnectionString) ? "false" : "true")} }}");                  }                  else                  {                      await next();                  }              });
