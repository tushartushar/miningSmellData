Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnects,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,SendingMessageWhenTransportIsReconnectingThrows,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketSendReceiveTest,The following statement contains a magic number: const int MessageCount = 3;
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketSendReceiveTest,The following statement contains a magic number: await Task.Run(() => wh.Wait(5000));
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnects,The following statement contains a magic number: await hubConnection.Start(new WebSocketTransport { ReconnectDelay = new TimeSpan(0' 0' 0' 500) });
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnects,The following statement contains a magic number: Assert.True(await Task.Run(() => reconnectedWh.Wait(5000)));
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnects,The following statement contains a magic number: await Task.Delay(200);
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnects,The following statement contains a magic number: await Task.Run(() => messageReceivedWh.Wait(5000));
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: hubConnection.StateChanged += stateChange =>                  {                      if (stateChange.OldState == ConnectionState.Connected &&                          stateChange.NewState == ConnectionState.Reconnecting)                      {                          // Reverting quick timeout                          ((IConnection)hubConnection).KeepAliveData = new KeepAliveData(                              timeoutWarning: TimeSpan.FromSeconds(30)'                              timeout: TimeSpan.FromSeconds(20)'                              checkInterval: TimeSpan.FromSeconds(2));                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: hubConnection.StateChanged += stateChange =>                  {                      if (stateChange.OldState == ConnectionState.Connected &&                          stateChange.NewState == ConnectionState.Reconnecting)                      {                          // Reverting quick timeout                          ((IConnection)hubConnection).KeepAliveData = new KeepAliveData(                              timeoutWarning: TimeSpan.FromSeconds(30)'                              timeout: TimeSpan.FromSeconds(20)'                              checkInterval: TimeSpan.FromSeconds(2));                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: hubConnection.StateChanged += stateChange =>                  {                      if (stateChange.OldState == ConnectionState.Connected &&                          stateChange.NewState == ConnectionState.Reconnecting)                      {                          // Reverting quick timeout                          ((IConnection)hubConnection).KeepAliveData = new KeepAliveData(                              timeoutWarning: TimeSpan.FromSeconds(30)'                              timeout: TimeSpan.FromSeconds(20)'                              checkInterval: TimeSpan.FromSeconds(2));                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: await hubConnection.Start(new WebSocketTransport { ReconnectDelay = new TimeSpan(0' 0' 0' 500) });
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: ((IConnection)hubConnection).KeepAliveData = new KeepAliveData(                      timeoutWarning: TimeSpan.FromSeconds(10)'                      timeout: TimeSpan.FromSeconds(0.5)'                      checkInterval: TimeSpan.FromSeconds(1)                      );
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: ((IConnection)hubConnection).KeepAliveData = new KeepAliveData(                      timeoutWarning: TimeSpan.FromSeconds(10)'                      timeout: TimeSpan.FromSeconds(0.5)'                      checkInterval: TimeSpan.FromSeconds(1)                      );
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: Assert.True(await Task.Run(() => reconnectedWh.Wait(5000)));
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: await Task.Delay(200);
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,WebSocketReconnectsIfConnectionLost,The following statement contains a magic number: Assert.True(await Task.Run(() => messageReceivedWh.Wait(5000)));
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,SendingMessageWhenTransportIsReconnectingThrows,The following statement contains a magic number: await hubConnection.Start(new WebSocketTransport { ReconnectDelay = new TimeSpan(0' 0' 0' 500) });
Magic Number,Microsoft.AspNet.SignalR.Client.Store.Tests,EndToEndTests,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.UWP.Tests\FunctionalTests\EndToEndTests.cs,SendingMessageWhenTransportIsReconnectingThrows,The following statement contains a magic number: Assert.True(await Task.Run(() => reconnectingWh.Wait(5000)));
