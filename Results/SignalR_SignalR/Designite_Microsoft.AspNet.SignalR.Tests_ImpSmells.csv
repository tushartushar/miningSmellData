Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.AspNet.SignalR.Tests,TokenValidatingPersistentConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,TryGetConnectionId,The method has 5 parameters. Parameters: context' connectionToken' connectionId' message' statusCode
Long Parameter List,Microsoft.AspNet.SignalR.Tests.Server.Transports,TestLongPollingTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\LongPollingTransportFacts.cs,TestLongPollingTransport,The method has 6 parameters. Parameters: context' json' heartBeat' counters' traceManager' configurationManager
Long Statement,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,SymmetricWithKeyMap,The length of the statement  "                new Cursor("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u13A1"' 0xffffffffffffffff' map("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u13A1")) " is 127.
Long Statement,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,GetCursorsThrowsGivenDuplicates,The length of the statement  "            var serializedCursors = @"d-\\foo\|1\'4\'\\\|\\\\\\\''A|\\foo\|1\'4\'\\\|\\\\\\\''0|\\foo\|1\'4\'\\\|\\\\\\\''FFFFFFFFFFFFFFFF|'0|'0|" " is 134.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides)' Name = "TestHub" }' "OnDisconnected"' out actionInfo1' new IJsonValue[] { }); " is 155.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides)' Name = "TestHub" }' "OnReconnected"' out actionInfo2' new IJsonValue[] { }); " is 154.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides)' Name = "TestHub" }' "OnConnected"' out actionInfo3' new IJsonValue[] { }); " is 152.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesIHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides2)' Name = "TestHub" }' "OnDisconnected"' out actionInfo1' new IJsonValue[] { }); " is 156.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesIHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides2)' Name = "TestHub" }' "OnReconnected"' out actionInfo2' new IJsonValue[] { }); " is 155.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesIHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides2)' Name = "TestHub" }' "OnConnected"' out actionInfo3' new IJsonValue[] { }); " is 153.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesIHubMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(HubWithOverrides2)' Name = "TestHub" }' "Dispose"' out actionInfo4' new IJsonValue[] { }); " is 149.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesObjectMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithObjectMethods)' Name = "TestHub" }' "GetHashCode"' out actionInfo1' new IJsonValue[] { }); " is 158.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesObjectMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithObjectMethods)' Name = "TestHub" }' "Equals"' out actionInfo2' new IJsonValue[] { JTokenify("test") }); " is 171.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesObjectMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithObjectMethods)' Name = "TestHub" }' "ToString"' out actionInfo3' new IJsonValue[] { }); " is 155.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesObjectMethods,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithObjectMethods)' Name = "TestHub" }' "Dispose"' out actionInfo4' new IJsonValue[] { JTokenify(false) }); " is 171.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesEvents,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithEvents)' Name = "TestHub" }' "add_MyEvent"' out actionInfo1' new IJsonValue[] { JTokenify("x") }); " is 166.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesEvents,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(MyHubWithEvents)' Name = "TestHub" }' "remove_MyEvent"' out actionInfo2' new IJsonValue[] { JTokenify("x") }); " is 169.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionOnDerivedHubFindsMethodOnBasedType,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestDerivedHub)' Name = "TestHub" }' "Foo"' out actionInfo' new IJsonValue[] { }); " is 141.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesPropertiesOnDeclaredType,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "get_Value"' out actionInfo' new IJsonValue[] { }); " is 140.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionExcludesPropetiesOnBaseTypes,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "get_Clients"' out actionInfo' new IJsonValue[] { }); " is 142.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionLocatesPublicMethodsOnHub,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "Foo"' out actionInfo' new IJsonValue[] { }); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionReturnsNullIfMethodAmbiguous,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "Bar"' out actionInfo' new[] { JTokenify(1) }); " is 136.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionPicksMethodWithMatchingArguments,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "Foo"' out actionInfo' new[] { JTokenify(1) }); " is 136.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsComplexArguments,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithComplex"' out actionInfo' new IJsonValue[] { new JTokenValue(arg) }); " is 169.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithArray"' out actionInfo' new IJsonValue[] { new JTokenValue(arg) }); " is 167.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsComplexArrayArgument,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithArrayOfComplete"' out actionInfo' new IJsonValue[] { new JTokenValue(new JArray(new object[] { arg })) }); " is 206.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsComplexArrayArgument,The length of the statement  "            var complexArray = binder.ResolveMethodParameters(actionInfo' new[] { new JTokenValue(new JArray(new object[] { arg })) })[0] as Complex[]; " is 139.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsGuid,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithGuid"' out actionInfo' new IJsonValue[] { arg }); " is 149.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsByteArray,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithByteArray"' out actionInfo' new IJsonValue[] { arg }); " is 154.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsArrayOfByteArray,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodListOfByteArray"' out actionInfo' new IJsonValue[] { arg }); " is 156.
Long Statement,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsNullables,The length of the statement  "            resolver.TryGetMethod(new HubDescriptor { HubType = typeof(TestHub)' Name = "TestHub" }' "MethodWithNullables"' out actionInfo' new IJsonValue[] { arg1' arg2 }); " is 161.
Long Statement,Microsoft.AspNet.SignalR.Tests,PerformanceCounterManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PerformanceCounterManagerFacts.cs,SanitizesInstanceNames,The length of the statement  "            // Details on how to sanitize instance names are at http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.performancecounter.instancename " is 150.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,UnauthenticatedUserWithAuthenticatedTokenFails,The length of the statement  "                protectedData.Setup(m => m.Unprotect(It.IsAny<string>()' It.IsAny<string>())).Returns<string' string>((value' purpose) => value); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,UnauthenticatedUserWithAuthenticatedTokenFails,The length of the statement  "                Assert.Equal(false' connection.Object.TryGetConnectionId(context' "1:::11:::::::1:1"' out connectionId' out message' out statusCode)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,AuthenticatedUserNameMatches,The length of the statement  "                protectedData.Setup(m => m.Unprotect(It.IsAny<string>()' It.IsAny<string>())).Returns<string' string>((value' purpose) => value); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,AuthenticatedUserNameMatches,The length of the statement  "                Assert.Equal(true' connection.Object.TryGetConnectionId(context' "1:Name"' out connectionId' out message' out statusCode)); " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,AuthenticatedUserWithColonsInUserName,The length of the statement  "                protectedData.Setup(m => m.Unprotect(It.IsAny<string>()' It.IsAny<string>())).Returns<string' string>((value' purpose) => value); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,AuthenticatedUserWithColonsInUserName,The length of the statement  "                Assert.Equal(true' connection.Object.TryGetConnectionId(context' connectionId + ":::11:::::::1:1"' out cid' out message' out statusCode)); " is 138.
Long Statement,Microsoft.AspNet.SignalR.Tests.Core,MethodExtensionsFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Extensions\MethodExtensionsFacts.cs,MatchSuccessful,The length of the statement  "            MethodDescriptor methodDescriptor = hubManager.GetHubMethod("CoreTestHubWithMethod"' "AddNumbers"' new IJsonValue[] { null' null }); " is 132.
Long Statement,Microsoft.AspNet.SignalR.Tests.Core,DefaultHubManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\DefaultHubManagerFacts.cs,GetHubMethodFromNonExistantHub,The length of the statement  "            var methodDescriptor = hubManager.GetHubMethod("________________CoreTestHubWithMethod________________"' "AddNumbers"' new IJsonValue[] { null' null }); " is 151.
Long Statement,Microsoft.AspNet.SignalR.Tests.Core,DefaultHubManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\DefaultHubManagerFacts.cs,GetHubMethodFromInvalidHubThrows,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => hubManager.GetHubMethod(hub.Name' "Method"' new IJsonValue[] { null' null })); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Tests.Core,DefaultHubManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\DefaultHubManagerFacts.cs,GetValidHubMethodsWithPredicate,The length of the statement  "            var methodDescriptors = hubManager.GetHubMethods("CoreTestHubWithMethod"' descriptor => descriptor.Name == "AddNumbers"); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Tests.Core,DefaultHubManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\DefaultHubManagerFacts.cs,GetValidHubMethodsWithInvalidPredicate,The length of the statement  "            var methodDescriptors = hubManager.GetHubMethods("CoreTestHubWithMethod"' descriptor => descriptor.Name == "______AddNumbers______"); " is 133.
Long Statement,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,WebSocketHandlerThrowsCorrectly,The length of the statement  "            webSocket.Setup(ws => ws.ReceiveAsync(It.IsAny<ArraySegment<byte>>()' It.IsAny<CancellationToken>())).Throws(new OperationCanceledException()); " is 143.
Long Statement,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,CloseNoopsIfInTerminalState,The length of the statement  "            webSocket.Verify(m => m.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None)' Times.Never()); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,SendNoopsIfNotOpen,The length of the statement  "            webSocket.Verify(m => m.SendAsync(It.IsAny<ArraySegment<byte>>()' WebSocketMessageType.Text' true' CancellationToken.None)' Times.Never()); " is 139.
Long Statement,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,DefaultWebSocketHandlerOperationsNoopAfterClose,The length of the statement  "            afterWebSocket.Verify(m => m.SendAsync(It.IsAny<ArraySegment<byte>>()' WebSocketMessageType.Text' true' CancellationToken.None)' Times.Never()); " is 144.
Long Statement,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,DefaultWebSocketHandlerOperationsNoopAfterClose,The length of the statement  "            afterWebSocket.Verify(m => m.CloseOutputAsync(WebSocketCloseStatus.NormalClosure' ""' CancellationToken.None)' Times.Never()); " is 126.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamManagerFacts.cs,StreamManagerValidatesScaleoutConfig,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => new ScaleoutStreamManager((int x' IList<Message> list) => { return TaskAsyncHelper.Empty; }' " is 139.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,RequestingSignalrHubsUrlReturnsProxy,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,RequestingSignalrHubsUrlWithTrailingSlashReturnsProxy,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,RequestingSignalrHubsUrlWithJavaScriptProxiesDesabledDoesNotReturnProxy,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,DetailedErrorsAreDisabledByDefault,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,DetailedErrorsFromFaultedTasksAreDisabledByDefault,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,DetailedErrorsCanBeEnabled,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,DetailedErrorsFromFaultedTasksCanBeEnabled,The length of the statement  "            response.Setup(m => m.Write(It.IsAny<ArraySegment<byte>>())).Callback<ArraySegment<byte>>(data => buffer.Add(Encoding.UTF8.GetString(data.Array' data.Offset' data.Count))); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubDispatcherFacts.cs,DuplicateHubNamesThrows,The length of the statement  "            mockHubManager.Setup(m => m.GetHub("foo")).Returns(new HubDescriptor { Name = "foo"' HubType = mockHub.Object.GetType() }); " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,InvalidTypesAreRejected,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => TypedClientBuilder<IAmDerivedFromInvalidInterface>.Build(mockClientProxy)); " is 122.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,SendUrlTriggersReceivedEvent,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,AbortUrlTriggersConnectionAbort,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,AbortUrlTriggersContentTypeSet,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' null' heartBeat.Object' counters.Object' traceManager.Object' null) " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,AvoidDeadlockIfCancellationTokenTriggeredBeforeSubscribing,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,ReceiveThrowingReturnsFaultedTask,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,ReceiveAbortBeforeCancellationSetup,The length of the statement  "                                                     It.IsAny<object>())).Callback<string' Func<PersistentResponse' object' Task<bool>>' int' object>(async (id' cb' max' st) => " is 123.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,ReceiveAbortBeforeCancellationSetup,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,RunWithPostReceive,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,InitializeResponseIsFirstEnqueuedOperation,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,RequestCompletesAfterFaultedInitializeResponse,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters' traceManager.Object' new MemoryPool()) " is 128.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,EnqueAsyncWriteAndEndRequest,The length of the statement  "            var transport = new Mock<ForeverTransport>(hostContext' json' heartBeat.Object' counters.Object' traceManager.Object' new MemoryPool()) " is 135.
Long Statement,Microsoft.AspNet.SignalR.Tests.Server.Transports,WebSocketTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\WebSocketTransportFacts.cs,AbortUrlTriggersContentTypeSet,The length of the statement  "            var transport = new WebSocketTransport(hostContext' null' heartBeat.Object' counters.Object' traceManager.Object' null' null); " is 126.
Empty Catch Block,Microsoft.AspNet.SignalR.Tests,TaskAsyncHelperFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskAsyncHelperFacts.cs,PreserveCultureAwaiterPreservesCulture,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,RunWithPostReceive,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Tests,ArrayTextReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ArrayTextReaderFacts.cs,CanDeserializeJson,The following statement contains a magic number: var json = JsonConvert.SerializeObject(new { A = 1' B = 2' C = "Hello World"' D = new string('C'' 10000) });
Magic Number,Microsoft.AspNet.SignalR.Tests,ArrayTextReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ArrayTextReaderFacts.cs,CanDeserializeJson,The following statement contains a magic number: var json = JsonConvert.SerializeObject(new { A = 1' B = 2' C = "Hello World"' D = new string('C'' 10000) });
Magic Number,Microsoft.AspNet.SignalR.Tests,ArrayTextReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ArrayTextReaderFacts.cs,CanDeserializeJson,The following statement contains a magic number: Assert.Equal(2' obj.Value<int>("B"));
Magic Number,Microsoft.AspNet.SignalR.Tests,ArrayTextReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ArrayTextReaderFacts.cs,CanDeserializeJson,The following statement contains a magic number: Assert.Equal(new string('C'' 10000)' obj.Value<string>("D"));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(110' config.ConnectionTimeout.TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(30' config.DisconnectTimeout.TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(10' config.KeepAlive.Value.TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(20' config.KeepAliveTimeout().Value.TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(5' config.HeartbeatInterval().TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DefaultValues,The following statement contains a magic number: Assert.Equal(100' config.TopicTtl().TotalSeconds);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenLessThanTwoSeconds,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.KeepAlive = TimeSpan.FromSeconds(1.99));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenLessThanTwoSeconds,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenGreaterThanAThirdOfTheDisconnectTimeout,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.KeepAlive = TimeSpan.FromSeconds(10.01));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenGreaterThanAThirdOfTheDisconnectTimeout,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenGreaterThanAThirdOfTheDisconnectTimeout,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(15);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenGreaterThanAThirdOfTheDisconnectTimeout,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.KeepAlive = TimeSpan.FromSeconds(5.01));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveThrowsWhenGreaterThanAThirdOfTheDisconnectTimeout,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TwoSecondsAndNullOnlyValidKeepAliveValuesWhenDisconnectTimeoutIsSixSeconds,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TwoSecondsAndNullOnlyValidKeepAliveValuesWhenDisconnectTimeoutIsSixSeconds,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.KeepAlive = TimeSpan.FromSeconds(1.99));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TwoSecondsAndNullOnlyValidKeepAliveValuesWhenDisconnectTimeoutIsSixSeconds,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.KeepAlive = TimeSpan.FromSeconds(2.01));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TwoSecondsAndNullOnlyValidKeepAliveValuesWhenDisconnectTimeoutIsSixSeconds,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DisconnectTimeoutThrowsWhenLessThanSixSeconds,The following statement contains a magic number: Assert.Throws(typeof(ArgumentOutOfRangeException)' () => config.DisconnectTimeout = TimeSpan.FromSeconds(5.99));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,DisconnectTimeoutThrowsWhenLessThanSixSeconds,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,SettingDisconnectTimeoutSetKeepAliveToAThirdOfItself,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,SettingDisconnectTimeoutSetKeepAliveToAThirdOfItself,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,SettingDisconnectTimeoutSetKeepAliveToAThirdOfItself,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.DisconnectTimeout.Ticks / 3)' config.KeepAlive);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveCannotBeConfiguredBeforeDisconnectTimeout,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveCannotBeConfiguredBeforeDisconnectTimeout,The following statement contains a magic number: Assert.Throws(typeof(InvalidOperationException)' () => config.DisconnectTimeout = TimeSpan.FromSeconds(40));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveCannotBeConfiguredBeforeDisconnectTimeout,The following statement contains a magic number: Assert.Throws(typeof(InvalidOperationException)' () => config.DisconnectTimeout = TimeSpan.FromSeconds(40));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveTimeoutIsTwiceTheKeepAlive,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(random.NextDouble() * 8 + 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveTimeoutIsTwiceTheKeepAlive,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(random.NextDouble() * 8 + 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,KeepAliveTimeoutIsTwiceTheKeepAlive,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.KeepAlive.Value.Ticks * 2)' config.KeepAliveTimeout());
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsHalfTheKeepAlive,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(random.NextDouble() * 8 + 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsHalfTheKeepAlive,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromSeconds(random.NextDouble() * 8 + 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsHalfTheKeepAlive,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.KeepAlive.Value.Ticks / 2)' config.HeartbeatInterval());
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsASixthOfTheDisconnectTimeoutIfTheKeepAliveIsNull,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsASixthOfTheDisconnectTimeoutIfTheKeepAliveIsNull,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,HeartbeatIntervalIsASixthOfTheDisconnectTimeoutIfTheKeepAliveIsNull,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.DisconnectTimeout.Ticks / 6)' config.HeartbeatInterval());
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTimeToLiveIsDoubleTheDisconnectAndKeepAliveTimeouts,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(12' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTimeToLiveIsDoubleTheDisconnectAndKeepAliveTimeouts,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(12' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTimeToLiveIsDoubleTheDisconnectAndKeepAliveTimeouts,The following statement contains a magic number: config.KeepAlive = TimeSpan.FromTicks(config.DisconnectTimeout.Ticks / 6);
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTimeToLiveIsDoubleTheDisconnectAndKeepAliveTimeouts,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.DisconnectTimeout.Ticks * 2 + config.KeepAliveTimeout().Value.Ticks * 2)'                           config.TopicTtl());
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTimeToLiveIsDoubleTheDisconnectAndKeepAliveTimeouts,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.DisconnectTimeout.Ticks * 2 + config.KeepAliveTimeout().Value.Ticks * 2)'                           config.TopicTtl());
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTopicTimeToLiveIsDoubleTheDisconnectTimeoutWhenKeepAliveIsNull,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTopicTimeToLiveIsDoubleTheDisconnectTimeoutWhenKeepAliveIsNull,The following statement contains a magic number: config.DisconnectTimeout = TimeSpan.FromSeconds(random.Next(6' 31536000));
Magic Number,Microsoft.AspNet.SignalR.Tests,ConfigurationManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\ConfigurationManagerFacts.cs,TopicTopicTimeToLiveIsDoubleTheDisconnectTimeoutWhenKeepAliveIsNull,The following statement contains a magic number: Assert.Equal(TimeSpan.FromTicks(config.DisconnectTimeout.Ticks * 2)' config.TopicTtl());
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,Symmetric,The following statement contains a magic number: var cursors = new[]              {                  new Cursor(@"\foo|1'4'\|\\\'"' 10)'                  new Cursor(""' 0)'                  new Cursor("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u13A1"' 0xffffffffffffffff)              };
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,SymmetricWithManyCursors,The following statement contains a magic number: i < 8192
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,SymmetricWithManyCursors,The following statement contains a magic number: Assert.Equal(deserializedCursors.Count' 8192);
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,SymmetricWithManyCursors,The following statement contains a magic number: i < 8192
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,SymmetricWithKeyMap,The following statement contains a magic number: var cursors = new[]              {                  new Cursor(@"\foo|1'4'\|\\\'"' 10' map(@"\foo|1'4'\|\\\'"))'                  new Cursor(""' 0' map(""))'                  new Cursor("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u13A1"' 0xffffffffffffffff' map("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u13A1"))              };
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,GetCursorsReturnsNullIfKeyMapReturnsNull,The following statement contains a magic number: var cursors = new[]              {                  new Cursor(@"\foo|1'4'\|\\\'"' 10)'                  new Cursor(""' 0)'                  new Cursor("\u03A3\u03B9\u03B3\u03BD\u03B1\u03BB\u03A1"' 0xffffffffffffffff)              };
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,GetCursorsAllowsEmptyKey,The following statement contains a magic number: Assert.Equal(10UL' deserializedCursors[0].Id);
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,CursorWithInvalidSurrogatePair,The following statement contains a magic number: Assert.Equal(3' cursors[0].Key.Length);
Magic Number,Microsoft.AspNet.SignalR.Tests,CursorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\CursorFacts.cs,CursorWithInvalidSurrogatePair,The following statement contains a magic number: Assert.Equal(10UL' cursors[0].Id);
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsComplexArguments,The following statement contains a magic number: Assert.Equal(34567' complex.Address.Zip);
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The following statement contains a magic number: var arg = new JArray(new[] { 1' 2' 3 });
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The following statement contains a magic number: var arg = new JArray(new[] { 1' 2' 3 });
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The following statement contains a magic number: Assert.Equal(2' args[1]);
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The following statement contains a magic number: Assert.Equal(3' args[2]);
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsSimpleArrayArgument,The following statement contains a magic number: Assert.Equal(3' args[2]);
Magic Number,Microsoft.AspNet.SignalR.Tests,DefaultActionResolverFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\DefaultActionResolverFacts.cs,ResolveActionBindsComplexArrayArgument,The following statement contains a magic number: Assert.Equal(34567' complex.Address.Zip);
Magic Number,Microsoft.AspNet.SignalR.Tests,MemoryPoolTextWriterFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\MemoryPoolTextWriterFacts.cs,StringOverrideBehavesAsCharArray,The following statement contains a magic number: var testTxt = new string('m'' 260);
Magic Number,Microsoft.AspNet.SignalR.Tests,ProcessRequest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,UnknownTransportFails,The following statement contains a magic number: Assert.Equal(400' context.Response.StatusCode);
Magic Number,Microsoft.AspNet.SignalR.Tests,ProcessRequest,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,MissingConnectionTokenFails,The following statement contains a magic number: Assert.Equal(400' context.Response.StatusCode);
Magic Number,Microsoft.AspNet.SignalR.Tests,VerifyGroups,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,GroupsAreParsedFromToken,The following statement contains a magic number: Assert.Equal(2' groups.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,UnprotectedConnectionTokenFails,The following statement contains a magic number: Assert.Equal(400' statusCode);
Magic Number,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,NullUnprotectedConnectionTokenFails,The following statement contains a magic number: Assert.Equal(400' statusCode);
Magic Number,Microsoft.AspNet.SignalR.Tests,GetConnectionId,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,UnauthenticatedUserWithAuthenticatedTokenFails,The following statement contains a magic number: Assert.Equal(403' statusCode);
Magic Number,Microsoft.AspNet.SignalR.Tests,TokenValidatingPersistentConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentConnectionFacts.cs,TryGetConnectionId,The following statement contains a magic number: statusCode = 200;
Magic Number,Microsoft.AspNet.SignalR.Tests,PersistentResponseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentResponseFacts.cs,WriteJsonWritesMessagesThatAreNotExcluded,The following statement contains a magic number: response.Messages.Add(new ArraySegment<Message>(new[] { new Message("1"' "key"' "value1")'                                                                       new Message("1"' "key2"' "value2") }' 0' 2));
Magic Number,Microsoft.AspNet.SignalR.Tests,PersistentResponseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentResponseFacts.cs,WriteJsonWritesSkipsCommands,The following statement contains a magic number: response.Messages.Add(new ArraySegment<Message>(new[] { new Message("1"' "key"' "value1") { CommandId = "something"}'                                                                       new Message("1"' "key2"' "value2") }' 0' 2));
Magic Number,Microsoft.AspNet.SignalR.Tests,PersistentResponseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentResponseFacts.cs,WriteJsonSkipsNullGroups,The following statement contains a magic number: response.Messages.Add(new ArraySegment<Message>(new[] { new Message("1"' "key"' "value1")'                                                                       new Message("1"' "key2"' "value2") }' 0' 2));
Magic Number,Microsoft.AspNet.SignalR.Tests,PersistentResponseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\PersistentResponseFacts.cs,WriteJsonSkipsNullTransportDaa,The following statement contains a magic number: response.Messages.Add(new ArraySegment<Message>(new[] { new Message("1"' "key"' "value1")'                                                                       new Message("1"' "key2"' "value2") }' 0' 2));
Magic Number,Microsoft.AspNet.SignalR.Tests,PopulateResponseState,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Connections\ConnectionFacts.cs,GroupTokenIsNotNullWhenGroupsChange,The following statement contains a magic number: var parts = response.GroupsToken.Split(new[] { ':' }' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,PopulateResponseState,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Connections\ConnectionFacts.cs,GroupTokenIsNotNullWhenGroupsChange,The following statement contains a magic number: Assert.Equal(2' parts.Length);
Magic Number,Microsoft.AspNet.SignalR.Tests,PopulateResponseState,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Connections\ConnectionFacts.cs,GroupTokenIsNotNullWhenGroupsChangeToEmpty,The following statement contains a magic number: var parts = response.GroupsToken.Split(new[] { ':' }' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,PopulateResponseState,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Connections\ConnectionFacts.cs,GroupTokenIsNotNullWhenGroupsChangeToEmpty,The following statement contains a magic number: Assert.Equal(2' parts.Length);
Magic Number,Microsoft.AspNet.SignalR.Tests,SipHashBasedStringEqualityComparerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\SipHashBasedStringEqualityComparerFacts.cs,TestVectors,The following statement contains a magic number: byte* keyBytes = stackalloc byte[16];
Magic Number,Microsoft.AspNet.SignalR.Tests,SipHashBasedStringEqualityComparerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\SipHashBasedStringEqualityComparerFacts.cs,TestVectors,The following statement contains a magic number: i < 16
Magic Number,Microsoft.AspNet.SignalR.Tests,SipHashBasedStringEqualityComparerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\SipHashBasedStringEqualityComparerFacts.cs,TestVectors,The following statement contains a magic number: ulong k1 = *(ulong*)&keyBytes[8];
Magic Number,Microsoft.AspNet.SignalR.Tests,SipHashBasedStringEqualityComparerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\SipHashBasedStringEqualityComparerFacts.cs,TestVectors,The following statement contains a magic number: const int INPUT_SIZE = 63;
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,Symetric,The following statement contains a magic number: i < 64
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,Symetric,The following statement contains a magic number: Assert.Equal(64' unminifiedTracker.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,UpTo64UniqueStringsMinifyTo1Char,The following statement contains a magic number: i < 64
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,UpTo64UniqueStringsMinifyTo1Char,The following statement contains a magic number: Assert.Equal(64' minifiedStrings.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,The4097thUniqueStringMinifiesTo3Chars,The following statement contains a magic number: i < 4096
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,The4097thUniqueStringMinifiesTo3Chars,The following statement contains a magic number: Assert.Equal(4096' minifiedStrings.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,The4097thUniqueStringMinifiesTo3Chars,The following statement contains a magic number: Assert.True(minifiedString.Length <= 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,StringMinifierFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\StringMinifierFacts.cs,The4097thUniqueStringMinifiesTo3Chars,The following statement contains a magic number: Assert.Equal(3' stringMinifer.Minify(Guid.NewGuid().ToString()).Length);
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskAsyncHelperFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskAsyncHelperFacts.cs,EnsureCulturePreserved,The following statement contains a magic number: Task.Delay(100).ContinueWith(_ => saveCulture());
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,TaskQueueRunsTasksInSequence,The following statement contains a magic number: Task task = queue.Enqueue(() =>              {                  return Task.Delay(100).Then(() => n++);              });
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,TaskQueueRunsTasksInSequence,The following statement contains a magic number: Assert.Equal(n' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,FailedToEnqueueReturnsNull,The following statement contains a magic number: var queue = new TaskQueue(TaskAsyncHelper.Empty' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,FailedToEnqueueReturnsNull,The following statement contains a magic number: queue.Enqueue(() => Task.Delay(100));
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,FailedToEnqueueReturnsNull,The following statement contains a magic number: queue.Enqueue(() => Task.Delay(100));
Magic Number,Microsoft.AspNet.SignalR.Tests,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\TaskQueueFacts.cs,FailedToEnqueueReturnsNull,The following statement contains a magic number: Task task = queue.Enqueue(() => Task.Delay(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,DefaultHubManagerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\DefaultHubManagerFacts.cs,GetValidHubMethod,The following statement contains a magic number: Assert.Equal(parameters.Count' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithNormalHubMethod,The following statement contains a magic number: object[] parameters = new object[] { 5' "some string"' new DateTime(2001' 1' 1) };
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithNormalHubMethod,The following statement contains a magic number: object[] parameters = new object[] { 5' "some string"' new DateTime(2001' 1' 1) };
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithNormalHubMethod,The following statement contains a magic number: Assert.Equal(5' hub._i);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithNormalHubMethod,The following statement contains a magic number: Assert.Equal(new DateTime(2001' 1' 1)' hub._dt);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithParameterlessHubMethod,The following statement contains a magic number: Assert.Equal(53' intResult);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithStaticHubMethod,The following statement contains a magic number: Assert.Equal(89' intResult);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithVoidHubMethod,The following statement contains a magic number: object[] parameters = new object[] { 5' "some string"' new DateTime(2001' 1' 1) };
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithVoidHubMethod,The following statement contains a magic number: object[] parameters = new object[] { 5' "some string"' new DateTime(2001' 1' 1) };
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithVoidHubMethod,The following statement contains a magic number: Assert.Equal(5' hub._i);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,HubMethodDispatcherFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ExecuteWithVoidHubMethod,The following statement contains a magic number: Assert.Equal(new DateTime(2001' 1' 1)' hub._dt);
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,DispatcherHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,ParameterlessHubMethod,The following statement contains a magic number: return 53;
Magic Number,Microsoft.AspNet.SignalR.Tests.Core,DispatcherHub,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Core\Hubs\Lookup\HubMethodDispatcherFacts.cs,StaticHubMethod,The following statement contains a magic number: return 89;
Magic Number,Microsoft.AspNet.SignalR.Tests.Json,JsonFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Json\JsonFacts.cs,CreateDefaultSerializerHasCorrectMaxDepth,The following statement contains a magic number: Assert.Equal(20' serializer.MaxDepth);
Magic Number,Microsoft.AspNet.SignalR.Tests.Json,JsonFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Json\JsonFacts.cs,CreateDefaultJsonSerializerSettingsHasCorrectMaxDepth,The following statement contains a magic number: Assert.Equal(20' settings.MaxDepth);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,NoPortReturnsDefaultHttpPort,The following statement contains a magic number: Assert.Equal(80' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,NoPortReturnsDefaultHttpsPort,The following statement contains a magic number: Assert.Equal(443' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,UsesLocalPortIfHostHeaderMissing,The following statement contains a magic number: Assert.Equal(12345' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,NoHostHeaderUsesIPAddress,The following statement contains a magic number: Assert.Equal(80' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,NoHostOrIpAddressUsesLocalhost,The following statement contains a magic number: Assert.Equal(443' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,DomainForHostHeader,The following statement contains a magic number: Assert.Equal(443' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,DomainForHostHeaderAndPort,The following statement contains a magic number: Assert.Equal(356' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,IPv6AddressForHostHeader,The following statement contains a magic number: Assert.Equal(80' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,IPv6AddressForHostHeaderAndPort,The following statement contains a magic number: Assert.Equal(1234' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,IPv4AddressForHostHeader,The following statement contains a magic number: Assert.Equal(80' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,IPv4AddressAndPortForHostHeader,The following statement contains a magic number: Assert.Equal(89' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,HostWithoutPortUsesDefaultHttpPort,The following statement contains a magic number: Assert.Equal(80' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,ServerRequestFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\ServerRequestFacts.cs,HostWithoutPortUsesDefaultHttpsPort,The following statement contains a magic number: Assert.Equal(443' request.Url.Port);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,WebSocketHandlerThrowsCorrectly,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,WebSocketHandlerThrowsCorrectly,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,ThrowingErrorOnCloseRaisesOnClosed,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,ThrowingErrorOnCloseRaisesOnClosed,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,WebSocketHandlesClosedMessageGracefully,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(MockBehavior.Strict' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,WebSocketHandlesClosedMessageGracefully,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(MockBehavior.Strict' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,CloseNoopsIfInTerminalState,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,CloseNoopsIfInTerminalState,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,SendNoopsIfNotOpen,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Tests.Owin,WebSocketFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Owin\WebSocketFacts.cs,SendNoopsIfNotOpen,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsFalseIfItemsAlreadyInSet,The following statement contains a magic number: var diffSet = new DiffSet<int>(new[] { 0' 10' 20 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsFalseIfItemsAlreadyInSet,The following statement contains a magic number: var diffSet = new DiffSet<int>(new[] { 0' 10' 20 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsFalseIfItemsAlreadyInSet,The following statement contains a magic number: diffSet.Add(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsFalseIfItemsAlreadyInSet,The following statement contains a magic number: diffSet.Add(20);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: var diffSet = new DiffSet<int>(new[] { 0' 10' 20 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: var diffSet = new DiffSet<int>(new[] { 0' 10' 20 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: diffSet.Add(50);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: diffSet.Add(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: diffSet.Add(30);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: diffSet.Remove(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(4' list.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(20' list[1]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(30' list[2]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(30' list[2]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(50' list[3]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfItemsNotAlreadyInSet,The following statement contains a magic number: Assert.Equal(50' list[3]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfNoneToSome,The following statement contains a magic number: diffSet.Add(5);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,DetectChangesReturnsTrueIfNoneToSome,The following statement contains a magic number: Assert.Equal(5' items[0]);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,InitialValueCombineWithChangesInFirstDiff,The following statement contains a magic number: var diffSet = new DiffSet<int>(Enumerable.Range(0' 100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,InitialValueCombineWithChangesInFirstDiff,The following statement contains a magic number: Assert.True(diffSet.Add(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,InitialValueCombineWithChangesInFirstDiff,The following statement contains a magic number: Assert.Equal(100' diffSet.GetSnapshot().Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,InitialValueCombineWithChangesInFirstDiff,The following statement contains a magic number: Assert.Equal(100' items.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,InitialValueCombineWithChangesInFirstDiff,The following statement contains a magic number: i <= 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: var diffSet = new DiffSet<int>(Enumerable.Range(0' 100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.False(diffSet.Remove(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.Equal(99' diffSet.GetSnapshot().Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: i < 99
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.True(diffSet.Add(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.False(diffSet.Add(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.False(diffSet.Remove(101));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.Equal(99' diffSet.GetSnapshot().Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: Assert.True(diffSet.Contains(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemMultipleTimesShowsUpOnceInTheDiff,The following statement contains a magic number: i < 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: var diffSet = new DiffSet<int>(Enumerable.Range(0' 100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(98));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(99));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(98));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.Equal(100' diffSet.GetSnapshot().Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: i < 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(150));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(200));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(50));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(200));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Remove(150));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.True(diffSet.Add(50));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: Assert.Equal(100' diffSet.GetSnapshot().Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,DiffSetFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\DiffSetFacts.cs,AddingAndRemovingSameItemDoesNotShowUpInDiff,The following statement contains a magic number: i < 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,NewSubscriptionGetsAllMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) =>                      {                          if (!result.Terminal)                          {                              var m = result.GetMessages().Single();                                Assert.Equal("key"' m.Key);                              Assert.Equal("value"' m.GetString());                                wh.Set();                                return TaskAsyncHelper.True;                          }                            return TaskAsyncHelper.False;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,NewSubscriptionGetsAllMessages,The following statement contains a magic number: Assert.True(wh.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithCancelledTaskCanBeDisposed,The following statement contains a magic number: IDisposable subscription = bus.Subscribe(subscriber' null' async (result' state) =>                  {                      if (result.Terminal)                      {                          return false;                      }                        await Task.Delay(50);                      var tcs = new TaskCompletionSource<bool>();                      tcs.TrySetCanceled();                      wh.Set();                      return await tcs.Task;                    }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithCancelledTaskCanBeDisposed,The following statement contains a magic number: IDisposable subscription = bus.Subscribe(subscriber' null' async (result' state) =>                  {                      if (result.Terminal)                      {                          return false;                      }                        await Task.Delay(50);                      var tcs = new TaskCompletionSource<bool>();                      tcs.TrySetCanceled();                      wh.Set();                      return await tcs.Task;                    }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithCancelledTaskCanBeDisposed,The following statement contains a magic number: Assert.True(wh.Wait(5000));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,GarbageCollectingTopicsAfterGettingTopicsNoops,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) => TaskAsyncHelper.True' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscribingTopicAfterNoSubscriptionsStateSetsStateToHasSubscription,The following statement contains a magic number: configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscribingTopicAfterNoSubscriptionsStateSetsStateToHasSubscription,The following statement contains a magic number: bus.Subscribe(subscriber' null' (result' state) => TaskAsyncHelper.True' 10' null)                     .Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscribingTopicAfterNoSubscriptionsWhenGCStateSetsStateToHasSubscription,The following statement contains a magic number: bus.Subscribe(subscriber' null' (result' state) => TaskAsyncHelper.True' 10' null)                     .Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.Subscribe(subscriber' null' (result' state) => TaskAsyncHelper.True' 10' null)                     .Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.BeforeTopicCreated = (key) =>                  {                      bus.Topics.TryGetValue(key' out topic);                        if (count == 1)                      {                          // Should have been removed by our double garbage collect in BeforeTopicMarked                          Assert.Null(topic);                      }                        if (count == 3)                      {                          // Ensure that we have a topic now created from the original thread                          Assert.NotNull(topic);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.BeforeTopicMarked = (key' t) =>                  {                      count++;                        if (count == 1)                      {                          bus.GarbageCollectTopics();                          bus.GarbageCollectTopics();                          // We garbage collect twice to mark the current topic as dead (it will remove it from the topics list)                            Assert.Equal(t.State' TopicState.Dead);                            bus.SubscribeTopic("key");                            // Topic should still be dead                          Assert.Equal(t.State' TopicState.Dead);                          Assert.Equal(count' 2);                            // Increment up to 3 so we don't execute same code path in after marked                          count++;                      }                        if (count == 2)                      {                          // We've just re-created the topic from the second bus.SubscribeTopic so we should have 0 subscriptions                          Assert.Equal(t.State' TopicState.NoSubscriptions);                      }                        if (count == 4)                      {                          // Ensure that we pulled the already created subscription (therefore it has subscriptions)                          Assert.Equal(t.State' TopicState.HasSubscriptions);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.BeforeTopicMarked = (key' t) =>                  {                      count++;                        if (count == 1)                      {                          bus.GarbageCollectTopics();                          bus.GarbageCollectTopics();                          // We garbage collect twice to mark the current topic as dead (it will remove it from the topics list)                            Assert.Equal(t.State' TopicState.Dead);                            bus.SubscribeTopic("key");                            // Topic should still be dead                          Assert.Equal(t.State' TopicState.Dead);                          Assert.Equal(count' 2);                            // Increment up to 3 so we don't execute same code path in after marked                          count++;                      }                        if (count == 2)                      {                          // We've just re-created the topic from the second bus.SubscribeTopic so we should have 0 subscriptions                          Assert.Equal(t.State' TopicState.NoSubscriptions);                      }                        if (count == 4)                      {                          // Ensure that we pulled the already created subscription (therefore it has subscriptions)                          Assert.Equal(t.State' TopicState.HasSubscriptions);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.BeforeTopicMarked = (key' t) =>                  {                      count++;                        if (count == 1)                      {                          bus.GarbageCollectTopics();                          bus.GarbageCollectTopics();                          // We garbage collect twice to mark the current topic as dead (it will remove it from the topics list)                            Assert.Equal(t.State' TopicState.Dead);                            bus.SubscribeTopic("key");                            // Topic should still be dead                          Assert.Equal(t.State' TopicState.Dead);                          Assert.Equal(count' 2);                            // Increment up to 3 so we don't execute same code path in after marked                          count++;                      }                        if (count == 2)                      {                          // We've just re-created the topic from the second bus.SubscribeTopic so we should have 0 subscriptions                          Assert.Equal(t.State' TopicState.NoSubscriptions);                      }                        if (count == 4)                      {                          // Ensure that we pulled the already created subscription (therefore it has subscriptions)                          Assert.Equal(t.State' TopicState.HasSubscriptions);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.AfterTopicMarked = (key' t' state) =>                  {                      if (count == 2)                      {                          // After re-creating the topic from the second bus.SubscribeTopic we should then move the topic state                          // into the has subscriptions state                          Assert.Equal(state' TopicState.HasSubscriptions);                      }                        if (count == 3)                      {                          Assert.Equal(state' TopicState.Dead);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MultipleSubscribeTopicCallsToDeadTopicWork,The following statement contains a magic number: bus.AfterTopicMarked = (key' t' state) =>                  {                      if (count == 2)                      {                          // After re-creating the topic from the second bus.SubscribeTopic we should then move the topic state                          // into the has subscriptions state                          Assert.Equal(state' TopicState.HasSubscriptions);                      }                        if (count == 3)                      {                          Assert.Equal(state' TopicState.Dead);                      }                  };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,GetTopicDoesNotChangeStateWhenNotDying,The following statement contains a magic number: configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,GetTopicDoesNotChangeStateWhenNotDying,The following statement contains a magic number: bus.Subscribe(new TestSubscriber(new[] { "key" })' null' (result' state) => TaskAsyncHelper.True' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,GarbageCollectingTopicsBeforeSubscribingTopicSetsStateToHasSubscription,The following statement contains a magic number: configuration.DisconnectTimeout = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: var cd = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: var cd = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: bus.Subscribe(subscriberFactory()' null' (result' state) => TaskAsyncHelper.True' 10' null)                     .Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: subscription = bus.Subscribe(subscriberFactory()' prefix + "key'00000001"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              Assert.True(cd.Mark(n));                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: var cdKey = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: var cdKey = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: var cdKey2 = new CountDownRange<int>(new[] { 1' 2' 10 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: var cdKey2 = new CountDownRange<int>(new[] { 1' 2' 10 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: bus.Subscribe(subscriberFactory()' null' (result' state) => TaskAsyncHelper.True' 10' null)                      .Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithMultipleExistingCursors,The following statement contains a magic number: subscription = bus.Subscribe(subscriberFactory()' prefix + "key'00000001|key2'00000000"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              if (m.Key == "key")                              {                                  Assert.True(cdKey.Mark(n));                              }                              else                              {                                  Assert.True(cdKey2.Mark(n));                              }                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithExistingCursorGetsAllMessagesAfterMessageBusRestart,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "d-key'00000001"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              Assert.Equal("key"' m.Key);                              Assert.Equal("value"' m.GetString());                              tcs.TrySetResult(null);                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithScaleoutCursorGetsOnlyNewMessages,The following statement contains a magic number: bus.Subscribe(subscriberFactory()' null' (result' state) => TaskAsyncHelper.True' 10' null).Dispose();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithScaleoutCursorGetsOnlyNewMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriberFactory()' "s-key'00000000"' (result' state) =>                      {                          tcs.TrySetResult(result.GetMessages().ToArray());                          return TaskAsyncHelper.True;                      }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,SubscriptionWithScaleoutCursorGetsOnlyNewMessages,The following statement contains a magic number: Assert.True(tcs.Task.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,AddingEventAndSendingMessages,The following statement contains a magic number: int max = 100;
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,AddingEventAndSendingMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              Assert.True(prev < n' "out of order");                              prev = n;                              Assert.True(cd.Mark(n));                          }                            return TaskAsyncHelper.True;                      }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,MessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,MessageBusCanBeDisposedTwiceWithoutHanging,The following statement contains a magic number: Assert.True(Task.Run(() => bus.Dispose()).Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,TestMessageBus,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\MessageBusFacts.cs,CreateTopic,The following statement contains a magic number: var mock = new Mock<Topic>((uint)100' TimeSpan.Zero) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,NewSubscriptionGetsAllMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) =>                      {                          if (!result.Terminal)                          {                              var ms = result.GetMessages().ToList();                                Assert.Equal(2' ms.Count);                              Assert.Equal("key"' ms[0].Key);                              Assert.Equal("x"' ms[0].GetString());                              Assert.Equal("key"' ms[1].Key);                              Assert.Equal("y"' ms[1].GetString());                                wh.Set();                                return TaskAsyncHelper.True;                          }                            return TaskAsyncHelper.False;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,NewSubscriptionGetsAllMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) =>                      {                          if (!result.Terminal)                          {                              var ms = result.GetMessages().ToList();                                Assert.Equal(2' ms.Count);                              Assert.Equal("key"' ms[0].Key);                              Assert.Equal("x"' ms[0].GetString());                              Assert.Equal("key"' ms[1].Key);                              Assert.Equal("y"' ms[1].GetString());                                wh.Set();                                return TaskAsyncHelper.True;                          }                            return TaskAsyncHelper.False;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,NewSubscriptionGetsAllMessages,The following statement contains a magic number: Assert.True(wh.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: var cd = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: var cd = new CountDownRange<int>(Enumerable.Range(2' 4));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: bus.Publish(1' 2' new[]{                   new Message("test2"' "key"' "2")'                   new Message("test3"' "key"' "3")'                   new Message("test2"' "key"' "4")'              });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'00000000|1'00000000"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              Assert.True(cd.Mark(n));                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithExistingCursor,The following statement contains a magic number: bus.Publish(0' 2' new[] { new Message("test"' "key"' "5") });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 1' 2' 4' 3 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 1' 2' 4' 3 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 1' 2' 4' 3 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: bus.Publish(0' 1' new[] {                           new Message("test"' "key"' "3")'                          new Message("test"' "key2"' "5")'                      }'                      new DateTime(TimeSpan.TicksPerDay * 5' DateTimeKind.Local));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: bus.Publish(2' 1' new[] {                          new Message("test"' "key"' "2")'                          new Message("test"' "key"' "4")                      }'                      new DateTime(TimeSpan.TicksPerDay * 2' DateTimeKind.Local));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: bus.Publish(2' 1' new[] {                          new Message("test"' "key"' "2")'                          new Message("test"' "key"' "4")                      }'                      new DateTime(TimeSpan.TicksPerDay * 2' DateTimeKind.Local));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'0|1'0|2'0"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              Assert.True(cd.Expect(n));                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPullFromMultipleStreamsInFairOrder,The following statement contains a magic number: Assert.True(cd.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: dr.Resolve<IConfigurationManager>().DefaultMessageBufferSize = 10;
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(Enumerable.Range(16' 33));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(Enumerable.Range(16' 33));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: i < 50
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'1"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                                cd.Expect(n);                          }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsNewMessagesWhenTopicStoreOverrun,The following statement contains a magic number: Assert.True(cd.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: dr.Resolve<IConfigurationManager>().DefaultMessageBufferSize = 10;
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: var expectedValues = Enumerable.Range(171' 8);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: var expectedValues = Enumerable.Range(171' 8);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: i < 80
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: i < 180
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'27|1'AA"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                                cd.Expect(n);                          }                            return TaskAsyncHelper.True;                        }' 100' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionDoesNotGetNewMessagesWhenTopicStoreOverrunByOtherStream,The following statement contains a magic number: Assert.True(cd.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfMoreKeysThanStreams,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 101 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfMoreKeysThanStreams,The following statement contains a magic number: bus.Publish(0' 10ul' new[] {                       new Message("test"' "key"' "100")                  });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfMoreKeysThanStreams,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'0|1'0|2'4"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              cd.Expect(n);                          }                            return TaskAsyncHelper.True;                        }' 100' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfMoreKeysThanStreams,The following statement contains a magic number: bus.Publish(0' 11ul' new[] {                           new Message("test"' "key"' "101")                      });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfMoreKeysThanStreams,The following statement contains a magic number: Assert.True(cd.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 101' 11 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: var cd = new OrderedCountDownRange<int>(new[] { 101' 11 });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: bus.Publish(0' 10ul' new[] {                       new Message("test"' "key"' "100")                  });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: bus.Publish(1' 10ul' new[] {                       new Message("test"' "key"' "10")                  });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "s-0'0"' (result' state) =>                      {                          foreach (var m in result.GetMessages())                          {                              int n = Int32.Parse(m.GetString());                              cd.Expect(n);                          }                            return TaskAsyncHelper.True;                        }' 100' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: bus.Publish(0' 11ul' new[] {                           new Message("test"' "key"' "101")                      }'                       new DateTime(TimeSpan.TicksPerDay * 1));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: bus.Publish(1' 11ul' new[] {                           new Message("test"' "key"' "11")                      }'                      new DateTime(TimeSpan.TicksPerDay * 2));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: bus.Publish(1' 11ul' new[] {                           new Message("test"' "key"' "11")                      }'                      new DateTime(TimeSpan.TicksPerDay * 2));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionGetsCorrectCursorsIfLessKeysThanStreams,The following statement contains a magic number: Assert.True(cd.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithDefaultCursorGetsOnlyNewMessages,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' "d-0'0"' (result' state) =>                      {                          tcs.TrySetResult(result.GetMessages().ToArray());                          return TaskAsyncHelper.True;                      }' 100' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithDefaultCursorGetsOnlyNewMessages,The following statement contains a magic number: bus.Publish(0' 2ul' new[] {                          new Message("test"' "key"' "value")                      });
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionWithDefaultCursorGetsOnlyNewMessages,The following statement contains a magic number: Assert.True(tcs.Task.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPublishingAfter,The following statement contains a magic number: subscription = bus.Subscribe(subscriber' null' (result' state) =>                      {                          if (!result.Terminal)                          {                              var messages = result.GetMessages().ToList();                              Assert.Equal(1' messages.Count);                              Assert.Equal("connected"' messages[0].GetString());                              wh.Set();                            }                            return TaskAsyncHelper.True;                        }' 10' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleOutMessageBusFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleOutMessageBusFacts.cs,SubscriptionPublishingAfter,The following statement contains a magic number: Assert.True(wh.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwriteSuccess,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwriteSuccess,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwritemBiggerFail,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwritemBiggerFail,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwritemBiggerFail,The following statement contains a magic number: bool result = store.TryGetFragmentFromMappingId(MappingIdBase + 20' out fragment);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwritemSmallerFail,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchNoOverwritemSmallerFail,The following statement contains a magic number: i <= 5
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchOverwriteSuccess,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchOverwriteSuccess,The following statement contains a magic number: bool result = store.TryGetFragmentFromMappingId(MappingIdBase + 10' out fragment);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchOverwriteSmallerFail,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchOverwriteBiggerFail,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,BinarySearchOverwriteBiggerFail,The following statement contains a magic number: bool result = store.TryGetFragmentFromMappingId(MappingIdBase + 100' out fragment);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,SingleMessageOnlyVerifyIds,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,SingleMessageOnlyVerifyIds,The following statement contains a magic number: store.Add(new ScaleoutMapping(10ul' message));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,SingleMessageOnlyVerifyIds,The following statement contains a magic number: Assert.Equal(10ul' store.MinMappingId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,SingleMessageOnlyVerifyIds,The following statement contains a magic number: Assert.Equal(10ul' store.MaxMapping.Id);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AccurateMappingIds,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AccurateMappingIds,The following statement contains a magic number: store.Add(new ScaleoutMapping(10ul' message1));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AccurateMappingIds,The following statement contains a magic number: store.Add(new ScaleoutMapping(15ul' message2));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AccurateMappingIds,The following statement contains a magic number: Assert.Equal(10ul' store.MinMappingId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AccurateMappingIds,The following statement contains a magic number: Assert.Equal(15ul' store.MaxMapping.Id);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,MinMappingIdMovesWhenOverflow,The following statement contains a magic number: var store = new ScaleoutStore(5);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothing,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothing,The following statement contains a magic number: i < 15
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothing,The following statement contains a magic number: var result = store.GetMessagesByMappingId(MappingIdBase + 16);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothingIfNewer,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothingIfNewer,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorBiggerThanMaxReturnsNothingIfNewer,The following statement contains a magic number: var result = store.GetMessagesByMappingId(MappingIdBase + 6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAll,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAll,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAll,The following statement contains a magic number: var result = store.GetMessagesByMappingId(MappingIdBase + 4);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAll,The following statement contains a magic number: Assert.Equal(5ul + MappingIdBase' store.MinMappingId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAll,The following statement contains a magic number: Assert.Equal(5' result.Messages.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: i < 100
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: var result = store.GetMessagesByMappingId(MappingIdBase + 62);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: Assert.Equal(64ul' result.FirstMessageId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: Assert.Equal(63ul + MappingIdBase' store.MinMappingId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorLowerThanMinReturnsAllEvenAfterMultipleOverwrites,The following statement contains a magic number: Assert.Equal(8' result.Messages.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithSentinelCursorReturnsEverything,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 6' 10 }' 5' 2ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenEvenRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 7' 8' 10 }' 9' 5ul' 1);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 10 }' 2' 1ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 10 }' 2' 1ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 10 }' 2' 1ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 4' 10 }' 2' 1ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOddRangeGetsAll,The following statement contains a magic number: AssertMessagesWithCursorForRange(new[] { 1' 3' 6' 8' 10 }' 7' 3ul' 2);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,AssertMessagesWithCursorForRange,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var store = new ScaleoutStore(10' 5);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var store = new ScaleoutStore(10' 5);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag1Values = new[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag1Values = new[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag1Values = new[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag1Values = new[] { 1' 2' 3' 4' 5 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag2Values = new[] { 7' 8' 9' 10' 11 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag2Values = new[] { 7' 8' 9' 10' 11 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag2Values = new[] { 7' 8' 9' 10' 11 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag2Values = new[] { 7' 8' 9' 10' 11 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var frag2Values = new[] { 7' 8' 9' 10' 11 };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: var result = store.GetMessagesByMappingId(6);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: Assert.Equal(7ul' result.FirstMessageId);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenFragmentsGetsEverythingAfterwards,The following statement contains a magic number: Assert.Equal(5' result.Messages.Count);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOnElementRangeGetsAll,The following statement contains a magic number: var store = new ScaleoutStore(10);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStoreFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStoreFacts.cs,GettingMessagesWithCursorInbetweenOnElementRangeGetsAll,The following statement contains a magic number: var result = store.GetMessagesByMappingId(2 + MappingIdBase);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendBeforeOpenDoesNotThrowWhenQueuingBehaviorInitialOnly,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.InitialOnly' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendsBeforeOpenedRunOnceOpenedWhenQueuingBehaviorInitialOnly,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.InitialOnly' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendsBeforeOpenedRunOnceOpenedWhenQueuingBehaviorInitialOnly,The following statement contains a magic number: Assert.Equal(2' x);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendAfterOpenDoesBehavesCorrectlyForConfiguredQueuingBehavior,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' queuingBehavior' 1000' perfCounters.Object);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendAfterOpenAndAfterErrorThrows,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.InitialOnly' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,ErrorOnSendThrowsNextTime,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenAfterErrorRunsQueue,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenAfterErrorRunsQueue,The following statement contains a magic number: Assert.True(task.Wait(10000));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenAfterErrorRunsQueue,The following statement contains a magic number: Assert.Equal(2' x);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRuns,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRuns,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRuns,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRuns,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRuns,The following statement contains a magic number: Assert.Equal(3' x);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRunsWithFailedTask,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRunsWithFailedTask,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRunsWithFailedTask,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  await TaskAsyncHelper.FromError(new Exception());              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,CloseWhileQueueRunsWithFailedTask,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenQueueErrorOpenQueue,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenQueueErrorOpenQueue,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenQueueErrorOpenQueue,The following statement contains a magic number: Task t1 = stream.Send(async _ =>              {                  await Task.Delay(50);                  await TaskAsyncHelper.FromError(new Exception());              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenQueueErrorOpenQueue,The following statement contains a magic number: Task t2 = stream.Send(async _ =>              {                  await Task.Delay(50);                  x++;              }'              null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenQueueErrorOpenQueue,The following statement contains a magic number: Assert.Equal(2' x);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendAfterCloseThenOpenRemainsClosed,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,SendAfterCloseThenOpenRemainsClosed,The following statement contains a magic number: var ignore = stream.Send(_ => Task.Delay(50)' null);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,InitialToBufferingToOpenToSend,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,InitialToBufferingToOpenToSend,The following statement contains a magic number: stream.Send(async _ =>              {                  await Task.Delay(20);                  x++;              }'              null).Wait();
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,InitialToClosed,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,OpenAfterClosedEnqueueThrows,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,ScaleoutStreamFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\ScaleoutStreamFacts.cs,BufferAfterClosedEnqueueThrows,The following statement contains a magic number: var stream = new ScaleoutStream(new TraceSource("Queue")' "0"' QueuingBehavior.Always' 1000' perfCounters);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,SubscriptionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\SubscriptionFacts.cs,FaultedTaskShouldPropagateAsync,The following statement contains a magic number: Func<MessageResult' object' Task<bool>> callback = async (result' state) =>              {                  await Task.Delay(500);                  await TaskAsyncHelper.FromError(new Exception());                  return false;              };
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,TopicFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\TopicFacts.cs,TopicStateCreated,The following statement contains a magic number: var topic = new Topic(100' TimeSpan.Zero);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,TopicFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\TopicFacts.cs,TopicStateHasSubscriptions,The following statement contains a magic number: var topic = new Topic(100' TimeSpan.Zero);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,TopicFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\TopicFacts.cs,TopicStateHasSubscriptionsIfMoreThanOne,The following statement contains a magic number: var topic = new Topic(100' TimeSpan.Zero);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server,TopicFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\TopicFacts.cs,TopicStateNoSubscriptions,The following statement contains a magic number: var topic = new Topic(100' TimeSpan.Zero);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationProgressSendsProgressValuesViaSendProgressFunc,The following statement contains a magic number: progress.Report(100);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationProgressSendsProgressValuesViaSendProgressFunc,The following statement contains a magic number: Assert.Equal(100' result);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationThrowsOnceSetAsComplete,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => progress.Report(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationProgressSendsProgressThenThrowsOnceSetAsComplete,The following statement contains a magic number: progress.Report(100);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationProgressSendsProgressThenThrowsOnceSetAsComplete,The following statement contains a magic number: Assert.Equal(100' receivedProgressValue);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,HubProgressFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\HubProgressFacts.cs,HubInvocationProgressSendsProgressThenThrowsOnceSetAsComplete,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => progress.Report(100));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42' "21"))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42' "21"' 84))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42' "21"' 84))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42' "21"' true' 84))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: mockClientProxy.Setup(c => c.Invoke("send"' 42' "21"' true' 84))                  .Returns(Task.FromResult<object>(null));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42' "21");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42' "21"' 84);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42' "21"' 84);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42' "21"' true' 84);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughGenericInterface,The following statement contains a magic number: client.send(42' "21"' true' 84);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughDerivedInterface,The following statement contains a magic number: client.send(42);
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughDerivedInterface,The following statement contains a magic number: mockClientProxy.Verify(c => c.Invoke("ping")' Times.Exactly(3));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Hubs,TypedClientBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Hubs\TypedClientBuilderFacts.cs,MethodsAreInvokedThroughDerivedInterface,The following statement contains a magic number: mockClientProxy.Verify(c => c.Invoke("send"' 42)' Times.Once());
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,AvoidDeadlockIfCancellationTokenTriggeredBeforeSubscribing,The following statement contains a magic number: Assert.True(wh.Wait(TimeSpan.FromSeconds(2))' "Dead lock!");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,ReceiveThrowingReturnsFaultedTask,The following statement contains a magic number: Assert.Throws<AggregateException>(() => task.Wait(TimeSpan.FromSeconds(2)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,RunWithPostReceive,The following statement contains a magic number: Assert.True(transport.Object.ConnectTask.Wait(TimeSpan.FromSeconds(2))' "ConnectTask task not tripped");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,RequestCompletesAfterFaultedInitializeResponse,The following statement contains a magic number: Assert.True(tcs.Task.Wait(TimeSpan.FromSeconds(2)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,ForeverTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\ForeverTransportFacts.cs,EnqueAsyncWriteAndEndRequest,The following statement contains a magic number: Assert.True(transport.Object.ProcessRequest(transportConnection.Object).Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,LongPollingTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\LongPollingTransportFacts.cs,SetTheCorrectMIMETypeForJSONSends,The following statement contains a magic number: Assert.True(transport.TestContentType.Wait(TimeSpan.FromSeconds(2))' "ContentType not set");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,LongPollingTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\LongPollingTransportFacts.cs,SetTheCorrectMIMETypeForJSONPSends,The following statement contains a magic number: Assert.True(transport.TestContentType.Wait(TimeSpan.FromSeconds(2))' "ContentType not set");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,LongPollingTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\LongPollingTransportFacts.cs,SetTheCorrectMIMETypeForJSONPolls,The following statement contains a magic number: Assert.True(transport.TestContentType.Wait(TimeSpan.FromSeconds(2))' "ContentType not set");
Magic Number,Microsoft.AspNet.SignalR.Tests.Server.Transports,LongPollingTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Tests\Server\Transports\LongPollingTransportFacts.cs,SetTheCorrectMIMETypeForJSONPPolls,The following statement contains a magic number: Assert.True(transport.TestContentType.Wait(TimeSpan.FromSeconds(2))' "ContentType not set");
