Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNet.SignalR.Client.Hubs,HubProxy,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Hubs\HubProxy.cs,Invoke,The method has 104 lines of code.
Complex Method,Microsoft.AspNet.SignalR.Client,HeartbeatMonitor,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HeartBeatMonitor.cs,CheckKeepAlive,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Client,HubConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubConnection.cs,OnMessageReceived,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ClientTransportBase.cs,ProcessResponse,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandler,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\TransportInitializationHandler.cs,TransportInitializationHandler,The method has 6 parameters. Parameters: httpClient' connection' connectionData' transport' disconnectToken' transportHelper
Long Parameter List,Microsoft.AspNet.SignalR.Client.Transports,AutoTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\AutoTransport.cs,ResolveTransport,The method has 5 parameters. Parameters: connection' data' disconnectToken' tcs' index
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR,GenericDelegates<T;TResult;T1;T2;T3>,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ThenWithArgs,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Identifier,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,,The length of the parameter MinimumSupportedNegotiateRedirectVersion is 40.
Long Identifier,Microsoft.AspNet.SignalR.Client.Transports,ServerSentEventsTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ServerSentEventsTransport.cs,OpenConnection,The length of the parameter requestCancellationRegistration is 31.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The length of the statement  "                _totalTransportConnectTimeout = TransportConnectTimeout + TimeSpan.FromSeconds(negotiationResponse.TransportConnectTimeout); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Stop,The length of the statement  "                    // We can't wait on the result of the drain because this method may be on the stack of the task returned (aka deadlock). " is 120.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Stop,The length of the statement  "                // This is racy since it's outside the _stateLock' but we are trying to avoid 30s deadlocks when calling _transport.Abort() " is 123.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Send,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_DataCannotBeSentConnectionDisconnected)); " is 135.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Send,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ConnectionHasNotBeenEstablished)); " is 128.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,PrepareRequest,The length of the statement  "            // PORT: Previously' this string differed based on the platform the app was running on (NET4' NET45'' etc.). Now it will always be NetStadnard. " is 143.
Long Statement,Microsoft.AspNet.SignalR.Client,HubConnection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubConnection.cs,CreateHubProxy,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ProxiesCannotBeAddedConnectionStarted)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,ExecuteCallback,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ClientCallbackInvalidNumberOfArguments' " is 133.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,ExecuteCallback,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ClientCallbackArgumentTypeMismatch' eventName' actualArgs' ex.Message)); " is 166.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportAbortHandler,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\TransportAbortHandler.cs,Abort,The length of the statement  "            // Save the connection.ConnectionToken since race issue that connection.ConnectionToken can be set to null in different thread " is 126.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,CancellationTokenExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\Infrastructure\CancellationTokenExtensions.cs,SafeRegister,The length of the statement  "            CancellationTokenRegistration registration = _tokenRegister(ref cancellationToken' s => InvokeCallback(s)' callbackWrapper); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBase,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ClientTransportBase.cs,Start,The length of the statement  "            _initializationHandler = new TransportInitializationHandler(HttpClient' connection' connectionData' Name' disconnectToken' TransportHelper); " is 140.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,TransportHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\TransportHelper.cs,GetNegotiationResponse,The length of the statement  "                                    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ServerNegotiationFailed)); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,TransportHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\TransportHelper.cs,VerifyLastActive,The length of the statement  "                connection.Trace(TraceLevels.Events' "There has not been an active server connection for an extended period of time. Stopping connection."); " is 140.
Long Statement,Microsoft.AspNet.SignalR,TaskAsyncHelper,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Delay,The length of the statement  "            var timer = new Timer((state) => ((TaskCompletionSource<object>)state).TrySetResult(null)' tcs' timeOut' TimeSpan.FromMilliseconds(-1)); " is 136.
Complex Conditional,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,VerifyProtocolVersion,The conditional expression  "String.IsNullOrEmpty(versionString) ||                  !TryParseVersion(versionString' out version) ||                  version < MinimumSupportedVersion || version > MaximumSupportedVersion"  is complex.
Complex Conditional,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,CancellationTokenExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\Infrastructure\CancellationTokenExtensions.cs,ResolveRegisterDelegate,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Connection,The following statement contains a magic number: DeadlockErrorTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Connection,The following statement contains a magic number: Protocol = new Version(2' 1);
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The following statement contains a magic number: var beatInterval = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The following statement contains a magic number: return transport.Negotiate(this' _connectionData)                                  .Then(negotiationResponse =>                                  {                                      var protocolVersion = VerifyProtocolVersion(negotiationResponse.ProtocolVersion);                                        if (protocolVersion >= MinimumSupportedNegotiateRedirectVersion)                                      {                                          if (!string.IsNullOrEmpty(negotiationResponse.Error))                                          {                                              throw new StartException(string.Format(Resources.Error_ErrorFromServer' negotiationResponse.Error));                                          }                                          if (!string.IsNullOrEmpty(negotiationResponse.RedirectUrl))                                          {                                              var splitUrlAndQuery = negotiationResponse.RedirectUrl.Split(new[] { '?' }' 2);                                                // Update the URL based on the redirect response and restart the negotiation                                              _actualUrl = splitUrlAndQuery[0];                                                if (splitUrlAndQuery.Length == 2 && !string.IsNullOrEmpty(splitUrlAndQuery[1]))                                              {                                                  // Update IConnection.QueryString with query string from only the most recent RedirectUrl.                                                  _actualQueryString = splitUrlAndQuery[1];                                              }                                              else                                              {                                                  _actualQueryString = _userQueryString;                                              }                                                if (!_actualUrl.EndsWith("/"))                                              {                                                  _actualUrl += "/";                                              }                                                if (!string.IsNullOrEmpty(negotiationResponse.AccessToken))                                              {                                                  // This will stomp on the current Authorization header' but that's by design.                                                  // If the server specified a token' that is expected to overrule the token the client is currently using.                                                  Headers["Authorization"] = $"Bearer {negotiationResponse.AccessToken}";                                              }                                                negotiationAttempts += 1;                                              if (negotiationAttempts >= MaxRedirects)                                              {                                                  throw new InvalidOperationException(Resources.Error_NegotiationLimitExceeded);                                              }                                              return StartNegotiation();                                          }                                      }                                        return CompleteNegotiation(negotiationResponse);                                  })                                  .ContinueWithNotComplete(() => Disconnect());
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The following statement contains a magic number: return transport.Negotiate(this' _connectionData)                                  .Then(negotiationResponse =>                                  {                                      var protocolVersion = VerifyProtocolVersion(negotiationResponse.ProtocolVersion);                                        if (protocolVersion >= MinimumSupportedNegotiateRedirectVersion)                                      {                                          if (!string.IsNullOrEmpty(negotiationResponse.Error))                                          {                                              throw new StartException(string.Format(Resources.Error_ErrorFromServer' negotiationResponse.Error));                                          }                                          if (!string.IsNullOrEmpty(negotiationResponse.RedirectUrl))                                          {                                              var splitUrlAndQuery = negotiationResponse.RedirectUrl.Split(new[] { '?' }' 2);                                                // Update the URL based on the redirect response and restart the negotiation                                              _actualUrl = splitUrlAndQuery[0];                                                if (splitUrlAndQuery.Length == 2 && !string.IsNullOrEmpty(splitUrlAndQuery[1]))                                              {                                                  // Update IConnection.QueryString with query string from only the most recent RedirectUrl.                                                  _actualQueryString = splitUrlAndQuery[1];                                              }                                              else                                              {                                                  _actualQueryString = _userQueryString;                                              }                                                if (!_actualUrl.EndsWith("/"))                                              {                                                  _actualUrl += "/";                                              }                                                if (!string.IsNullOrEmpty(negotiationResponse.AccessToken))                                              {                                                  // This will stomp on the current Authorization header' but that's by design.                                                  // If the server specified a token' that is expected to overrule the token the client is currently using.                                                  Headers["Authorization"] = $"Bearer {negotiationResponse.AccessToken}";                                              }                                                negotiationAttempts += 1;                                              if (negotiationAttempts >= MaxRedirects)                                              {                                                  throw new InvalidOperationException(Resources.Error_NegotiationLimitExceeded);                                              }                                              return StartNegotiation();                                          }                                      }                                        return CompleteNegotiation(negotiationResponse);                                  })                                  .ContinueWithNotComplete(() => Disconnect());
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 2' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                          Convert<T2>(args[1]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 3' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 3' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,KeepAliveData,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\KeepAliveData.cs,KeepAliveData,The following statement contains a magic number: CheckInterval = TimeSpan.FromTicks((Timeout.Ticks - TimeoutWarning.Ticks) / 3);
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: byte[] expandedBytes = new byte[count + cUnsafe * 2];
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: n <= 9
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,AsyncStreamReader,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\AsyncStreamReader.cs,Start,The following statement contains a magic number: _readBuffer = new byte[4096];
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,LongPollingTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\LongPollingTransport.cs,LongPollingTransport,The following statement contains a magic number: ReconnectDelay = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,LongPollingTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\LongPollingTransport.cs,LongPollingTransport,The following statement contains a magic number: ErrorDelay = TimeSpan.FromSeconds(2);
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ServerSentEventsTransport,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ServerSentEventsTransport.cs,ServerSentEventsTransport,The following statement contains a magic number: ReconnectDelay = TimeSpan.FromSeconds(2);
Missing Default,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,D:\research\architectureSmells\repos1\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch)              {                  case '-':                  case '_':                  case '.':                  case '!':                  case '*':                  case '(':                  case ')':                      return true;              }
