Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ClientTransportBase.cs,ProcessResponse,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandler,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\TransportInitializationHandler.cs,TransportInitializationHandler,The method has 6 parameters. Parameters: httpClient' connection' connectionData' transport' disconnectToken' transportHelper
Long Parameter List,Microsoft.AspNet.SignalR.Client.Transports,AutoTransport,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\AutoTransport.cs,ResolveTransport,The method has 5 parameters. Parameters: connection' data' disconnectToken' tcs' index
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Parameter List,Microsoft.AspNet.SignalR,GenericDelegates<T;TResult;T1;T2;T3>,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ThenWithArgs,The method has 5 parameters. Parameters: task' successor' arg1' arg2' arg3
Long Identifier,Microsoft.AspNet.SignalR.Client.Transports,ServerSentEventsTransport,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ServerSentEventsTransport.cs,OpenConnection,The length of the parameter requestCancellationRegistration is 31.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The length of the statement  "                                _totalTransportConnectTimeout = TransportConnectTimeout + TimeSpan.FromSeconds(negotiationResponse.TransportConnectTimeout); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Stop,The length of the statement  "                    // We can't wait on the result of the drain because this method may be on the stack of the task returned (aka deadlock). " is 120.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Stop,The length of the statement  "                // This is racy since it's outside the _stateLock' but we are trying to avoid 30s deadlocks when calling _transport.Abort() " is 123.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Send,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_DataCannotBeSentConnectionDisconnected)); " is 135.
Long Statement,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Send,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ConnectionHasNotBeenEstablished)); " is 128.
Long Statement,Microsoft.AspNet.SignalR.Client,HubConnection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubConnection.cs,CreateHubProxy,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ProxiesCannotBeAddedConnectionStarted)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,ExecuteCallback,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ClientCallbackInvalidNumberOfArguments' " is 133.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,ExecuteCallback,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ClientCallbackArgumentTypeMismatch' eventName' actualArgs' ex.Message)); " is 166.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportAbortHandler,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\TransportAbortHandler.cs,Abort,The length of the statement  "            // Save the connection.ConnectionToken since race issue that connection.ConnectionToken can be set to null in different thread " is 126.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,CancellationTokenExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Core\Infrastructure\CancellationTokenExtensions.cs,SafeRegister,The length of the statement  "            CancellationTokenRegistration registration = _tokenRegister(ref cancellationToken' s => InvokeCallback(s)' callbackWrapper); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBase,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ClientTransportBase.cs,Start,The length of the statement  "            _initializationHandler = new TransportInitializationHandler(HttpClient' connection' connectionData' Name' disconnectToken' TransportHelper); " is 140.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,TransportHelper,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\TransportHelper.cs,GetNegotiationResponse,The length of the statement  "                                    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ServerNegotiationFailed)); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,TransportHelper,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\TransportHelper.cs,VerifyLastActive,The length of the statement  "                connection.Trace(TraceLevels.Events' "There has not been an active server connection for an extended period of time. Stopping connection."); " is 140.
Complex Conditional,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Connection,The following statement contains a magic number: DeadlockErrorTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Connection,The following statement contains a magic number: Protocol = new Version(1' 4);
Magic Number,Microsoft.AspNet.SignalR.Client,Connection,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Connection.cs,Negotiate,The following statement contains a magic number: return transport.Negotiate(this' _connectionData)                              .Then(negotiationResponse =>                              {                                  VerifyProtocolVersion(negotiationResponse.ProtocolVersion);                                    ConnectionId = negotiationResponse.ConnectionId;                                  ConnectionToken = negotiationResponse.ConnectionToken;                                  _disconnectTimeout = TimeSpan.FromSeconds(negotiationResponse.DisconnectTimeout);                                  _totalTransportConnectTimeout = TransportConnectTimeout + TimeSpan.FromSeconds(negotiationResponse.TransportConnectTimeout);                                    // Default the beat interval to be 5 seconds in case keep alive is disabled.                                  var beatInterval = TimeSpan.FromSeconds(5);                                    // If we have a keep alive                                  if (negotiationResponse.KeepAliveTimeout != null)                                  {                                      _keepAliveData = new KeepAliveData(TimeSpan.FromSeconds(negotiationResponse.KeepAliveTimeout.Value));                                      _reconnectWindow = _disconnectTimeout + _keepAliveData.Timeout;                                        beatInterval = _keepAliveData.CheckInterval;                                  }                                  else                                  {                                      _reconnectWindow = _disconnectTimeout;                                  }                                    Monitor = new HeartbeatMonitor(this' _stateLock' beatInterval);                                    return StartTransport();                              })                              .ContinueWithNotComplete(() => Disconnect());
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 2' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                          Convert<T2>(args[1]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 3' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 3' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 4' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 5' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 6' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxyExtensions,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\HubProxyExtensions.cs,On,The following statement contains a magic number: Action<IList<JToken>> handler = args =>              {                  ExecuteCallback(eventName' args.Count' 7' () =>                  {                      onData(Convert<T1>(args[0]' proxy.JsonSerializer)'                             Convert<T2>(args[1]' proxy.JsonSerializer)'                             Convert<T3>(args[2]' proxy.JsonSerializer)'                             Convert<T4>(args[3]' proxy.JsonSerializer)'                             Convert<T5>(args[4]' proxy.JsonSerializer)'                             Convert<T6>(args[5]' proxy.JsonSerializer)'                             Convert<T7>(args[6]' proxy.JsonSerializer));                  });              };
Magic Number,Microsoft.AspNet.SignalR.Client,KeepAliveData,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\KeepAliveData.cs,KeepAliveData,The following statement contains a magic number: CheckInterval = TimeSpan.FromTicks((Timeout.Ticks - TimeoutWarning.Ticks) / 3);
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: byte[] expandedBytes = new byte[count + cUnsafe * 2];
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  byte b = bytes[offset + i];                  char ch = (char)b;                    if (IsUrlSafeChar(ch))                  {                      expandedBytes[pos++] = b;                  }                  else if (ch == ' ')                  {                      expandedBytes[pos++] = (byte)'+';                  }                  else                  {                      expandedBytes[pos++] = (byte)'%';                      expandedBytes[pos++] = (byte)IntToHex((b >> 4) & 0xf);                      expandedBytes[pos++] = (byte)IntToHex(b & 0x0f);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + (int)'0');              else                  return (char)(n - 10 + (int)'a');
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + (int)'0');              else                  return (char)(n - 10 + (int)'a');
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,AsyncStreamReader,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\AsyncStreamReader.cs,Start,The following statement contains a magic number: if (Interlocked.CompareExchange(ref _reading' State.Processing' State.Initial) == State.Initial)              {                  _setOpened = () =>                  {                      OnOpened();                  };                    // FIX: Potential memory leak if Close is called between the CompareExchange and here.                  _readBuffer = new byte[4096];                    // Start the process loop                  Process();              }
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,LongPollingTransport,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\LongPollingTransport.cs,LongPollingTransport,The following statement contains a magic number: ReconnectDelay = TimeSpan.FromSeconds(5);
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,LongPollingTransport,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\LongPollingTransport.cs,LongPollingTransport,The following statement contains a magic number: ErrorDelay = TimeSpan.FromSeconds(2);
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ServerSentEventsTransport,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Transports\ServerSentEventsTransport.cs,ServerSentEventsTransport,The following statement contains a magic number: ReconnectDelay = TimeSpan.FromSeconds(2);
Missing Default,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\SignalR_SignalR\src\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch)              {                  case '-':                  case '_':                  case '.':                  case '!':                  case '*':                  case '(':                  case ')':                      return true;              }
