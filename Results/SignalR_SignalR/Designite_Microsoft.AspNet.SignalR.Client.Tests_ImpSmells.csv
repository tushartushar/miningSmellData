Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,FailsIfProtocolVersionIsNull,The length of the statement  "                transport.Setup(m => m.Negotiate(connection' It.IsAny<string>())).Returns(TaskAsyncHelper.FromResult(new NegotiationResponse " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,FailsIfProtocolVersionIsNull,The length of the statement  "                Assert.Equal("You are using a version of the client that isn't compatible with the server. Client version " + connection.Protocol.ToString() + "' server version null."' ex.Message); " is 181.
Long Statement,Microsoft.AspNet.SignalR.Client.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HubProxyFacts.cs,FailedHubCallbackDueToReconnectFollowedByInvoke,The length of the statement  "            transport.Setup(t => t.Start(connection' /* connectionData: */ It.IsAny<string>()' /* disconnectToken: */ It.IsAny<CancellationToken>())) " is 137.
Long Statement,Microsoft.AspNet.SignalR.Client.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HubProxyFacts.cs,FailedHubCallbackDueToReconnectFollowedByInvoke,The length of the statement  "            transport.Setup(t => t.Send(connection' /* data: */ It.Is<string>(s => s.IndexOf("crash") >= 0)' /* connectionData: */ It.IsAny<string>())) " is 139.
Long Statement,Microsoft.AspNet.SignalR.Client.Tests,TransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\TransportFacts.cs,StartExceptionStopsAutoTransportFallback,The length of the statement  "            unusedTransport.Verify(t => t.Start(It.IsAny<IConnection>()' It.IsAny<string>()' CancellationToken.None)' Times.Never()); " is 121.
Long Statement,Microsoft.AspNet.SignalR.Client.Http,DefaultHttpClientFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Http\DefaultHttpClientFacts.cs,GetResponseIsDisposedIfResponseIsNonSuccessful,The length of the statement  "            await Assert.ThrowsAsync<HttpClientException>(() => client.Get("http://example.com/test"' r => { }' isLongRunning: false)); " is 123.
Long Statement,Microsoft.AspNet.SignalR.Client.Http,DefaultHttpClientFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Http\DefaultHttpClientFacts.cs,PostResponseIsDisposedIfResponseIsNonSuccessful,The length of the statement  "            await Assert.ThrowsAsync<HttpClientException>(() => client.Post("http://example.com/test"' r => { }' isLongRunning: false)); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Client.Http,TestHttpMessageHandler,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Http\TestHttpMessageHandler.cs,BaseHandler,The length of the statement  "            return Task.FromException<HttpResponseMessage>(new InvalidOperationException($"Http endpoint not implemented: {request.Method} {request.RequestUri}")); " is 151.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildStart,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildStartRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/start?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + expected' " is 145.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildAbort,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildAbortRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/abort?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + " is 135.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildConnect,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildConnectRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/connect?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + " is 137.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildReconnect,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildReconnectRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/reconnect?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + " is 139.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildPoll,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildPollRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/poll?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + " is 134.
Long Statement,Microsoft.AspNet.SignalR.Client.Infrastructure,BuildSend,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,BuildSendRetunsValidUrlWithConnectionDataAndCustomQueryString,The length of the statement  "                    "http://fakeurl/send?clientProtocol=1.42&transport=webPolling&connectionData=CustomConnectionData&connectionToken=My%20Conn%20Token" + " is 134.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,AutoTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\AutoTransportFacts.cs,AutoTransportDoesNotTryAnotherTransportIfStartRequestFails,The length of the statement  "            var startException = await Assert.ThrowsAsync<StartException>(() => autoTransport.Start(mockConnection.Object' string.Empty' CancellationToken.None)); " is 150.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortRequestNotSentIfConnectionTokenNull,The length of the statement  "                m => m.Post(It.IsAny<string>()' It.IsAny<Action<IRequest>>()' It.IsAny<IDictionary<string' string>>()' It.IsAny<bool>())' " is 121.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortSendsAbortRequest,The length of the statement  "                .Setup(m => m.Post(It.IsAny<string>()' It.IsAny<Action<IRequest>>()' It.IsAny<IDictionary<string' string>>()' It.IsAny<bool>())) " is 128.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortSendsAbortRequestOnlyOnce,The length of the statement  "                .Setup(m => m.Post(It.IsAny<string>()' It.IsAny<Action<IRequest>>()' It.IsAny<IDictionary<string' string>>()' It.IsAny<bool>())) " is 128.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,FailuresWhileSendingAbortRequestsAreLoggedAndSwallowed,The length of the statement  "                .Setup(m => m.Post(It.IsAny<string>()' It.IsAny<Action<IRequest>>()' It.IsAny<IDictionary<string' string>>()' It.IsAny<bool>())) " is 128.
Long Statement,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,DisconnectsWithErrorIfServerSendsGlobalErrorMessage,The length of the statement  "            connection.Setup(c => c.OnError(It.Is<HubException>(h => h.Message.Equals(string.Format(Resources.Error_ErrorFromServer' "Uh oh!"))))); " is 135.
Empty Catch Block,Microsoft.AspNet.SignalR.Client.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,NegotiatePassesClientProtocolCorrectly,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,DisconnectDisposesTransport,The following statement contains a magic number: mockTransport.Setup(t => t.Negotiate(It.IsAny<IConnection>()' It.IsAny<string>()))                  .Returns(Task.FromResult(new NegotiationResponse                  {                      ProtocolVersion = "1.4"'                      ConnectionId = "42"'                      ConnectionToken = "42.42"'                      DisconnectTimeout = 10'                      TransportConnectTimeout = 10                  }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,ConnectionFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,DisconnectDisposesTransport,The following statement contains a magic number: mockTransport.Setup(t => t.Negotiate(It.IsAny<IConnection>()' It.IsAny<string>()))                  .Returns(Task.FromResult(new NegotiationResponse                  {                      ProtocolVersion = "1.4"'                      ConnectionId = "42"'                      ConnectionToken = "42.42"'                      DisconnectTimeout = 10'                      TransportConnectTimeout = 10                  }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,FailedStartShouldBeDisconnected,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,CancelledStartShouldBeDisconnected,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,StartShouldBeConnected,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,AsyncStartShouldBeConnected,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,AsyncStartShouldBeConnected,The following statement contains a magic number: transport.Setup(m => m.Start(connection' null' It.IsAny<CancellationToken>()))                           .Returns(TaskAsyncHelper.Delay(TimeSpan.FromMilliseconds(100)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,AsyncStartShouldBeConnected,The following statement contains a magic number: Assert.True(connection.Start(transport.Object).Wait(TimeSpan.FromSeconds(5))' "Start hung.");
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,AsyncStartShouldFailIfTransportStartFails,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,AsyncStartShouldFailIfTransportStartFails,The following statement contains a magic number: transport.Setup(m => m.Start(connection' null' It.IsAny<CancellationToken>()))                           .Returns(TaskAsyncHelper.Delay(TimeSpan.FromMilliseconds(100)).Then(() =>                           {                               throw ex;                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,StartShouldFailIfTransportStartCompletesAfterDisconnect,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120'                               KeepAliveTimeout = 30'                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,Start,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\ConnectionFacts.cs,StartShouldFailIfTransportStartCompletesAfterDisconnect,The following statement contains a magic number: transport.Setup(m => m.Negotiate(connection' It.IsAny<string>()))                           .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                           {                               ProtocolVersion = connection.Protocol.ToString()'                               ConnectionId = "Something"'                               DisconnectTimeout = 120'                               KeepAliveTimeout = 30'                           }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,HeartbeatMonitorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HeartbeatMonitorFacts.cs,ReconnectedClearsTimedOutAndHasBeenWarnedFlags,The following statement contains a magic number: mockConnection.Setup(c => c.KeepAliveData).Returns(new KeepAliveData(new TimeSpan(0' 0' 9)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,HeartbeatMonitorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HeartbeatMonitorFacts.cs,ReconnectedClearsTimedOutAndHasBeenWarnedFlags,The following statement contains a magic number: monitor.Beat(new TimeSpan(0' 10' 0));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,HeartbeatMonitorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HeartbeatMonitorFacts.cs,ReconnectedClearsTimedOutAndHasBeenWarnedFlags,The following statement contains a magic number: monitor.Beat(new TimeSpan(0' 0' 7));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HubProxyFacts.cs,FailedHubCallbackDueToReconnectFollowedByInvoke,The following statement contains a magic number: transport.Setup(t => t.Negotiate(connection' /* connectionData: */ It.IsAny<string>()))                       .Returns(TaskAsyncHelper.FromResult(new NegotiationResponse                       {                           ProtocolVersion = connection.Protocol.ToString()'                           ConnectionId = "Something"'                           DisconnectTimeout = 120                       }));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,HubProxyFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\HubProxyFacts.cs,InvokeWorksWithNullArgument,The following statement contains a magic number: var o = new NullInvokeTest { Name = null' Number = 42' Strings = new[] { "Kazimierz"' null' "Tetmajer" } };
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,TimeoutWarningTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(1)'                  timeout: TimeSpan.FromSeconds(20)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,TimeoutWarningTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(1)'                  timeout: TimeSpan.FromSeconds(20)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,TimeoutWarningTest,The following statement contains a magic number: monitor.Beat(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,ConnectionTimeoutTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(10)'                  timeout: TimeSpan.FromSeconds(1)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,ConnectionTimeoutTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(10)'                  timeout: TimeSpan.FromSeconds(1)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,ConnectionTimeoutTest,The following statement contains a magic number: monitor.Beat(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,NormalConnectionTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(5)'                  timeout: TimeSpan.FromSeconds(10)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,NormalConnectionTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(5)'                  timeout: TimeSpan.FromSeconds(10)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,NormalConnectionTest,The following statement contains a magic number: var keepAliveData = new KeepAliveData(                  timeoutWarning: TimeSpan.FromSeconds(5)'                  timeout: TimeSpan.FromSeconds(10)'                  checkInterval: TimeSpan.FromSeconds(2)              );
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,KeepAliveFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\KeepAliveFacts.cs,NormalConnectionTest,The following statement contains a magic number: monitor.Beat(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,TransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\TransportFacts.cs,CancelledTaskHandledinServerSentEvents,The following statement contains a magic number: connection.SetupGet(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,TransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\TransportFacts.cs,CancelledTaskHandledWhenStartingLongPolling,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(15));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,TransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\TransportFacts.cs,CancelledTaskHandledinLongPollingLoop,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(1500));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,EventSourceStreamReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\EventSourceStreamReaderFacts.cs,ReadTriggersOpenedOnOpen,The following statement contains a magic number: Assert.True(wh.WaitOne(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,EventSourceStreamReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\EventSourceStreamReaderFacts.cs,ReadTriggersOpenedOnOpen,The following statement contains a magic number: Assert.True(tcs.Task.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Client.Tests,EventSourceStreamReaderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\EventSourceStreamReaderFacts.cs,CloseThrowsSouldntTakeProcessDown,The following statement contains a magic number: Assert.True(wh.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TaskQueueFacts.cs,NotifiesMonitorWhenMultipleTasksStartsAndCompletes,The following statement contains a magic number: mockMonitor.Verify(m => m.TaskStarted()' Times.Exactly(2));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TaskQueueFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TaskQueueFacts.cs,NotifiesMonitorWhenMultipleTasksStartsAndCompletes,The following statement contains a magic number: mockMonitor.Verify(m => m.TaskCompleted()' Times.Exactly(2));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TaskQueueMonitorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TaskQueueMonitorFacts.cs,MultipleErrorsAreTriggeredForMultipleLongRunningTasks,The following statement contains a magic number: VerifyErrorCount(Times.Exactly(2)' monitor =>              {                  monitor.TaskStarted();                    monitor.Beat();                  monitor.Beat();                    monitor.TaskCompleted();                  monitor.TaskStarted();                    monitor.Beat();                  monitor.Beat();              });
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TaskQueueMonitorFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TaskQueueMonitorFacts.cs,ErrorsAreNotTriggeredByTimerAfterDisposal,The following statement contains a magic number: Assert.False(wh.Wait(TimeSpan.FromMilliseconds(500)));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,InitTaskIsFailedIfFailureOccursAfterStartRequestStarted,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(0.5));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,TimeoutDoesNotFailTheTaskAfterInitReceived,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromMilliseconds(200));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,TimeoutDoesNotFailTheTaskAfterInitReceived,The following statement contains a magic number: mockTransportHelper.Setup(                  h => h.GetStartResponse(It.IsAny<IHttpClient>()' It.IsAny<IConnection>()'                      It.IsAny<string>()' It.IsAny<string>()))                  .Returns<IHttpClient' IConnection' string' string>(                      (httpClient' connection' connectionData' transport) =>                          // wait for the timeout to fire                          Task.Delay(250).ContinueWith(t => "{ \"Response\" : \"started\" }"));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,InitTaskThrowsStartFailedExceptionIfStartRequestThrows,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,InitTaskThrowsStartFailedExceptionIfStartRequestReturnsIncorrectResult,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,FailIsNoOpAfterStartCompletedSuccessfully,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromMilliseconds(200));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,TransportInitializationHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\TransportInitializationHandlerFacts.cs,FailInvokedIfDisconnectTokenTripped,The following statement contains a magic number: mockConnection.Setup(p => p.TotalTransportConnectTimeout).Returns(TimeSpan.FromMilliseconds(200));
Magic Number,Microsoft.AspNet.SignalR.Client.Infrastructure,UrlBuilderFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Infrastructure\UrlBuilderFacts.cs,CreateConnection,The following statement contains a magic number: mockConnection.Setup(c => c.Protocol).Returns(new Version(1' 42));
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,AutoTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\AutoTransportFacts.cs,AutoTransportDoesNotTryAnotherTransportIfTransportFailsDuringStartRequest,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,AutoTransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\AutoTransportFacts.cs,AutoTransportDoesNotTryAnotherTransportIfStartRequestFails,The following statement contains a magic number: mockConnection.Setup(c => c.TotalTransportConnectTimeout).Returns(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortValidatesArguments,The following statement contains a magic number: Assert.Equal("connection"'                  Assert.Throws<ArgumentNullException>(() => transport.Abort(null' new TimeSpan(0' 0' 5)' "connectionData")).ParamName);
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortRequestNotSentIfConnectionTokenNull,The following statement contains a magic number: transport.Abort(Mock.Of<IConnection>()' new TimeSpan(0' 0' 5)' "connectionData");
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortSendsAbortRequest,The following statement contains a magic number: transport.Abort(connection' new TimeSpan(0' 0' 5)' "connectionData");
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortSendsAbortRequestOnlyOnce,The following statement contains a magic number: transport.Abort(connection' new TimeSpan(0' 0' 5)' "connectionData");
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,AbortSendsAbortRequestOnlyOnce,The following statement contains a magic number: transport.Abort(connection' new TimeSpan(0' 0' 5)' "connectionData");
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,ClientTransportBaseFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\ClientTransportBaseFacts.cs,FailuresWhileSendingAbortRequestsAreLoggedAndSwallowed,The following statement contains a magic number: transport.Abort(connection' new TimeSpan(0' 0' 5)' "connectionData");
Magic Number,Microsoft.AspNet.SignalR.Client.Transports,TransportFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\TransportFacts.cs,VerifyLastActiveSetsLastErrorIfConnectionExpired,The following statement contains a magic number: mockConnection.Setup(c => c.ReconnectWindow).Returns(new TimeSpan(42));
Magic Number,Microsoft.AspNet.SignalR.Client.Transports.WebSockets,ClientWebSocketHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\WebSockets\ClientWebSocketHandlerFacts.cs,WebSocketHandlerClosesIfWebSocketStateIsCloseSentAfterClosing,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
Magic Number,Microsoft.AspNet.SignalR.Client.Transports.WebSockets,ClientWebSocketHandlerFacts,D:\research\architectureSmells\repos1\SignalR_SignalR\test\Microsoft.AspNet.SignalR.Client.Tests\Client\Transports\WebSockets\ClientWebSocketHandlerFacts.cs,WebSocketHandlerClosesIfWebSocketStateIsCloseSentAfterClosing,The following statement contains a magic number: var webSocketHandler = new Mock<WebSocketHandler>(64 * 1024) { CallBase = true };
