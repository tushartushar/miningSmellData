Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNet.SignalR.Samples.Hubs.Chat,Chat,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\Chat\Chat.cs,TryHandleCommand,The method has 171 lines of code.
Long Parameter List,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,HighFrequencyTimer,The method has 5 parameters. Parameters: fps' callback' started' stopped' actualFpsUpdate
Long Parameter List,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,ShapeShare,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,ChangeShape,The method has 5 parameters. Parameters: id' x' y' w' h
Long Statement,Microsoft.AspNet.SignalR.Samples,Startup,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\App_Start\Startup.SignalR.cs,ConfigureSignalR,The length of the statement  "            //dependencyResolver.UseSqlServer(System.Configuration.ConfigurationManager.ConnectionStrings["SignalRSamples"].ConnectionString); " is 130.
Long Statement,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,InlineScriptTag,The length of the statement  "            return "WAITING for Script Tag to replace this.<script>$(\"#inlineScriptTag\").html('Success! Replaced by inline Script Tag');</script>"; " is 137.
Long Statement,Microsoft.AspNet.SignalR.Samples.Hubs.Chat,Chat,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\Chat\Chat.cs,ExtractContent,The length of the statement  "            var requestTask = Task.Factory.FromAsync((cb' state) => request.BeginGetResponse(cb' state)' ar => request.EndGetResponse(ar)' null); " is 133.
Long Statement,Microsoft.AspNet.SignalR.Hosting.AspNet.Samples.Hubs.HubConnectionAPI,HubConnectionAPI,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\HubConnectionAPI\HubConnectionAPI.cs,DisplayMessageAllExcept,The length of the statement  "            Clients.AllExcept(excludeConnectionIds).displayMessage("Clients.AllExcept: " + message + " from " + Context.ConnectionId); " is 122.
Long Statement,Microsoft.AspNet.SignalR.Hosting.AspNet.Samples.Hubs.HubConnectionAPI,HubConnectionAPI,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\HubConnectionAPI\HubConnectionAPI.cs,DisplayMessageGroupExcept,The length of the statement  "            Clients.Group(groupName' excludeConnectionIds).displayMessage("Clients.Group: " + message + " from " + Context.ConnectionId); " is 125.
Magic Number,Microsoft.AspNet.SignalR.Samples,BackgroundThread,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\App_Start\BackgroundThread.cs,Start,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  var context = GlobalHost.ConnectionManager.GetConnectionContext<StreamingConnection>();                  var hubContext = GlobalHost.ConnectionManager.GetHubContext<DemoHub>();                    while (true)                  {                      try                      {                          context.Connection.Broadcast(DateTime.Now.ToString());                          hubContext.Clients.All.fromArbitraryCode(DateTime.Now.ToString());                      }                      catch (Exception ex)                      {                          System.Diagnostics.Trace.TraceError("SignalR error thrown in Streaming broadcast: {0}"' ex);                      }                      Thread.Sleep(2000);                  }              });
Magic Number,Microsoft.AspNet.SignalR.Samples,SendingConnection,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Raw\SendingConnection.cs,OnReceived,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  Connection.Send(connectionId' String.Format("{0}{1}"' data' i)).Wait();              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GetValue,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  Thread.Sleep(5000);                  return 10;              });
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GetValue,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  Thread.Sleep(5000);                  return 10;              });
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,PlainTask,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GenericTaskWithContinueWith,The following statement contains a magic number: return await Task.Run(() => 2 + 2).ContinueWith(task => task.Result);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,GenericTaskWithContinueWith,The following statement contains a magic number: return await Task.Run(() => 2 + 2).ContinueWith(task => task.Result);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,MultipleCalls,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  Clients.Caller.index = i + 1;                  Clients.Caller.invoke(i);                  Thread.Sleep(1000);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,MultipleCalls,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  Clients.Caller.index = i + 1;                  Clients.Caller.invoke(i);                  Thread.Sleep(1000);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReportProgress,The following statement contains a magic number: for (int i = 0; i <= 100; i += 10)              {                  await Task.Delay(250);                  progress.Report(i);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReportProgress,The following statement contains a magic number: for (int i = 0; i <= 100; i += 10)              {                  await Task.Delay(250);                  progress.Report(i);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReportProgress,The following statement contains a magic number: for (int i = 0; i <= 100; i += 10)              {                  await Task.Delay(250);                  progress.Report(i);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReturnLargePayload,The following statement contains a magic number: return new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.DemoHub,DemoHub,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\DemoHub\DemoHub.cs,ReturnLargePayload,The following statement contains a magic number: return new string('a'' 64 * 1024);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.Chat,Chat,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\Chat\Chat.cs,TryHandleCommand,The following statement contains a magic number: if (message.StartsWith("/"))              {                  string[] parts = message.Substring(1).Split(' ');                  string commandName = parts[0];                    if (commandName.Equals("nick"' StringComparison.OrdinalIgnoreCase))                  {                      string newUserName = String.Join(" "' parts.Skip(1));                        if (String.IsNullOrEmpty(newUserName))                      {                          throw new InvalidOperationException("No username specified!");                      }                        if (newUserName.Equals(name' StringComparison.OrdinalIgnoreCase))                      {                          throw new InvalidOperationException("That's already your username...");                      }                        if (!_users.ContainsKey(newUserName))                      {                          if (String.IsNullOrEmpty(name) || !_users.ContainsKey(name))                          {                              AddUser(newUserName);                          }                          else                          {                              var oldUser = _users[name];                              var newUser = new ChatUser                              {                                  Name = newUserName'                                  Hash = GetMD5Hash(newUserName)'                                  Id = oldUser.Id'                                  ConnectionId = oldUser.ConnectionId                              };                                _users[newUserName] = newUser;                              _userRooms[newUserName] = new HashSet<string>(_userRooms[name]);                                if (_userRooms[name].Any())                              {                                  foreach (var r in _userRooms[name])                                  {                                      _rooms[r].Users.Remove(name);                                      _rooms[r].Users.Add(newUserName);                                      Clients.Group(r).changeUserName(oldUser' newUser);                                  }                              }                              HashSet<string> ignoredRoom;                              ChatUser ignoredUser;                              _userRooms.TryRemove(name' out ignoredRoom);                              _users.TryRemove(name' out ignoredUser);                                Clients.Caller.hash = newUser.Hash;                              Clients.Caller.name = newUser.Name;                                Clients.Caller.changeUserName(oldUser' newUser);                          }                      }                      else                      {                          throw new InvalidOperationException(String.Format("Username '{0}' is already taken!"' newUserName));                      }                        return true;                  }                  else                  {                      EnsureUser();                      if (commandName.Equals("rooms"' StringComparison.OrdinalIgnoreCase))                      {                          var rooms = _rooms.Select(r => new                          {                              Name = r.Key'                              Count = r.Value.Users.Count                          });                            Clients.Caller.showRooms(rooms);                            return true;                      }                      else if (commandName.Equals("join"' StringComparison.OrdinalIgnoreCase))                      {                          if (parts.Length == 1)                          {                              throw new InvalidOperationException("Join which room?");                          }                            // Only support one room at a time for now                            string newRoom = parts[1];                          ChatRoom chatRoom;                          // Create the room if it doesn't exist                          if (!_rooms.TryGetValue(newRoom' out chatRoom))                          {                              chatRoom = new ChatRoom();                              _rooms.TryAdd(newRoom' chatRoom);                          }                            // Remove the old room                          if (!String.IsNullOrEmpty(room))                          {                              _userRooms[name].Remove(room);                              _rooms[room].Users.Remove(name);                                Clients.Group(room).leave(_users[name]);                              Groups.Remove(Context.ConnectionId' room);                          }                            _userRooms[name].Add(newRoom);                          if (!chatRoom.Users.Add(name))                          {                              throw new InvalidOperationException("You're already in that room!");                          }                            Clients.Group(newRoom).addUser(_users[name]);                            // Set the room on the caller                          Clients.Caller.room = newRoom;                            Groups.Add(Context.ConnectionId' newRoom);                            Clients.Caller.refreshRoom(newRoom);                            return true;                      }                      else if (commandName.Equals("msg"' StringComparison.OrdinalIgnoreCase))                      {                          if (_users.Count == 1)                          {                              throw new InvalidOperationException("You're the only person in here...");                          }                            if (parts.Length < 2)                          {                              throw new InvalidOperationException("Who are you trying send a private message to?");                          }                            string to = parts[1];                          if (to.Equals(name' StringComparison.OrdinalIgnoreCase))                          {                              throw new InvalidOperationException("You can't private message yourself!");                          }                            if (!_users.ContainsKey(to))                          {                              throw new InvalidOperationException(String.Format("Couldn't find any user named '{0}'."' to));                          }                            string messageText = String.Join(" "' parts.Skip(2)).Trim();                            if (String.IsNullOrEmpty(messageText))                          {                              throw new InvalidOperationException(String.Format("What did you want to say to '{0}'."' to));                          }                            string recipientId = _users[to].ConnectionId;                          // Send a message to the sender and the sendee                                                  Clients.Group(recipientId).sendPrivateMessage(name' to' messageText);                          Clients.Caller.sendPrivateMessage(name' to' messageText);                            return true;                      }                      else                      {                          EnsureUserAndRoom();                          if (commandName.Equals("me"' StringComparison.OrdinalIgnoreCase))                          {                              if (parts.Length == 1)                              {                                  throw new InvalidProgramException("You what?");                              }                              var content = String.Join(" "' parts.Skip(1));                                Clients.Group(room).sendMeMessage(name' content);                              return true;                          }                          else if (commandName.Equals("leave"' StringComparison.OrdinalIgnoreCase))                          {                              ChatRoom chatRoom;                              if (_rooms.TryGetValue(room' out chatRoom))                              {                                  chatRoom.Users.Remove(name);                                  _userRooms[name].Remove(room);                                    Clients.Group(room).leave(_users[name]);                              }                                Groups.Remove(Context.ConnectionId' room);                                Clients.Caller.room = null;                                return true;                          }                            throw new InvalidOperationException(String.Format("'{0}' is not a valid command."' parts[0]));                      }                  }              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.Chat,Chat,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\Chat\Chat.cs,TryHandleCommand,The following statement contains a magic number: if (message.StartsWith("/"))              {                  string[] parts = message.Substring(1).Split(' ');                  string commandName = parts[0];                    if (commandName.Equals("nick"' StringComparison.OrdinalIgnoreCase))                  {                      string newUserName = String.Join(" "' parts.Skip(1));                        if (String.IsNullOrEmpty(newUserName))                      {                          throw new InvalidOperationException("No username specified!");                      }                        if (newUserName.Equals(name' StringComparison.OrdinalIgnoreCase))                      {                          throw new InvalidOperationException("That's already your username...");                      }                        if (!_users.ContainsKey(newUserName))                      {                          if (String.IsNullOrEmpty(name) || !_users.ContainsKey(name))                          {                              AddUser(newUserName);                          }                          else                          {                              var oldUser = _users[name];                              var newUser = new ChatUser                              {                                  Name = newUserName'                                  Hash = GetMD5Hash(newUserName)'                                  Id = oldUser.Id'                                  ConnectionId = oldUser.ConnectionId                              };                                _users[newUserName] = newUser;                              _userRooms[newUserName] = new HashSet<string>(_userRooms[name]);                                if (_userRooms[name].Any())                              {                                  foreach (var r in _userRooms[name])                                  {                                      _rooms[r].Users.Remove(name);                                      _rooms[r].Users.Add(newUserName);                                      Clients.Group(r).changeUserName(oldUser' newUser);                                  }                              }                              HashSet<string> ignoredRoom;                              ChatUser ignoredUser;                              _userRooms.TryRemove(name' out ignoredRoom);                              _users.TryRemove(name' out ignoredUser);                                Clients.Caller.hash = newUser.Hash;                              Clients.Caller.name = newUser.Name;                                Clients.Caller.changeUserName(oldUser' newUser);                          }                      }                      else                      {                          throw new InvalidOperationException(String.Format("Username '{0}' is already taken!"' newUserName));                      }                        return true;                  }                  else                  {                      EnsureUser();                      if (commandName.Equals("rooms"' StringComparison.OrdinalIgnoreCase))                      {                          var rooms = _rooms.Select(r => new                          {                              Name = r.Key'                              Count = r.Value.Users.Count                          });                            Clients.Caller.showRooms(rooms);                            return true;                      }                      else if (commandName.Equals("join"' StringComparison.OrdinalIgnoreCase))                      {                          if (parts.Length == 1)                          {                              throw new InvalidOperationException("Join which room?");                          }                            // Only support one room at a time for now                            string newRoom = parts[1];                          ChatRoom chatRoom;                          // Create the room if it doesn't exist                          if (!_rooms.TryGetValue(newRoom' out chatRoom))                          {                              chatRoom = new ChatRoom();                              _rooms.TryAdd(newRoom' chatRoom);                          }                            // Remove the old room                          if (!String.IsNullOrEmpty(room))                          {                              _userRooms[name].Remove(room);                              _rooms[room].Users.Remove(name);                                Clients.Group(room).leave(_users[name]);                              Groups.Remove(Context.ConnectionId' room);                          }                            _userRooms[name].Add(newRoom);                          if (!chatRoom.Users.Add(name))                          {                              throw new InvalidOperationException("You're already in that room!");                          }                            Clients.Group(newRoom).addUser(_users[name]);                            // Set the room on the caller                          Clients.Caller.room = newRoom;                            Groups.Add(Context.ConnectionId' newRoom);                            Clients.Caller.refreshRoom(newRoom);                            return true;                      }                      else if (commandName.Equals("msg"' StringComparison.OrdinalIgnoreCase))                      {                          if (_users.Count == 1)                          {                              throw new InvalidOperationException("You're the only person in here...");                          }                            if (parts.Length < 2)                          {                              throw new InvalidOperationException("Who are you trying send a private message to?");                          }                            string to = parts[1];                          if (to.Equals(name' StringComparison.OrdinalIgnoreCase))                          {                              throw new InvalidOperationException("You can't private message yourself!");                          }                            if (!_users.ContainsKey(to))                          {                              throw new InvalidOperationException(String.Format("Couldn't find any user named '{0}'."' to));                          }                            string messageText = String.Join(" "' parts.Skip(2)).Trim();                            if (String.IsNullOrEmpty(messageText))                          {                              throw new InvalidOperationException(String.Format("What did you want to say to '{0}'."' to));                          }                            string recipientId = _users[to].ConnectionId;                          // Send a message to the sender and the sendee                                                  Clients.Group(recipientId).sendPrivateMessage(name' to' messageText);                          Clients.Caller.sendPrivateMessage(name' to' messageText);                            return true;                      }                      else                      {                          EnsureUserAndRoom();                          if (commandName.Equals("me"' StringComparison.OrdinalIgnoreCase))                          {                              if (parts.Length == 1)                              {                                  throw new InvalidProgramException("You what?");                              }                              var content = String.Join(" "' parts.Skip(1));                                Clients.Group(room).sendMeMessage(name' content);                              return true;                          }                          else if (commandName.Equals("leave"' StringComparison.OrdinalIgnoreCase))                          {                              ChatRoom chatRoom;                              if (_rooms.TryGetValue(room' out chatRoom))                              {                                  chatRoom.Users.Remove(name);                                  _userRooms[name].Remove(room);                                    Clients.Group(room).leave(_users[name]);                              }                                Groups.Remove(Context.ConnectionId' room);                                Clients.Caller.room = null;                                return true;                          }                            throw new InvalidOperationException(String.Format("'{0}' is not a valid command."' parts[0]));                      }                  }              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Stop,The following statement contains a magic number: if (Interlocked.CompareExchange(ref _state' 3' 2) != 2)              {                  // Wasn't running                  return false;              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Stop,The following statement contains a magic number: if (Interlocked.CompareExchange(ref _state' 3' 2) != 2)              {                  // Wasn't running                  return false;              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Stop,The following statement contains a magic number: if (Interlocked.CompareExchange(ref _state' 3' 2) != 2)              {                  // Wasn't running                  return false;              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,IsRunning,The following statement contains a magic number: return Interlocked.Read(ref _state) == 2;
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Run,The following statement contains a magic number: Interlocked.Exchange(ref _state' 2);
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Run,The following statement contains a magic number: while (Interlocked.Read(ref _state) == 2)              {                  var frameMs = (int)Math.Round(1000.0 / FPS);                  long delta = (lastMs + frameMs) - sw.ElapsedMilliseconds;                                    // Actual FPS check' update every second                  if ((lastFpsCheck + 1000 - sw.ElapsedMilliseconds) <= 0)                  {                      _actualFpsUpdate(actualFps);                      lastFpsCheck = sw.ElapsedMilliseconds;                      actualFps = 0;                  }                    if (delta <= 0)                  {                      // Time to call the callback!                      actualFps++;                      _callback(Interlocked.Increment(ref _frameId));                      lastMs = sw.ElapsedMilliseconds;                  }                  else                  {                      Thread.Yield();                  }              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Run,The following statement contains a magic number: while (Interlocked.Read(ref _state) == 2)              {                  var frameMs = (int)Math.Round(1000.0 / FPS);                  long delta = (lastMs + frameMs) - sw.ElapsedMilliseconds;                                    // Actual FPS check' update every second                  if ((lastFpsCheck + 1000 - sw.ElapsedMilliseconds) <= 0)                  {                      _actualFpsUpdate(actualFps);                      lastFpsCheck = sw.ElapsedMilliseconds;                      actualFps = 0;                  }                    if (delta <= 0)                  {                      // Time to call the callback!                      actualFps++;                      _callback(Interlocked.Increment(ref _frameId));                      lastMs = sw.ElapsedMilliseconds;                  }                  else                  {                      Thread.Yield();                  }              }
Magic Number,Microsoft.AspNet.SignalR,HighFrequencyTimer,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\RealtimeBroadcast\HighFrequencyTimer.cs,Run,The following statement contains a magic number: while (Interlocked.Read(ref _state) == 2)              {                  var frameMs = (int)Math.Round(1000.0 / FPS);                  long delta = (lastMs + frameMs) - sw.ElapsedMilliseconds;                                    // Actual FPS check' update every second                  if ((lastFpsCheck + 1000 - sw.ElapsedMilliseconds) <= 0)                  {                      _actualFpsUpdate(actualFps);                      lastFpsCheck = sw.ElapsedMilliseconds;                      actualFps = 0;                  }                    if (delta <= 0)                  {                      // Time to call the callback!                      actualFps++;                      _callback(Interlocked.Increment(ref _frameId));                      lastMs = sw.ElapsedMilliseconds;                  }                  else                  {                      Thread.Yield();                  }              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,ShapeShare,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Join,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(userName))              {                  user = new User();                  do                  {                      user.Name = "User" + _userNameGenerator.Next(1000);                  } while (!_users.TryAdd(user.Name' user));              }              else if (!_users.TryGetValue(userName' out user))              {                  user = new User { Name = userName };                  _users.TryAdd(userName' user);              }
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Shape,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Shape,The following statement contains a magic number: Location = new Point(20' 20);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Shape,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Shape,The following statement contains a magic number: Location = new Point(20' 20);
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Rectangle,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Rectangle,The following statement contains a magic number: Width = 160;
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Rectangle,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Rectangle,The following statement contains a magic number: Height = 100;
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Square,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Square,The following statement contains a magic number: Width = 100;
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Circle,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Circle,The following statement contains a magic number: Width = 100;
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Picture,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Picture,The following statement contains a magic number: Width = 165;
Magic Number,Microsoft.AspNet.SignalR.Samples.Hubs.ShapeShare,Picture,C:\repos\SignalR_SignalR\samples\Microsoft.AspNet.SignalR.Samples\Hubs\ShapeShare\ShapeShare.cs,Picture,The following statement contains a magic number: Height = 64;
