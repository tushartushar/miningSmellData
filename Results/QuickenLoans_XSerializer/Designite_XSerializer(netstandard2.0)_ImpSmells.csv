Implementation smell,Namespace,Class,File,Method,Description
Long Method,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The method has 113 lines of code.
Long Method,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The method has 103 lines of code.
Long Method,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The method has 106 lines of code.
Long Method,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The method has 124 lines of code.
Long Method,XSerializer,JsonArray,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetConvertFunc,The method has 321 lines of code.
Long Method,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The method has 123 lines of code.
Long Method,XSerializer,SerializableJsonProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The method has 182 lines of code.
Long Method,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has 117 lines of code.
Long Method,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The method has 139 lines of code.
Complex Method,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 15
Complex Method,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetConstructor,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertValidHeirarchy,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,Cyclomatic complexity of the method is 20
Complex Method,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,SerializeObject,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,Cyclomatic complexity of the method is 18
Complex Method,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,JsonArray,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetConvertFunc,Cyclomatic complexity of the method is 37
Complex Method,XSerializer,JsonArray,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetTransform,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,TryGetProjection,Cyclomatic complexity of the method is 16
Complex Method,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,Cyclomatic complexity of the method is 13
Complex Method,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,PeekContent,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadEscapedChar,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,JsonWriter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonWriter.cs,Escape,Cyclomatic complexity of the method is 18
Complex Method,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,MalformedDocumentException,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,Cyclomatic complexity of the method is 24
Complex Method,XSerializer,NumberJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,SetDelegates,Cyclomatic complexity of the method is 12
Complex Method,XSerializer,SerializableJsonProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,Cyclomatic complexity of the method is 15
Complex Method,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,Cyclomatic complexity of the method is 16
Complex Method,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetStringFunc,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,StringJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,StringJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,SetDelegates,Cyclomatic complexity of the method is 10
Long Parameter List,XSerializer,DefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DefaultConstructorHelper,The method has 5 parameters. Parameters: createInstance' caseSensitiveSerializableProperties' textNodeProperty' attributeProperties' reader
Long Parameter List,XSerializer,NonDefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,NonDefaultConstructorHelper,The method has 6 parameters. Parameters: constructors' serializableProperties' textNodeProperty' attributeProperties' caseSensitiveSerializableProperties' reader
Long Parameter List,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The method has 11 parameters. Parameters: value' year' month' day' hour' minute' second' ticks' offsetHours' offsetMinutes' dateTimeKind
Long Parameter List,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The method has 5 parameters. Parameters: sourceString' i' offsetHours' offsetMinutes' dateTimeKind
Long Parameter List,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The method has 5 parameters. Parameters: year' month' day' hour' minute
Long Parameter List,XSerializer,JsonSerializerFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The method has 5 parameters. Parameters: type' encrypt' mappingsByType' mappingsByProperty' shouldUseAttributeDefinedInInterface
Long Parameter List,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeItem,The method has 5 parameters. Parameters: reader' serializer' hasInstanceBeenCreated' options' shouldIssueRead
Long Parameter List,XSerializer,MalformedDocumentException,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,MalformedDocumentException,The method has 6 parameters. Parameters: error' path' line' position' innerException' additionalArgs
Long Parameter List,XSerializer,MalformedDocumentException,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,MalformedDocumentException,The method has 7 parameters. Parameters: error' path' value' line' position' innerException' additionalArgs
Long Parameter List,XSerializer,MalformedDocumentException,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,The method has 6 parameters. Parameters: error' path' line' position' value' additionalArgs
Long Parameter List,XSerializer,NumberJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,Try,The method has 5 parameters. Parameters: parseFunc' value' path' line' position
Long Parameter List,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 5 parameters. Parameters: serializer' instance' encoding' formatting' options
Long Parameter List,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 6 parameters. Parameters: serializer' stream' instance' encoding' formatting' options
Long Parameter List,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 5 parameters. Parameters: serializer' writer' instance' formatting' options
Long Parameter List,XSerializer,StringJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,Try,The method has 7 parameters. Parameters: parseFunc' value' info' type' path' line' position
Long Parameter List,XSerializer,XmlAttributeSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,XmlAttributeSerializer,The method has 5 parameters. Parameters: type' attributeName' redactAttribute' encryptAttribute' options
Long Parameter List,XSerializer,XmlSerializationOptions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The method has 15 parameters. Parameters: namespaces' encoding' shouldEncryptRootObject' defaultNamespace' shouldIndent' rootElementName' shouldAlwaysEmitTypes' shouldRedact' shouldEncrypt' treatEmptyElementAsString' emitNil' encryptionMechanism' encryptKey' shouldIgnoreCaseForEnum' shouldSerializeCharAsInt
Long Parameter List,XSerializer,XmlSerializationOptions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The method has 16 parameters. Parameters: namespaces' encoding' shouldEncryptRootObject' defaultNamespace' shouldIndent' rootElementName' shouldAlwaysEmitTypes' shouldRedact' shouldEncrypt' treatEmptyElementAsString' emitNil' encryptionMechanism' encryptKey' shouldIgnoreCaseForEnum' shouldSerializeCharAsInt' shouldUseAttributeDefinedInInterface
Long Identifier,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,CustomJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the parameter getSerializerAndArgIndexLambda is 30.
Long Identifier,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,,The length of the parameter _shouldUseAttributeDefinedInInterface is 37.
Long Identifier,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,,The length of the parameter _encryptedXmlElementListProperties is 34.
Long Identifier,XSerializer,HelperFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetCreateHelperFunc,The length of the parameter caseSensitiveSerializableProperties is 35.
Long Identifier,XSerializer,IHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetInstance,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,NullHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetInstance,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DefaultConstructorHelper,The length of the parameter caseSensitiveSerializableProperties is 35.
Long Identifier,XSerializer,DefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetInstance,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,,The length of the parameter _caseSensitiveSerializableProperties is 36.
Long Identifier,XSerializer,NonDefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,NonDefaultConstructorHelper,The length of the parameter caseSensitiveSerializableProperties is 35.
Long Identifier,XSerializer,NonDefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetInstance,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,NonDefaultConstructorHelper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,,The length of the parameter _caseSensitiveSerializableProperties is 36.
Long Identifier,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DictionaryJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,,The length of the parameter _shouldUseAttributeDefinedInInterface is 37.
Long Identifier,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DictionarySerializer<TDictionary;TKey;TValue>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,,The length of the parameter _finalizeCollectionIntoReadOnlyDictionary is 41.
Long Identifier,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DynamicJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,,The length of the parameter _shouldUseAttributeDefinedInInterface is 37.
Long Identifier,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeExpandoObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,EncryptionAlgorithm,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\EncryptionAlgorithmFactory.cs,,The length of the parameter _defaultDefaultEncryptionAlgorithm is 34.
Long Identifier,XSerializer,EncryptionAlgorithmFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\EncryptionAlgorithmFactory.cs,,The length of the parameter _defaultEncryptionAlgorithmFactory is 34.
Long Identifier,XSerializer,JsonSerializerFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,JsonSerializerFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,ListJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,SerializableJsonProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,,The length of the parameter _isListDecoratedWithXmlElement is 30.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttributes,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttribute,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttributesImpl,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonPropertyAttributeDefined,The length of the parameter newtonsoftJsonPropertyAttribute is 31.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetName,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetName,The length of the parameter newtonsoftJsonPropertyAttribute is 31.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionary,The length of the parameter isAssignableToGenericIDictionary is 32.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the parameter isAssignableToGenericIDictionary is 32.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerable,The length of the parameter isAssignableToGenericIEnumerable is 32.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerableOfTypeObject,The length of the parameter isAssignableToGenericIEnumerable is 32.
Long Identifier,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericICollection,The length of the parameter isAssignableToGenericICollection is 32.
Long Identifier,XSerializer,XmlAttributeSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlAttributeSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlElementSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlElementSerializer.cs,WriteElement,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlElementSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlElementSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlSerializationOptions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,XmlSerializationOptions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,,The length of the parameter _shouldUseAttributeDefinedInInterface is 37.
Long Identifier,XSerializer,XmlTextSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlTextSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlTextSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlTextSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XSerializerXmlTextWriter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XSerializerXmlTextWriter.cs,,The length of the parameter _hasWritternDefaultDocumentNamespaces is 37.
Long Statement,XSerializer,BooleanJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,DeserializeObject,The length of the statement  "                            if (reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid))" is 137.
Long Statement,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "            var lhsRootElementName = string.IsNullOrWhiteSpace(lhsOptions.RootElementName) ? lhsType.Name : lhsOptions.RootElementName;" is 123.
Long Statement,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "            var rhsRootElementName = string.IsNullOrWhiteSpace(rhsOptions.RootElementName) ? rhsType.Name : rhsOptions.RootElementName;" is 123.
Long Statement,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The length of the statement  "                key = (key * 397) ^ (string.IsNullOrWhiteSpace(options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode();" is 120.
Long Statement,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The length of the statement  "                key = (key * 397) ^ (string.IsNullOrWhiteSpace(options.RootElementName) ? type.Name : options.RootElementName).GetHashCode();" is 125.
Long Statement,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetSerializableProperties,The length of the statement  "                .Select(p => new SerializableJsonProperty(p' _encrypt || p.GetCustomAttribute<EncryptAttribute>(_shouldUseAttributeDefinedInInterface) != null' _mappings' _shouldUseAttributeDefinedInInterface)).ToList();" is 204.
Long Statement,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,Get,The length of the statement  "            return _cache.GetOrAdd(Tuple.Create(type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new CustomJsonSerializer(t.Item1' t.Item2' t.Item3' t.Item4));" is 167.
Long Statement,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "                var serializer = JsonSerializerFactory.GetSerializer(parameters[i].ParameterType' _encrypt' _mappings' _shouldUseAttributeDefinedInInterface);" is 142.
Long Statement,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "                var switchLabel = matchingProperties.Count == 1 ? matchingProperties[0].GetName(_shouldUseAttributeDefinedInInterface) : parameters[i].Name;" is 140.
Long Statement,XSerializer,CustomJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetConstructor,The length of the statement  "                throw new XSerializerException("More than one constructor is decorated with the JsonConstructor attribute: " + type.FullName);" is 126.
Long Statement,XSerializer,CustomSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetSerializer,The length of the statement  "                        return (IXmlSerializerInternal)Activator.CreateInstance(typeof(CustomSerializer<>).MakeGenericType(type)' encryptAttribute' options);" is 133.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "                        if (string.IsNullOrWhiteSpace(baseXmlAttribute.AttributeName) && !string.IsNullOrWhiteSpace(derivedXmlAttribute.AttributeName))" is 127.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "                        if (!string.IsNullOrWhiteSpace(baseXmlAttribute.AttributeName) && baseXmlAttribute.AttributeName != derivedXmlAttribute.AttributeName)" is 134.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "                    if (string.IsNullOrWhiteSpace(baseXmlAttribute.AttributeName)) // && string.IsNullOrWhiteSpace(derivedXmlAttribute.AttributeName)" is 129.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "                                    throw new InvalidOperationException("Unable to create concrete instance of interface type " + typeof(T) + " - no type hint found.");" is 132.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "                            // This is left-over (and commented-out) from an earlier time. Is it even possible to have a CustomSerializer for a primitive type???" is 133.
Long Statement,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "            throw new InvalidOperationException("Deserialization error: reached the end of the document without returning a value.");" is 121.
Long Statement,XSerializer,HelperFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetCreateHelperFunc,The length of the statement  "                var attributeProperties = serializableProperties.Where(p => p.NodeType == NodeType.Attribute).ToDictionary(p => p.Name);" is 120.
Long Statement,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseDateTime,The length of the statement  "            GetDateTimeComponents(value' out year' out month' out day' out hour' out minute' out second' out ticks' out offsetHours' out offsetMinutes' out dateTimeKind);" is 158.
Long Statement,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseDateTimeOffset,The length of the statement  "            GetDateTimeComponents(value' out year' out month' out day' out hour' out minute' out second' out ticks' out offsetHours' out offsetMinutes' out dateTimeKind);" is 158.
Long Statement,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The length of the statement  "            for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++)" is 133.
Long Statement,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The length of the statement  "            for (valueIndex = valueIndex + 1' formatIndex = formatIndex + 1; formatIndex < _dateFormat.Length && valueIndex < sourceString.Length; valueIndex++' formatIndex++)" is 163.
Long Statement,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,Get,The length of the statement  "            return _cache.GetOrAdd(Tuple.Create(type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new DictionaryJsonSerializer(t.Item1' t.Item2' t.Item3' t.Item4));" is 171.
Long Statement,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,GetAddToDictionaryAction,The length of the statement  "            var lambda = Expression.Lambda<Action<object' object' object>>(call' dictionaryParameter' keyParameter' valueParameter);" is 120.
Long Statement,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The length of the statement  "            throw new InvalidOperationException("Deserialization error: reached the end of the document without returning a value.");" is 121.
Long Statement,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,CheckAndReturn,The length of the statement  "                throw new InvalidOperationException("Deserialization error: attempted to return a deserialized instance before it was created.");" is 129.
Long Statement,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "                            return (IXmlSerializerInternal)Activator.CreateInstance(typeof(DictionarySerializer<''>).MakeGenericType(type' keyType' valueType)' encryptAttribute' options);" is 159.
Long Statement,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "                        return (IXmlSerializerInternal)Activator.CreateInstance(typeof(DictionarySerializer<>).MakeGenericType(type)' encryptAttribute' options);" is 137.
Long Statement,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "                    throw new InvalidOperationException(string.Format("Cannot create a DictionarySerializer of type '{0}'."' type.FullName));" is 121.
Long Statement,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Get,The length of the statement  "            return _cache.GetOrAdd(Tuple.Create(encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new DynamicJsonSerializer(t.Item1' t.Item2' t.Item3));" is 153.
Long Statement,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,SerializeObject,The length of the statement  "                var serializer = _serializerCache.GetOrAdd(Tuple.Create(instance.GetType()' _encrypt)' tuple => GetSerializer(tuple.Item1));" is 124.
Long Statement,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The length of the statement  "                            if (reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid))" is 137.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,GetSerializer,The length of the statement  "            throw new InvalidOperationException("The only valid generic arguments for DynamicSerializer.GetSerializer<T> are object' dynamic' and ExpandoObject");" is 150.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeObject,The length of the statement  "                serializer = CustomSerializer.GetSerializer(typeof(object)' _encryptAttribute' _options.WithAdditionalExtraTypes(instance.GetType()));" is 134.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeObject,The length of the statement  "                var serializer = XmlSerializerFactory.Instance.GetSerializer(type' _encryptAttribute' _options.WithRootElementName(reader.Name));" is 129.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeExpandoObject,The length of the statement  "                        serializer = CustomSerializer.GetSerializer(property.Value.GetType()' null' _options.WithRootElementName(property.Key));" is 120.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the statement  "                        var stringValue = (string)new XmlTextSerializer(typeof(string)' _options.RedactAttribute' null' _options.ExtraTypes).DeserializeObject(reader' options);" is 152.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the statement  "            throw new InvalidOperationException("Deserialization error: reached the end of the document without returning a value.");" is 121.
Long Statement,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,CheckAndReturn,The length of the statement  "                throw new InvalidOperationException("Deserialization error: attempted to return a deserialized instance before it was created.");" is 129.
Long Statement,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,SetDecryptReads,The length of the statement  "                    throw new InvalidOperationException("Attempted to set DecryptReads to false before the encrypted stream has been consumed.");" is 125.
Long Statement,XSerializer,JsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonSerializer.cs,Create,The length of the statement  "                    if (ctor == null) throw new InvalidOperationException("A source code change has resulted in broken reflection. typeof(JsonSerializer<>).MakeGenericType(type).GetConstructor(new[] { typeof(IJsonSerializerConfiguration) })");" is 223.
Long Statement,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Get,The length of the statement  "            return _cache.GetOrAdd(Tuple.Create(type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new ListJsonSerializer(t.Item1' t.Item2' t.Item3' t.Item4));" is 165.
Long Statement,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The length of the statement  "                            if (reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid))" is 137.
Long Statement,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The length of the statement  "                        return (IXmlSerializerInternal)Activator.CreateInstance(typeof(ListSerializer<'>).MakeGenericType(type' itemType)' encryptAttribute' options' itemElementName);" is 159.
Long Statement,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The length of the statement  "                        return (IXmlSerializerInternal)Activator.CreateInstance(typeof(ListSerializer<>).MakeGenericType(type)' encryptAttribute' options' itemElementName);" is 148.
Long Statement,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The length of the statement  "            throw new InvalidOperationException("Deserialization error: attempted to return a deserialized instance before it was created.");" is 129.
Long Statement,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeItem,The length of the statement  "                throw new InvalidOperationException("Deserialization error: attempted to deserialize an item before creating its list.");" is 121.
Long Statement,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,CheckAndReturn,The length of the statement  "                throw new InvalidOperationException("Deserialization error: attempted to return a deserialized instance before it was created.");" is 129.
Long Statement,XSerializer,NumberJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The length of the statement  "                            if (reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid))" is 137.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "                var attributeName = !string.IsNullOrWhiteSpace(attributeAttribute.AttributeName) ? attributeAttribute.AttributeName : propertyInfo.Name;" is 136.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "                return () => new XmlAttributeSerializer(propertyInfo.PropertyType' attributeName' redactAttribute' _encryptAttribute' options);" is 127.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "                    throw new InvalidOperationException("On list types' XmlElementAttribute may not be present with either XmlArrayAttribute or XmlArrayItemAttribute are present.");" is 161.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "                return () => ListSerializer.GetSerializer(propertyInfo.PropertyType' _encryptAttribute' options.WithRootElementName(rootElementName)' itemElementName);" is 151.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "            return () => XmlSerializerFactory.Instance.GetSerializer(propertyInfo.PropertyType' _encryptAttribute' options.WithRootElementName(rootElementName));" is 149.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "                    var addMethods = new[] { propertyType }.Concat(propertyType.GetInterfaces()).SelectMany(t => t.GetMethods().Where(m => m.Name == "Add" && m.GetParameters().Length == 1 && m.GetParameters()[0].ParameterType == itemType));" is 220.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "                                    throw new InvalidOperationException(string.Format("No suitable 'Add' method found for instance of type {0}"' sourceEnumerator.Current.GetType()));" is 146.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "                var addMethods = new[] { propertyType }.Concat(propertyType.GetInterfaces()).SelectMany(t => t.GetMethods().Where(m => m.Name == "Add" && m.GetParameters().Length == 1));" is 170.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "                                throw new InvalidOperationException(string.Format("No suitable 'Add' method found for instance of type {0}"' sourceEnumerator.Current.GetType()));" is 146.
Long Statement,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetShouldSerializeFunc,The length of the statement  "            var shouldSerializeMethod = propertyInfo.DeclaringType.GetMethod("ShouldSerialize" + propertyInfo.Name' Type.EmptyTypes);" is 121.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "                    using (var reader = new XSerializerXmlReader(xmlReader' options.GetEncryptionMechanism()' options.EncryptKey' options.SerializationState))" is 138.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "            var reader = new XSerializerXmlReader(xmlReader' options.GetEncryptionMechanism()' options.EncryptKey' options.SerializationState);" is 131.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "            var reader = new XSerializerXmlReader(xmlReader' options.GetEncryptionMechanism()' options.EncryptKey' options.SerializationState);" is 131.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsSerializable,The length of the statement  "            var isSerializable = property.GetIndexParameters().Length == 0 && (property.IsReadWriteProperty() || property.IsSerializableReadOnlyProperty(constructorParameters));" is 165.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsSerializableReadOnlyProperty,The length of the statement  "                    ((constructorParameters ?? Enumerable.Empty<ParameterInfo>()).Any(p => p.Name.ToLower() == property.Name.ToLower() && p.ParameterType == property.PropertyType))" is 160.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsSerializableReadOnlyProperty,The length of the statement  "                    (property.PropertyType.IsAssignableToGenericIEnumerable() && property.PropertyType.HasAddMethodOfType(property.PropertyType.GetGenericIEnumerableType().GetGenericArguments()[0]))" is 178.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializableReadOnlyProperty,The length of the statement  "            if (constructorParameters != null && constructorParameters.Any(p => string.Equals(p.Name' propertyInfo.Name' StringComparison.OrdinalIgnoreCase)))" is 146.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the statement  "                iDictionaryType = type.GetInterfaces().Single(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IDictionary<'>));" is 126.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the statement  "            return iDictionaryType.GetGenericArguments()[0] == typeof(object) || iDictionaryType.GetGenericArguments()[1] == typeof(object);" is 128.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAnonymous,The length of the statement  "                && (type.Name.StartsWith("<>"' StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith("VB$"' StringComparison.OrdinalIgnoreCase))" is 134.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetElementName,The length of the statement  "                return type.Name.Substring(0' type.Name.IndexOf("`")) + "Of" + string.Join("_"' type.GetGenericArguments().Select(x => x.GetElementName()));" is 140.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "                                                throw new SerializationException(string.Format("More than one type matches '{0}'. Consider decorating your type with the XmlIncludeAttribute' or pass in the type into the serializer as an extra type."' typeName));" is 213.
Long Statement,XSerializer,SerializationExtensions,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "                        throw new SerializationException(string.Format("No suitable type matches '{0}'. Consider decorating your type with the XmlIncludeAttribute' or pass in the type into the serializer as an extra type."' typeName));" is 211.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The length of the statement  "                return (value' options) => string.IsNullOrEmpty(value) || value == "XXXXXX" ? defaultValue : Enum.Parse(type' value' options.ShouldIgnoreCaseForEnum);" is 150.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The length of the statement  "                return (value' options) => string.IsNullOrEmpty(value) ? null : Convert.ChangeType(value' type.GetGenericArguments()[0]);" is 121.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetStringFunc,The length of the statement  "                return (value' options) => redactAttribute.Redact((char?)value' options.ShouldRedact' options.ShouldSerializeCharAsInt);" is 120.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "                return (value' options) => string.IsNullOrEmpty(value) ? defaultValue : Enum.Parse(type' value' options.ShouldIgnoreCaseForEnum);" is 129.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "                return (value' options) => string.IsNullOrEmpty(value) ? null : Enum.Parse(enumType' value' options.ShouldIgnoreCaseForEnum);" is 125.
Long Statement,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "                return (value' options) => string.IsNullOrEmpty(value) ? null : Convert.ChangeType(value' type.GetGenericArguments()[0]);" is 121.
Long Statement,XSerializer,XmlSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializer.cs,Create,The length of the statement  "                    if (ctor == null) throw new InvalidOperationException("A source code change has resulted in broken reflection. typeof(XmlSerializer<>).MakeGenericType(type).GetConstructor(new[] { typeof(XmlSerializationOptions)' typeof(Type[]) })");" is 233.
Long Statement,XSerializer,XmlSerializerFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializerFactory.cs,GetSerializer,The length of the statement  "                        return (Func<EncryptAttribute' IXmlSerializerOptions' IXmlSerializerInternal>)Delegate.CreateDelegate(typeof(Func<EncryptAttribute' IXmlSerializerOptions' IXmlSerializerInternal>)' this' getSerializerMethod);" is 208.
Long Statement,XSerializer,XmlSerializerFactory,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\XmlSerializerFactory.cs,GetSerializer,The length of the statement  "                    else if (type.IsAssignableToNonGenericIDictionary() || type.IsAssignableToGenericIDictionary() || type.IsReadOnlyDictionary())" is 126.
Complex Conditional,XSerializer,BooleanJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,DeserializeObject,The conditional expression  "reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid)"  is complex.
Complex Conditional,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The conditional expression  "sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])"  is complex.
Complex Conditional,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The conditional expression  "concreteType == typeof(string)                 || concreteType == typeof(DateTime)                 || concreteType == typeof(DateTimeOffset)                 || concreteType == typeof(Guid)"  is complex.
Complex Conditional,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The conditional expression  "concreteType == typeof(double)                 || concreteType == typeof(int)                 || concreteType == typeof(float)                 || concreteType == typeof(long)                 || concreteType == typeof(decimal)                 || concreteType == typeof(byte)                 || concreteType == typeof(sbyte)                 || concreteType == typeof(short)                 || concreteType == typeof(ushort)                 || concreteType == typeof(uint)                 || concreteType == typeof(ulong)"  is complex.
Complex Conditional,XSerializer,DynamicJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The conditional expression  "reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid)"  is complex.
Complex Conditional,XSerializer,JsonArray,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,Decrypt,The conditional expression  "value == null                                 || value is bool                                 || value is JsonArray                                 || value is JsonObject"  is complex.
Complex Conditional,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,Decrypt,The conditional expression  "value == null                                 || value is bool                                 || value is string                                 || value is JsonArray                                 || value is JsonObject"  is complex.
Complex Conditional,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The conditional expression  "value == null                 || value is bool                 || value is string                 || value is JsonNumber                 || value is JsonObject                 || value is JsonArray"  is complex.
Complex Conditional,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The conditional expression  "value is int                 || value is double                 || value is byte                 || value is long                 || value is decimal                 || value is uint                 || value is ulong                 || value is short                 || value is float                 || value is ushort                 || value is sbyte"  is complex.
Complex Conditional,XSerializer,ListJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The conditional expression  "reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid)"  is complex.
Complex Conditional,XSerializer,NumberJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The conditional expression  "reader.NodeType != JsonNodeType.Null && reader.DecryptReads && (reader.ReadContent(path) || reader.NodeType == JsonNodeType.Invalid)"  is complex.
Complex Conditional,XSerializer,SimpleTypeValueConverter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The conditional expression  "type.IsEnum ||                 (type.IsGenericType                     && type.GetGenericTypeDefinition() == typeof(Nullable<>)                     && type.GetGenericArguments()[0].IsEnum)"  is complex.
Empty Catch Block,XSerializer,ListSerializer<TEnumerable>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,ListSerializer,The method has an empty catch block.
Empty Catch Block,XSerializer,ListSerializer<TEnumerable;TItem>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,ListSerializer,The method has an empty catch block.
Empty Catch Block,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has an empty catch block.
Empty Catch Block,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has an empty catch block.
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (string.IsNullOrWhiteSpace(options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = options.ExtraTypes                         .Where(extraType => extraType != null)                         .Distinct(EqualityComparer<Type>.Default)                         .OrderBy(extraType => extraType.FullName)                         .Aggregate(key' (current' extraType) => (current * 397) ^ extraType.GetHashCode());
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (string.IsNullOrWhiteSpace(options.RootElementName) ? type.Name : options.RootElementName).GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (encryptAttribute != null).GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode();
Magic Number,XSerializer,CacheKeyEqualityComparer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode();
Magic Number,XSerializer,ConstructorWrapper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetScore,The following statement contains a magic number: return (matchedParameterCount * 100) - ((_parameterNames.Count - matchedParameterCount) * 99);
Magic Number,XSerializer,ConstructorWrapper,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetScore,The following statement contains a magic number: return (matchedParameterCount * 100) - ((_parameterNames.Count - matchedParameterCount) * 99);
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetHashCode,The following statement contains a magic number: return (_dateFormat.GetHashCode() * 397) ^ typeof(DefaultDateTimeHandler).GetHashCode();
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: numerator = numerator * 10 + (c - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: denominator *= 10;
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: sourceString.Length < i + 5                 || !char.IsDigit(sourceString[i + 1])                 || !char.IsDigit(sourceString[i + 2])                 || sourceString[i + 3] != ':'                 || !char.IsDigit(sourceString[i + 4])                 || !char.IsDigit(sourceString[i + 5])
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString[i + 1] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString[i + 2] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString[i + 2] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString[i + 4] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString[i + 4] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString[i + 5] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString[i + 5] - '0');
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: minute += 60;
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: hour += 24;
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: month += 12;
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month)             {                 case 1:                 case 3:                 case 5:                 case 7:                 case 8:                 case 10:                 case 12:                     return day > 31;                 case 2:                     if (day < 29)                     {                         return false;                     }                      if (day > 29)                     {                         return true;                     }                      return !DateTime.IsLeapYear(year);                 case 4:                 case 6:                 case 9:                 case 11:                     return day > 30;                 default:                     throw new ArgumentOutOfRangeException("month");             }
Magic Number,XSerializer,DictionaryJsonSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,IsAddMethod,The following statement contains a magic number: parameters.Length == 2
Magic Number,XSerializer,JsonArray,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetHashCode,The following statement contains a magic number: return _values.Aggregate(                     typeof(JsonArray).GetHashCode()'                     (current' item) => (current * 397) ^ (item != null ? item.GetHashCode() : 0));
Magic Number,XSerializer,JsonMappings,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonMappings.cs,JsonMappings,The following statement contains a magic number: _hashCode =                 unchecked(_mappings.Aggregate(                     typeof(JsonMappings).GetHashCode()'                     (currentHashCode' item) => (currentHashCode * 397) ^ item.GetHashCode()));
Magic Number,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ item.Key.GetHashCode();
Magic Number,XSerializer,JsonObject,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode() : 0);
Magic Number,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,TryReadString,The following statement contains a magic number: var sb = new StringBuilder(38);
Duplicate Code,XSerializer,SerializableProperty,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((38' 73)' (79' 114))
Missing Default,XSerializer,CustomSerializer<T>,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType)                 {                     case XmlNodeType.Element:                         if (reader.Name == _options.RootElementName && ReferenceEquals(helper' NullHelper.Instance))                         {                             if (!typeof(T).IsPrimitiveLike())                             {                                 var type = reader.GetXsdType<T>(_options.ExtraTypes);                                  if (type == null && typeof(T).IsInterface)                                 {                                     // We have no idea what concrete type we have here. The only                                     // successful situation is if we have xsi:nil="true"                                     if (reader.IsNil())                                     {                                         return default(T);                                     }                                      throw new InvalidOperationException("Unable to create concrete instance of interface type " + typeof(T) + " - no type hint found.");                                 }                                  if (type == null)                                 {                                     type = typeof(T);                                 }                                  setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue(_encryptAttribute' options);                                  helper = _helperFactory.CreateHelper(type' reader);                                  while (reader.MoveToNextAttribute())                                 {                                     helper.StageAttributeValue(options);                                 }                                  helper.FlushAttributeValues();                                  reader.MoveToElement();                                  if (reader.IsEmptyElement)                                 {                                     return helper.GetInstance(setIsDecryptionEnabledBackToFalse);                                 }                                  SerializableProperty property;                                 var t = type;                                  do                                 {                                     if (_encryptedXmlElementListProperties.TryGetValue(t' out property))                                     {                                         break;                                     }                                 } while ((t = t.BaseType) != null);                                  if (property != null && reader.MaybeSetIsDecryptionEnabledToTrue(property.EncryptAttribute' options))                                 {                                     reader.Read();                                     helper.SetElementPropertyValue(options' out shouldIssueRead);                                     reader.IsDecryptionEnabled = false;                                 }                             }                             else if (reader.IsEmptyElement)                             {                                 return default(T);                             }                         }                         else                         {                             if (!helper.SetElementPropertyValue(options' out shouldIssueRead))                             {                                 var subReader = reader.ReadSubtree();                                 while (subReader.Read())                                 {                                 }                             }                         }                         break;                     case XmlNodeType.Text:                         if (typeof(T).IsPrimitiveLike())                         {                             // This is left-over (and commented-out) from an earlier time. Is it even possible to have a CustomSerializer for a primitive type???                              //instance = (T)XmlTextSerializer.GetSerializer(typeof(T)' _options.RedactAttribute).DeserializeObject(reader);                             //hasInstanceBeenCreated = true;                         }                         else                         {                             helper.SetTextNodePropertyValue(options);                         }                         break;                     case XmlNodeType.EndElement:                         if (reader.Name == _options.RootElementName)                         {                             return helper.GetInstance(setIsDecryptionEnabledBackToFalse);                         }                         break;                 }
Missing Default,XSerializer,DefaultDateTimeHandler,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following switch statement is missing a default case: switch (_dateFormat[formatIndex])                 {                     case 'y':                         ThrowIfNotDigit(c' valueIndex' value' "year");                         year = year * 10 + (c - '0');                         break;                     case 'M':                         ThrowIfNotDigit(c' valueIndex' value' "month");                         month = month * 10 + (c - '0');                         break;                     case 'd':                         ThrowIfNotDigit(c' valueIndex' value' "day");                         day = day * 10 + (c - '0');                         break;                     case 'H':                         ThrowIfNotDigit(c' valueIndex' value' "hours");                         hour = hour * 10 + (c - '0');                         break;                     case 'm':                         ThrowIfNotDigit(c' valueIndex' value' "minutes");                         minute = minute * 10 + (c - '0');                         break;                     case 's':                         ThrowIfNotDigit(c' valueIndex' value' "seconds");                         second = second * 10 + (c - '0');                         break;                     case '.':                         if (value[valueIndex] == '.')                         {                             fraction = ParseFraction(value' ref valueIndex' ref formatIndex);                         }                         else                         {                             valueIndex--;                             formatIndex++;                             AdvancePastFractionalPart(ref formatIndex);                         }                         break;                     case 'K':                         ParseOffset(value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);                         break;                     case '-':                     case 'T':                     case ':':                         if (_dateFormat[valueIndex] != c)                         {                             throw new FormatException(                                 string.Format("Expected '{0}' but was '{1}' at index {2} in '{3}'."'                                 _dateFormat[valueIndex]' c' valueIndex' value));                         }                         break;                 }
Missing Default,XSerializer,DictionarySerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType)                 {                     case XmlNodeType.Element:                         if (isAtRootElement())                         {                             if (reader.IsNil())                             {                                 if (reader.IsEmptyElement)                                 {                                     return null;                                 }                                  dictionary = null;                                 hasInstanceBeenCreated = true;                             }                             else                             {                                 setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue(_encryptAttribute' options);                                  dictionary = _createDictionary();                                 hasInstanceBeenCreated = true;                                  if (reader.IsEmptyElement)                                 {                                     if (setIsDecryptionEnabledBackToFalse)                                     {                                         reader.IsDecryptionEnabled = false;                                     }                                      return _finalizeDictionary(dictionary);                                 }                             }                         }                         else if (reader.Name == "Item" && hasInstanceBeenCreated)                         {                             isInsideItemElement = true;                         }                         else if (isInsideItemElement)                         {                             if (reader.Name == "Key")                             {                                 currentKey = DeserializeKeyOrValue(reader' _keySerializer' options' out shouldIssueRead);                             }                             else if (reader.Name == "Value")                             {                                 currentValue = DeserializeKeyOrValue(reader' _valueSerializer' options' out shouldIssueRead);                             }                         }                          break;                     case XmlNodeType.EndElement:                         if (isInsideItemElement && reader.Name == "Item")                         {                             AddItemToDictionary(dictionary' currentKey' currentValue);                             currentKey = null;                             currentValue = null;                             isInsideItemElement = false;                         }                         else if (reader.Name == _options.RootElementName)                         {                             if (setIsDecryptionEnabledBackToFalse)                             {                                 reader.IsDecryptionEnabled = false;                             }                              return CheckAndReturn(hasInstanceBeenCreated' _finalizeDictionary(dictionary));                         }                          break;                 }
Missing Default,XSerializer,DynamicSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The following switch statement is missing a default case: switch (reader.NodeType)                 {                     case XmlNodeType.Element:                         if (isAtRootElement())                         {                             setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue(_encryptAttribute' options);                              instance = new ExpandoObject();                             hasInstanceBeenCreated = true;                              if (reader.IsEmptyElement)                             {                                 if (_options.TreatEmptyElementAsString)                                 {                                     instance = "";                                 }                                  if (setIsDecryptionEnabledBackToFalse)                                 {                                     reader.IsDecryptionEnabled = false;                                 }                                  return instance;                             }                         }                         else                         {                             SetElementPropertyValue(reader' hasInstanceBeenCreated' options' (ExpandoObject)instance);                         }                         break;                     case XmlNodeType.Text:                         var stringValue = (string)new XmlTextSerializer(typeof(string)' _options.RedactAttribute' null' _options.ExtraTypes).DeserializeObject(reader' options);                         hasInstanceBeenCreated = true;                          bool boolValue;                         if (bool.TryParse(stringValue' out boolValue))                         {                             instance = boolValue;                             break;                         }                          int intValue;                         if (int.TryParse(stringValue' out intValue))                         {                             // If this is a number with leading zeros' treat it as a string so we don't lose those leading zeros.                             if (stringValue[0] == '0' && stringValue.Length > 1)                             {                                 instance = stringValue;                             }                             else                             {                                 instance = intValue;                             }                              break;                         }                          decimal decimalValue;                         if (decimal.TryParse(stringValue' out decimalValue))                         {                             instance = decimalValue;                             break;                         }                          DateTime dateTimeValue;                         if (DateTime.TryParse(stringValue' out dateTimeValue))                         {                             instance = dateTimeValue.ToUniversalTime();                             break;                         }                          // TODO: add more types to check?                          instance = stringValue;                         break;                     case XmlNodeType.EndElement:                         if (reader.Name == _options.RootElementName)                         {                             if (_options.TreatEmptyElementAsString)                             {                                 var instanceAsExpando = instance as IDictionary<string' object>;                                 if (instanceAsExpando != null && instanceAsExpando.Count == 0)                                 {                                     instance = "";                                 }                             }                              if (setIsDecryptionEnabledBackToFalse)                             {                                 reader.IsDecryptionEnabled = false;                             }                              return CheckAndReturn(hasInstanceBeenCreated' instance);                         }                         break;                 }
Missing Default,XSerializer,JsonReader,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,Read,The following switch statement is missing a default case: switch (read)             {                 case -1:                     _value = null;                     _nodeType = JsonNodeType.EndOfString;                     return false;                 case '"':                     return TryReadString(out _value' out _nodeType);                 case '-':                 case '.':                 case '0':                 case '1':                 case '2':                 case '3':                 case '4':                 case '5':                 case '6':                 case '7':                 case '8':                 case '9':                     _value = ReadNumber((char)read);                     _nodeType = JsonNodeType.Number;                     return true;                 case 't':                     ReadLiteral(path' "true"' 'r'' 'u'' 'e');                     _value = true;                     _nodeType = JsonNodeType.Boolean;                     return true;                 case 'f':                     ReadLiteral(path' "false"' 'a'' 'l'' 's'' 'e');                     _value = false;                     _nodeType = JsonNodeType.Boolean;                     return true;                 case 'n':                     ReadLiteral(path' "null"' 'u'' 'l'' 'l');                     _value = null;                     _nodeType = JsonNodeType.Null;                     return true;                 case '{':                     _value = '{';                     _nodeType = JsonNodeType.OpenObject;                     return true;                 case '}':                     _value = '}';                     _nodeType = JsonNodeType.CloseObject;                     return true;                 case ':':                     _value = ':';                     _nodeType = JsonNodeType.NameValueSeparator;                     return true;                 case ''':                     _value = ''';                     _nodeType = JsonNodeType.ItemSeparator;                     return true;                 case '[':                     _value = '[';                     _nodeType = JsonNodeType.OpenArray;                     return true;                 case ']':                     _value = ']';                     _nodeType = JsonNodeType.CloseArray;                     return true;                 case ' ':                 case '\r':                 case '\n':                 case '\t':                     _value = ReadWhitespace((char)read);                     _nodeType = JsonNodeType.Whitespace;                     return true;             }
Missing Default,XSerializer,JsonWriter,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\JsonWriter.cs,Escape,The following switch statement is missing a default case: switch (value[i])                 {                     case '\\':                         flags |= 0x01;                         break;                     case '"':                         flags |= 0x02;                         break;                     case '/':                         flags |= 0x04;                         break;                     case '\b':                         flags |= 0x08;                         break;                     case '\f':                         flags |= 0x10;                         break;                     case '\n':                         flags |= 0x20;                         break;                     case '\r':                         flags |= 0x40;                         break;                     case '\t':                         flags |= 0x80;                         break;                 }
Missing Default,XSerializer,ListSerializer,C:\research\architectureSmells\repos\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType)                 {                     case XmlNodeType.Element:                         if (_options.RootElementName != null)                         {                             if (reader.Name == _options.RootElementName)                             {                                 if (reader.IsNil())                                 {                                     if (reader.IsEmptyElement)                                     {                                         return null;                                     }                                      collection = null;                                     hasInstanceBeenCreated = true;                                 }                                 else                                 {                                     setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue(_encryptAttribute' options);                                      collection = _createCollection();                                     hasInstanceBeenCreated = true;                                      if (reader.IsEmptyElement)                                     {                                         if (setIsDecryptionEnabledBackToFalse)                                         {                                             reader.IsDecryptionEnabled = false;                                         }                                          return collection;                                     }                                 }                                  break;                             }                         }                         else                         {                             // If there's no root element' and we encounter another element' we're done - get out!                             if (reader.Name != _itemElementName)                             {                                 if (setIsDecryptionEnabledBackToFalse)                                 {                                     reader.IsDecryptionEnabled = false;                                 }                                  return                                     collection == null                                         ? null                                         : CheckAndReturn(hasInstanceBeenCreated' collection);                             }                         }                          if (reader.Name == _itemElementName)                         {                             var item = DeserializeItem(reader' _itemSerializer' hasInstanceBeenCreated' options' out shouldIssueRead);                              if (collection != null)                             {                                 AddItemToCollection(collection' item);                             }                         }                         break;                     case XmlNodeType.EndElement:                         if (_options.RootElementName != null)                         {                             if (reader.Name == _options.RootElementName)                             {                                 if (setIsDecryptionEnabledBackToFalse)                                 {                                     reader.IsDecryptionEnabled = false;                                 }                                  return                                     collection == null                                         ? null                                         : CheckAndReturn(hasInstanceBeenCreated' collection);                             }                         }                         else                         {                             if (reader.Name != _itemElementName)                             {                                 if (setIsDecryptionEnabledBackToFalse)                                 {                                     reader.IsDecryptionEnabled = false;                                 }                                  return                                     collection == null                                         ? null                                         : CheckAndReturn(hasInstanceBeenCreated' collection);                             }                         }                         break;                 }
