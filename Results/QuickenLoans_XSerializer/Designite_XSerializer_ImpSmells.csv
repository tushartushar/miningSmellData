Implementation smell,Namespace,Class,File,Method,Description
Long Method,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The method has 79 lines of code.
Long Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The method has 62 lines of code.
Long Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The method has 73 lines of code.
Long Method,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The method has 68 lines of code.
Long Method,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The method has 84 lines of code.
Long Method,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetConvertFunc,The method has 213 lines of code.
Long Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,Read,The method has 79 lines of code.
Long Method,XSerializer,JsonWriter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonWriter.cs,Escape,The method has 60 lines of code.
Long Method,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,The method has 81 lines of code.
Long Method,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The method has 111 lines of code.
Long Method,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The method has 72 lines of code.
Long Method,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The method has 87 lines of code.
Long Method,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has 81 lines of code.
Complex Method,XSerializer,BooleanJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,BooleanJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,Read,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetConstructor,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseDateTimeOffset,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,Cyclomatic complexity of the method is 44
Complex Method,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,Cyclomatic complexity of the method is 18
Complex Method,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DictionaryJsonSerializer,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,WriteIDictionaryOfAnythingToAnything,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertValidHeirarchy,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,Cyclomatic complexity of the method is 20
Complex Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,SerializeObject,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 25
Complex Method,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,SerializeObject,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 20
Complex Method,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeExpandoObject,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,Cyclomatic complexity of the method is 34
Complex Method,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,Decrypt,Cyclomatic complexity of the method is 10
Complex Method,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,Encrypt,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetConvertFunc,Cyclomatic complexity of the method is 37
Complex Method,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetTransform,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,Decrypt,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,Encrypt,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,Equals,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,TryGetProjection,Cyclomatic complexity of the method is 16
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,SetDecryptReads,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,Cyclomatic complexity of the method is 20
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,PeekContent,Cyclomatic complexity of the method is 31
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,Read,Cyclomatic complexity of the method is 55
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,TryReadString,Cyclomatic complexity of the method is 13
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadEscapedChar,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadNumber,Cyclomatic complexity of the method is 18
Complex Method,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadCurrent,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,JsonWriter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonWriter.cs,Escape,Cyclomatic complexity of the method is 34
Complex Method,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 9
Complex Method,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Read,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,Cyclomatic complexity of the method is 70
Complex Method,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,SetDelegates,Cyclomatic complexity of the method is 12
Complex Method,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,Cyclomatic complexity of the method is 14
Complex Method,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,SetDelegates,Cyclomatic complexity of the method is 10
Complex Method,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,SerializeObject,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 24
Complex Method,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetOpenGenerics,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,Cyclomatic complexity of the method is 8
Complex Method,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,Cyclomatic complexity of the method is 15
Complex Method,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetStringFunc,Cyclomatic complexity of the method is 7
Complex Method,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,Cyclomatic complexity of the method is 17
Complex Method,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetStringFunc,Cyclomatic complexity of the method is 11
Complex Method,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetPrioritizedGroupsOfCandidateTypes,Cyclomatic complexity of the method is 9
Long Parameter List,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,CustomJsonSerializer,The method has 4 parameters.
Long Parameter List,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,Get,The method has 4 parameters.
Long Parameter List,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The method has 11 parameters.
Long Parameter List,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The method has 5 parameters.
Long Parameter List,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The method has 5 parameters.
Long Parameter List,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ThrowIfNotDigit,The method has 4 parameters.
Long Parameter List,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DictionaryJsonSerializer,The method has 4 parameters.
Long Parameter List,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,Get,The method has 4 parameters.
Long Parameter List,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeKeyOrValue,The method has 4 parameters.
Long Parameter List,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SetElementPropertyValue,The method has 4 parameters.
Long Parameter List,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,JsonArray,The method has 4 parameters.
Long Parameter List,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,JsonObject,The method has 4 parameters.
Long Parameter List,XSerializer,JsonSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The method has 5 parameters.
Long Parameter List,XSerializer,JsonSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The method has 4 parameters.
Long Parameter List,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,ListJsonSerializer,The method has 4 parameters.
Long Parameter List,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Get,The method has 4 parameters.
Long Parameter List,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,MalformedDocumentException,The method has 6 parameters.
Long Parameter List,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,MalformedDocumentException,The method has 7 parameters.
Long Parameter List,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,The method has 6 parameters.
Long Parameter List,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,Try,The method has 5 parameters.
Long Parameter List,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The method has 4 parameters.
Long Parameter List,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SetValue,The method has 4 parameters.
Long Parameter List,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,Try,The method has 7 parameters.
Long Parameter List,XSerializer,ValueTypes,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ValueTypes.cs,TryGetValueConverter,The method has 4 parameters.
Long Parameter List,XSerializer,ValueTypes,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ValueTypes.cs,TryRedact,The method has 4 parameters.
Long Parameter List,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The method has 4 parameters.
Long Parameter List,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeItem,The method has 5 parameters.
Long Parameter List,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 5 parameters.
Long Parameter List,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 6 parameters.
Long Parameter List,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,SerializeObject,The method has 5 parameters.
Long Parameter List,XSerializer,XSerializerXmlReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XSerializerXmlReader.cs,XSerializerXmlReader,The method has 4 parameters.
Long Parameter List,XSerializer,XSerializerXmlReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XSerializerXmlReader.cs,XSerializerXmlReader,The method has 4 parameters.
Long Parameter List,XSerializer,XmlAttributeSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,XmlAttributeSerializer,The method has 5 parameters.
Long Parameter List,XSerializer,XmlSerializationOptions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The method has 15 parameters.
Long Parameter List,XSerializer,XmlSerializationOptions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The method has 16 parameters.
Long Parameter List,XSerializer,XmlTextSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlTextSerializer.cs,XmlTextSerializer,The method has 4 parameters.
Long Parameter List,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,ImportSingle,The method has 4 parameters.
Long Parameter List,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,ImportFirst,The method has 4 parameters.
Long Parameter List,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,ImportMultiple,The method has 4 parameters.
Long Identifier,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,CustomJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the parameter getSerializerAndArgIndexLambda is 30.
Long Identifier,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DictionaryJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DynamicJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,CustomSerializer,The length of the parameter encryptedXmlElementListProperty is 31.
Long Identifier,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeExpandoObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,JsonSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,JsonSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,ListJsonSerializer,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Get,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializableJsonProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableJsonProperty.cs,SerializableJsonProperty,The length of the parameter destinationDictionaryParameter is 30.
Long Identifier,XSerializer,XmlElementSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlElementSerializer.cs,WriteElement,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlElementSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlElementSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttributes,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttribute,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetCustomAttributesImpl,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonPropertyAttributeDefined,The length of the parameter newtonsoftJsonPropertyAttribute is 31.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetName,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetName,The length of the parameter newtonsoftJsonPropertyAttribute is 31.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionary,The length of the parameter isAssignableToGenericIDictionary is 32.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the parameter isAssignableToGenericIDictionary is 32.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerable,The length of the parameter isAssignableToGenericIEnumerable is 32.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerableOfTypeObject,The length of the parameter isAssignableToGenericIEnumerable is 32.
Long Identifier,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericICollection,The length of the parameter isAssignableToGenericICollection is 32.
Long Identifier,XSerializer,XmlAttributeSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlAttributeSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlAttributeSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlSerializationOptions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializationOptions.cs,XmlSerializationOptions,The length of the parameter shouldUseAttributeDefinedInInterface is 36.
Long Identifier,XSerializer,XmlTextSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlTextSerializer.cs,SerializeObject,The length of the parameter setIsEncryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer,XmlTextSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlTextSerializer.cs,DeserializeObject,The length of the parameter setIsDecryptionEnabledBackToFalse is 33.
Long Identifier,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetInstances,The length of the parameter prioritizedGroupsOfCandidateTypes is 33.
Long Identifier,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetPrioritizedGroupsOfCandidateTypes,The length of the parameter prioritizedGroupsOfCandidateTypes is 33.
Long Statement,XSerializer,BooleanJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.BooleanInvalidValue' path' reader.Value' reader.Line' reader.Position); " is 132.
Long Statement,XSerializer,BooleanJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,BooleanJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\BooleanJsonSerializer.cs,Read,The length of the statement  "	throw new MalformedDocumentException (MalformedDocumentError.BooleanInvalidValue' path' reader.Value' reader.Line' reader.Position); " is 132.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "		var lhsExtraTypes = lhsOptions.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).GetEnumerator (); " is 182.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "		var rhsExtraTypes = rhsOptions.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).GetEnumerator (); " is 182.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "	var lhsRootElementName = string.IsNullOrWhiteSpace (lhsOptions.RootElementName) ? lhsType.Name : lhsOptions.RootElementName; " is 124.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,Equals,The length of the statement  "	var rhsRootElementName = string.IsNullOrWhiteSpace (rhsOptions.RootElementName) ? rhsType.Name : rhsOptions.RootElementName; " is 124.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The length of the statement  "		key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode (); " is 122.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The length of the statement  "			key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ()); " is 232.
Long Statement,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The length of the statement  "		key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode (); " is 127.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetSerializableProperties,The length of the statement  "	return type.GetProperties ().Where (p => p.IsJsonSerializable (type.GetConstructors ().SelectMany (c => c.GetParameters ()))).Select (p => new SerializableJsonProperty (p' _encrypt || p.GetCustomAttribute<EncryptAttribute> (_shouldUseAttributeDefinedInInterface) != null' _mappings' _shouldUseAttributeDefinedInInterface)).ToList (); " is 333.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,Get,The length of the statement  "	return _cache.GetOrAdd (Tuple.Create (type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new CustomJsonSerializer (t.Item1' t.Item2' t.Item3' t.Item4)); " is 170.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.ObjectMissingOpenCurlyBrace' path' reader.Value' reader.Line' reader.Position); " is 140.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetCreateObjectFactoryFunc,The length of the statement  "		return () => new NonDefaultConstructorObjectFactory (_deserializingPropertiesMap' createInstance' getSerializerAndArgIndex' parametersLength); " is 142.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetCreateInstanceFunc,The length of the statement  "		constructorArgs [i] = Expression.Convert (Expression.ArrayAccess (argsParameter' Expression.Constant (i))' parameters [i].ParameterType); " is 137.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "		var serializer = JsonSerializerFactory.GetSerializer (parameters [i].ParameterType' _encrypt' _mappings' _shouldUseAttributeDefinedInInterface); " is 144.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "		var matchingProperties = _type.GetProperties ().Where (p => p.Name.Equals (parameters [i].Name' StringComparison.OrdinalIgnoreCase)).ToList (); " is 143.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "		var switchLabel = matchingProperties.Count == 1 ? matchingProperties [0].GetName (_shouldUseAttributeDefinedInInterface) : parameters [i].Name; " is 143.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "		switchCases [i] = Expression.SwitchCase (Expression.Constant (serializerAndArgIndex)' Expression.Constant (switchLabel)); " is 121.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetGetSerializerAndArgIndexFunc,The length of the statement  "	var getSerializerAndArgIndexLambda = Expression.Lambda<Func<string' Tuple<IJsonSerializerInternal' int>>> (switchExpression' propertyNameParameter); " is 148.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,GetConstructor,The length of the statement  "		throw new XSerializerException ("More than one constructor is decorated with the JsonConstructor attribute: " + type.FullName); " is 127.
Long Statement,XSerializer,CustomJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomJsonSerializer.cs,IsDecoratedWithJsonConstructorAttribute,The length of the statement  "	return Attribute.IsDefined (constructor' typeof(JsonConstructorAttribute)) || Attribute.GetCustomAttributes (constructor).Any (attribute => attribute.GetType ().FullName == "Newtonsoft.Json.JsonConstructorAttribute"); " is 217.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseDateTime,The length of the statement  "	GetDateTimeComponents (value' out year' out month' out day' out hour' out minute' out second' out ticks' out offsetHours' out offsetMinutes' out dateTimeKind); " is 159.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseDateTimeOffset,The length of the statement  "	GetDateTimeComponents (value' out year' out month' out day' out hour' out minute' out second' out ticks' out offsetHours' out offsetMinutes' out dateTimeKind); " is 159.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The length of the statement  "	for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) { " is 135.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The length of the statement  "				throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value)); " is 146.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The length of the statement  "	for (valueIndex = valueIndex + 1' formatIndex = formatIndex + 1; formatIndex < _dateFormat.Length && valueIndex < sourceString.Length; valueIndex++' formatIndex++) { " is 165.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The length of the statement  "		throw new FormatException (string.Format ("Expected start of timezone but was '{0}' at index {1} in '{2}'."' sourceString [i]' i' sourceString)); " is 145.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The length of the statement  "	if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) { " is 225.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The length of the statement  "		throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString)); " is 153.
Long Statement,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ThrowIfNotDigit,The length of the statement  "		throw new FormatException (string.Format ("Expected numeric {0} but was '{1}' at index {2} in '{3}'."' dateTimePart' c' i' sourceString)); " is 138.
Long Statement,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,Get,The length of the statement  "	return _cache.GetOrAdd (Tuple.Create (type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new DictionaryJsonSerializer (t.Item1' t.Item2' t.Item3' t.Item4)); " is 174.
Long Statement,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.ObjectMissingOpenCurlyBrace' path' reader.Value' reader.Line' reader.Position); " is 140.
Long Statement,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,GetDeserializeKeyFunc,The length of the statement  "	var serializer = JsonSerializerFactory.GetSerializer (type' _encrypt' _mappings' _shouldUseAttributeDefinedInInterface); " is 120.
Long Statement,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,GetAddToDictionaryAction,The length of the statement  "	var lambda = Expression.Lambda<Action<object' object' object>> (call' dictionaryParameter' keyParameter' valueParameter); " is 121.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Get,The length of the statement  "	return _cache.GetOrAdd (Tuple.Create (encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new DynamicJsonSerializer (t.Item1' t.Item2' t.Item3)); " is 156.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,SerializeObject,The length of the statement  "		var serializer = _serializerCache.GetOrAdd (Tuple.Create (instance.GetType ()' _encrypt)' tuple => GetSerializer (tuple.Item1)); " is 128.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The length of the statement  "	if (concreteType == typeof(string) || concreteType == typeof(DateTime) || concreteType == typeof(DateTimeOffset) || concreteType == typeof(Guid)) { " is 147.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The length of the statement  "	if (concreteType == typeof(double) || concreteType == typeof(int) || concreteType == typeof(float) || concreteType == typeof(long) || concreteType == typeof(decimal) || concreteType == typeof(byte) || concreteType == typeof(sbyte) || concreteType == typeof(short) || concreteType == typeof(ushort) || concreteType == typeof(uint) || concreteType == typeof(ulong)) { " is 365.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.InvalidValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.MissingValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The length of the statement  "				throw new MalformedDocumentException (MalformedDocumentError.InvalidValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Read,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.InvalidValue' path' reader.Value' reader.Line' reader.Position' ex); " is 129.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,Read,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.InvalidValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeJsonArray,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingCommaOrCloseSquareBracket' path' reader.Line' reader.Position); " is 136.
Long Statement,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,DeserializeJsonArray,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingCommaOrCloseSquareBracket' path' reader.Line' reader.Position); " is 136.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetSerializer,The length of the statement  "			return (IXmlSerializerInternal)Activator.CreateInstance (typeof(CustomSerializer<>).MakeGenericType (type)' encryptAttribute' options); " is 135.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "				if (string.IsNullOrWhiteSpace (baseXmlAttribute.AttributeName) && !string.IsNullOrWhiteSpace (derivedXmlAttribute.AttributeName)) { " is 131.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "				if (!string.IsNullOrWhiteSpace (baseXmlAttribute.AttributeName) && baseXmlAttribute.AttributeName != derivedXmlAttribute.AttributeName) { " is 137.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,AssertPropertyHeirarchy,The length of the statement  "			if (string.IsNullOrWhiteSpace (baseXmlAttribute.AttributeName))// && string.IsNullOrWhiteSpace(derivedXmlAttribute.AttributeName) " is 129.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetBaseProperty,The length of the statement  "	const BindingFlags allProperties = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static; " is 126.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,GetBaseProperty,The length of the statement  "	return baseMethod.DeclaringType.GetProperty (propertyInfo.Name' allProperties' null' propertyInfo.PropertyType' arguments' null); " is 129.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "						throw new InvalidOperationException ("Unable to create concrete instance of interface type " + typeof(T) + " - no type hint found."); " is 133.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "				// This is left-over (and commented-out) from an earlier time. Is it even possible to have a CustomSerializer for a primitive type??? " is 133.
Long Statement,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The length of the statement  "	throw new InvalidOperationException ("Deserialization error: reached the end of the document without returning a value."); " is 122.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The length of the statement  "	throw new InvalidOperationException ("Deserialization error: reached the end of the document without returning a value."); " is 122.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,CheckAndReturn,The length of the statement  "		throw new InvalidOperationException ("Deserialization error: attempted to return a deserialized instance before it was created."); " is 130.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "			return (IXmlSerializerInternal)Activator.CreateInstance (typeof(DictionarySerializer<' ' >).MakeGenericType (type' keyType' valueType)' encryptAttribute' options); " is 163.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "			return (IXmlSerializerInternal)Activator.CreateInstance (typeof(DictionarySerializer<>).MakeGenericType (type)' encryptAttribute' options); " is 139.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,GetSerializer,The length of the statement  "		throw new InvalidOperationException (string.Format ("Cannot create a DictionarySerializer of type '{0}'."' type.FullName)); " is 123.
Long Statement,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,AddItemToDictionary,The length of the statement  "		iDictionary.Add (typeof(TKey).IsValueType && key == null ? default(TKey) : (TKey)key' typeof(TValue).IsValueType && value == null ? default(TValue) : (TValue)value); " is 165.
Long Statement,XSerializer,DynamicMethodFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicMethodFactory.cs,CreateFunc,The length of the statement  "	UnaryExpression instanceCast = method.DeclaringType.IsValueType ? Expression.Convert (parameter' method.DeclaringType) : Expression.TypeAs (parameter' method.DeclaringType); " is 173.
Long Statement,XSerializer,DynamicMethodFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicMethodFactory.cs,CreateGetPropertyValueFunc,The length of the statement  "	var func = Expression.Lambda (Expression.Convert (Expression.PropertyOrField (Expression.Convert (param' containerType)' propName)' typeof(object))' param); " is 156.
Long Statement,XSerializer,DynamicMethodFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicMethodFactory.cs,CreateAction,The length of the statement  "	var lambda = Expression.Lambda<Action<object' object>> (Expression.Call (Expression.Convert (instanceParameter' method.DeclaringType)' method' Expression.Convert (valueParameter' methodParameter.ParameterType))' new[] { " is 219.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,GetSerializer,The length of the statement  "	throw new InvalidOperationException ("The only valid generic arguments for DynamicSerializer.GetSerializer<T> are object' dynamic' and ExpandoObject"); " is 151.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeObject,The length of the statement  "		serializer = CustomSerializer.GetSerializer (typeof(object)' _encryptAttribute' _options.WithAdditionalExtraTypes (instance.GetType ())); " is 137.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeObject,The length of the statement  "		var serializer = XmlSerializerFactory.Instance.GetSerializer (type' _encryptAttribute' _options.WithRootElementName (reader.Name)); " is 131.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,SerializeExpandoObject,The length of the statement  "				serializer = CustomSerializer.GetSerializer (property.Value.GetType ()' null' _options.WithRootElementName (property.Key)); " is 123.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the statement  "			var stringValue = (string)new XmlTextSerializer (typeof(string)' _options.RedactAttribute' null' _options.ExtraTypes).DeserializeObject (reader' options); " is 154.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The length of the statement  "	throw new InvalidOperationException ("Deserialization error: reached the end of the document without returning a value."); " is 122.
Long Statement,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,CheckAndReturn,The length of the statement  "		throw new InvalidOperationException ("Deserialization error: attempted to return a deserialized instance before it was created."); " is 130.
Long Statement,XSerializer,EnumTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\EnumTypeValueConverter.cs,GetString,The length of the statement  "	var enumStringValue = _redactAttribute != null ? _redactAttribute.Redact (enumValue' options.ShouldRedact) : value.ToString (); " is 127.
Long Statement,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetHashCode,The length of the statement  "		return _values.Aggregate (typeof(JsonArray).GetHashCode ()' (current' item) => (current * 397) ^ (item != null ? item.GetHashCode () : 0)); " is 139.
Long Statement,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetConvertFunc,The length of the statement  "		if (genericTypeDefinition == typeof(IEnumerable<>) || genericTypeDefinition == typeof(ICollection<>) || genericTypeDefinition == typeof(IList<>)) { " is 147.
Long Statement,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The length of the statement  "	if (value == null || value is bool || value is string || value is JsonNumber || value is JsonObject || value is JsonArray) { " is 124.
Long Statement,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The length of the statement  "	if (value is int || value is double || value is byte || value is long || value is decimal || value is uint || value is ulong || value is short || value is float || value is ushort || value is sbyte) { " is 200.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,SetDecryptReads,The length of the statement  "		_decryptedReader = new StringReader (_info.EncryptionMechanism.Decrypt ((string)Value' _info.EncryptKey' _info.SerializationState)); " is 132.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,SetDecryptReads,The length of the statement  "			throw new InvalidOperationException ("Attempted to set DecryptReads to false before the encrypted stream has been consumed."); " is 126.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.PropertyNameMissingOpenQuote' path' Value' Line' Position); " is 120.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.PropertyMissingNameValueSeparator' path.AppendProperty (name)' Line' Position); " is 140.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ObjectMissingCloseCurlyBrace' path.AppendProperty (name)' Line' Position); " is 135.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.PropertyMissingItemSeparator' path.AppendProperty (name)' Line' Position); " is 135.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadProperties,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.PropertyMissingItemSeparator' path.AppendProperty (name)' Value' Line' Position); " is 142.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadLiteral,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.LiteralInvalidValue' path' value.Substring (0' i + 1)' Line' Position' null' value); " is 145.
Long Statement,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,ReadLiteral,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.LiteralInvalidValue' path' value.Substring (0' i + 1) + (char)read' Line' Position' null' value); " is 158.
Long Statement,XSerializer,JsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializer.cs,Create,The length of the statement  "			throw new InvalidOperationException ("A source code change has resulted in broken reflection. typeof(JsonSerializer<>).MakeGenericType(type).GetConstructor(new[] { typeof(IJsonSerializerConfiguration) })"); " is 206.
Long Statement,XSerializer,JsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializer.cs,Create,The length of the statement  "		var lambda = Expression.Lambda<Func<IJsonSerializerConfiguration' IXSerializer>> (Expression.New (ctor' parameter)' parameter); " is 127.
Long Statement,XSerializer,JsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializer.cs,Deserialize,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfString' ""' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 153.
Long Statement,XSerializer,JsonSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonSerializerFactory.cs,GetSerializer,The length of the statement  "	return GetSerializer (type' encrypt' new JsonMappings (mappingsByType' mappingsByProperty)' shouldUseAttributeDefinedInInterface); " is 130.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Get,The length of the statement  "	return _cache.GetOrAdd (Tuple.Create (type' encrypt' mappings' shouldUseAttributeDefinedInInterface)' t => new ListJsonSerializer (t.Item1' t.Item2' t.Item3' t.Item4)); " is 168.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingOpenSquareBracket' path' reader.Value' reader.Line' reader.Position); " is 142.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The length of the statement  "				throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingOpenSquareBracket' path' reader.Value' reader.Line' reader.Position); " is 142.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingOpenSquareBracket' path' reader.Value' reader.Line' reader.Position); " is 142.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Read,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingCommaOrCloseSquareBracket' path' reader.Line' reader.Position); " is 136.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,Read,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.ArrayMissingCommaOrCloseSquareBracket' path' reader.Value' reader.Line' reader.Position); " is 150.
Long Statement,XSerializer,ListJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListJsonSerializer.cs,GetTransformListFunc,The length of the statement  "	var lambda = Expression.Lambda<Func<object' object>> (Expression.Call (toArrayMethod' Expression.Convert (listParameter' enumerableType))' listParameter); " is 154.
Long Statement,XSerializer,MalformedDocumentException,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\MalformedDocumentException.cs,FormatMessage,The length of the statement  "		message = string.Format ("Expected end of decrypted string following legal value' but found '{0}'."' additionalArgs [0]); " is 121.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The length of the statement  "			throw new MalformedDocumentException (MalformedDocumentError.MissingValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.NumberInvalidValue' path' reader.Value' reader.Line' reader.Position' null' _type); " is 144.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The length of the statement  "				throw new MalformedDocumentException (MalformedDocumentError.MissingValue' path' reader.Value' reader.Line' reader.Position); " is 125.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,DeserializeObject,The length of the statement  "						throw new MalformedDocumentException (MalformedDocumentError.ExpectedEndOfDecryptedString' path' reader.Value' reader.Line' reader.Position' null' reader.NodeType); " is 164.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,SetDelegates,The length of the statement  "	readFunc = !_type.IsNullableType () ? (Func<string' string' int' int' object>)((value' path' line' position) => Try (readFuncLocal' value' path' line' position)) : (value' path' line' position) => string.IsNullOrEmpty (value) ? null : Try (readFuncLocal' value' path' line' position); " is 284.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,Try,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.NumberInvalidValue' path' value' line' position' ex' _type); " is 121.
Long Statement,XSerializer,NumberJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\NumberJsonSerializer.cs,GetNumberInvalidValueException,The length of the statement  "	return new MalformedDocumentException (MalformedDocumentError.NumberInvalidValue' path' invalidValue' reader.Line' reader.Position' null' _type); " is 145.
Long Statement,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,SetDelegates,The length of the statement  "	readFunc = type == typeof(string) || !type.IsNullableType () ? (Func<string' IJsonSerializeOperationInfo' string' int' int' object>)((value' info' path' line' position) => Try (readFuncLocal' value' info' type' path' line' position)) : (value' info' path' line' position) => value == null ? null : Try (readFuncLocal' value' info' type' path' line' position); " is 359.
Long Statement,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,Try,The length of the statement  "		throw new MalformedDocumentException (MalformedDocumentError.StringInvalidValue' path' value' line' position' ex' type); " is 120.
Long Statement,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,GetMissingOpenQuoteException,The length of the statement  "	return new MalformedDocumentException (MalformedDocumentError.StringMissingOpenQuote' path' reader.Value' reader.Line' reader.Position); " is 136.
Long Statement,XSerializer,StringJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\StringJsonSerializer.cs,GetMissingCloseQuoteException,The length of the statement  "	return new MalformedDocumentException (MalformedDocumentError.StringMissingCloseQuote' path' reader.Value' reader.Line' reader.Position); " is 137.
Long Statement,XSerializer,Toggler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Toggler.cs,Toggle,The length of the statement  "	var equal = !ReferenceEquals (_originalValue' null) && !ReferenceEquals (_newValue' null) && _originalValue.Equals (_newValue); " is 127.
Long Statement,XSerializer,TypeTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\TypeTypeValueConverter.cs,GetString,The length of the statement  "	var typeString = _redactAttribute != null ? _redactAttribute.Redact (type' options.ShouldRedact) : GetStringValue (type); " is 121.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The length of the statement  "	return _serializerCache.GetOrAdd (Tuple.Create (type' encryptAttribute' options.WithRootElementName (options.RootElementName + "<>" + itemElementName))' _ => { " is 159.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The length of the statement  "			return (IXmlSerializerInternal)Activator.CreateInstance (typeof(ListSerializer<' >).MakeGenericType (type' itemType)' encryptAttribute' options' itemElementName); " is 162.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,GetSerializer,The length of the statement  "			return (IXmlSerializerInternal)Activator.CreateInstance (typeof(ListSerializer<>).MakeGenericType (type)' encryptAttribute' options' itemElementName); " is 150.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The length of the statement  "	throw new InvalidOperationException ("Deserialization error: attempted to return a deserialized instance before it was created."); " is 130.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeItem,The length of the statement  "		throw new InvalidOperationException ("Deserialization error: attempted to deserialize an item before creating its list."); " is 122.
Long Statement,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,CheckAndReturn,The length of the statement  "		throw new InvalidOperationException ("Deserialization error: attempted to return a deserialized instance before it was created."); " is 130.
Long Statement,XSerializer,RedactAttribute,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\RedactAttribute.cs,Redact,The length of the statement  "	return redactEnabled ? Numbers.Replace (_dateTimeConverter.Value.GetString (dateTimeValue' null)' "1") : _dateTimeConverter.Value.GetString (dateTimeValue' null); " is 162.
Long Statement,XSerializer,RedactAttribute,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\RedactAttribute.cs,Redact,The length of the statement  "	return redactEnabled ? Numbers.Replace (_dateTimeOffsetConverter.Value.GetString (dateTimeOffsetValue' null)' "1") : _dateTimeOffsetConverter.Value.GetString (dateTimeOffsetValue' null); " is 186.
Long Statement,XSerializer,RedactAttribute,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\RedactAttribute.cs,Redact,The length of the statement  "	return redactEnabled ? Numbers.Replace (_timeSpanConverter.Value.GetString (timeSpanValue' null)' "1") : _timeSpanConverter.Value.GetString (timeSpanValue' null); " is 162.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "			using (var reader = new XSerializerXmlReader (xmlReader' options.GetEncryptionMechanism ()' options.EncryptKey' options.SerializationState)) { " is 142.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "	var reader = new XSerializerXmlReader (xmlReader' options.GetEncryptionMechanism ()' options.EncryptKey' options.SerializationState); " is 133.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,DeserializeObject,The length of the statement  "	var reader = new XSerializerXmlReader (xmlReader' options.GetEncryptionMechanism ()' options.EncryptKey' options.SerializationState); " is 133.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsSerializable,The length of the statement  "	var isSerializable = property.GetIndexParameters ().Length == 0 && (property.IsReadWriteProperty () || property.IsSerializableReadOnlyProperty (constructorParameters)); " is 168.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializable,The length of the statement  "	if (Attribute.IsDefined (property' typeof(JsonIgnoreAttribute)' true) || Attribute.GetCustomAttributes (property' true).Any (attribute => attribute.GetType ().FullName == "Newtonsoft.Json.JsonIgnoreAttribute")) { " is 212.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializable,The length of the statement  "	var isSerializable = property.GetIndexParameters ().Length == 0 && (property.IsReadWriteProperty () || property.IsJsonSerializableReadOnlyProperty (constructorParameters) || (property.IsReadOnlyProperty () && property.IsJsonPropertyAttributeDefined () && property.IsJsonPrimitive ())); " is 285.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonPropertyAttributeDefined,The length of the statement  "	var newtonsoftJsonPropertyAttribute = Attribute.GetCustomAttributes (property' true).FirstOrDefault (attribute => attribute.GetType ().FullName == "Newtonsoft.Json.JsonPropertyAttribute"); " is 188.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonPrimitive,The length of the statement  "	return property.PropertyType.IsJsonStringType () || property.PropertyType.IsJsonNumericType () || property.PropertyType.IsJsonBooleanType (); " is 141.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonStringType,The length of the statement  "	return type == typeof(string) || type == typeof(DateTime) || type == typeof(DateTime?) || type == typeof(DateTimeOffset) || type == typeof(DateTimeOffset?) || type == typeof(TimeSpan) || type == typeof(TimeSpan?) || type == typeof(Guid) || type == typeof(Guid?) || type.IsEnum || (type.IsNullableType () && Nullable.GetUnderlyingType (type).IsEnum) || type == typeof(Type) || type == typeof(Uri); " is 396.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonNumericType,The length of the statement  "	return type == typeof(double) || type == typeof(double?) || type == typeof(int) || type == typeof(int?) || type == typeof(float) || type == typeof(float?) || type == typeof(long) || type == typeof(long?) || type == typeof(decimal) || type == typeof(decimal?) || type == typeof(byte) || type == typeof(byte?) || type == typeof(sbyte) || type == typeof(sbyte?) || type == typeof(short) || type == typeof(short?) || type == typeof(ushort) || type == typeof(ushort?) || type == typeof(uint) || type == typeof(uint?) || type == typeof(ulong) || type == typeof(ulong?); " is 563.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetName,The length of the statement  "	var newtonsoftJsonPropertyAttribute = Attribute.GetCustomAttributes (property' true).FirstOrDefault (attribute => attribute.GetType ().FullName == "Newtonsoft.Json.JsonPropertyAttribute"); " is 188.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsSerializableReadOnlyProperty,The length of the statement  "	return property.IsReadOnlyProperty () && !IsConditionalProperty (property' constructorParameters) && (((constructorParameters ?? Enumerable.Empty<ParameterInfo> ()).Any (p => p.Name.ToLower () == property.Name.ToLower () && p.ParameterType == property.PropertyType)) || (property.PropertyType.IsAnyKindOfDictionary () && property.PropertyType != typeof(ExpandoObject)) || (property.PropertyType.IsAssignableToGenericIEnumerable () && property.PropertyType.HasAddMethodOfType (property.PropertyType.GetGenericIEnumerableType ().GetGenericArguments () [0])) || (property.PropertyType.IsAssignableToNonGenericIEnumerable () && property.PropertyType.HasAddMethod ()) || (property.PropertyType.IsReadOnlyCollection ()) || (property.PropertyType.IsArray && property.PropertyType.GetArrayRank () == 1) || (property.PropertyType.IsReadOnlyDictionary ())); " is 847.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializableReadOnlyProperty,The length of the statement  "	if (constructorParameters != null && constructorParameters.Any (p => string.Equals (p.Name' propertyInfo.Name' StringComparison.OrdinalIgnoreCase))) { " is 150.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializableReadOnlyProperty,The length of the statement  "	if (typeof(IDictionary).IsAssignableFrom (propertyInfo.PropertyType) || propertyInfo.PropertyType.IsAssignableToGenericIDictionary ()) { " is 136.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsJsonSerializableReadOnlyProperty,The length of the statement  "	if (typeof(IList).IsAssignableFrom (propertyInfo.PropertyType) || propertyInfo.PropertyType.IsAssignableToGenericICollection ()) { " is 130.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,ConvertIfNecessary,The length of the statement  "	var convertFunc = _convertFuncs.GetOrAdd (Tuple.Create (instanceType' targetType)' tuple => CreateConvertFunc (tuple.Item1' tuple.Item2)); " is 138.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,CreateToArrayFunc,The length of the statement  "	var toArrayMethod = typeof(Enumerable).GetMethod ("ToArray"' BindingFlags.Static | BindingFlags.Public).MakeGenericMethod (itemType); " is 133.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,CreateToArrayFunc,The length of the statement  "	var lambda = Expression.Lambda<Func<object' object>> (Expression.Call (toArrayMethod' Expression.Convert (sourceParameter' typeof(IEnumerable<>).MakeGenericType (itemType)))' sourceParameter); " is 192.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,CreateAsReadOnlyFunc,The length of the statement  "	var lambda = Expression.Lambda<Func<object' object>> (Expression.Call (Expression.Convert (instanceParameter' listType)' asReadOnlyMethod)' instanceParameter); " is 159.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetIReadOnlyDictionaryInterface,The length of the statement  "	return type.GetInterfaces ().FirstOrDefault (i => i.IsGenericType && i.GetGenericTypeDefinition () == iReadOnlyDictionaryType); " is 127.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionary,The length of the statement  "	var isAssignableToGenericIDictionary = (type.IsInterface && type.IsGenericType && type.GetGenericTypeDefinition () == typeof(IDictionary<' >)) || type.GetInterfaces ().Any (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IDictionary<' >)); " is 255.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the statement  "		iDictionaryType = type.GetInterfaces ().Single (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IDictionary<' >)); " is 130.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIDictionaryWithKeyOrValueOfTypeObject,The length of the statement  "	return iDictionaryType.GetGenericArguments () [0] == typeof(object) || iDictionaryType.GetGenericArguments () [1] == typeof(object); " is 132.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerable,The length of the statement  "	var isAssignableToGenericIEnumerable = type.IsGenericIEnumerable () || type.GetInterfaces ().Any (i => i.IsGenericIEnumerable ()); " is 130.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericIEnumerableOfTypeObject,The length of the statement  "	var iEnumerableType = type.IsGenericIEnumerable () ? type : type.GetInterfaces ().Single (i => i.IsGenericIEnumerable ()); " is 122.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAssignableToGenericICollection,The length of the statement  "	var isAssignableToGenericICollection = type.IsGenericICollection () || type.GetInterfaces ().Any (i => i.IsGenericICollection ()); " is 130.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsPrimitiveLike,The length of the statement  "	return type.IsPrimitive || type.IsEnum || type == typeof(string) || type == typeof(decimal) || type == typeof(DateTime) || type == typeof(Guid) || type == typeof(TimeSpan) || type == typeof(DateTimeOffset); " is 206.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsAnonymous,The length of the statement  "	return type.Namespace == null && type.IsClass && type.IsNotPublic && type.IsSealed && type.DeclaringType == null && type.BaseType == typeof(object) && (type.Name.StartsWith ("<>"' StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith ("VB$"' StringComparison.OrdinalIgnoreCase)) && type.Name.Contains ("AnonymousType") && Attribute.IsDefined (type' typeof(CompilerGeneratedAttribute)); " is 391.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetElementName,The length of the statement  "		return type.Name.Substring (0' type.Name.IndexOf ("`")) + "Of" + string.Join ("_"' type.GetGenericArguments ().Select (x => x.GetElementName ())); " is 146.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "		if (reader.LocalName == "type" && reader.LookupNamespace (reader.Prefix) == "http://www.w3.org/2001/XMLSchema-instance") { " is 122.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "							var matches = typeof(T).Assembly.GetTypes ().Where (t => t.Name == typeName && typeof(T).IsAssignableFrom (t)).ToList (); " is 121.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "									throw new SerializationException (string.Format ("More than one type matches '{0}'. Consider decorating your type with the XmlIncludeAttribute' or pass in the type into the serializer as an extra type."' typeName)); " is 215.
Long Statement,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,GetXsdType,The length of the statement  "			throw new SerializationException (string.Format ("No suitable type matches '{0}'. Consider decorating your type with the XmlIncludeAttribute' or pass in the type into the serializer as an extra type."' typeName)); " is 213.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "		var attributeName = !string.IsNullOrWhiteSpace (attributeAttribute.AttributeName) ? attributeAttribute.AttributeName : propertyInfo.Name; " is 137.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "		return () => new XmlAttributeSerializer (propertyInfo.PropertyType' attributeName' redactAttribute' _encryptAttribute' options); " is 128.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "			throw new InvalidOperationException ("On list types' XmlElementAttribute may not be present with either XmlArrayAttribute or XmlArrayItemAttribute are present."); " is 162.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "			var itemElementNameFallback = propertyInfo.PropertyType.IsAssignableToGenericIEnumerable () ? propertyInfo.PropertyType.GetGenericIEnumerableType ().GetGenericArguments () [0].GetElementName () : "Item"; " is 203.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "		return () => ListSerializer.GetSerializer (propertyInfo.PropertyType' _encryptAttribute' options.WithRootElementName (rootElementName)' itemElementName); " is 153.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetCreateSerializerFunc,The length of the statement  "	return () => XmlSerializerFactory.Instance.GetSerializer (propertyInfo.PropertyType' _encryptAttribute' options.WithRootElementName (rootElementName)); " is 151.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,IsListProperty,The length of the statement  "	return propertyInfo.PropertyType != typeof(string) && !propertyInfo.PropertyType.IsAssignableToNonGenericIDictionary () && !propertyInfo.PropertyType.IsAssignableToGenericIDictionary () && !propertyInfo.PropertyType.IsReadOnlyDictionary () && (propertyInfo.PropertyType.IsAssignableToNonGenericIEnumerable () || propertyInfo.PropertyType.IsAssignableToGenericIEnumerable ()); " is 375.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetSerializableReadonlyPropertySetValueFunc,The length of the statement  "				addToDictionary (destinationDictionary' getKeyFunc (sourceEnumerator.Current)' getValueFunc (sourceEnumerator.Current)); " is 120.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "			}.Concat (propertyType.GetInterfaces ()).SelectMany (t => t.GetMethods ().Where (m => m.Name == "Add" && m.GetParameters ().Length == 1 && m.GetParameters () [0].ParameterType == itemType)); " is 190.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "							throw new InvalidOperationException (string.Format ("No suitable 'Add' method found for instance of type {0}"' sourceEnumerator.Current.GetType ())); " is 149.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "		}.Concat (propertyType.GetInterfaces ()).SelectMany (t => t.GetMethods ().Where (m => m.Name == "Add" && m.GetParameters ().Length == 1)); " is 138.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The length of the statement  "						throw new InvalidOperationException (string.Format ("No suitable 'Add' method found for instance of type {0}"' sourceEnumerator.Current.GetType ())); " is 149.
Long Statement,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetShouldSerializeFunc,The length of the statement  "	var shouldSerializeMethod = propertyInfo.DeclaringType.GetMethod ("ShouldSerialize" + propertyInfo.Name' Type.EmptyTypes); " is 122.
Long Statement,XSerializer,XSerializerXmlReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XSerializerXmlReader.cs,MaybeDecrypt,The length of the statement  "	return IsDecryptionEnabled && !string.IsNullOrEmpty (value) ? _encryptionMechanism.Decrypt (value' _encryptKey' _serializationState) : value; " is 141.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,Create,The length of the statement  "	return _map.GetOrAdd (Tuple.Create (type' redactAttribute != null)' _ => new SimpleTypeValueConverter (type' redactAttribute)); " is 127.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The length of the statement  "	if (type.IsEnum || (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>) && type.GetGenericArguments () [0].IsEnum)) { " is 142.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The length of the statement  "		return (value' options) => string.IsNullOrEmpty (value) || value == "XXXXXX" ? defaultValue : Enum.Parse (type' value' options.ShouldIgnoreCaseForEnum); " is 152.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The length of the statement  "		return (value' options) => string.IsNullOrEmpty (value) ? null : Convert.ChangeType (value' type.GetGenericArguments () [0]); " is 125.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetStringFunc,The length of the statement  "		return (value' options) => redactAttribute.Redact ((char?)value' options.ShouldRedact' options.ShouldSerializeCharAsInt); " is 121.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "		return (value' options) => string.IsNullOrEmpty (value) ? defaultValue : Enum.Parse (type' value' options.ShouldIgnoreCaseForEnum); " is 131.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "	if (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>) && type.GetGenericArguments () [0].IsEnum) { " is 125.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "		return (value' options) => string.IsNullOrEmpty (value) ? null : Enum.Parse (enumType' value' options.ShouldIgnoreCaseForEnum); " is 127.
Long Statement,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetNonRedactedGetParseStringFunc,The length of the statement  "		return (value' options) => string.IsNullOrEmpty (value) ? null : Convert.ChangeType (value' type.GetGenericArguments () [0]); " is 125.
Long Statement,XSerializer,XmlSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializer.cs,Create,The length of the statement  "			throw new InvalidOperationException ("A source code change has resulted in broken reflection. typeof(XmlSerializer<>).MakeGenericType(type).GetConstructor(new[] { typeof(XmlSerializationOptions)' typeof(Type[]) })"); " is 216.
Long Statement,XSerializer,XmlSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializer.cs,Create,The length of the statement  "		var lambda = Expression.Lambda<Func<XmlSerializationOptions' Type[]' IXSerializer>> (Expression.New (ctor' optionsParameter' extraTypesParameter)' optionsParameter' extraTypesParameter); " is 186.
Long Statement,XSerializer,XmlSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializerFactory.cs,GetSerializer,The length of the statement  "		return (Func<EncryptAttribute' IXmlSerializerOptions' IXmlSerializerInternal>)Delegate.CreateDelegate (typeof(Func<EncryptAttribute' IXmlSerializerOptions' IXmlSerializerInternal>)' this' getSerializerMethod); " is 209.
Long Statement,XSerializer,XmlSerializerFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\XmlSerializerFactory.cs,GetSerializer,The length of the statement  "		} else if (type.IsAssignableToNonGenericIDictionary () || type.IsAssignableToGenericIDictionary () || type.IsReadOnlyDictionary ()) { " is 133.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRoot,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\CompositionRoot.cs,Bootstrap,The length of the statement  "	ImportSingle<IEncryptionMechanism' IEncryptionMechanismFactory> (mechanism => EncryptionMechanism.Current = mechanism' factory => factory.GetEncryptionMechanism ()); " is 165.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRoot,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\CompositionRoot.cs,GetExportInfos,The length of the statement  "	return attributes.Cast<EncryptionMechanismAttribute> ().Select (attribute => new ExportInfo (type' attribute.Priority) { " is 120.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,ImportSingle,The length of the statement  "	ImportSingleType (importAction' GetImportInfo<TTargetType> (importName' options' typeof(TFactoryType))' t => CreateInstance (t' getTarget)); " is 140.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetInstances,The length of the statement  "	return GetInstances (GetImportInfo<TTargetType> (importName' options' typeof(TFactoryType))' type => CreateInstance (type' getTarget)); " is 135.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,ImportSingleType,The length of the statement  "	var instance = GetPrioritizedGroupsOfCandidateTypes (candidateTypeNames' import).Select (candidateTypes => ChooseCandidateType (candidateTypes' import)).Select (t => t == null ? null : createInstance (t)).FirstOrDefault (); " is 223.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,Instantiate,The length of the statement  "	var ctor = candidateType.GetConstructors ().OrderByDescending (c => c.GetParameters ().Length).First (c => c.GetParameters ().All (HasDefaultValue)); " is 149.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetPrioritizedGroupsOfCandidateTypes,The length of the statement  "	var prioritizedGroupsOfCandidateTypes = candidateTypeNames.SelectMany (GetExportInfos).Where (export => export != null && !export.Disabled && AreCompatible (import' export)).GroupBy (x => x.Priority).OrderByDescending (g => g.Key).Select (g => g.OrderByDescending (export => isPreferredType (export.TargetClass)).ThenBy (export => export' import.Options.ExportComparer).ToList ()).ToList (); " is 391.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetPrioritizedGroupsOfCandidateTypes,The length of the statement  "			if (uniqueExports.Any (uniqueExport => export.TargetClass == uniqueExport.TargetClass && export.Name == uniqueExport.Name)) { " is 125.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetCandidateTypeNames,The length of the statement  "	var candidateTypeNamesCache = _candidateTypeNamesByTargetTypeNameCache.GetOrAdd (import.TargetTypeName' _ => new ConcurrentDictionary<Tuple<string' string' bool' bool>' IEnumerable<string>> ()); " is 194.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetCandidateTypeNames,The length of the statement  "	var key = Tuple.Create (import.TargetTypeName' import.FactoryTypeName' import.Options.AllowNonPublicClasses' import.Options.IncludeTypesFromThisAssembly); " is 154.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetCandidateTypeNames,The length of the statement  "		var candidateTypes = _candidateTypesCache.GetOrAdd (Tuple.Create (string.Join ("|"' import.Options.DirectoryPaths)' import.Options.IncludeTypesFromThisAssembly)' __ => GetCandidateTypes (import.Options.DirectoryPaths' import.Options.IncludeTypesFromThisAssembly)); " is 264.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetIsTargetTypeFunc,The length of the statement  "		return typeInQuestion => (typeInQuestion.IsPublic || allowNonPublicClasses) && typeInQuestion.GetInterfaces ().Any (i => i.AssemblyQualifiedName == targetTypeName); " is 164.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,GetCandidateTypes,The length of the statement  "		return GetAssemblyFiles (directoryPaths' includeTypesFromThisAssembly).SelectMany (x => LoadCandidateTypes (x' includeTypesFromThisAssembly)).ToList (); " is 152.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,LoadCandidateTypes,The length of the statement  "		return GetTypesSafely (assembly).Where (t => t.IsClass && !t.IsAbstract && t.AssemblyQualifiedName != null && HasDefaultishConstructor (t)); " is 140.
Long Statement,XSerializer.Rock.StaticDependencyInjection,CompositionRootBase,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\Rock.StaticDependencyInjection\StaticDependencyInjection.Generated.cs,HasDefaultishConstructor,The length of the statement  "		return type.GetConstructor (Type.EmptyTypes) != null || type.GetConstructors ().Any (ctor => ctor.GetParameters ().All (HasDefaultValue)); " is 138.
Complex Conditional,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The conditional expression  "sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])"  is complex.
Complex Conditional,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The conditional expression  "concreteType == typeof(string) || concreteType == typeof(DateTime) || concreteType == typeof(DateTimeOffset) || concreteType == typeof(Guid)"  is complex.
Complex Conditional,XSerializer,DynamicJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicJsonSerializer.cs,GetSerializer,The conditional expression  "concreteType == typeof(double) || concreteType == typeof(int) || concreteType == typeof(float) || concreteType == typeof(long) || concreteType == typeof(decimal) || concreteType == typeof(byte) || concreteType == typeof(sbyte) || concreteType == typeof(short) || concreteType == typeof(ushort) || concreteType == typeof(uint) || concreteType == typeof(ulong)"  is complex.
Complex Conditional,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,Decrypt,The conditional expression  "value == null || value is bool || value is JsonArray || value is JsonObject"  is complex.
Complex Conditional,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,Decrypt,The conditional expression  "value == null || value is bool || value is string || value is JsonArray || value is JsonObject"  is complex.
Complex Conditional,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The conditional expression  "value == null || value is bool || value is string || value is JsonNumber || value is JsonObject || value is JsonArray"  is complex.
Complex Conditional,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GuardValue,The conditional expression  "value is int || value is double || value is byte || value is long || value is decimal || value is uint || value is ulong || value is short || value is float || value is ushort || value is sbyte"  is complex.
Complex Conditional,XSerializer,SimpleTypeValueConverter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SimpleTypeValueConverter.cs,GetRedactedGetParseStringFunc,The conditional expression  "type.IsEnum || (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>) && type.GetGenericArguments () [0].IsEnum)"  is complex.
Empty Catch Block,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,ListSerializer,The method has an empty catch block.
Empty Catch Block,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,ListSerializer,The method has an empty catch block.
Empty Catch Block,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has an empty catch block.
Empty Catch Block,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method has an empty catch block.
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var type = cacheKey.Item1;  	var encryptAttribute = cacheKey.Item2;  	var options = cacheKey.Item3;  	var key = type.GetHashCode ();  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  	if (options.ExtraTypes != null) {  		key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  	}  	key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  	key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  	key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  	key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  	key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  	key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  	return key;  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.DefaultNamespace) ? "" : options.DefaultNamespace).GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (options.ExtraTypes != null) {  	key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  }  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = options.ExtraTypes.Where (extraType => extraType != null).Distinct (EqualityComparer<Type>.Default).OrderBy (extraType => extraType.FullName).Aggregate (key' (current' extraType) => (current * 397) ^ extraType.GetHashCode ());  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (string.IsNullOrWhiteSpace (options.RootElementName) ? type.Name : options.RootElementName).GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (options.RedactAttribute != null).GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ (encryptAttribute != null).GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.TreatEmptyElementAsString.GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.ShouldAlwaysEmitNil.GetHashCode ();  
Magic Number,XSerializer,CacheKeyEqualityComparer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CacheKeyEqualityComparer.cs,GetHashCode,The following statement contains a magic number: key = (key * 397) ^ options.ShouldUseAttributeDefinedInInterface.GetHashCode ();  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_dateFormat.GetHashCode () * 397) ^ typeof(DefaultDateTimeHandler).GetHashCode ();  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetHashCode,The following statement contains a magic number: return (_dateFormat.GetHashCode () * 397) ^ typeof(DefaultDateTimeHandler).GetHashCode ();  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: for (int valueIndex = 0' formatIndex = 0; formatIndex < _dateFormat.Length && valueIndex < value.Length; valueIndex++' formatIndex++) {  	char c = value [valueIndex];  	switch (_dateFormat [formatIndex]) {  	case 'y':  		ThrowIfNotDigit (c' valueIndex' value' "year");  		year = year * 10 + (c - '0');  		break;  	case 'M':  		ThrowIfNotDigit (c' valueIndex' value' "month");  		month = month * 10 + (c - '0');  		break;  	case 'd':  		ThrowIfNotDigit (c' valueIndex' value' "day");  		day = day * 10 + (c - '0');  		break;  	case 'H':  		ThrowIfNotDigit (c' valueIndex' value' "hours");  		hour = hour * 10 + (c - '0');  		break;  	case 'm':  		ThrowIfNotDigit (c' valueIndex' value' "minutes");  		minute = minute * 10 + (c - '0');  		break;  	case 's':  		ThrowIfNotDigit (c' valueIndex' value' "seconds");  		second = second * 10 + (c - '0');  		break;  	case '.':  		if (value [valueIndex] == '.') {  			fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  		} else {  			valueIndex--;  			formatIndex++;  			AdvancePastFractionalPart (ref formatIndex);  		}  		break;  	case 'K':  		ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  		break;  	case '-':  	case 'T':  	case ':':  		if (_dateFormat [valueIndex] != c) {  			throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  		}  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: year = year * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: month = month * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: day = day * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: hour = hour * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: minute = minute * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following statement contains a magic number: second = second * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: for (valueIndex = valueIndex + 1' formatIndex = formatIndex + 1; formatIndex < _dateFormat.Length && valueIndex < sourceString.Length; valueIndex++' formatIndex++) {  	char c = sourceString [valueIndex];  	if (_dateFormat [formatIndex] == 'f') {  		if (!char.IsDigit (c)) {  			valueIndex--;  			break;  		}  		numerator = numerator * 10 + (c - '0');  		denominator *= 10;  	} else {  		valueIndex--;  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: for (valueIndex = valueIndex + 1' formatIndex = formatIndex + 1; formatIndex < _dateFormat.Length && valueIndex < sourceString.Length; valueIndex++' formatIndex++) {  	char c = sourceString [valueIndex];  	if (_dateFormat [formatIndex] == 'f') {  		if (!char.IsDigit (c)) {  			valueIndex--;  			break;  		}  		numerator = numerator * 10 + (c - '0');  		denominator *= 10;  	} else {  		valueIndex--;  		break;  	}  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: if (_dateFormat [formatIndex] == 'f') {  	if (!char.IsDigit (c)) {  		valueIndex--;  		break;  	}  	numerator = numerator * 10 + (c - '0');  	denominator *= 10;  } else {  	valueIndex--;  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: if (_dateFormat [formatIndex] == 'f') {  	if (!char.IsDigit (c)) {  		valueIndex--;  		break;  	}  	numerator = numerator * 10 + (c - '0');  	denominator *= 10;  } else {  	valueIndex--;  	break;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: numerator = numerator * 10 + (c - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseFraction,The following statement contains a magic number: denominator *= 10;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) {  	throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString));  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) {  	throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString));  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) {  	throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString));  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) {  	throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString));  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: if (sourceString.Length < i + 5 || !char.IsDigit (sourceString [i + 1]) || !char.IsDigit (sourceString [i + 2]) || sourceString [i + 3] != ':' || !char.IsDigit (sourceString [i + 4]) || !char.IsDigit (sourceString [i + 5])) {  	throw new FormatException (string.Format ("Expected timezone offset but was '{0}' at index {1} in '{2}'."' sourceString.Substring (i)' i' sourceString));  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString [i + 1] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString [i + 2] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: hours = hours * 10 + (sourceString [i + 2] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString [i + 4] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString [i + 4] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString [i + 5] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,ParseOffset,The following statement contains a magic number: minutes = minutes * 10 + (sourceString [i + 5] - '0');  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (minute < 0) {  	minute += 60;  	hour--;  } else if (minute > 60) {  	minute -= 60;  	hour++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (minute < 0) {  	minute += 60;  	hour--;  } else if (minute > 60) {  	minute -= 60;  	hour++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (minute < 0) {  	minute += 60;  	hour--;  } else if (minute > 60) {  	minute -= 60;  	hour++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: minute += 60;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (minute > 60) {  	minute -= 60;  	hour++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (minute > 60) {  	minute -= 60;  	hour++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: minute -= 60;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (hour < 0) {  	hour += 24;  	day--;  } else if (hour > 23) {  	hour -= 24;  	day++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (hour < 0) {  	hour += 24;  	day--;  } else if (hour > 23) {  	hour -= 24;  	day++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (hour < 0) {  	hour += 24;  	day--;  } else if (hour > 23) {  	hour -= 24;  	day++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: hour += 24;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (hour > 23) {  	hour -= 24;  	day++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (hour > 23) {  	hour -= 24;  	day++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: hour -= 24;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (day < 1) {  	month--;  } else if (OverflowsMonth (day' month' year)) {  	day = 32;  	month++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (OverflowsMonth (day' month' year)) {  	day = 32;  	month++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: day = 32;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (month < 1) {  	month += 12;  	year--;  } else if (month > 12) {  	month -= 12;  	year++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (month < 1) {  	month += 12;  	year--;  } else if (month > 12) {  	month -= 12;  	year++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (month < 1) {  	month += 12;  	year--;  } else if (month > 12) {  	month -= 12;  	year++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: month += 12;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (month > 12) {  	month -= 12;  	year++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (month > 12) {  	month -= 12;  	year++;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: month -= 12;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (day < 1) {  	day = DateTime.DaysInMonth (year' month);  } else if (day > 31) {  	day = 1;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,Adjust,The following statement contains a magic number: if (day > 31) {  	day = 1;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: switch (month) {  case 1:  case 3:  case 5:  case 7:  case 8:  case 10:  case 12:  	return day > 31;  case 2:  	if (day < 29) {  		return false;  	}  	if (day > 29) {  		return true;  	}  	return !DateTime.IsLeapYear (year);  case 4:  case 6:  case 9:  case 11:  	return day > 30;  default:  	throw new ArgumentOutOfRangeException ("month");  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: return day > 31;  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: if (day < 29) {  	return false;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: if (day > 29) {  	return true;  }  
Magic Number,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,OverflowsMonth,The following statement contains a magic number: return day > 30;  
Magic Number,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,IsAddMethod,The following statement contains a magic number: if (methodInfo.Name == "Add") {  	var parameters = methodInfo.GetParameters ();  	if (parameters.Length == 2)// TODO: Better condition (check parameter type' etc.)  	 {  		return true;  	}  }  
Magic Number,XSerializer,DictionaryJsonSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionaryJsonSerializer.cs,IsAddMethod,The following statement contains a magic number: if (parameters.Length == 2)// TODO: Better condition (check parameter type' etc.)   {  	return true;  }  
Magic Number,XSerializer,DynamicMethodFactory,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicMethodFactory.cs,CreateTwoArgAction,The following statement contains a magic number: il.Emit (OpCodes.Ldarg' 2);  
Magic Number,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return _values.Aggregate (typeof(JsonArray).GetHashCode ()' (current' item) => (current * 397) ^ (item != null ? item.GetHashCode () : 0));  }  
Magic Number,XSerializer,JsonArray,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonArray.cs,GetHashCode,The following statement contains a magic number: return _values.Aggregate (typeof(JsonArray).GetHashCode ()' (current' item) => (current * 397) ^ (item != null ? item.GetHashCode () : 0));  
Magic Number,XSerializer,JsonMappings,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonMappings.cs,JsonMappings,The following statement contains a magic number: _hashCode = unchecked(_mappings.Aggregate (typeof(JsonMappings).GetHashCode ()' (currentHashCode' item) => (currentHashCode * 397) ^ item.GetHashCode ()));  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = typeof(JsonObject).GetHashCode ();  	foreach (var item in _values.OrderBy (x => x.Key)) {  		hashCode = (hashCode * 397) ^ item.Key.GetHashCode ();  		hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode () : 0);  	}  	return hashCode;  }  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = typeof(JsonObject).GetHashCode ();  	foreach (var item in _values.OrderBy (x => x.Key)) {  		hashCode = (hashCode * 397) ^ item.Key.GetHashCode ();  		hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode () : 0);  	}  	return hashCode;  }  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: foreach (var item in _values.OrderBy (x => x.Key)) {  	hashCode = (hashCode * 397) ^ item.Key.GetHashCode ();  	hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode () : 0);  }  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: foreach (var item in _values.OrderBy (x => x.Key)) {  	hashCode = (hashCode * 397) ^ item.Key.GetHashCode ();  	hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode () : 0);  }  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ item.Key.GetHashCode ();  
Magic Number,XSerializer,JsonObject,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonObject.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (item.Value != null ? item.Value.GetHashCode () : 0);  
Duplicate Code,XSerializer,SerializableProperty,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializableProperty.cs,GetAddEnumerableValuesAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((29' 51)' (57' 79))
Missing Default,XSerializer,DefaultDateTimeHandler,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DefaultDateTimeHandler.cs,GetDateTimeComponents,The following switch statement is missing a default case: switch (_dateFormat [formatIndex]) {  case 'y':  	ThrowIfNotDigit (c' valueIndex' value' "year");  	year = year * 10 + (c - '0');  	break;  case 'M':  	ThrowIfNotDigit (c' valueIndex' value' "month");  	month = month * 10 + (c - '0');  	break;  case 'd':  	ThrowIfNotDigit (c' valueIndex' value' "day");  	day = day * 10 + (c - '0');  	break;  case 'H':  	ThrowIfNotDigit (c' valueIndex' value' "hours");  	hour = hour * 10 + (c - '0');  	break;  case 'm':  	ThrowIfNotDigit (c' valueIndex' value' "minutes");  	minute = minute * 10 + (c - '0');  	break;  case 's':  	ThrowIfNotDigit (c' valueIndex' value' "seconds");  	second = second * 10 + (c - '0');  	break;  case '.':  	if (value [valueIndex] == '.') {  		fraction = ParseFraction (value' ref valueIndex' ref formatIndex);  	} else {  		valueIndex--;  		formatIndex++;  		AdvancePastFractionalPart (ref formatIndex);  	}  	break;  case 'K':  	ParseOffset (value' valueIndex' out offsetHours' out offsetMinutes' out dateTimeKind);  	break;  case '-':  case 'T':  case ':':  	if (_dateFormat [valueIndex] != c) {  		throw new FormatException (string.Format ("Expected '{0}' but was '{1}' at index {2} in '{3}'."' _dateFormat [valueIndex]' c' valueIndex' value));  	}  	break;  }  
Missing Default,XSerializer,CustomSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\CustomSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (reader.Name == _options.RootElementName && ReferenceEquals (helper' NullHelper.Instance)) {  		if (!typeof(T).IsPrimitiveLike ()) {  			var type = reader.GetXsdType<T> (_options.ExtraTypes);  			if (type == null && typeof(T).IsInterface) {  				// We have no idea what concrete type we have here. The only  				// successful situation is if we have xsi:nil="true"  				if (reader.IsNil ()) {  					return default(T);  				}  				throw new InvalidOperationException ("Unable to create concrete instance of interface type " + typeof(T) + " - no type hint found.");  			}  			if (type == null) {  				type = typeof(T);  			}  			setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue (_encryptAttribute' options);  			helper = _helperFactory.CreateHelper (type' reader);  			while (reader.MoveToNextAttribute ()) {  				helper.StageAttributeValue (options);  			}  			helper.FlushAttributeValues ();  			reader.MoveToElement ();  			if (reader.IsEmptyElement) {  				return helper.GetInstance (setIsDecryptionEnabledBackToFalse);  			}  			SerializableProperty property;  			var t = type;  			do {  				if (_encryptedXmlElementListProperties.TryGetValue (t' out property)) {  					break;  				}  			} while ((t = t.BaseType) != null);  			if (property != null && reader.MaybeSetIsDecryptionEnabledToTrue (property.EncryptAttribute' options)) {  				reader.Read ();  				helper.SetElementPropertyValue (options' out shouldIssueRead);  				reader.IsDecryptionEnabled = false;  			}  		} else if (reader.IsEmptyElement) {  			return default(T);  		}  	} else {  		if (!helper.SetElementPropertyValue (options' out shouldIssueRead)) {  			var subReader = reader.ReadSubtree ();  			while (subReader.Read ()) {  			}  		}  	}  	break;  case XmlNodeType.Text:  	if (typeof(T).IsPrimitiveLike ()) {  		// This is left-over (and commented-out) from an earlier time. Is it even possible to have a CustomSerializer for a primitive type???  		//instance = (T)XmlTextSerializer.GetSerializer(typeof(T)' _options.RedactAttribute).DeserializeObject(reader);  		//hasInstanceBeenCreated = true;  	} else {  		helper.SetTextNodePropertyValue (options);  	}  	break;  case XmlNodeType.EndElement:  	if (reader.Name == _options.RootElementName) {  		return helper.GetInstance (setIsDecryptionEnabledBackToFalse);  	}  	break;  }  
Missing Default,XSerializer,DictionarySerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DictionarySerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (isAtRootElement ()) {  		if (reader.IsNil ()) {  			if (reader.IsEmptyElement) {  				return null;  			}  			dictionary = null;  			hasInstanceBeenCreated = true;  		} else {  			setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue (_encryptAttribute' options);  			dictionary = _createDictionary ();  			hasInstanceBeenCreated = true;  			if (reader.IsEmptyElement) {  				if (setIsDecryptionEnabledBackToFalse) {  					reader.IsDecryptionEnabled = false;  				}  				return _finalizeDictionary (dictionary);  			}  		}  	} else if (reader.Name == "Item" && hasInstanceBeenCreated) {  		isInsideItemElement = true;  	} else if (isInsideItemElement) {  		if (reader.Name == "Key") {  			currentKey = DeserializeKeyOrValue (reader' _keySerializer' options' out shouldIssueRead);  		} else if (reader.Name == "Value") {  			currentValue = DeserializeKeyOrValue (reader' _valueSerializer' options' out shouldIssueRead);  		}  	}  	break;  case XmlNodeType.EndElement:  	if (isInsideItemElement && reader.Name == "Item") {  		AddItemToDictionary (dictionary' currentKey' currentValue);  		currentKey = null;  		currentValue = null;  		isInsideItemElement = false;  	} else if (reader.Name == _options.RootElementName) {  		if (setIsDecryptionEnabledBackToFalse) {  			reader.IsDecryptionEnabled = false;  		}  		return CheckAndReturn (hasInstanceBeenCreated' _finalizeDictionary (dictionary));  	}  	break;  }  
Missing Default,XSerializer,DynamicSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\DynamicSerializer.cs,DeserializeToDynamic,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (isAtRootElement ()) {  		setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue (_encryptAttribute' options);  		instance = new ExpandoObject ();  		hasInstanceBeenCreated = true;  		if (reader.IsEmptyElement) {  			if (_options.TreatEmptyElementAsString) {  				instance = "";  			}  			if (setIsDecryptionEnabledBackToFalse) {  				reader.IsDecryptionEnabled = false;  			}  			return instance;  		}  	} else {  		SetElementPropertyValue (reader' hasInstanceBeenCreated' options' (ExpandoObject)instance);  	}  	break;  case XmlNodeType.Text:  	var stringValue = (string)new XmlTextSerializer (typeof(string)' _options.RedactAttribute' null' _options.ExtraTypes).DeserializeObject (reader' options);  	hasInstanceBeenCreated = true;  	bool boolValue;  	if (bool.TryParse (stringValue' out boolValue)) {  		instance = boolValue;  		break;  	}  	int intValue;  	if (int.TryParse (stringValue' out intValue)) {  		// If this is a number with leading zeros' treat it as a string so we don't lose those leading zeros.  		if (stringValue [0] == '0' && stringValue.Length > 1) {  			instance = stringValue;  		} else {  			instance = intValue;  		}  		break;  	}  	decimal decimalValue;  	if (decimal.TryParse (stringValue' out decimalValue)) {  		instance = decimalValue;  		break;  	}  	DateTime dateTimeValue;  	if (DateTime.TryParse (stringValue' out dateTimeValue)) {  		instance = dateTimeValue.ToUniversalTime ();  		break;  	}  	// TODO: add more types to check?  	instance = stringValue;  	break;  case XmlNodeType.EndElement:  	if (reader.Name == _options.RootElementName) {  		if (_options.TreatEmptyElementAsString) {  			var instanceAsExpando = instance as IDictionary<string' object>;  			if (instanceAsExpando != null && instanceAsExpando.Count == 0) {  				instance = "";  			}  		}  		if (setIsDecryptionEnabledBackToFalse) {  			reader.IsDecryptionEnabled = false;  		}  		return CheckAndReturn (hasInstanceBeenCreated' instance);  	}  	break;  }  
Missing Default,XSerializer,JsonReader,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonReader.cs,Read,The following switch statement is missing a default case: switch (read) {  case -1:  	_value = null;  	_nodeType = JsonNodeType.EndOfString;  	return false;  case '"':  	return TryReadString (out _value' out _nodeType);  case '-':  case '.':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	_value = ReadNumber ((char)read);  	_nodeType = JsonNodeType.Number;  	return true;  case 't':  	ReadLiteral (path' "true"' 'r'' 'u'' 'e');  	_value = true;  	_nodeType = JsonNodeType.Boolean;  	return true;  case 'f':  	ReadLiteral (path' "false"' 'a'' 'l'' 's'' 'e');  	_value = false;  	_nodeType = JsonNodeType.Boolean;  	return true;  case 'n':  	ReadLiteral (path' "null"' 'u'' 'l'' 'l');  	_value = null;  	_nodeType = JsonNodeType.Null;  	return true;  case '{':  	_value = '{';  	_nodeType = JsonNodeType.OpenObject;  	return true;  case '}':  	_value = '}';  	_nodeType = JsonNodeType.CloseObject;  	return true;  case ':':  	_value = ':';  	_nodeType = JsonNodeType.NameValueSeparator;  	return true;  case ''':  	_value = ''';  	_nodeType = JsonNodeType.ItemSeparator;  	return true;  case '[':  	_value = '[';  	_nodeType = JsonNodeType.OpenArray;  	return true;  case ']':  	_value = ']';  	_nodeType = JsonNodeType.CloseArray;  	return true;  case ' ':  case '\r':  case '\n':  case '\t':  	_value = ReadWhitespace ((char)read);  	_nodeType = JsonNodeType.Whitespace;  	return true;  }  
Missing Default,XSerializer,JsonWriter,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\JsonWriter.cs,Escape,The following switch statement is missing a default case: switch (value [i]) {  case '\\':  	flags |= 0x01;  	break;  case '"':  	flags |= 0x02;  	break;  case '/':  	flags |= 0x04;  	break;  case '\b':  	flags |= 0x08;  	break;  case '\f':  	flags |= 0x10;  	break;  case '\n':  	flags |= 0x20;  	break;  case '\r':  	flags |= 0x40;  	break;  case '\t':  	flags |= 0x80;  	break;  }  
Missing Default,XSerializer,ListSerializer,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\ListSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (_options.RootElementName != null) {  		if (reader.Name == _options.RootElementName) {  			if (reader.IsNil ()) {  				if (reader.IsEmptyElement) {  					return null;  				}  				collection = null;  				hasInstanceBeenCreated = true;  			} else {  				setIsDecryptionEnabledBackToFalse = reader.MaybeSetIsDecryptionEnabledToTrue (_encryptAttribute' options);  				collection = _createCollection ();  				hasInstanceBeenCreated = true;  				if (reader.IsEmptyElement) {  					if (setIsDecryptionEnabledBackToFalse) {  						reader.IsDecryptionEnabled = false;  					}  					return collection;  				}  			}  			break;  		}  	} else {  		// If there's no root element' and we encounter another element' we're done - get out!  		if (reader.Name != _itemElementName) {  			if (setIsDecryptionEnabledBackToFalse) {  				reader.IsDecryptionEnabled = false;  			}  			return collection == null ? null : CheckAndReturn (hasInstanceBeenCreated' collection);  		}  	}  	if (reader.Name == _itemElementName) {  		var item = DeserializeItem (reader' _itemSerializer' hasInstanceBeenCreated' options' out shouldIssueRead);  		if (collection != null) {  			AddItemToCollection (collection' item);  		}  	}  	break;  case XmlNodeType.EndElement:  	if (_options.RootElementName != null) {  		if (reader.Name == _options.RootElementName) {  			if (setIsDecryptionEnabledBackToFalse) {  				reader.IsDecryptionEnabled = false;  			}  			return collection == null ? null : CheckAndReturn (hasInstanceBeenCreated' collection);  		}  	} else {  		if (reader.Name != _itemElementName) {  			if (setIsDecryptionEnabledBackToFalse) {  				reader.IsDecryptionEnabled = false;  			}  			return collection == null ? null : CheckAndReturn (hasInstanceBeenCreated' collection);  		}  	}  	break;  }  
Missing Default,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsReadOnlyCollection,The following switch statement is missing a default case: switch (openGeneric.AssemblyQualifiedName) {  case IReadOnlyCollection:  case IReadOnlyList:  	return true;  }  
Missing Default,XSerializer,SerializationExtensions,D:\newReposJune17\QuickenLoans_XSerializer\XSerializer\SerializationExtensions.cs,IsReadOnlyDictionary,The following switch statement is missing a default case: switch (openGeneric.AssemblyQualifiedName) {  case IReadOnlyDictionary:  case ReadOnlyDictionary:  	return true;  }  
