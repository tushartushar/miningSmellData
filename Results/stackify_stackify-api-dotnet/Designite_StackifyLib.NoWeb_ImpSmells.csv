Implementation smell,Namespace,Class,File,Method,Description
Long Method,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,EnvironmentDetail,The method has 130 lines of code.
Long Method,StackifyLib.Utils,HelperFunctions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HelperFunctions.cs,SerializeDebugData,The method has 180 lines of code.
Complex Method,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,Cyclomatic complexity of the method is 10
Complex Method,StackifyLib,Logger,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Logger.cs,QueueLogObject,Cyclomatic complexity of the method is 8
Complex Method,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,CreateDefaultMsgGroup,Cyclomatic complexity of the method is 8
Complex Method,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,Cyclomatic complexity of the method is 9
Complex Method,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,FlushOnce,Cyclomatic complexity of the method is 9
Complex Method,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,ReadAllQueuedMetrics,Cyclomatic complexity of the method is 9
Complex Method,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadAggregates,Cyclomatic complexity of the method is 8
Complex Method,StackifyLib.Models,ErrorItem,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\ErrorItem.cs,GetMethodFullName,Cyclomatic complexity of the method is 8
Complex Method,StackifyLib.Utils,PrefixOrAPM,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\PrefixOrAPM.cs,GetProfilerType,Cyclomatic complexity of the method is 9
Long Parameter List,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,CreateMetric,The method has 5 parameters. Parameters: categoryName' metricName' trackCount' trackTime' autoReportZeroIfNothingReported
Long Parameter List,StackifyLib.Models,LogMsg,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\LogMsgGroup.cs,SetLogMsgID,The method has 5 parameters. Parameters: id' isError' logLevel' logMsg' logData
Long Parameter List,StackifyLib.Models,WebRequestDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\WebRequestDetail.cs,AddKey,The method has 5 parameters. Parameters: key' value' dictionary' goodKeys' badKeys
Long Identifier,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the parameter captureEc2InstanceMetadataUpdateThresholdMinutes is 48.
Long Identifier,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,SetGauge,The length of the parameter autoResendLastValueIfNothingReported is 36.
Long Identifier,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,IncrementGauge,The length of the parameter autoResendLastValueIfNothingReported is 36.
Long Identifier,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,Count,The length of the parameter autoReportZeroIfNothingReported is 31.
Long Identifier,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,CountAndTime,The length of the parameter autoReportZeroIfNothingReported is 31.
Long Identifier,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,CountAndTime,The length of the parameter autoReportZeroIfNothingReported is 31.
Long Identifier,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,CreateMetric,The length of the parameter autoReportZeroIfNothingReported is 31.
Long Identifier,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,,The length of the parameter _autoReportZeroIfNothingReported is 32.
Long Statement,StackifyLib,API,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\API.cs,GetMetrics,The length of the statement  "                                      "API/Device/MonitorMetrics/" + string.Format("?monitorID={0}&startDateUtc={1}&endDateUtc={2}&pointSizeInMinutes={3}"' monitorID' startDateUtc.UtcDateTime.ToString("o")' endDateUtc.UtcDateTime.ToString("o")' pointSizeInMinutes)' " is 227.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                CaptureErrorPostdata = Get("Stackify.CaptureErrorPostdata"' "").Equals(bool.TrueString' StringComparison.CurrentCultureIgnoreCase); " is 131.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                CaptureServerVariables = Get("Stackify.CaptureServerVariables"' "").Equals(bool.TrueString' StringComparison.CurrentCultureIgnoreCase); " is 135.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                CaptureSessionVariables = Get("Stackify.CaptureSessionVariables"' "").Equals(bool.TrueString' StringComparison.CurrentCultureIgnoreCase); " is 137.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                CaptureErrorHeaders = Get("Stackify.CaptureErrorHeaders"' bool.TrueString).Equals(bool.TrueString' StringComparison.CurrentCultureIgnoreCase); " is 142.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                CaptureErrorCookies = Get("Stackify.CaptureErrorCookies"' "").Equals(bool.TrueString' StringComparison.CurrentCultureIgnoreCase); " is 129.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "	                ErrorHeaderGoodKeys = CaptureErrorHeadersWhitelist.Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 124.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                    ErrorHeaderBadKeys = CaptureErrorHeadersBlacklist.Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 123.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                    ErrorCookiesGoodKeys = CaptureErrorCookiesWhitelist.Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 125.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                    ErrorCookiesBadKeys = CaptureErrorCookiesBlacklist.Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 124.
Long Statement,StackifyLib,Config,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Config.cs,LoadSettings,The length of the statement  "                    ErrorSessionGoodKeys = CaptureErrorSessionWhitelist.Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries).ToList(); " is 125.
Long Statement,StackifyLib,Logger,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Logger.cs,GetCurrentStackTrace,The length of the statement  "                //moves to the part of the trace where the declaring method starts then the other loop gets all the frames. This is to remove frames that happen within the logging library itself. " is 179.
Long Statement,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,SetGauge,The length of the statement  "            var m = new Metric(category' metricName' MetricType.MetricLast) { Value = value' Settings = new MetricSetting() { AutoReportLastValueIfNothingReported = autoResendLastValueIfNothingReported } }; " is 194.
Long Statement,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,Time,The length of the statement  "            StackifyLib.Internal.Metrics.MetricClient.QueueMetric(new Metric(category' metricName' MetricType.CounterTime) { Value = timeTaken.TotalSeconds}); " is 146.
Long Statement,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,CountAndTime,The length of the statement  "            StackifyLib.Internal.Metrics.MetricClient.QueueMetric(new Metric(category' metricName' MetricType.Counter) { Value = 1' Settings = new MetricSetting() {AutoReportZeroIfNothingReported = autoReportZeroIfNothingReported} }); " is 222.
Long Statement,StackifyLib,Metrics,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Metrics.cs,CountAndTime,The length of the statement  "            StackifyLib.Internal.Metrics.MetricClient.QueueMetric(new Metric(category' metricName + " Time"' MetricType.CounterTime) { Value = timeTaken.TotalSeconds }); " is 157.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,Exec,The length of the statement  "                ExecInternalOperation(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' action); " is 213.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,Exec,The length of the statement  "                ExecInternal2(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' action); " is 205.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,ExecAsync,The length of the statement  "                t = ExecInternalOperation<T>(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' task); " is 218.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,ExecAsync,The length of the statement  "                t = ExecInternal2<T>(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' task); " is 210.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,ExecAsync,The length of the statement  "                t = ExecInternalOperation(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' task); " is 215.
Long Statement,StackifyLib,ProfileTracer,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\ProfileTracer.cs,ExecAsync,The length of the statement  "                t = ExecInternal2(_methodDisplayText + "|" + (_ignoreChildFrames ? 1 : 0) + "|" + _requestReportingCategory + "|" + _appReportingCategory + "|" + _transactionId + "|" + _requestId + "|" + IsOperation' task); " is 207.
Long Statement,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,SendLogsByGroups,The length of the statement  "                    return new HttpClient.StackifyWebResponse() { Exception = new Exception("Unable to send logs at this time due to recent error: " + (_HttpClient.LastErrorMessage ?? "")) }; " is 171.
Long Statement,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,SendLogsByGroups,The length of the statement  "                    return new HttpClient.StackifyWebResponse() { Exception = new Exception("Unable to send logs at this time. Unable to identify app") }; " is 134.
Long Statement,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,SendLogsByGroups,The length of the statement  "                string jsonData = JsonConvert.SerializeObject(groups' new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); " is 133.
Long Statement,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The length of the statement  "                        StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds)); " is 129.
Long Statement,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The length of the statement  "                        StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds)); " is 127.
Long Statement,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,FlushOnce,The length of the statement  "                        //do not log our own messages. This is to prevent any sort of recursion that could happen since calling to send this will cause even more logging to happen " is 155.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,GetLatestMetric,The length of the statement  "            foreach (var item in _LastAggregates.Where(x=>x.Value.Category.Equals(category' StringComparison.OrdinalIgnoreCase) && x.Value.Name.Equals(metricName' StringComparison.OrdinalIgnoreCase))) " is 188.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,ReadAllQueuedMetrics,The length of the statement  "                                                //Loop through add sum up the totals of the counts and values by aggregate key then pass it all in at once to update the aggregate dictionary so it is done in one pass " is 167.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,ReadAllQueuedMetrics,The length of the statement  "                    //we are doing it where the aggregates are created so we don't do it one very single metric' just once per batch to optimize performance " is 136.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,ReadAllQueuedMetrics,The length of the statement  "            StackifyLib.Utils.StackifyAPILogger.Log(string.Format("Read queued metrics processed {0} for max date {1}"' processed' maxDate)); " is 129.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The length of the statement  "                var getForRecent = _AggregateMetrics.Where(x => x.Value.OccurredUtc < currentMinute && x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-5)).Select(x=>x.Value).ToList(); " is 169.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The length of the statement  "                    //If something happens at 2:39:45. The OccurredUtc is a rounded down value to 2:39. So we add a minute to ensure the minute has fully elapsed " is 141.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadAggregates,The length of the statement  "                    //in case the appid changes on the server side somehow and we need to update the monitorids we are adding the appid to the key " is 126.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadAggregates,The length of the statement  "                StackifyAPILogger.Log("Metrics not uploaded. Identify Result: " + identifyResult + "' Metrics API Enabled: " + HttpClient.MatchedClientDeviceApp()); " is 148.
Long Statement,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The length of the statement  "                    StackifyAPILogger.Log(string.Format("Uploading metric {0}:{1} Count {2}' Value {3}' ID {4}"' metric.Category' metric.Name' metric.Count' metric.Value' metric.MonitorID)); " is 170.
Long Statement,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,GetEC2InstanceId,The length of the statement  "                    skipEc2InstanceIdUpdate = ec2InstanceIdLastUpdate != null && ec2InstanceIdLastUpdate < DateTimeOffset.UtcNow.Subtract(threshold); " is 129.
Long Statement,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,IsWindowService,The length of the statement  "                string query = "select DisplayName from Win32_Service WHERE ProcessID='" + System.Diagnostics.Process.GetCurrentProcess().Id + "'"; " is 131.
Long Statement,StackifyLib.Models,LogMessage,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\LogMessage.cs,ToString,The length of the statement  "                return message + " " + JsonConvert.SerializeObject(json' new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Serialize}); " is 142.
Long Statement,StackifyLib.Models,Metric,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\MetricsModels.cs,CalcAndSetAggregateKey,The length of the statement  "            this.AggregateKey = Category.ToLower() + "-" + ((Name ?? "Missing Name")).ToLower() + "-" + MetricType.ToString() + "-" + GetRoundedTime().ToString("s"); " is 153.
Long Statement,StackifyLib.Models,MetricAggregate,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\MetricsModels.cs,AggregateKey,The length of the statement  "            return (Category ?? "Missing Category").ToLower() + "-" + ((Name ?? "Missing Name")).ToLower() + "-" + MetricType.ToString() + "-" + OccurredUtc.Floor(TimeSpan.FromMinutes(1)).ToString("s"); " is 190.
Long Statement,StackifyLib.Models,WebRequestDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\WebRequestDetail.cs,AddKey,The length of the statement  "            else if (goodKeys != null && goodKeys.Any() && !goodKeys.Any(x => x.Equals(key' StringComparison.CurrentCultureIgnoreCase))) " is 124.
Long Statement,StackifyLib.Utils,HelperFunctions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HelperFunctions.cs,SerializeDebugData,The length of the statement  "                            if (typeInfo.IsPrimitive || type.Name == "String" || typeInfo.BaseType == typeof(ValueType) || type.Name.Contains("AnonymousType") || type.FullName.Contains("System.Collections.Generic.Dictionary")) " is 198.
Long Statement,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,IdentifyApp,The length of the statement  "                //if we get this far that means it failed more than 5 minutes ago' is the first time' or succeeded more than 15 minutes ago " is 123.
Long Statement,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,IdentifyApp,The length of the statement  "                string jsonData = JsonConvert.SerializeObject(env' new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); " is 130.
Long Statement,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,GetResponseString,The length of the statement  "                        StackifyAPILogger.Log("GetResponseString HTTP Response: " + ((int)response.StatusCode).ToString() + "' Took: " + took + "ms - " + responseData + " " + response.ResponseUri.ToString()' forceLog); " is 194.
Long Statement,StackifyLib.Utils,PrefixOrAPM,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\PrefixOrAPM.cs,GetProfilerType,The length of the statement  "                if (!string.IsNullOrEmpty(stackifyPath) && (stackifyPath.IndexOf("prefix"' StringComparison.CurrentCultureIgnoreCase) > -1 || stackifyPath.IndexOf("devdash"' StringComparison.CurrentCultureIgnoreCase) > -1)) " is 207.
Long Statement,StackifyLib.Utils,StackifyAPILogger,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\StackifyAPILogger.cs,Log,The length of the statement  "                                _loggerDefault = new StreamWriter(new FileStream(DefaultLoggerPathAndFile' FileMode.Append' FileAccess.Write' FileShare.Read)); " is 127.
Complex Conditional,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadAggregates,The conditional expression  "identifyResult && HttpClient.MatchedClientDeviceApp() && !HttpClient.IsRecentError() && HttpClient.IsAuthorized()"  is complex.
Complex Conditional,StackifyLib.Utils,HelperFunctions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HelperFunctions.cs,SerializeDebugData,The conditional expression  "typeInfo.IsPrimitive || type.Name == "String" || typeInfo.BaseType == typeof(ValueType) || type.Name.Contains("AnonymousType") || type.FullName.Contains("System.Collections.Generic.Dictionary")"  is complex.
Empty Catch Block,StackifyLib,StackifyError,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\StackifyError.cs,IgnoreError,The method has an empty catch block.
Empty Catch Block,StackifyLib,StackifyError,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\StackifyError.cs,IgnoreError,The method has an empty catch block.
Empty Catch Block,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,Close,The method has an empty catch block.
Empty Catch Block,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,QueueLogMessage,The method has an empty catch block.
Magic Number,StackifyLib,StackifyError,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\StackifyError.cs,StackifyError,The following statement contains a magic number: TimeSpan ts = errorOccurredUtc.Subtract(new DateTime(1970' 1' 1' 0' 0' 0' 0));
Magic Number,StackifyLib,StackifyError,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\StackifyError.cs,Init,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow.Subtract(new DateTime(1970' 1' 1' 0' 0' 0' 0));
Magic Number,StackifyLib.Internal.Logs,LogClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogClient.cs,SendLogsByGroups,The following statement contains a magic number: try              {                  StackifyAPILogger.Log("Trying to SendLogs");                    EnsureHttpClient();                      var identified = _HttpClient.IdentifyApp();                      if (_HttpClient.IsRecentError())                  {                      return new HttpClient.StackifyWebResponse() { Exception = new Exception("Unable to send logs at this time due to recent error: " + (_HttpClient.LastErrorMessage ?? "")) };                  }                    if (!identified)                  {                      return new HttpClient.StackifyWebResponse() { Exception = new Exception("Unable to send logs at this time. Unable to identify app") };                  }                    var groups = SplitLogsToGroups(messages);                    string jsonData = JsonConvert.SerializeObject(groups' new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore });                                      string urlToUse = (_HttpClient.BaseAPIUrl) + "Log/SaveMultipleGroups";                      if (!_ServicePointSet)                  {  #if NET451 || NET45 || NET40                      ServicePointManager.FindServicePoint(urlToUse' null).ConnectionLimit = 10;  #endif                      _ServicePointSet = true;                  }                    StackifyAPILogger.Log("Sending " + messages.Length.ToString() + " log messages via send multi groups");                  var response =                      _HttpClient.SendJsonAndGetResponse(                          urlToUse'                          jsonData' jsonData.Length > 5000);                    messages = null;                  groups = null;                    return response;                }              catch (Exception ex)              {                  Utils.StackifyAPILogger.Log(ex.ToString());                    return new HttpClient.StackifyWebResponse() { Exception = ex };              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  //remove messages in the queue that are old                  if (!_LogClient.IsAuthorized() && _MessageBuffer.Count > 0)                  {                      var cutoff = (long)DateTime.UtcNow.AddMinutes(-5).Subtract(_Epoch).TotalMilliseconds;                        while (true)                      {                          LogMsg msg;                          if (_MessageBuffer.TryPeek(out msg) && msg.EpochMs < cutoff)                          {                              LogMsg msg2;                              _MessageBuffer.TryDequeue(out msg2);                          }                          else                          {                              break;                          }                      }                        if (_timer != null && !_StopRequested)                      {                          _timer.Change(_FlushInterval' _FlushInterval);                      }                        return;                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #OnTimer failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,OnTimer,The following statement contains a magic number: try              {                  int processedCount = FlushLoop();                    //auto adjust how often we send based on how the rate of which data is being logged                  if (processedCount >= 100)                  {                      if (_FlushInterval.TotalSeconds > 1)                      {                          _FlushInterval = TimeSpan.FromSeconds(_FlushInterval.TotalSeconds / 2);                          StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval down to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }                  else if (processedCount < 10 && _FlushInterval != TimeSpan.FromSeconds(5))                  {                      double proposedSeconds = _FlushInterval.TotalSeconds * 1.25;                        if (proposedSeconds < 1)                      {                          proposedSeconds = 1;                      }                      else if (proposedSeconds > 5)                      {                          proposedSeconds = 5;                      }                        if (_FlushInterval.TotalSeconds < proposedSeconds)                      {                          _FlushInterval = TimeSpan.FromSeconds(proposedSeconds);                            StackifyAPILogger.Log(string.Format("#LogQueue Adjust log flush interval up to {0:0.00} seconds"'_FlushInterval.TotalSeconds));                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #QueueLogMessage failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,FlushLoop,The following statement contains a magic number: try              {                  int queueSize = _MessageBuffer.Count;                    // StackifyLib.Utils.StackifyAPILogger.Log("FlushLoop - count: " + queueSize + " for " + _LogClient.LoggerName);                    //CanSend() does an IdentifyApp so there is a chance this could take a while                  if (queueSize > 0 && _LogClient.CanUpload())                  {                      _QueueTooBig = queueSize < Logger.MaxLogBufferSize;                        bool keepGoing = false;                        int flushTimes = 0;                      //Keep flushing                      do                      {                          int count = FlushOnce();                            if (count >= 100)                          {                              keepGoing = true;                          }                          else                          {                              keepGoing = false;                          }                          flushTimes++;                          processedCount += count;                      } while (keepGoing && flushTimes < 25);                        _QueueTooBig = _MessageBuffer.Count < Logger.MaxLogBufferSize;                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #FlushLoop failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,FlushLoop,The following statement contains a magic number: try              {                  int queueSize = _MessageBuffer.Count;                    // StackifyLib.Utils.StackifyAPILogger.Log("FlushLoop - count: " + queueSize + " for " + _LogClient.LoggerName);                    //CanSend() does an IdentifyApp so there is a chance this could take a while                  if (queueSize > 0 && _LogClient.CanUpload())                  {                      _QueueTooBig = queueSize < Logger.MaxLogBufferSize;                        bool keepGoing = false;                        int flushTimes = 0;                      //Keep flushing                      do                      {                          int count = FlushOnce();                            if (count >= 100)                          {                              keepGoing = true;                          }                          else                          {                              keepGoing = false;                          }                          flushTimes++;                          processedCount += count;                      } while (keepGoing && flushTimes < 25);                        _QueueTooBig = _MessageBuffer.Count < Logger.MaxLogBufferSize;                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #FlushLoop failed"' ex);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,FlushOnce,The following statement contains a magic number: try              {                  while (true)                  {                      LogMsg msg;                      if (_MessageBuffer.TryDequeue(out msg))                      {                          //do not log our own messages. This is to prevent any sort of recursion that could happen since calling to send this will cause even more logging to happen                          if (msg.Msg != null && msg.Msg != null && msg.Msg.Contains("StackifyLib:"))                          {                              //skip!                              continue;                          }                            chunk.Add(msg);                            messageSize++;                            //if we get something newer than when we started reading' break so it doesn't keep reading perpetually.                           //Let it finish so the timer can run again and do a new batch                            if (msg.EpochMs > startMs)                          {                              break;                          }                            //send this packet in a batch                          if (messageSize > 100)                          {                              break;                          }                      }                      else                      {                          break;                      }                  }                    if (chunk.Any())                  {                      var response = _LogClient.SendLogsByGroups(chunk.ToArray());                        if (response != null && response.Exception != null)                      {                          Utils.StackifyAPILogger.Log("Requeueing log messages due to error: " + response.Exception.ToString()' true);                            if (response.IsClientError())                          {                              Utils.StackifyAPILogger.Log("#LogQueue Not requeueing log messages due to client error: " + response.StatusCode' true);                          }                          else                          {                              try                              {                                  bool messagesSentTooManyTimes = EnqueueForRetransmission(chunk);                                    if (messagesSentTooManyTimes)                                  {                                      Utils.StackifyAPILogger.Log("#LogQueue Some messages not queued again due to too many failures uploading");                                  }                              }                              catch (Exception ex2)                              {                                  Utils.StackifyAPILogger.Log("#LogQueue Error trying to requeue messages " + ex2.ToString());                              }                          }                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #FlushOnce failed"' ex);                    EnqueueForRetransmission(chunk);              }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,Stop,The following statement contains a magic number: if (!_UploadingNow)              {                  FlushLoop();              }              else              {                  DateTime stopWaiting = DateTime.UtcNow.AddSeconds(15);                    //wait for it to finish up to 5 seconds                  while (_UploadingNow && DateTime.UtcNow < stopWaiting)                  {                      System.Threading.Thread.Sleep(10);                  }                }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,Stop,The following statement contains a magic number: if (!_UploadingNow)              {                  FlushLoop();              }              else              {                  DateTime stopWaiting = DateTime.UtcNow.AddSeconds(15);                    //wait for it to finish up to 5 seconds                  while (_UploadingNow && DateTime.UtcNow < stopWaiting)                  {                      System.Threading.Thread.Sleep(10);                  }                }
Magic Number,StackifyLib.Internal.Logs,LogQueue,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Logs\LogQueue.cs,EnqueueForRetransmission,The following statement contains a magic number: try              {                  foreach (var item in chunk)                  {                      ++item.UploadErrors;                        // retry up to 5 times                      if (item.UploadErrors < 5)                      {                          _MessageBuffer.Enqueue(item);                      }                      else                      {                          skippedMessage = true;                      }                  }              }              catch (Exception ex)              {                  StackifyAPILogger.Log("#LogQueue #EnqueueForRetransmission failed"' ex);              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,MetricClient,The following statement contains a magic number: _Timer = new Timer(UploadMetricsCheck' null' TimeSpan.FromSeconds(5)' TimeSpan.FromSeconds(5));
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,MetricClient,The following statement contains a magic number: _Timer = new Timer(UploadMetricsCheck' null' TimeSpan.FromSeconds(5)' TimeSpan.FromSeconds(5));
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,QueueMetric,The following statement contains a magic number: try              {                  //set a sanity cap                  if (_MetricQueue.Count < 100000)                  {                      _MetricQueue.Enqueue(metric);                  }              }              catch(Exception ex)              {                  Utils.StackifyAPILogger.Log(ex.ToString());              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,Aggregate,The following statement contains a magic number: try              {                  string aggKey = aggregate.AggregateKey();                    MetricAggregate agg;                  if (!_AggregateMetrics.TryGetValue(aggKey' out agg))                  {                        if (_AggregateMetrics.Count > 1000)                      {                          Utils.StackifyAPILogger.Log("No longer aggregating new metrics because more than 1000 are queued");                          return;                      }                        StackifyAPILogger.Log("Creating aggregate for " + aggKey);                      _AggregateMetrics[aggKey] = aggregate;                      agg = aggregate;                  }                    if (aggregate.MetricType == MetricType.MetricLast)                  {                      agg.Count = 1;                      agg.Value = aggregate.Value;                  }                  else                   {                      agg.Count += aggregate.Count;                      agg.Value += aggregate.Value;                  }                  _AggregateMetrics[aggKey] = agg;                }              catch (Exception ex)              {                    StackifyAPILogger.Log("Error in StackifyLib with aggregating metrics");              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetricsCheck,The following statement contains a magic number: double seconds = 2;
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetricsCheck,The following statement contains a magic number: if (!_StopRequested)              {                  bool allSuccess = false;                  DateTime purgeOlderThan = DateTime.UtcNow.AddMinutes(-10);                    DateTime currentMinute = DateTime.UtcNow.Floor(TimeSpan.FromMinutes(1));                    StackifyAPILogger.Log("Calling UploadMetrics " + currentMinute);                  allSuccess = UploadMetrics(currentMinute);                    PurgeOldMetrics(purgeOlderThan);                    if (_AggregateMetrics.Count > 0 && allSuccess)                  {                      seconds = .1;                  }              }              else              {                  StackifyAPILogger.Log("Metrics processing canceled because stop was requested");              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetricsCheck,The following statement contains a magic number: if (!_StopRequested)              {                  bool allSuccess = false;                  DateTime purgeOlderThan = DateTime.UtcNow.AddMinutes(-10);                    DateTime currentMinute = DateTime.UtcNow.Floor(TimeSpan.FromMinutes(1));                    StackifyAPILogger.Log("Calling UploadMetrics " + currentMinute);                  allSuccess = UploadMetrics(currentMinute);                    PurgeOldMetrics(purgeOlderThan);                    if (_AggregateMetrics.Count > 0 && allSuccess)                  {                      seconds = .1;                  }              }              else              {                  StackifyAPILogger.Log("Metrics processing canceled because stop was requested");              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,StopMetricsQueue,The following statement contains a magic number: try              {                  StackifyAPILogger.Log("StopMetricsQueue called by " + reason' true);                    //don't let t his method run more than once                  if (_StopRequested)                      return;                    _StopRequested = true;                    DateTime currentMinute = DateTime.UtcNow.AddMinutes(2).Floor(TimeSpan.FromMinutes(1));                    UploadMetrics(currentMinute);                    _StopRequested = false;                  StackifyAPILogger.Log("StopMetricsQueue completed" + reason' true);              }              catch (Exception ex)              {                  StackifyAPILogger.Log("StopMetricsQueue error" + ex.ToString()' true);              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The following statement contains a magic number: try              {                  //read everything up to now                  ReadAllQueuedMetrics();                    //ensures all the aggregate keys exists for any previous metrics so we report zeros on no changes                  HandleZeroReports(currentMinute);                                      var getForRecent = _AggregateMetrics.Where(x => x.Value.OccurredUtc < currentMinute && x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-5)).Select(x=>x.Value).ToList();                    SetLatestAggregates(getForRecent);                    //skip messing with HttpClient if nothing to do                  if (_AggregateMetrics.Count == 0)                      return true;                    if (!HttpClient.MatchedClientDeviceApp())                  {                     // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped because we were unable to match the app to an app in Stackify");                  }                  else if (!HttpClient.IsAuthorized())                  {                      // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped authorization failure");                  }                  else if (!HttpClient.IsRecentError())                  {                        //If something happens at 2:39:45. The OccurredUtc is a rounded down value to 2:39. So we add a minute to ensure the minute has fully elapsed                      //We are doing 65 seconds to just a little lag time for queue processing                      //doing metric counters only every 30 seconds.                        metrics =                          _AggregateMetrics.Where(                              x => x.Value.OccurredUtc < currentMinute).Take(50).ToList();                          if (metrics.Count > 0)                      {                                                      //only getting metrics less than 10 minutes old to drop old data in case we get backed up                          //they are removed from the _AggregateMetrics in the upload function upon success                          success =                              UploadAggregates(                                  metrics.Where(x => x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-10)).ToList());                                              }                  }                  else                  {                      StackifyAPILogger.Log("Upload metrics skipped and delayed due to recent error");                   }                }              catch (Exception ex)              {                  success = false;                  StackifyAPILogger.Log("Error uploading metrics " + ex.ToString());                    //if an error put them back in                  try                  {                      metrics.ForEach(x => _AggregateMetrics.TryAdd(x.Key' x.Value));                    }                  catch (Exception ex2)                  {                      StackifyAPILogger.Log("Error adding metrics back to upload list " + ex.ToString());                  }              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The following statement contains a magic number: try              {                  //read everything up to now                  ReadAllQueuedMetrics();                    //ensures all the aggregate keys exists for any previous metrics so we report zeros on no changes                  HandleZeroReports(currentMinute);                                      var getForRecent = _AggregateMetrics.Where(x => x.Value.OccurredUtc < currentMinute && x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-5)).Select(x=>x.Value).ToList();                    SetLatestAggregates(getForRecent);                    //skip messing with HttpClient if nothing to do                  if (_AggregateMetrics.Count == 0)                      return true;                    if (!HttpClient.MatchedClientDeviceApp())                  {                     // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped because we were unable to match the app to an app in Stackify");                  }                  else if (!HttpClient.IsAuthorized())                  {                      // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped authorization failure");                  }                  else if (!HttpClient.IsRecentError())                  {                        //If something happens at 2:39:45. The OccurredUtc is a rounded down value to 2:39. So we add a minute to ensure the minute has fully elapsed                      //We are doing 65 seconds to just a little lag time for queue processing                      //doing metric counters only every 30 seconds.                        metrics =                          _AggregateMetrics.Where(                              x => x.Value.OccurredUtc < currentMinute).Take(50).ToList();                          if (metrics.Count > 0)                      {                                                      //only getting metrics less than 10 minutes old to drop old data in case we get backed up                          //they are removed from the _AggregateMetrics in the upload function upon success                          success =                              UploadAggregates(                                  metrics.Where(x => x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-10)).ToList());                                              }                  }                  else                  {                      StackifyAPILogger.Log("Upload metrics skipped and delayed due to recent error");                   }                }              catch (Exception ex)              {                  success = false;                  StackifyAPILogger.Log("Error uploading metrics " + ex.ToString());                    //if an error put them back in                  try                  {                      metrics.ForEach(x => _AggregateMetrics.TryAdd(x.Key' x.Value));                    }                  catch (Exception ex2)                  {                      StackifyAPILogger.Log("Error adding metrics back to upload list " + ex.ToString());                  }              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The following statement contains a magic number: try              {                  //read everything up to now                  ReadAllQueuedMetrics();                    //ensures all the aggregate keys exists for any previous metrics so we report zeros on no changes                  HandleZeroReports(currentMinute);                                      var getForRecent = _AggregateMetrics.Where(x => x.Value.OccurredUtc < currentMinute && x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-5)).Select(x=>x.Value).ToList();                    SetLatestAggregates(getForRecent);                    //skip messing with HttpClient if nothing to do                  if (_AggregateMetrics.Count == 0)                      return true;                    if (!HttpClient.MatchedClientDeviceApp())                  {                     // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped because we were unable to match the app to an app in Stackify");                  }                  else if (!HttpClient.IsAuthorized())                  {                      // purgeOlderThan = DateTime.UtcNow;                      StackifyAPILogger.Log("Upload metrics skipped authorization failure");                  }                  else if (!HttpClient.IsRecentError())                  {                        //If something happens at 2:39:45. The OccurredUtc is a rounded down value to 2:39. So we add a minute to ensure the minute has fully elapsed                      //We are doing 65 seconds to just a little lag time for queue processing                      //doing metric counters only every 30 seconds.                        metrics =                          _AggregateMetrics.Where(                              x => x.Value.OccurredUtc < currentMinute).Take(50).ToList();                          if (metrics.Count > 0)                      {                                                      //only getting metrics less than 10 minutes old to drop old data in case we get backed up                          //they are removed from the _AggregateMetrics in the upload function upon success                          success =                              UploadAggregates(                                  metrics.Where(x => x.Value.OccurredUtc > DateTime.UtcNow.AddMinutes(-10)).ToList());                                              }                  }                  else                  {                      StackifyAPILogger.Log("Upload metrics skipped and delayed due to recent error");                   }                }              catch (Exception ex)              {                  success = false;                  StackifyAPILogger.Log("Error uploading metrics " + ex.ToString());                    //if an error put them back in                  try                  {                      metrics.ForEach(x => _AggregateMetrics.TryAdd(x.Key' x.Value));                    }                  catch (Exception ex2)                  {                      StackifyAPILogger.Log("Error adding metrics back to upload list " + ex.ToString());                  }              }
Magic Number,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,UploadMetrics,The following statement contains a magic number: try              {                  if (metrics == null || metrics.Count == 0)                      return true;                    //checks are done outside this method before it gets this far to ensure API access is working                    List<SubmitMetricByIDModel> records = new List<SubmitMetricByIDModel>();                    foreach (var metric in metrics)                  {                      SubmitMetricByIDModel model = new SubmitMetricByIDModel();                      model.Value = Math.Round(metric.Value' 2);                      model.MonitorID = metric.MonitorID ?? 0;                      model.OccurredUtc = metric.OccurredUtc;                      model.Count = metric.Count;                      model.MonitorTypeID = (short)metric.MetricType;                        if (HttpClient.AppIdentity != null)                      {                          model.ClientDeviceID = HttpClient.AppIdentity.DeviceID;                      }                        records.Add(model);                        StackifyAPILogger.Log(string.Format("Uploading metric {0}:{1} Count {2}' Value {3}' ID {4}"' metric.Category' metric.Name' metric.Count' metric.Value' metric.MonitorID));                  }                        string jsonData = JsonConvert.SerializeObject(records);                    var response = HttpClient.SendJsonAndGetResponse(                          (HttpClient.BaseAPIUrl) +                          "Metrics/SubmitMetricsByID"'                          jsonData);                      if (response.Exception == null && response.StatusCode == HttpStatusCode.OK)                  {                      return true;                  }                                    if (response.Exception != null)                  {                      StackifyAPILogger.Log("Error saving metrics " + response.Exception.Message);                      }                    return false;              }              catch (Exception e)              {                  StackifyAPILogger.Log("Error saving metrics " + e.Message);                  return false;              }
Magic Number,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,GetEC2InstanceId,The following statement contains a magic number: try              {                    using (var client = new System.Net.Http.HttpClient())                  {                      client.Timeout = TimeSpan.FromSeconds(5);                      var content = await client.GetAsync(EC2InstanceIdUrl);                        int statusCode = (int)content.StatusCode;                        if (statusCode >= 200 && statusCode < 300)                      {                          string id = await content.Content.ReadAsStringAsync();                          r = string.IsNullOrWhiteSpace(id) ? null : id;                      }                  }                }              catch // if not in aws this will timeout              {                  r = null;              }
Magic Number,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,GetEC2InstanceId,The following statement contains a magic number: try              {                    using (var client = new System.Net.Http.HttpClient())                  {                      client.Timeout = TimeSpan.FromSeconds(5);                      var content = await client.GetAsync(EC2InstanceIdUrl);                        int statusCode = (int)content.StatusCode;                        if (statusCode >= 200 && statusCode < 300)                      {                          string id = await content.Content.ReadAsStringAsync();                          r = string.IsNullOrWhiteSpace(id) ? null : id;                      }                  }                }              catch // if not in aws this will timeout              {                  r = null;              }
Magic Number,StackifyLib.Models,EnvironmentDetail,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Models\EnvironmentDetail.cs,GetEC2InstanceId,The following statement contains a magic number: try              {                    using (var client = new System.Net.Http.HttpClient())                  {                      client.Timeout = TimeSpan.FromSeconds(5);                      var content = await client.GetAsync(EC2InstanceIdUrl);                        int statusCode = (int)content.StatusCode;                        if (statusCode >= 200 && statusCode < 300)                      {                          string id = await content.Content.ReadAsStringAsync();                          r = string.IsNullOrWhiteSpace(id) ? null : id;                      }                  }                }              catch // if not in aws this will timeout              {                  r = null;              }
Magic Number,StackifyLib.Utils,DateExtensions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\DateExtensions.cs,Round,The following statement contains a magic number: long ticks = (date.Ticks + (span.Ticks / 2) + 1) / span.Ticks;
Magic Number,StackifyLib.Utils,DateExtensions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\DateExtensions.cs,ToUnixEpoch,The following statement contains a magic number: return (date.Ticks - 621355968000000000) / 10000000;
Magic Number,StackifyLib.Utils,DateExtensions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\DateExtensions.cs,ToUnixEpoch,The following statement contains a magic number: return (date.Ticks - 621355968000000000) / 10000000;
Magic Number,StackifyLib.Utils,DateExtensions,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\DateExtensions.cs,ToUnixEpochMinutes,The following statement contains a magic number: return date.ToUnixEpoch() / 60;
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,HttpClient,The following statement contains a magic number: _LastIdentityAttempt = DateTime.UtcNow.AddMinutes(-15);
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,CalcNextTryOnError,The following statement contains a magic number: if (_LastError == null)              {                  //let the next one go                  _NextTry = DateTime.UtcNow;              }              else              {                  TimeSpan sinceLastError = DateTime.UtcNow.Subtract(_LastError.Value);                    if (sinceLastError < TimeSpan.FromSeconds(1))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(1);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(2))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(2);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(3))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(3);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(4))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(4);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(5))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(5);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(10))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(10);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(20))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(20);                  }                  else if (sinceLastError < TimeSpan.FromSeconds(30))                  {                      _NextTry = DateTime.UtcNow.AddSeconds(30);                  }                  else                  {                      _NextTry = DateTime.UtcNow.AddMinutes(1);                  }              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,IsAuthorized,The following statement contains a magic number: return ts.TotalMinutes > 5;
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,IdentifyApp,The following statement contains a magic number: try              {                  int waitTime = 5; //check every 5                    //was successful before and we know the appid                  if (this.AppIdentity != null && this.AppIdentity.DeviceAppID.HasValue)                  {                      waitTime = 15; //refresh every 15                  }                      if (_LastIdentityAttempt.AddMinutes(waitTime) > DateTime.UtcNow)                  {                      return currentIdentityStatus;                  }                    //if we get this far that means it failed more than 5 minutes ago' is the first time' or succeeded more than 15 minutes ago                      if (string.IsNullOrEmpty(APIKey))                  {                      StackifyAPILogger.Log("Skipping IdentifyApp(). No APIKey configured."' true);                      return false;                  }                  StackifyAPILogger.Log("Calling to Identify App");                  EnvironmentDetail env = EnvironmentDetail.Get(true);                  string jsonData = JsonConvert.SerializeObject(env' new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore });                    var response =                      SendJsonAndGetResponse(                          (BaseAPIUrl) + "Metrics/IdentifyApp"' jsonData);                    if (response.Exception == null && response.StatusCode == HttpStatusCode.OK)                  {                      _LastIdentityAttempt = DateTime.UtcNow;                        AppIdentity = JsonConvert.DeserializeObject<AppIdentityInfo>(response.ResponseText);                        if (AppIdentity != null)                      {                          //always use whatever the configured app name is' don't just use what comes back in case they don't match                          if (!string.IsNullOrEmpty(env.ConfiguredAppName) && env.ConfiguredAppName != AppIdentity.AppName)                          {                              AppIdentity.AppName = env.ConfiguredAppName;                              AppIdentity.AppNameID = null;                              AppIdentity.AppEnvID = null;                          }                            IdentityComplete = true;                          return true;                      }                  }                    return currentIdentityStatus;              }              catch (Exception ex)              {                  _LastIdentityAttempt = DateTime.UtcNow;                    StackifyAPILogger.Log("IdentifyApp() HTTP Response Error: " + ex.ToString()' true);                    return currentIdentityStatus;              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,IdentifyApp,The following statement contains a magic number: try              {                  int waitTime = 5; //check every 5                    //was successful before and we know the appid                  if (this.AppIdentity != null && this.AppIdentity.DeviceAppID.HasValue)                  {                      waitTime = 15; //refresh every 15                  }                      if (_LastIdentityAttempt.AddMinutes(waitTime) > DateTime.UtcNow)                  {                      return currentIdentityStatus;                  }                    //if we get this far that means it failed more than 5 minutes ago' is the first time' or succeeded more than 15 minutes ago                      if (string.IsNullOrEmpty(APIKey))                  {                      StackifyAPILogger.Log("Skipping IdentifyApp(). No APIKey configured."' true);                      return false;                  }                  StackifyAPILogger.Log("Calling to Identify App");                  EnvironmentDetail env = EnvironmentDetail.Get(true);                  string jsonData = JsonConvert.SerializeObject(env' new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore });                    var response =                      SendJsonAndGetResponse(                          (BaseAPIUrl) + "Metrics/IdentifyApp"' jsonData);                    if (response.Exception == null && response.StatusCode == HttpStatusCode.OK)                  {                      _LastIdentityAttempt = DateTime.UtcNow;                        AppIdentity = JsonConvert.DeserializeObject<AppIdentityInfo>(response.ResponseText);                        if (AppIdentity != null)                      {                          //always use whatever the configured app name is' don't just use what comes back in case they don't match                          if (!string.IsNullOrEmpty(env.ConfiguredAppName) && env.ConfiguredAppName != AppIdentity.AppName)                          {                              AppIdentity.AppName = env.ConfiguredAppName;                              AppIdentity.AppNameID = null;                              AppIdentity.AppEnvID = null;                          }                            IdentityComplete = true;                          return true;                      }                  }                    return currentIdentityStatus;              }              catch (Exception ex)              {                  _LastIdentityAttempt = DateTime.UtcNow;                    StackifyAPILogger.Log("IdentifyApp() HTTP Response Error: " + ex.ToString()' true);                    return currentIdentityStatus;              }
Magic Number,StackifyLib.Utils,HttpClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\HttpClient.cs,GetResponseString,The following statement contains a magic number: try              {                    using (var responseStream = response.GetResponseStream())                  {                      if (responseStream == null || !responseStream.CanRead)                          return null;                        using (var sr = new StreamReader(responseStream))                      {                          string responseData = sr.ReadToEnd();                          long took = (long)DateTime.UtcNow.Subtract(started).TotalMilliseconds;                            bool forceLog = ((int)response.StatusCode) > 400;                            StackifyAPILogger.Log("GetResponseString HTTP Response: " + ((int)response.StatusCode).ToString() + "' Took: " + took + "ms - " + responseData + " " + response.ResponseUri.ToString()' forceLog);                          return responseData;                      }                  }                }              catch (Exception ex)              {                  StackifyAPILogger.Log("HTTP Response Error: " + ex.ToString() + " " + response.ResponseUri.ToString()' true);                  LastErrorMessage = ex.Message;                  CalcNextTryOnError();                  return null;              }
Magic Number,StackifyLib.Utils,PrefixOrAPM,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\PrefixOrAPM.cs,GetProfilerType,The following statement contains a magic number: string instanceID = Left(Environment.GetEnvironmentVariable("WEBSITE_INSTANCE_ID")' 6);
Missing Default,StackifyLib.Internal.Metrics,MetricClient,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Internal\Metrics\MetricClient.cs,HandleZeroReports,The following switch statement is missing a default case: switch (item.Value.MetricType)                      {                          case MetricType.Counter:                              setting.AutoReportLastValueIfNothingReported = false;//do not allow this                              break;                          case MetricType.CounterTime:                              setting.AutoReportLastValueIfNothingReported = false; //do not allow this                              break;                          case MetricType.MetricAverage:                              break;                          case MetricType.MetricLast:                              break;                      }
Missing Default,StackifyLib.Utils,PrefixOrAPM,C:\repos\stackify_stackify-api-dotnet\Src\StackifyLib\Utils\PrefixOrAPM.cs,GetProfilerType,The following switch statement is missing a default case: switch (process?.ProcessName?.ToLower().Replace(".vshost"' ""))                              {                                  case "devdashservice":                                  case "stackifytracerservice":                                  case "stackifytracernotifier":                                  case "devdashtestconsole":                                      _LastProfilerType = ProfilerType.Prefix;                                      foundProcess = true;                                      break;                                  case "stackifymonitoringservice":                                  case "monitortestconsole":                                      if(_LastProfilerType != ProfilerType.Prefix)                                          _LastProfilerType = ProfilerType.APM;                                      foundProcess = true;                                      break;                              }
