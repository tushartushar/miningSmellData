Implementation smell,Namespace,Class,File,Method,Description
Magic Number,MultiThreading,MainScreen_iPhone,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Screens\MainScreen_iPhone.cs,ViewDidLoad,The following statement contains a magic number: this.StartBackgroundTaskButton.TouchUpInside += (sender' e) => {    				// show the loading overlay on the UI thread  				this._loadPop = new LoadingOverlay (UIScreen.MainScreen.Bounds);  				this.View.Add ( this._loadPop );    				// spin up a new thread to do some long running work using StartNew  				Task.Factory.StartNew (  					// tasks allow you to use the lambda syntax to pass work  					() => {  						Console.WriteLine ( "Hello from taskA." );  						LongRunningProcess(2);  					}  				// ContinueWith allows you to specify an action that runs after the previous thread  				// completes  				//   				// By using TaskScheduler.FromCurrentSyncrhonizationContext' we can make sure that   				// this task now runs on the original calling thread' in this case the UI thread  				// so that any UI updates are safe. in this example' we want to hide our overlay'   				// but we don't want to update the UI from a background thread.  				).ContinueWith (   					t => {  						this._loadPop.Hide ();  						Console.WriteLine ( "Finished' hiding our loading overlay from the UI thread." );  					}' TaskScheduler.FromCurrentSynchronizationContext()  				);      				// Output a message from the original thread. note that this executes before  				// the background thread has finished.  				Console.WriteLine("Hello from the calling thread.");  			};
Magic Number,MultiThreading,MainScreen_iPhone,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Screens\MainScreen_iPhone.cs,ViewDidLoad,The following statement contains a magic number: this.StartBackgroundTaskNoUpdateButton.TouchUpInside += (sender' e) => {  				var TaskA = new Task ( () => { LongRunningProcess (5); } );  				var TaskB = new Task ( () => { LongRunningProcess (4); } );    				TaskA.Start ();  				TaskB.Start ();  			};
Magic Number,MultiThreading,MainScreen_iPhone,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Screens\MainScreen_iPhone.cs,ViewDidLoad,The following statement contains a magic number: this.StartBackgroundTaskNoUpdateButton.TouchUpInside += (sender' e) => {  				var TaskA = new Task ( () => { LongRunningProcess (5); } );  				var TaskB = new Task ( () => { LongRunningProcess (4); } );    				TaskA.Start ();  				TaskB.Start ();  			};
Magic Number,MultiThreading,MainScreen_iPhone,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Screens\MainScreen_iPhone.cs,LongRunningProcess,The following statement contains a magic number: System.Threading.Thread.Sleep ( seconds * 1000 );
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: Alpha = 0.75f;
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: float labelHeight = 22;
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: nfloat labelWidth = Frame.Width - 20;
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: nfloat centerX = Frame.Width / 2;
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: nfloat centerY = Frame.Height / 2;
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: activitySpinner.Frame = new CGRect (   				centerX - (activitySpinner.Frame.Width / 2) '  				centerY - activitySpinner.Frame.Height - 20 '  				activitySpinner.Frame.Width '  				activitySpinner.Frame.Height);
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: activitySpinner.Frame = new CGRect (   				centerX - (activitySpinner.Frame.Width / 2) '  				centerY - activitySpinner.Frame.Height - 20 '  				activitySpinner.Frame.Width '  				activitySpinner.Frame.Height);
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: loadingLabel = new UILabel(new CGRect (  				centerX - (labelWidth / 2)'  				centerY + 20 '  				labelWidth '  				labelHeight  				));
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,LoadingOverlay,The following statement contains a magic number: loadingLabel = new UILabel(new CGRect (  				centerX - (labelWidth / 2)'  				centerY + 20 '  				labelWidth '  				labelHeight  				));
Magic Number,MultiThreading.Controls,LoadingOverlay,D:\research\architectureSmells\repos\xamarin_mobile-samples\MultiThreading\iOSMultiThreading\Controls\LoadingOverlay.cs,Hide,The following statement contains a magic number: UIView.Animate (   				0.5' // duration  				() => { Alpha = 0; }'   				() => { RemoveFromSuperview(); }  			);
