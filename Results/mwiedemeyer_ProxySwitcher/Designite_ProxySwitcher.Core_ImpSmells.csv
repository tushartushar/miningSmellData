Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The method has 157 lines of code.
Complex Method,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,Cyclomatic complexity of the method is 57
Long Parameter List,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,GetPrePopulatedNetworkMethods,The method has 6 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanQueryInterface,The method has 7 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanSetInterface,The method has 6 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanScan,The method has 5 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanGetAvailableNetworkList,The method has 5 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanSetProfile,The method has 8 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanGetProfile,The method has 7 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanRegisterNotification,The method has 7 parameters.
Long Parameter List,ProxySwitcher.Core.NativeWifi,Wlan,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\Interop.cs,WlanGetNetworkBssList,The method has 7 parameters.
Long Statement,ProxySwitcher.Core,LocationManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\LocationManager.cs,Init,The length of the statement  "	if (!SettingsManager.Instance.GetApplicationSetting (SettingsManager.App_UseWin7LocationAPI' SettingsManager.Default_UseWin7LocationAPI)) " is 137.
Long Statement,ProxySwitcher.Core,LocationManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\LocationManager.cs,EnsureIfAvailable,The length of the statement  "	Logger.Log (String.Format ("Location Watcher Permission: {0} Status: {1}"' watcher.Permission.ToString ()' watcher.Status.ToString ())); " is 136.
Long Statement,ProxySwitcher.Core,LocationManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\LocationManager.cs,watcher_PositionChanged,The length of the statement  "	Logger.Log (String.Format ("Position changed: Unknown: {2}' Lat: {0}' Long: {1}"' e.Position.Location.Latitude.ToString ()' e.Position.Location.Longitude.ToString ()' e.Position.Location.IsUnknown)); " is 199.
Long Statement,ProxySwitcher.Core,NetworkConfiguration,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\NetworkConfiguration.cs,CreateNewNetworkConfiguration,The length of the statement  "	NetworkManager.GetPrePopulatedNetworkMethods (out wlanSSID' out gateway' out gatewayMAC' out dnsSuffix' out ip' out location); " is 126.
Long Statement,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The length of the statement  "		uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]); " is 135.
Long Statement,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The length of the statement  "		bool stopAfterFirstMatch = SettingsManager.Instance.GetApplicationSetting (SettingsManager.App_StopAfterFirstNetworkMatch' SettingsManager.Default_StopAfterFirstNetworkMatch); " is 175.
Long Statement,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The length of the statement  "		var allActiveInterfaces = NetworkInterface.GetAllNetworkInterfaces ().Where (p => p.OperationalStatus == System.Net.NetworkInformation.OperationalStatus.Up); " is 157.
Long Statement,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The length of the statement  "				var val = RegistryHelper.GetValue (@"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\IDConfigDB\CurrentDockInfo"' "DockingState"); " is 134.
Long Statement,ProxySwitcher.Core,SettingsManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Settings\SettingsManager.cs,GetSettingsFolderLocal,The length of the statement  "	string path = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' "ProxySwitcher\\V3"); " is 120.
Long Statement,ProxySwitcher.Core.NativeWifi,WlanClient,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\WlanApi.cs,ParseWlanConnectionNotification,The length of the statement  "	Wlan.WlanConnectionNotificationData connNotifyData = (Wlan.WlanConnectionNotificationData)Marshal.PtrToStructure (notifyData.dataPtr' typeof(Wlan.WlanConnectionNotificationData)); " is 179.
Long Statement,ProxySwitcher.Core.NativeWifi,WlanClient,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\WlanApi.cs,ParseWlanConnectionNotification,The length of the statement  "		IntPtr profileXmlPtr = new IntPtr (notifyData.dataPtr.ToInt64 () + Marshal.OffsetOf (typeof(Wlan.WlanConnectionNotificationData)' "profileXml").ToInt64 ()); " is 156.
Empty Catch Block,ProxySwitcher.Core,Logger,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Logger.cs,Log,The method has an empty catch block.
Empty Catch Block,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The method has an empty catch block.
Magic Number,ProxySwitcher.Core,LocationManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\LocationManager.cs,Init,The following statement contains a magic number: watcher.TryStart (false' TimeSpan.FromMilliseconds (1000));  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: try {  	byte[] mac = new byte[6];  	uint len = (uint)mac.Length;  	byte[] addressBytes = address.GetAddressBytes ();  	uint dest = ((uint)addressBytes [3] << 24) + ((uint)addressBytes [2] << 16) + ((uint)addressBytes [1] << 8) + ((uint)addressBytes [0]);  	if (SendARP (dest' 0' mac' ref len) != 0) {  		return string.Empty;  	}  	string macString = string.Empty;  	foreach (var m in mac) {  		var s = Convert.ToString (m' 16).ToUpper ();  		s = s.Length == 2 ? s : "0" + s;  		macString += s + ":";  	}  	return macString.TrimEnd (':');  }  catch {  	return string.Empty;  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: foreach (var m in mac) {  	var s = Convert.ToString (m' 16).ToUpper ();  	s = s.Length == 2 ? s : "0" + s;  	macString += s + ":";  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: foreach (var m in mac) {  	var s = Convert.ToString (m' 16).ToUpper ();  	s = s.Length == 2 ? s : "0" + s;  	macString += s + ":";  }  
Magic Number,ProxySwitcher.Core,ARPRequest,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\ARPRequest.cs,GetMacAddress,The following statement contains a magic number: s = s.Length == 2 ? s : "0" + s;  
Magic Number,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The following statement contains a magic number: try {  	semaphore.WaitOne ();  	bool atLeastOneFound = false;  	bool stopAfterFirstMatch = SettingsManager.Instance.GetApplicationSetting (SettingsManager.App_StopAfterFirstNetworkMatch' SettingsManager.Default_StopAfterFirstNetworkMatch);  	var allActiveInterfaces = NetworkInterface.GetAllNetworkInterfaces ().Where (p => p.OperationalStatus == System.Net.NetworkInformation.OperationalStatus.Up);  	foreach (var nc in SettingsManager.Instance.GetNetworkConfigurations (true)) {  		if (nc.IsUnknownNetwork)  			continue;  		#region Network  		foreach (NetworkInterface ni in allActiveInterfaces) {  			if (nc.IsNetworkInterfaceDependend && nc.NetworkInterfaceId != ni.Id)  				continue;  			bool found = false;  			switch (nc.Method) {  			case NetworkConfigurationMethod.DNSSuffix:  				if (ni.GetIPProperties ().DnsSuffix.ToUpper ().Contains (nc.Query.ToUpper ())) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  				}  				break;  			case NetworkConfigurationMethod.Gateway:  				foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  					if (gi.Address.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  						ActivateNetworkConfiguration (nc);  						found = true;  						atLeastOneFound = true;  						break;  					}  				}  				break;  			case NetworkConfigurationMethod.GatewayMAC:  				foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  					var mac = ARPRequest.GetMacAddress (gi.Address);  					if (mac.ToUpper ().Contains (nc.Query.ToUpper ())) {  						ActivateNetworkConfiguration (nc);  						found = true;  						atLeastOneFound = true;  						break;  					}  				}  				break;  			case NetworkConfigurationMethod.WLANSSID:  				string wlanSSID = WlanManager.GetCurrentSSID ();  				if (wlanSSID.ToUpper ().Contains (nc.Query.ToUpper ())) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  				}  				break;  			case NetworkConfigurationMethod.WLANAvailable:  				if (WlanManager.IsSSIDAvailable (nc.Query)) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  				}  				break;  			case NetworkConfigurationMethod.IP:  				string hostName = Dns.GetHostName ();  				IPHostEntry ipEntry = Dns.GetHostEntry (hostName);  				foreach (var item in ipEntry.AddressList) {  					if (item.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  						ActivateNetworkConfiguration (nc);  						found = true;  						atLeastOneFound = true;  						break;  					}  				}  				break;  			case NetworkConfigurationMethod.ServerAvailable:  				try {  					var repl = new Ping ().Send (nc.Query' 5000);  					if (repl.Status == IPStatus.Success) {  						ActivateNetworkConfiguration (nc);  						found = true;  						atLeastOneFound = true;  					}  				}  				catch (PingException) {  				}  				break;  			default:  				break;  			}  			if (found)  				break;  		}  		#endregion  		#region DockingState  		// no network matched' try docking state  		if (!atLeastOneFound) {  			if (nc.Method != NetworkConfigurationMethod.DockingStationState)  				continue;  			var val = RegistryHelper.GetValue (@"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\IDConfigDB\CurrentDockInfo"' "DockingState");  			if (val != null) {  				//0 = Workstation or Server' 1 = Undocked Laptop' 2 = Docked Laptop  				var dockState = val.ToString ();  				if (nc.Query == "1" && dockState == "2") {  					ActivateNetworkConfiguration (nc);  					atLeastOneFound = true;  				}  			}  		}  		#endregion  		#region Location  		// no network matched' try location  		if (!atLeastOneFound) {  			if (nc.Method != NetworkConfigurationMethod.Location)  				continue;  			if (locationManager == null)  				continue;  			var queryArray = nc.Query.Split (''');  			var currentLocation = locationManager.GetCurrentLocation ();  			if (currentLocation == null)  				continue;  			int allQueries = queryArray.Length;  			int queriesFound = 0;  			foreach (var query in queryArray) {  				foreach (var locPart in currentLocation) {  					if (locPart.Trim ().ToUpper ().Contains (query.Trim ().ToUpper ())) {  						queriesFound++;  						break;  					}  				}  			}  			if (allQueries == queriesFound) {  				ActivateNetworkConfiguration (nc);  				atLeastOneFound = true;  			}  		}  		#endregion  		if (atLeastOneFound && stopAfterFirstMatch)  			break;  	}  	// nothing found' activate "Unknown Network"  	if (!atLeastOneFound) {  		var unknown = SettingsManager.Instance.GetNetworkConfiguration (SwitcherActionBase.DeactivateNetworkId);  		ActivateNetworkConfiguration (unknown);  	}  }  catch (Exception ex) {  	Logger.Log (ex.Message' ex);  	error = true;  }  finally {  	semaphore.Release ();  	Logger.Log ("RedetectNetwork completed");  	if (error)  		OnRedetectNetworkStatusChanged (NetworkChangeStatus.Error);  	else  		OnRedetectNetworkStatusChanged (NetworkChangeStatus.Completed);  }  
Magic Number,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The following statement contains a magic number: foreach (var nc in SettingsManager.Instance.GetNetworkConfigurations (true)) {  	if (nc.IsUnknownNetwork)  		continue;  	#region Network  	foreach (NetworkInterface ni in allActiveInterfaces) {  		if (nc.IsNetworkInterfaceDependend && nc.NetworkInterfaceId != ni.Id)  			continue;  		bool found = false;  		switch (nc.Method) {  		case NetworkConfigurationMethod.DNSSuffix:  			if (ni.GetIPProperties ().DnsSuffix.ToUpper ().Contains (nc.Query.ToUpper ())) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  			}  			break;  		case NetworkConfigurationMethod.Gateway:  			foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  				if (gi.Address.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  					break;  				}  			}  			break;  		case NetworkConfigurationMethod.GatewayMAC:  			foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  				var mac = ARPRequest.GetMacAddress (gi.Address);  				if (mac.ToUpper ().Contains (nc.Query.ToUpper ())) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  					break;  				}  			}  			break;  		case NetworkConfigurationMethod.WLANSSID:  			string wlanSSID = WlanManager.GetCurrentSSID ();  			if (wlanSSID.ToUpper ().Contains (nc.Query.ToUpper ())) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  			}  			break;  		case NetworkConfigurationMethod.WLANAvailable:  			if (WlanManager.IsSSIDAvailable (nc.Query)) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  			}  			break;  		case NetworkConfigurationMethod.IP:  			string hostName = Dns.GetHostName ();  			IPHostEntry ipEntry = Dns.GetHostEntry (hostName);  			foreach (var item in ipEntry.AddressList) {  				if (item.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  					break;  				}  			}  			break;  		case NetworkConfigurationMethod.ServerAvailable:  			try {  				var repl = new Ping ().Send (nc.Query' 5000);  				if (repl.Status == IPStatus.Success) {  					ActivateNetworkConfiguration (nc);  					found = true;  					atLeastOneFound = true;  				}  			}  			catch (PingException) {  			}  			break;  		default:  			break;  		}  		if (found)  			break;  	}  	#endregion  	#region DockingState  	// no network matched' try docking state  	if (!atLeastOneFound) {  		if (nc.Method != NetworkConfigurationMethod.DockingStationState)  			continue;  		var val = RegistryHelper.GetValue (@"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\IDConfigDB\CurrentDockInfo"' "DockingState");  		if (val != null) {  			//0 = Workstation or Server' 1 = Undocked Laptop' 2 = Docked Laptop  			var dockState = val.ToString ();  			if (nc.Query == "1" && dockState == "2") {  				ActivateNetworkConfiguration (nc);  				atLeastOneFound = true;  			}  		}  	}  	#endregion  	#region Location  	// no network matched' try location  	if (!atLeastOneFound) {  		if (nc.Method != NetworkConfigurationMethod.Location)  			continue;  		if (locationManager == null)  			continue;  		var queryArray = nc.Query.Split (''');  		var currentLocation = locationManager.GetCurrentLocation ();  		if (currentLocation == null)  			continue;  		int allQueries = queryArray.Length;  		int queriesFound = 0;  		foreach (var query in queryArray) {  			foreach (var locPart in currentLocation) {  				if (locPart.Trim ().ToUpper ().Contains (query.Trim ().ToUpper ())) {  					queriesFound++;  					break;  				}  			}  		}  		if (allQueries == queriesFound) {  			ActivateNetworkConfiguration (nc);  			atLeastOneFound = true;  		}  	}  	#endregion  	if (atLeastOneFound && stopAfterFirstMatch)  		break;  }  
Magic Number,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The following statement contains a magic number: foreach (NetworkInterface ni in allActiveInterfaces) {  	if (nc.IsNetworkInterfaceDependend && nc.NetworkInterfaceId != ni.Id)  		continue;  	bool found = false;  	switch (nc.Method) {  	case NetworkConfigurationMethod.DNSSuffix:  		if (ni.GetIPProperties ().DnsSuffix.ToUpper ().Contains (nc.Query.ToUpper ())) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  		}  		break;  	case NetworkConfigurationMethod.Gateway:  		foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  			if (gi.Address.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  				break;  			}  		}  		break;  	case NetworkConfigurationMethod.GatewayMAC:  		foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  			var mac = ARPRequest.GetMacAddress (gi.Address);  			if (mac.ToUpper ().Contains (nc.Query.ToUpper ())) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  				break;  			}  		}  		break;  	case NetworkConfigurationMethod.WLANSSID:  		string wlanSSID = WlanManager.GetCurrentSSID ();  		if (wlanSSID.ToUpper ().Contains (nc.Query.ToUpper ())) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  		}  		break;  	case NetworkConfigurationMethod.WLANAvailable:  		if (WlanManager.IsSSIDAvailable (nc.Query)) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  		}  		break;  	case NetworkConfigurationMethod.IP:  		string hostName = Dns.GetHostName ();  		IPHostEntry ipEntry = Dns.GetHostEntry (hostName);  		foreach (var item in ipEntry.AddressList) {  			if (item.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  				break;  			}  		}  		break;  	case NetworkConfigurationMethod.ServerAvailable:  		try {  			var repl = new Ping ().Send (nc.Query' 5000);  			if (repl.Status == IPStatus.Success) {  				ActivateNetworkConfiguration (nc);  				found = true;  				atLeastOneFound = true;  			}  		}  		catch (PingException) {  		}  		break;  	default:  		break;  	}  	if (found)  		break;  }  
Magic Number,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The following statement contains a magic number: switch (nc.Method) {  case NetworkConfigurationMethod.DNSSuffix:  	if (ni.GetIPProperties ().DnsSuffix.ToUpper ().Contains (nc.Query.ToUpper ())) {  		ActivateNetworkConfiguration (nc);  		found = true;  		atLeastOneFound = true;  	}  	break;  case NetworkConfigurationMethod.Gateway:  	foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  		if (gi.Address.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  			break;  		}  	}  	break;  case NetworkConfigurationMethod.GatewayMAC:  	foreach (GatewayIPAddressInformation gi in ni.GetIPProperties ().GatewayAddresses) {  		var mac = ARPRequest.GetMacAddress (gi.Address);  		if (mac.ToUpper ().Contains (nc.Query.ToUpper ())) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  			break;  		}  	}  	break;  case NetworkConfigurationMethod.WLANSSID:  	string wlanSSID = WlanManager.GetCurrentSSID ();  	if (wlanSSID.ToUpper ().Contains (nc.Query.ToUpper ())) {  		ActivateNetworkConfiguration (nc);  		found = true;  		atLeastOneFound = true;  	}  	break;  case NetworkConfigurationMethod.WLANAvailable:  	if (WlanManager.IsSSIDAvailable (nc.Query)) {  		ActivateNetworkConfiguration (nc);  		found = true;  		atLeastOneFound = true;  	}  	break;  case NetworkConfigurationMethod.IP:  	string hostName = Dns.GetHostName ();  	IPHostEntry ipEntry = Dns.GetHostEntry (hostName);  	foreach (var item in ipEntry.AddressList) {  		if (item.ToString ().ToUpper ().Contains (nc.Query.ToUpper ())) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  			break;  		}  	}  	break;  case NetworkConfigurationMethod.ServerAvailable:  	try {  		var repl = new Ping ().Send (nc.Query' 5000);  		if (repl.Status == IPStatus.Success) {  			ActivateNetworkConfiguration (nc);  			found = true;  			atLeastOneFound = true;  		}  	}  	catch (PingException) {  	}  	break;  default:  	break;  }  
Magic Number,ProxySwitcher.Core,NetworkManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Network\NetworkManager.cs,InternalRedetectNetwork,The following statement contains a magic number: try {  	var repl = new Ping ().Send (nc.Query' 5000);  	if (repl.Status == IPStatus.Success) {  		ActivateNetworkConfiguration (nc);  		found = true;  		atLeastOneFound = true;  	}  }  catch (PingException) {  }  
Magic Number,ProxySwitcher.Core,SettingsManager,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\Settings\SettingsManager.cs,settingsWatcher_Changed,The following statement contains a magic number: Thread.Sleep (2000);  
Missing Default,ProxySwitcher.Core.NativeWifi,WlanClient,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch (notifyData.notificationSource) {  case Wlan.WlanNotificationSource.ACM:  	switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode) {  	case Wlan.WlanNotificationCodeAcm.ConnectionStart:  	case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  	case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  	case Wlan.WlanNotificationCodeAcm.Disconnecting:  	case Wlan.WlanNotificationCodeAcm.Disconnected:  		Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue)  			if (wlanIface != null)  				wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	case Wlan.WlanNotificationCodeAcm.ScanFail:  		{  			int expectedSize = Marshal.SizeOf (typeof(int));  			if (notifyData.dataSize >= expectedSize) {  				Wlan.WlanReasonCode reasonCode = (Wlan.WlanReasonCode)Marshal.ReadInt32 (notifyData.dataPtr);  				if (wlanIface != null)  					wlanIface.OnWlanReason (notifyData' reasonCode);  			}  		}  		break;  	}  	break;  case Wlan.WlanNotificationSource.MSM:  	switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode) {  	case Wlan.WlanNotificationCodeMsm.Associating:  	case Wlan.WlanNotificationCodeMsm.Associated:  	case Wlan.WlanNotificationCodeMsm.Authenticating:  	case Wlan.WlanNotificationCodeMsm.Connected:  	case Wlan.WlanNotificationCodeMsm.RoamingStart:  	case Wlan.WlanNotificationCodeMsm.RoamingEnd:  	case Wlan.WlanNotificationCodeMsm.Disassociating:  	case Wlan.WlanNotificationCodeMsm.Disconnected:  	case Wlan.WlanNotificationCodeMsm.PeerJoin:  	case Wlan.WlanNotificationCodeMsm.PeerLeave:  	case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  		Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue)  			if (wlanIface != null)  				wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	}  	break;  }  
Missing Default,ProxySwitcher.Core.NativeWifi,WlanClient,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode) {  case Wlan.WlanNotificationCodeAcm.ConnectionStart:  case Wlan.WlanNotificationCodeAcm.ConnectionComplete:  case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:  case Wlan.WlanNotificationCodeAcm.Disconnecting:  case Wlan.WlanNotificationCodeAcm.Disconnected:  	Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue)  		if (wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  case Wlan.WlanNotificationCodeAcm.ScanFail:  	{  		int expectedSize = Marshal.SizeOf (typeof(int));  		if (notifyData.dataSize >= expectedSize) {  			Wlan.WlanReasonCode reasonCode = (Wlan.WlanReasonCode)Marshal.ReadInt32 (notifyData.dataPtr);  			if (wlanIface != null)  				wlanIface.OnWlanReason (notifyData' reasonCode);  		}  	}  	break;  }  
Missing Default,ProxySwitcher.Core.NativeWifi,WlanClient,C:\repos\mwiedemeyer_ProxySwitcher\ProxySwitcher.Core\WLAN\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode) {  case Wlan.WlanNotificationCodeMsm.Associating:  case Wlan.WlanNotificationCodeMsm.Associated:  case Wlan.WlanNotificationCodeMsm.Authenticating:  case Wlan.WlanNotificationCodeMsm.Connected:  case Wlan.WlanNotificationCodeMsm.RoamingStart:  case Wlan.WlanNotificationCodeMsm.RoamingEnd:  case Wlan.WlanNotificationCodeMsm.Disassociating:  case Wlan.WlanNotificationCodeMsm.Disconnected:  case Wlan.WlanNotificationCodeMsm.PeerJoin:  case Wlan.WlanNotificationCodeMsm.PeerLeave:  case Wlan.WlanNotificationCodeMsm.AdapterRemoval:  	Wlan.WlanConnectionNotificationData? connNotifyData = ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue)  		if (wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  }  
