Implementation smell,Namespace,Class,File,Method,Description
Long Method,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The method has 242 lines of code.
Long Method,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The method has 245 lines of code.
Long Method,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The method has 117 lines of code.
Long Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The method has 118 lines of code.
Long Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The method has 169 lines of code.
Long Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The method has 100 lines of code.
Long Method,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The method has 104 lines of code.
Complex Method,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,AskForReplacements,Cyclomatic complexity of the method is 9
Complex Method,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SelectInteractive,Cyclomatic complexity of the method is 12
Complex Method,Signum.Engine,SqlPreCommandSimple,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlPreCommand.cs,Encode,Cyclomatic complexity of the method is 10
Complex Method,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeEnumsScript,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,CompleteAllPrivate,Cyclomatic complexity of the method is 15
Complex Method,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,GenerateWindowsFromEntities,Cyclomatic complexity of the method is 9
Complex Method,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,GenerateWebFromEntities,Cyclomatic complexity of the method is 10
Complex Method,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteStartMethod,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,Cyclomatic complexity of the method is 12
Complex Method,Signum.Engine.DynamicQuery,AutocompleteUtils,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\AutocompleteUtils.cs,FindLiteLike,Cyclomatic complexity of the method is 9
Complex Method,Signum.Engine.DynamicQuery,AutocompleteUtils,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\AutocompleteUtils.cs,FindLiteLikeAsync,Cyclomatic complexity of the method is 9
Complex Method,Signum.Engine.Linq,DbExpressionComparer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionComparer.cs,ComparePrivate,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Linq,OrderByRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OrderByRewriter.cs,VisitSelect,Cyclomatic complexity of the method is 18
Complex Method,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,Cyclomatic complexity of the method is 22
Complex Method,Signum.Engine.Linq,EntityCompleter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\EntityCompleter.cs,LiteToString,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,Cyclomatic complexity of the method is 13
Complex Method,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitMember,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,Cyclomatic complexity of the method is 11
Complex Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,Cyclomatic complexity of the method is 13
Complex Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,Cyclomatic complexity of the method is 10
Complex Method,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetEntityType,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,VisitSelect,Cyclomatic complexity of the method is 16
Complex Method,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,Cyclomatic complexity of the method is 10
Complex Method,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,PolymorphicEqual,Cyclomatic complexity of the method is 11
Complex Method,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,Cyclomatic complexity of the method is 10
Complex Method,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,BindMember,Cyclomatic complexity of the method is 12
Complex Method,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,FindImplementations,Cyclomatic complexity of the method is 8
Complex Method,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GetKindOfField,Cyclomatic complexity of the method is 8
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsert,The method has 7 parameters. Parameters: entities' copyOptions' preSaving' validateFirst' disableIdentity' timeout' message
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertQueryIds,The method has 8 parameters. Parameters: entities' keySelector' isNewPredicate' copyOptions' preSaving' validateFirst' timeout' message
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertTable,The method has 7 parameters. Parameters: entities' copyOptions' preSaving' validateFirst' disableIdentity' timeout' message
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTablePropertyRoute,The method has 5 parameters. Parameters: entities' route' copyOptions' timeout' message
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTable,The method has 5 parameters. Parameters: entities' mListProperty' copyOptions' timeout' message
Long Parameter List,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTable,The method has 5 parameters. Parameters: mlistElements' mListProperty' copyOptions' timeout' message
Long Parameter List,Signum.Engine,ParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,CreateParameter,The method has 5 parameters. Parameters: parameterName' type' udtTypeName' nullable' value
Long Parameter List,Signum.Engine,ParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,ParameterFactory,The method has 5 parameters. Parameters: parameterName' type' udtTypeName' nullable' value
Long Parameter List,Signum.Engine,SqlConnector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ExecuteDataReaderDependency,The method has 5 parameters. Parameters: preCommand' change' reconect' forEach' commandType
Long Parameter List,Signum.Engine,SqlParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,CreateParameter,The method has 5 parameters. Parameters: parameterName' sqlType' udtTypeName' nullable' value
Long Parameter List,Signum.Engine,SqlParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ParameterFactory,The method has 5 parameters. Parameters: parameterName' sqlType' udtTypeName' nullable' value
Long Parameter List,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressSelect,The method has 5 parameters. Parameters: collection' selector' elementID' writer' parallelOptions
Long Parameter List,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeach,The method has 7 parameters. Parameters: collection' elementID' action' transactional' writer' parallelOptions' disableIdentityFor
Long Parameter List,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeachInternal,The method has 6 parameters. Parameters: collection' elementID' writer' parallelOptions' transactional' action
Long Parameter List,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeachSequential,The method has 5 parameters. Parameters: collection' elementID' writer' transactional' action
Long Parameter List,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeachParallel,The method has 6 parameters. Parameters: collection' elementID' writer' paralelOptions' transactional' action
Long Parameter List,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeDeleteChunks,The method has 5 parameters. Parameters: query' chunkSize' maxChunks' pauseMilliseconds' cancellationToken
Long Parameter List,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeDeleteMListChunks,The method has 5 parameters. Parameters: mlistQuery' chunkSize' maxChunks' pauseMilliseconds' token
Long Parameter List,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,MergeMList,The method has 5 parameters. Parameters: title' should' current' getKey' mList
Long Parameter List,Signum.Engine,Synchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,Synchronize,The method has 5 parameters. Parameters: newDictionary' oldDictionary' createNew' removeOld' merge
Long Parameter List,Signum.Engine,Synchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SynchronizeProgressForeach,The method has 5 parameters. Parameters: newDictionary' oldDictionary' createNew' removeOld' merge
Long Parameter List,Signum.Engine,Synchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SynchronizeReplacing,The method has 7 parameters. Parameters: replacements' replacementsKey' newDictionary' oldDictionary' createNew' removeOld' merge
Long Parameter List,Signum.Engine,Synchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SynchronizeScript,The method has 6 parameters. Parameters: spacing' newDictionary' oldDictionary' createNew' removeOld' mergeBoth
Long Parameter List,Signum.Engine,Synchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SynchronizeScriptReplacing,The method has 8 parameters. Parameters: replacements' replacementsKey' spacing' newDictionary' oldDictionary' createNew' removeOld' mergeBoth
Long Parameter List,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,UpdateByFkChange,The method has 5 parameters. Parameters: tn' difCol' tabCol' changeName' copyDataFrom
Long Parameter List,Signum.Engine,VirtualMList,C:\repos\signumsoftware_framework\Signum.Engine\VirtualMList.cs,WithVirtualMList,The method has 5 parameters. Parameters: fi' mListField' getBackReference' saveOperation' deleteOperation
Long Parameter List,Signum.Engine,VirtualMList,C:\repos\signumsoftware_framework\Signum.Engine\VirtualMList.cs,WithVirtualMList,The method has 5 parameters. Parameters: fi' mListField' getBackReference' onSave' onRemove
Long Parameter List,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ResultSelectSelectorAndContext,The method has 5 parameters. Parameters: context' keyTokens' aggregateTokens' keyTupleType' newContext
Long Parameter List,Signum.Engine.DynamicQuery,ExtensionInfo,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExtensionInfo,The method has 5 parameters. Parameters: sourceType' lambda' type' key' niceName
Long Parameter List,Signum.Engine.DynamicQuery,AutocompleteUtils,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\AutocompleteUtils.cs,AutocompleteUntypedAsync,The method has 5 parameters. Parameters: query' subString' count' type' token
Long Parameter List,Signum.Engine.Linq,SelectExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,SelectExpression,The method has 9 parameters. Parameters: alias' distinct' top' columns' from' where' orderBy' groupBy' options
Long Parameter List,Signum.Engine.Linq,ChildProjectionExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ChildProjectionExpression,The method has 5 parameters. Parameters: projection' outerKey' isLazyMList' type' token
Long Parameter List,Signum.Engine.Linq,DbQueryProvider,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbQueryProvider.cs,Insert,The method has 5 parameters. Parameters: query' constructor' table' continuation' removeSelectRowCount
Long Parameter List,Signum.Engine.Linq,DbExpressionComparer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionComparer.cs,AreEqual,The method has 5 parameters. Parameters: a' b' parameterScope' aliasScope' checkParameterNames
Long Parameter List,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The method has 5 parameters. Parameters: resultType' function' source' predicate' isRoot
Long Parameter List,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindAggregate,The method has 5 parameters. Parameters: resultType' aggregateFunction' source' selector' isRoot
Long Parameter List,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindAnyAll,The method has 5 parameters. Parameters: resultType' source' predicate' method' isRoot
Long Parameter List,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindJoin,The method has 6 parameters. Parameters: resultType' outerSource' innerSource' outerKey' innerKey' resultSelector
Long Parameter List,Signum.Engine.Linq,EntityExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,EntityExpression,The method has 6 parameters. Parameters: type' externalId' tableAlias' bindings' mixins' avoidExpandOnRetrieving
Long Parameter List,Signum.Engine.Linq,MListElementExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,MListElementExpression,The method has 5 parameters. Parameters: rowId' parent' order' element' table
Long Parameter List,Signum.Engine.Linq,ProjectionRowEnumerator<T>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ProjectionReader.cs,ProjectionRowEnumerator,The method has 5 parameters. Parameters: dataReader' projectorExpression' lookups' retriever' token
Long Parameter List,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,BindJoin,The method has 6 parameters. Parameters: resultType' outerSource' innerSource' outerKey' innerKey' resultSelector
Long Parameter List,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,UpdateSqlSync,The method has 5 parameters. Parameters: entity' where' includeCollections' comment' suffix
Long Parameter List,Signum.Engine.Maps,Field,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldPrimaryKey,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldValue,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldTicks,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldReference,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldEnum,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldEmbedded,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldMixin,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,FieldImplementedByAll,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The method has 5 parameters. Parameters: trios' assigments' value' forbidden' suffix
Long Parameter List,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFields,The method has 5 parameters. Parameters: root' table' preName' forceNull' inMList
Long Parameter List,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateField,The method has 5 parameters. Parameters: table' route' preName' forceNull' inMList
Long Parameter List,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFieldImplementedBy,The method has 5 parameters. Parameters: table' route' name' forceNull' types
Long Parameter List,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFieldEmbedded,The method has 5 parameters. Parameters: table' route' name' forceNull' inMList
Long Identifier,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,,The length of the parameter giGetContextualGraphCanExecute is 30.
Long Identifier,Signum.Engine.Maps,GlobalLazyManager,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,,The length of the parameter giAttachInvalidationsDependant is 30.
Long Identifier,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,,The length of the parameter MaxNumberOfStatementsInSaveQueries is 34.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,CreateTemporaryTable,The length of the statement  "                throw new InvalidOperationException($"Temporary tables should start with # (i.e. #myTable). Consider using {nameof(TableNameAttribute)}"); " is 138.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,ExistsTable,The length of the statement  "            if (schema.Database != null && schema.Database.Server != null && !Database.View<SysServers>().Any(ss => ss.name == schema.Database.Server.Name)) " is 144.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,PrepareForBathLoadScope,The length of the statement  "            IDisposable disp = PrepareTableForBatchLoadScope(table' disableForeignKeys' disableMultipleIndexes' disableUniqueIndexes); " is 122.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,PrepareForBathLoadScope,The length of the statement  "            var list = table.TablesMList().Select(rt => PrepareTableForBatchLoadScope(rt' disableForeignKeys' disableMultipleIndexes' disableUniqueIndexes)).ToList(); " is 154.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,PrepareTableForBatchLoadScope,The length of the statement  "                    Executor.ExecuteNonQuery(multiIndexes.ToString(i => "ALTER INDEX [{0}] ON {1} DISABLE".FormatWith(i' table.Name)' "\r\n")); " is 123.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,MoveAllForeignKeys,The length of the statement  "                MoveAllForeignKeysPrivate<T>(fromEntity' toEntity' shouldMove).Select(a => a.UpdateScript).Combine(Spacing.Double).ExecuteLeaves(); " is 131.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,MoveAllForeignKeysScript,The length of the statement  "            return MoveAllForeignKeysPrivate<T>(fromEntity' toEntity' shouldMove).Select(a => a.UpdateScript).Combine(Spacing.Double); " is 122.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,MoveAllForeignKeysConsole,The length of the statement  "                SafeConsole.WaitRows("{0}.{1}".FormatWith(t.ColumnTable.Table.Name.Name' t.ColumnTable.Column.Name)' () => t.UpdateScript.ExecuteNonQuery()); " is 141.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,MoveAllForeignKeysPrivate,The length of the statement  "                UpdateScript = new SqlPreCommandSimple("UPDATE {0}\r\nSET {1} = @toEntity\r\nWHERE {1} = @fromEntity".FormatWith(ct.Table.Name' ct.Column.Name.SqlEscape())' new List<DbParameter> " is 178.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,DeleteWhereScript,The length of the statement  "                throw new InvalidOperationException($"DeleteWhereScript can not be used for {table.Type.Name} because contains MLists"); " is 120.
Long Statement,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,DeleteWhereScript,The length of the statement  "            return new SqlPreCommandSimple("DELETE FROM {0} WHERE {1} = {2}".FormatWith(table.Name' column.Name' param.ParameterName)' new List<DbParameter> { param }); " is 156.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsert,The length of the statement  "* Set {nameof(disableIdentity)} = true' and set manually the Ids of the entities before inseting using {nameof(UnsafeEntityExtensions.SetId)}. " is 142.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertQueryIds,The length of the statement  "                var dictionary = Database.Query<T>().Where(isNewPredicate).Select(a => KVP.Create(keySelector.Evaluate(a)' a.Id)).ToDictionaryEx(); " is 131.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMLists,The length of the statement  "            var mlistPrs = PropertyRoute.GenerateRoutes(typeof(T)' includeIgnored: false).Where(a => a.PropertyRouteType == PropertyRouteType.FieldOrProperty && a.Type.IsMList()).ToList(); " is 176.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,GetFilterAutomatic,The length of the statement  "            throw new InvalidOperationException($"Impossible to determine the filter for the IDs query automatically because the table is not Identity and has rows"); " is 154.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTablePropertyRoute,The length of the statement  "            return BulkInsertMListTable<E' V>(entities' route.GetLambdaExpression<E' MList<V>>(safeNullAccess: false)' copyOptions' timeout' message); " is 138.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTable,The length of the statement  "                    throw new InvalidOperationException($"{nameof(BulkInsertMListTable)} requires that you set the Id of the entities manually using {nameof(UnsafeEntityExtensions.SetId)}"); " is 170.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTable,The length of the statement  "            using (HeavyProfiler.Log(nameof(BulkInsertMListTable)' () => $"{mListProperty} ({typeof(MListElement<E' V>).TypeName()})")) " is 123.
Long Statement,Signum.Engine,BulkInserter,C:\repos\signumsoftware_framework\Signum.Engine\BulkInserter.cs,BulkInsertMListTable,The length of the statement  "                    return SafeConsole.WaitRows(message == "auto" ? $"BulkInsering MList<{ typeof(V).TypeName()}> in { typeof(E).TypeName()}" : message' " is 132.
Long Statement,Signum.Engine,Connector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,ExtractCatalogPostfix,The length of the statement  "            connectionString = connectionString.Substring(0' index) + connectionString.Substring(index + toFind.Length); // Remove toFind  " is 125.
Long Statement,Signum.Engine,ParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,CreateReferenceParameter,The length of the statement  "            return CreateParameter(parameterName' column.SqlDbType' null' column.Nullable' id == null ? (object)null : id.Value.Object); " is 124.
Long Statement,Signum.Engine,ParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,CreateParameter,The length of the statement  "            return CreateParameter(parameterName' pair.SqlDbType' pair.UserDefinedTypeName' type == null || type.IsByRef || type.IsNullable()' value); " is 138.
Long Statement,Signum.Engine,ParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Connector.cs,IsDate,The length of the statement  "            return type == SqlDbType.Date || type == SqlDbType.DateTime || type == SqlDbType.DateTime2 || type == SqlDbType.SmallDateTime; " is 126.
Long Statement,Signum.Engine,SqlConnector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ShringDatabase,The length of the statement  "                            new SqlPreCommandSimple("SET @fileID = (SELECT FILE_IDEX((SELECT TOP(1)name FROM sys.database_files WHERE type = 1)))")' " is 120.
Long Statement,Signum.Engine,SqlParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ParameterFactory,The length of the statement  "            Expression valueExpr = Expression.Convert(IsDate(sqlType) ? Expression.Call(miAsserDateTime' value.Nullify()) : value' typeof(object)); " is 135.
Long Statement,Signum.Engine,SqlParameterBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ParameterFactory,The length of the statement  "            NewExpression newExpr = Expression.New(typeof(SqlParameter).GetConstructor(new[] { typeof(string)' typeof(object) })' parameterName' valueExpr); " is 144.
Long Statement,Signum.Engine,Transaction,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Transaction.cs,CurrentStatus,The length of the statement  "            return GetCurrent().Follow(a => a.Parent).ToString(t => "{0} Started : {1} Rollbacked: {2} Connection: {3} Transaction: {4}".FormatWith( " is 136.
Long Statement,Signum.Engine,Transaction,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Transaction.cs,PreRealCommitOnly,The length of the statement  "                throw new InvalidOperationException("This method is meant for testing purposes' and only Real and Test transactions can execute it"); " is 133.
Long Statement,Signum.Engine,Transaction,C:\repos\signumsoftware_framework\Signum.Engine\Connection\Transaction.cs,Dispose,The length of the statement  "                        new Exception("Unkwnown exception. Consider 'EndUsing' or 'Using' methods instead of 'using' statement.")); //... sqlTransacion.Rollback() " is 138.
Long Statement,Signum.Engine,UserConnections,C:\repos\signumsoftware_framework\Signum.Engine\Connection\UserConnections.cs,LoadReplacements,The length of the statement  "            return File.ReadAllLines(FileName).Where(s=> !string.IsNullOrWhiteSpace(s) && !s.StartsWith("-") && !s.StartsWith("/")).ToDictionaryEx(a => a.Before('>')' a => a.After('>')' "UserConnections");           " is 193.
Long Statement,Signum.Engine,UserConnections,C:\repos\signumsoftware_framework\Signum.Engine\Connection\UserConnections.cs,Replace,The length of the statement  "            Match m = Regex.Match(connectionString' @"(Initial Catalog|Database)\s*=\s*(?<databaseName>[^;]*)\s*;?"' RegexOptions.IgnoreCase); " is 130.
Long Statement,Signum.Engine,SchemaGenerator,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaGenerator.cs,InsertEnumValuesScript,The length of the statement  "                    select EnumEntity.GetEntities(enumType).Select((e' i) => t.InsertSqlSync(e' suffix: t.Name.Name + i)).Combine(Spacing.Simple) " is 125.
Long Statement,Signum.Engine,SqlUtils,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlUtils.cs,RemoveDuplicatedIndices,The length of the statement  "                    var best = gr.OrderByDescending(a => a.is_unique).ThenByDescending(a => a.index.StartsWith("IX")).ThenByDescending(a => a.index).First(); " is 137.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,RetrieveListLite,The length of the statement  "                var retrieved = ids.GroupsOf(Schema.Current.Settings.MaxNumberOfParameters).SelectMany(gr => Database.Query<T>().Where(a => gr.Contains(a.Id)).Select(a => a.ToLite())).ToDictionary(a => a.Id); " is 192.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeDeleteMList,The length of the statement  "                return SafeConsole.WaitRows(message == "auto" ? $"Deleting MList<{typeof(V).TypeName()}> in {typeof(E).TypeName()}" : message' " is 126.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeInsert,The length of the statement  "                    constructor = (Expression<Func<T' E>>)Schema.Current.OnPreUnsafeInsert(typeof(E)' query' constructor' query.Select(constructor)); " is 129.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeInsertMList,The length of the statement  "                return SafeConsole.WaitRows(message == "auto" ? $"Inserting MList<{ typeof(V).TypeName()}> in { typeof(E).TypeName()}" : message' " is 129.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeInsertMList,The length of the statement  "                    constructor = (Expression<Func<T' MListElement<E' V>>>)Schema.Current.OnPreUnsafeInsert(typeof(E)' query' constructor' query.Select(constructor).Select(c => c.Parent)); " is 168.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,UnsafeInsertView,The length of the statement  "                    constructor = (Expression<Func<T' E>>)Schema.Current.OnPreUnsafeInsert(typeof(E)' query' constructor' query.Select(constructor)); " is 129.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,Merge,The length of the statement  "            current.Where(c => !should.Any(s => getKey.Evaluate(c) == getKey.Evaluate(s))).UnsafeDelete(title != null ? "auto" : null); " is 123.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,Merge,The length of the statement  "            should.Where(s => !current.Any(c => getKey.Evaluate(c) == getKey.Evaluate(s))).UnsafeInsert(p => p' title != null ? "auto" : null); " is 131.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,MergeMList,The length of the statement  "            current.Where(c => !should.Any(s => getKey.Evaluate(c) == getKey.Evaluate(s))).UnsafeDeleteMList(title != null ? "auto" : null); " is 128.
Long Statement,Signum.Engine,Database,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,MergeMList,The length of the statement  "            should.Where(s => !current.Any(c => getKey.Evaluate(c) == getKey.Evaluate(s))).UnsafeInsertMList(mList' p => p' title != null ? "auto" : null); " is 143.
Long Statement,Signum.Engine,MListElementsExpander,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,Expand,The length of the statement  "                var query = Expression.Lambda<Func<IQueryable>>(Expression.Call(miMListQuery.MakeGenericMethod(mi.GetGenericArguments())' arguments[1])).Compile()(); " is 149.
Long Statement,Signum.Engine,MListElement<E;V>,C:\repos\signumsoftware_framework\Signum.Engine\Database.cs,ToString,The length of the statement  "            return $"MListEntity: ({nameof(RowId)}:{RowId}' {nameof(Order)}:{Order}' {nameof(Parent)}:{Parent}' {nameof(Element)}:{Element})"; " is 130.
Long Statement,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,AskForReplacements,The length of the statement  "            Dictionary<string' Dictionary<string' float>> distances = oldOnly.ToDictionary(o => o' o => newOnly.ToDictionary(n => n' n => " is 125.
Long Statement,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,AskForReplacements,The length of the statement  "                Selection selection = SelectInteractive(old.Key' old.Value.OrderBy(a => a.Value).Select(a => a.Key).ToList()' replacementsKey' Interactive); " is 140.
Long Statement,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SelectInteractive,The length of the statement  "            Selection sel = SelectInteractive(oldValue' dic.OrderBy(a => a.Value).Select(a => a.Key).ToList()' replacementsKey' Interactive); " is 129.
Long Statement,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SelectInteractive,The length of the statement  "                throw new InvalidOperationException("Impossible to synchronize {0} without interactive Console. Consider running the Load project.".FormatWith(replacementsKey)); " is 161.
Long Statement,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SelectInteractive,The length of the statement  "            SafeConsole.WriteLineColor(ConsoleColor.White' "   '{0}' has been renamed in {1}?".FormatWith(oldValue' replacementsKey)); " is 122.
Long Statement,Signum.Engine,Saver,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Saver.cs,Save,The length of the statement  "                DirectedGraph<Modifiable> modifiables = GraphExplorer.PreSaving(() => GraphExplorer.FromRoots(entities)' (Modifiable m' ref bool graphModified) => " is 146.
Long Statement,Signum.Engine,Saver,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Saver.cs,Save,The length of the statement  "                HashSet<Entity> wasNew = modifiables.OfType<Entity>().Where(a=>a.IsNew).ToHashSet(ReferenceEqualityComparer<Entity>.Default); " is 125.
Long Statement,Signum.Engine,Saver,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Saver.cs,Save,The length of the statement  "                HashSet<Entity> wasSelfModified = modifiables.OfType<Entity>().Where(a => a.Modified == ModifiedState.SelfModified).ToHashSet(ReferenceEqualityComparer<Entity>.Default); " is 169.
Long Statement,Signum.Engine,Saver,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Saver.cs,SaveGraph,The length of the statement  "                foreach (var gr in backEdges.Edges.Select(e => e.From).Distinct().GroupBy(ident => new TypeNew(ident.GetType()' ident.IsNew))) " is 126.
Long Statement,Signum.Engine,SqlPreCommandSimple,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlPreCommand.cs,Encode,The length of the statement  "                return "convert(datetime' '{0}'' 126)".FormatWith(dt.ToString("yyyy-MM-ddThh:mm:ss.fff"' CultureInfo.InvariantCulture)); " is 120.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "            Dictionary<string' ITable> model = s.GetDatabaseTables().Where(t => !s.IsExternalDatabase(t.Name.Schema.Database)).ToDictionaryEx(a => a.Name.ToString()' "schema tables"); " is 171.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "            HashSet<SchemaName> modelSchemas = model.Values.Select(a => a.Name.Schema).Where(a => !SqlBuilder.SystemSchemas.Contains(a.Name)).ToHashSet(); " is 142.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                .ToDictionary(t => t' t => t.GeneratAllIndexes().ToDictionaryEx(a => a.IndexName' "Indexes for {0}".FormatWith(t.Name))); " is 121.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            SafeConsole.WriteLineColor(ConsoleColor.Yellow' $@"Column {diffPk.Name} in {diff.Name} is now Identity={tab.PrimaryKey.Identity}."); " is 132.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            SafeConsole.WriteLineColor(ConsoleColor.Yellow' $@"Column {diffPk.Name} in {diff.Name} is now Identity={tab.PrimaryKey.Identity}."); " is 132.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "            var columnsByFKTarget = database.Values.SelectMany(a => a.Columns.Values).Where(a => a.ForeignKey != null).GroupToDictionary(a => a.ForeignKey.TargetTable); " is 156.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                return SqlPreCommand.Combine(Spacing.Simple' new SqlPreCommandSimple("---In order to remove the PK of " + tableName.Name)' dropFks); " is 132.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                SqlPreCommand preRenameTables = preRenames.Select(a => SqlBuilder.RenameTable(a.Key' a.Value.Name)).Combine(Spacing.Double); " is 124.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                    removeOld: (tn' dif) => dif.Indices.Values.Where(ix => !ix.IsPrimary).Select(ix => SqlBuilder.DropIndex(dif.Name' ix)).Combine(Spacing.Simple)' " is 143.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            removeOld: (i' dix) => dix.Columns.Any(removedColums.Contains) || dix.IsControlledIndex ? SqlBuilder.DropIndex(dif.Name' dix) : null' " is 133.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            mergeBoth: (i' mix' dix) => !dix.IndexEquals(dif' mix) ? SqlPreCommand.Combine(Spacing.Double' dix.IsPrimary ? DeleteAllForeignKey(dif.Name) : null' SqlBuilder.DropIndex(dif.Name' dix)) : null " is 192.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                     removeOld: (tn' dif) => dif.Columns.Values.Select(c => c.ForeignKey != null ? SqlBuilder.AlterTableDropConstraint(dif.Name' c.ForeignKey.Name) : null) " is 150.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                         .Concat(dif.MultiForeignKeys.Select(fk => SqlBuilder.AlterTableDropConstraint(dif.Name' fk.Name))).Combine(Spacing.Simple)' " is 123.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                         removeOld: (cn' colDb) => colDb.ForeignKey != null ? SqlBuilder.AlterTableDropConstraint(dif.Name' colDb.ForeignKey.Name) : null' " is 129.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                             colModel.ReferenceTable == null || colModel.AvoidForeignKey || !colModel.ReferenceTable.Name.Equals(ChangeName(colDb.ForeignKey.TargetTable)) || DifferentDatabase(tab.Name' colModel.ReferenceTable.Name) ? " is 204.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                SqlPreCommand preRenamePks = preRenames.Select(a => SqlBuilder.DropPrimaryKeyConstraint(a.Value)).Combine(Spacing.Double); " is 122.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            copyDataFrom.ContainsKey(tab.Name) ? CopyData(tab' database.GetOrThrow(copyDataFrom.GetOrThrow(tab.Name).ToString())' replacements).Do(a => a.GoBefore = true) : null " is 165.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                                            tabCol.PrimaryKey && !difCol.PrimaryKey && dif.PrimaryKeyName != null ? SqlBuilder.DropPrimaryKeyConstraint(tab.Name) : null' " is 125.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                                            tabCol.SqlDbType == SqlDbType.NVarChar && difCol.SqlDbType == SqlDbType.NChar ? SqlBuilder.UpdateTrim(tab' tabCol) : null)' " is 123.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                                            tabCol.Default != null ? SqlBuilder.AddDefaultConstraint(tab.Name' tabCol.Name' tabCol.Default' tabCol.SqlDbType) : null)' " is 122.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                         createNew: (cn' colModel) => colModel.ReferenceTable == null || colModel.AvoidForeignKey || DifferentDatabase(tab.Name' colModel.ReferenceTable.Name) ? null : " is 158.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                             if (colModel.ReferenceTable == null || colModel.AvoidForeignKey || DifferentDatabase(tab.Name' colModel.ReferenceTable.Name)) " is 125.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                                (coldb.ForeignKey.IsDisabled || coldb.ForeignKey.IsNotTrusted) && !replacements.SchemaOnly ? SqlBuilder.EnableForeignKey(tab.Name' name) : null); " is 145.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                    createNew: (tn' tab) => modelIndices[tab].Values.Where(a => !(a is PrimaryClusteredIndex)).Select(SqlBuilder.CreateIndex).Combine(Spacing.Simple)' " is 146.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                            createNew: (i' mix) => mix is UniqueIndex || mix.Columns.Any(isNew) || SafeConsole.Ask(ref createMissingFreeIndexes' "Create missing non-unique index {0} in {1}?".FormatWith(mix.IndexName' tab.Name)) ? SqlBuilder.CreateIndex(mix) : null' " is 237.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeTablesScript,The length of the statement  "                return SqlPreCommand.Combine(Spacing.Triple' preRenameTables' createSchemas' dropStatistics' dropIndices' dropForeignKeys' preRenamePks' tables' syncEnums' addForeingKeys' addIndices' dropSchemas); " is 197.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,GetDefaultValue,The length of the statement  "            string defaultValue = rep.Interactive ? SafeConsole.AskString("Default value for '{0}.{1}'? (or press enter) ".FormatWith(table.Name.Name' column.Name)' stringValidator: str => null) : ""; " is 188.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,DefaultGetDatabaseDescription,The length of the statement  "                         from t in s.Tables().Where(t => !t.ExtendedProperties().Any(a => a.name == "microsoft_database_tools_support")) //IntelliSense bug " is 130.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeEnumsScript,The length of the statement  "                    var mix = shouldByName.JoinDictionary(currentByName' (n' s' c) => new { s' c }).Where(a => a.Value.s.id != a.Value.c.id).ToDictionary(); " is 136.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SynchronizeEnumsScript,The length of the statement  "                    Dictionary<string' Entity> middleByName = mix.Where(kvp => usedIds.Contains(kvp.Value.s.Id)).ToDictionary(kvp => kvp.Key' kvp => Clone(kvp.Value.c)); " is 149.
Long Statement,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,SnapshotIsolation,The length of the statement  "                !a.is_read_committed_snapshot_on ? SqlBuilder.MakeSnapshotIsolationDefault(a.name' true) : null)).Combine(Spacing.Double)); " is 123.
Long Statement,Signum.Engine,DiffIndex,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,ColumnsChanged,The length of the statement  "            var perfect = difColumns.ZipOrDefault(mix.Columns' (dc' mc) => dc != null && mc != null && dc.ColumnEquals(mc' ignorePrimaryKey: true)).All(a => a); " is 148.
Long Statement,Signum.Engine,DiffColumn,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,ColumnEquals,The length of the statement  "                && (other.Size == null || other.Size.Value == Precission || other.Size.Value == Length / BytesPerChar(other.SqlDbType) || other.Size.Value == int.MaxValue && Length == -1) " is 171.
Long Statement,Signum.Engine,DiffColumn,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,BytesPerChar,The length of the statement  "            if (sqlDbType == System.Data.SqlDbType.NChar || sqlDbType == System.Data.SqlDbType.NText || sqlDbType == System.Data.SqlDbType.NVarChar) " is 136.
Long Statement,Signum.Engine,SymbolLogic<T>,C:\repos\signumsoftware_framework\Signum.Engine\Basics\SymbolLogic.cs,AssertStarted,The length of the statement  "                throw new InvalidOperationException("{0} has not been started. Someone should have called {0}.Start before".FormatWith(typeof(SymbolLogic<T>).TypeName())); " is 155.
Long Statement,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,TryGetRequest,The length of the statement  "            if (requests != null && requests.TryGetValue(key.type' out Dictionary<PrimaryKey' Entity> dic) && dic.TryGetValue(key.id' out value)) " is 133.
Long Statement,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,RequestLite,The length of the statement  "                lite.SetToString(cc.TryGetToString(lite.Id) ?? ("[" + EngineMessage.EntityWithType0AndId1NotFound.NiceToString().FormatWith(lite.EntityType.NiceName()' lite.Id) + "]")); " is 169.
Long Statement,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,CompleteAllPrivate,The length of the statement  "                        var toStr = dic.TryGetC(item.Key.id) ?? ("[" + EngineMessage.EntityWithType0AndId1NotFound.NiceToString().FormatWith(item.Key.type.NiceName()' item.Key.id) + "]"); " is 163.
Long Statement,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,CompleteAllPrivate,The length of the statement  "            var currentlyModifiableRetrieved = modifiablePostRetrieving.ToHashSet(Signum.Utilities.DataStructures.ReferenceEqualityComparer<Modifiable>.Default); " is 149.
Long Statement,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,GetStrings,The length of the statement  "                   .Select(gr => Database.Query<T>().Where(e => gr.Contains(e.Id)).Select(a => KVP.Create(a.Id' a.ToString())).ToListAsync(token.Value)) " is 133.
Long Statement,Signum.Engine,RealEntityCache,C:\repos\signumsoftware_framework\Signum.Engine\EntityCache.cs,Add,The length of the statement  "                    //throw new InvalidOperationException("There's a different instance of the same entity with Type '{0}' and Id '{1}'".FormatWith(ie.GetType().Name' ie.id)); " is 155.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,CreateTableSql,The length of the statement  "            var primaryKeyConstraint = t.PrimaryKey == null ? null : "CONSTRAINT {0} PRIMARY KEY CLUSTERED ({1} ASC)".FormatWith(PrimaryClusteredIndex.GetPrimaryKeyName(t.Name)' t.PrimaryKey.Name.SqlEscape()); " is 197.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,CreateTableSql,The length of the statement  "                t.Columns.Values.Select(c => SqlBuilder.CreateColumn(c)).And(primaryKeyConstraint).NotNull().ToString("'\r\n").Indent(2)) " is 121.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,GetColumnType,The length of the statement  "            return (c.SqlDbType == SqlDbType.Udt ? c.UserDefinedTypeName : c.SqlDbType.ToString().ToUpper()) + GetSizeScale(c.Size' c.Scale); " is 129.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,AlterTableForeignKeys,The length of the statement  "                (c.ReferenceTable == null || c.AvoidForeignKey) ? null : SqlBuilder.AlterTableAddConstraintForeignKey(t' c.Name' c.ReferenceTable)) " is 131.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,DropIndex,The length of the statement  "                    .FormatWith(objectName.Schema.Database.ToString().SqlEscape()' indexName.SqlEscape()' objectName.OnDatabase(null).ToString())); " is 127.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,ReCreateFreeIndex,The length of the statement  "            string indexName = onlyColumn != null && index.IndexName.StartsWith("FIX_") ? "FIX_{0}_{1}".FormatWith(table.Name.Name' (tableReplacements.TryGetC(onlyColumn) ?? onlyColumn)) : " is 176.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,CreateIndex,The length of the statement  "                SqlPreCommandSimple viewSql = new SqlPreCommandSimple(@"CREATE VIEW {0} WITH SCHEMABINDING AS SELECT {1} FROM {2} WHERE {3}" " is 124.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,SetSnapshotIsolation,The length of the statement  "            return new SqlPreCommandSimple("ALTER DATABASE {0} SET ALLOW_SNAPSHOT_ISOLATION {1}".FormatWith(databaseName' value ? "ON" : "OFF")); " is 133.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,MakeSnapshotIsolationDefault,The length of the statement  "            return new SqlPreCommandSimple("ALTER DATABASE {0} SET READ_COMMITTED_SNAPSHOT {1}".FormatWith(databaseName' value ? "ON" : "OFF")); " is 132.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,CreateSchema,The length of the statement  "                return new SqlPreCommandSimple($"EXEC('use {schemaName.Database}; EXEC sp_executesql N''CREATE SCHEMA {schemaName.Name}'' ')"); " is 127.
Long Statement,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,DropStatistics,The length of the statement  "            return new SqlPreCommandSimple("DROP STATISTICS " + list.ToString(s => tn.SqlEscape() + "." + s.StatsName.SqlEscape()' "'\r\n")); " is 129.
Long Statement,Signum.Engine,VirtualMList,C:\repos\signumsoftware_framework\Signum.Engine\VirtualMList.cs,WithVirtualMList,The length of the statement  "            sb.Schema.EntityEvents<T>().PreUnsafeDelete += query => query.SelectMany(e => Database.Query<L>().Where(se => getBackReference.Evaluate(se).RefersTo(e))).UnsafeDelete(); " is 169.
Long Statement,Signum.Engine.Basics,ExceptionLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\ExceptionLogic.cs,DeleteLogsAndExceptions,The length of the statement  "                WriteRows(sb' "Updating ExceptionEntity.Referenced = false"' () => Database.Query<ExceptionEntity>().UnsafeUpdate().Set(a => a.Referenced' a => false).Execute()); " is 162.
Long Statement,Signum.Engine.Basics,PropertyRouteLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\PropertyRouteLogic.cs,Start,The length of the statement  "                Properties = sb.GlobalLazy(() => Database.Query<PropertyRouteEntity>().AgGroupToDictionary(a => a.RootType' gr => gr.ToDictionary(a => a.Path))' " is 144.
Long Statement,Signum.Engine.Basics,PropertyRouteLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\PropertyRouteLogic.cs,SynchronizeProperties,The length of the statement  "            var current = Administrator.TryRetrieveAll<PropertyRouteEntity>(rep).AgGroupToDictionary(a => a.RootType.FullClassName' g => g.ToDictionaryEx(f => f.Path' "PropertyEntity in the database with path")); " is 200.
Long Statement,Signum.Engine.Basics,PropertyRouteLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\PropertyRouteLogic.cs,SynchronizeProperties,The length of the statement  "            var should = TypeLogic.TryEntityToType(rep).SelectDictionary(dn => dn.FullClassName' (dn' t) => GenerateProperties(t' dn).ToDictionaryEx(f => f.Path' "PropertyEntity in the database with path")); " is 195.
Long Statement,Signum.Engine.Basics,PropertyRouteLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\PropertyRouteLogic.cs,ToPropertyRouteEntity,The length of the statement  "            return Database.Query<PropertyRouteEntity>().SingleOrDefaultEx(f => f.RootType == type && f.Path == path)?.Do(pi => pi.Route = route) ?? " is 136.
Long Statement,Signum.Engine.Basics,TypeLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\TypeLogic.cs,Start,The length of the statement  "                    var attributes = current.Tables.Keys.Select(t => KVP.Create(t' t.GetCustomAttribute<EntityKindAttribute>(true))).ToList(); " is 122.
Long Statement,Signum.Engine.Basics,TypeLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\TypeLogic.cs,Start,The length of the statement  "                    var errors = attributes.Where(a => a.Value == null).ToString(a => "Type {0} does not have an EntityTypeAttribute".FormatWith(a.Key.Name)' "\r\n"); " is 146.
Long Statement,Signum.Engine.Basics,TypeLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\TypeLogic.cs,Schema_Synchronizing,The length of the statement  "                Administrator.TryRetrieveAll<TypeEntity>(replacements).ToDictionaryEx(c => c.TableName' "tableName in database")' Replacements.KeyTables); " is 138.
Long Statement,Signum.Engine.Basics,TypeLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\TypeLogic.cs,Schema_Synchronizing,The length of the statement  "                    current.Keys.Select(k => ObjectName.Parse(k)).GroupBy(a => a.Name).Where(a => a.Count() > 1).Select(a => a.Key)).ToList(); " is 122.
Long Statement,Signum.Engine.Extensions.Basics,SemiSymbolLogic<T>,C:\repos\signumsoftware_framework\Signum.Engine\Basics\SemiSymbolLogic.cs,AssertStarted,The length of the statement  "                throw new InvalidOperationException("{0} has not been started. Someone should have called {0}.Start before".FormatWith(typeof(SemiSymbolLogic<T>).TypeName())); " is 159.
Long Statement,Signum.Engine.CodeGeneration,CodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\CodeGenerator.cs,GetSolutionInfo,The length of the statement  "            var m = Regex.Match(Environment.CurrentDirectory' @"(?<solutionFolder>.*)\\(?<solutionName>.*).Load\\bin\\(Debug|Release)"' RegexOptions.ExplicitCapture); " is 154.
Long Statement,Signum.Engine.CodeGeneration,CodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\CodeGenerator.cs,GetSolutionInfo,The length of the statement  "                throw new InvalidOperationException("Unable to GetSolutionInfo from non-standart path " + Environment.CurrentDirectory + ". Override GetSolutionInfo"); " is 151.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeConverter,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeConverter.cs,ToReactView,The length of the statement  "            var result = Regex.Replace(razorViewText' @"@Html\.(?<type>(ValueLine|EntityLine|EntityList|EntityCombo|EntityStrip|EntityRepeater|EntityListCheckbox|EntityDetail))\((?<ctx>\w+)\s*'\s*(?<param>\w+)\s*=>\s*\k<param>(\.(?<token>\w+))+\s*('\s*(?<param2>\w+)\s*=>\s*((\k<param2>\.(?<prop>\w+)\s*=\s*(?<value>[^)]+))|(?<extra>[^\)]*)))?\)"' " is 335.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeConverter,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeConverter.cs,ToReactView,The length of the statement  "                    return $"<{type} ctx={{{ctx}.subCtx({param} => {param}.{tokens})}} {propAssign} />" + (extra.HasText() ? "{/*" + extra + "*/}": null); " is 134.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,CandidateTypes,The length of the statement  "            var assembly = Assembly.Load(Assembly.GetEntryAssembly().GetReferencedAssemblies().Single(a => a.Name == this.SolutionName + ".Entities")); " is 139.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,CandidateTypes,The length of the statement  "            return assembly.GetTypes().Where(t => t.IsModifiableEntity() && !t.IsAbstract && !typeof(MixinEntity).IsAssignableFrom(t)).ToList(); " is 132.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,GetEntitySetting,The length of the statement  "            return "Navigator.addSettings(new EntitySettings({0}' {1} => new ViewPromise(resolve => require(['./Templates/{2}']' resolve))));".FormatWith( " is 142.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteEntityComponentFile,The length of the statement  "            sb.AppendLine("import { TypeContext' ValueLine' EntityLine' EntityCombo' EntityList' EntityDetail' EntityStrip' EntityRepeater' FormGroup' FormGroupStyle' FormGroupSize } from '" + frp + "Signum.React/Scripts/Lines'"); " is 218.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteEntityComponentFile,The length of the statement  "            sb.AppendLine("import { SearchControl' CountSearchControl' FilterOperation' OrderType' PaginationMode } from '" + frp + "Signum.React/Scripts/Search'"); " is 152.
Long Statement,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteEntityComponentFile,The length of the statement  "            sb.AppendLine("export default class {0} extends React.Component<{{ ctx: TypeContext<{1}> }}' void> {{".FormatWith(GetViewName(type)' type.Name)); " is 145.
Long Statement,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,CandiateTypes,The length of the statement  "            var assembly = Assembly.Load(Assembly.GetEntryAssembly().GetReferencedAssemblies().Single(a => a.Name == this.SolutionName + ".Entities")); " is 139.
Long Statement,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,CandiateTypes,The length of the statement  "            return assembly.GetTypes().Where(t => t.IsModifiableEntity() && !t.IsAbstract && !typeof(MixinEntity).IsAssignableFrom(t)).ToList(); " is 132.
Long Statement,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,CandidateTypes,The length of the statement  "            var assembly = Assembly.Load(Assembly.GetEntryAssembly().GetReferencedAssemblies().Single(a => a.Name == this.SolutionName + ".Entities")); " is 139.
Long Statement,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,CandidateTypes,The length of the statement  "            return assembly.GetTypes().Where(t => t.IsModifiableEntity() && !t.IsAbstract && !typeof(MixinEntity).IsAssignableFrom(t)).ToList(); " is 132.
Long Statement,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,CandidateTypes,The length of the statement  "            var assembly = Assembly.Load(Assembly.GetEntryAssembly().GetReferencedAssemblies().Single(a => a.Name == this.SolutionName + ".Entities")); " is 139.
Long Statement,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,CandidateTypes,The length of the statement  "            return assembly.GetTypes().Where(t => t.IsEntity() && !t.IsAbstract && !typeof(MixinEntity).IsAssignableFrom(t)).ToList(); " is 122.
Long Statement,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,IsSimpleValueType,The length of the statement  "            return t != null && t.UserDefinedTypeName == null && t.SqlDbType != SqlDbType.Image && t.SqlDbType != SqlDbType.VarBinary; " is 122.
Long Statement,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteConstructFrom,The length of the statement  "            sb.AppendLine("new Graph<{0}>.ConstructFrom<{1}>({2})".FormatWith(type[0].TypeName()' type[1].TypeName()' oper.Symbol.ToString())); " is 131.
Long Statement,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteConstructFromMany,The length of the statement  "            sb.AppendLine("new Graph<{0}>.ConstructFromMany<{1}>({2})".FormatWith(type[0].TypeName()' type[1].TypeName()' oper.Symbol.ToString())); " is 135.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GenerateEntitiesFromDatabaseTables,The length of the statement  "                t.Columns.Values.Select(a => a.ForeignKey).NotNull().Select(a => a.TargetTable).Distinct().Select(on => this.Tables.GetOrThrow(on))).Inverse(); " is 143.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEnum,The length of the statement  "                sb.AppendLine("    " + (description != null ? @"[Description(""" + description + @""")]" : null) + value + explicitId + "'"); " is 125.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GetMListParentColumn,The length of the statement  "            return table.Columns.Values.Where(c => c.ForeignKey != null && c.Nullable == false && table.Name.Name.StartsWith(c.ForeignKey.TargetTable.Name)).OrderByDescending(a => a.ForeignKey.TargetTable.Name.Length).FirstOrDefault(); " is 223.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteField,The length of the statement  "            sb.AppendLine("public {0} {1} {{ get; {2}set; }}".FormatWith(type' fieldName.FirstUpper()' IsReadonly(table' col) ? "private" : null)); " is 135.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,HasUniqueIndex,The length of the statement  "            return table.Indices.Values.Any(a => a.FilterDefinition == null && a.Columns.Only() == col.Name && a.IsUnique && a.Type == DiffIndexType.NonClustered); " is 151.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GetSqlDbTypeParts,The length of the statement  "                if (!(defaultSize == col.Precission || defaultSize == col.Length / DiffColumn.BytesPerChar(col.SqlDbType) || defaultSize == int.MaxValue && col.Length == -1)) " is 158.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteToString,The length of the statement  "            sb.AppendLine("static Expression<Func<{0}' string>> ToStringExpression = e => e.{1}{2};".FormatWith(GetEntityName(table.Name)' " is 126.
Long Statement,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteToString,The length of the statement  "                toStringColumn.PrimaryKey || GetFieldType(table' toStringColumn' GetRelatedEntity(table' toStringColumn)) != "string" ? " + \"\"" : "")); " is 137.
Long Statement,Signum.Engine.DynamicQuery,AutoDynamicQueryCore<T>,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\AutoDynamicQuery.cs,GetEntities,The length of the statement  "            var exp = Expression.Lambda<Func<object' Lite<Entity>>>(Expression.Convert(ex.Token.BuildExpression(query.Context)' typeof(Lite<Entity>))' query.Context.Parameter); " is 164.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryCore<T>,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,EntityColumnFactory,The length of the statement  "            return StaticColumns.Where(c => c.IsEntity).SingleEx(() => "Entity column on {0}".FormatWith(QueryUtils.GetKey(QueryName))); " is 124.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ToDQueryable,The length of the statement  "                cd => Expression.PropertyOrField(Expression.Convert(pe' typeof(T))' cd.Name).BuildLiteNulifyUnwrapPrimaryKey(cd.PropertyRoutes)); " is 129.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SelectOne,The length of the statement  "            var exp = Expression.Lambda<Func<object' object>>(Expression.Convert(token.BuildExpression(query.Context)' typeof(object))' query.Context.Parameter); " is 149.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SelectOne,The length of the statement  "            var exp = Expression.Lambda<Func<object' object>>(Expression.Convert(token.BuildExpression(query.Context)' typeof(object))' query.Context.Parameter); " is 149.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,Concat,The length of the statement  "                throw new InvalidOperationException("Enumerable's TupleType does not match Other's one.\r\n Enumerable: {0}: \r\n Other:  {1}".FormatWith( " is 138.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,Concat,The length of the statement  "                throw new InvalidOperationException("Enumerable's TupleType does not match Other's one.\r\n Enumerable: {0}: \r\n Other:  {1}".FormatWith( " is 138.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,Concat,The length of the statement  "            return new DEnumerableCount<T>(collection.Collection.Concat(other.Collection)' collection.Context' collection.TotalElements + other.TotalElements); " is 147.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,TupleConstructor,The length of the statement  "                    tokens.Select((t' i) => new { Token = t' Expr = TupleReflection.TupleChainProperty(Expression.Convert(pe' ctor.Type)' i) }).ToDictionary(t => t.Token' t => t.Expr)); " is 165.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SelectMany,The length of the statement  "            var collectionSelector = Expression.Lambda(typeof(Func<'>).MakeGenericType(typeof(object)' typeof(IEnumerable<>).MakeGenericType(elementType))' " is 143.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SelectMany,The length of the statement  "            var resultSelector = Expression.Lambda(Expression.Convert(ctor' typeof(object))' query.Context.Parameter' elementParameter); " is 124.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SelectMany,The length of the statement  "            var resultQuery = query.Query.Provider.CreateQuery<object>(Expression.Call(null' miSelectMany.MakeGenericMethod(typeof(object)' elementType' typeof(object))' " is 157.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,OrderBy,The length of the statement  "            MethodInfo mi = (orderType == OrderType.Ascending ? miOrderByQ : miOrderByDescendingQ).MakeGenericMethod(lambda.Type.GetGenericArguments()); " is 140.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,OrderBy,The length of the statement  "            return (IOrderedQueryable<object>)query.Provider.CreateQuery<object>(Expression.Call(null' mi' new Expression[] { query.Expression' Expression.Quote(lambda) })); " is 161.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ThenBy,The length of the statement  "            MethodInfo mi = (orderType == OrderType.Ascending ? miThenByQ : miThenByDescendingQ).MakeGenericMethod(lambda.Type.GetGenericArguments()); " is 138.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ThenBy,The length of the statement  "            return (IOrderedQueryable<object>)query.Provider.CreateQuery<object>(Expression.Call(null' mi' new Expression[] { query.Expression' Expression.Quote(lambda) })); " is 161.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,UniqueAsync,The length of the statement  "                case UniqueType.SingleOrMany: return collection.Take(2).ToListAsync(token).ContinueWith(l => l.Result.SingleOrManyEx()); " is 120.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,GroupBy,The length of the statement  "            LambdaExpression resultSelector = ResultSelectSelectorAndContext(collection.Context' keyTokens' aggregateTokens' keySelector.Body.Type' out BuildExpressionContext newContext); " is 175.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,GroupBy,The length of the statement  "            var resultCollection = giGroupByE.GetInvoker(typeof(object)' keySelector.Body.Type' typeof(object))(collection.Collection' keySelector.Compile()' resultSelector.Compile()); " is 172.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,GroupBy,The length of the statement  "            LambdaExpression resultSelector = ResultSelectSelectorAndContext(query.Context' keyTokens' aggregateTokens' keySelector.Body.Type' out BuildExpressionContext newContext); " is 170.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,GroupBy,The length of the statement  "            var resultQuery = (IQueryable<object>)query.Query.Provider.CreateQuery<object>(Expression.Call(null' miGroupByQ.MakeGenericMethod(typeof(object)' keySelector.Body.Type' typeof(object))' " is 185.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ResultSelectSelectorAndContext,The length of the statement  "            resultExpressions.AddRange(aggregateTokens.Select(at => KVP.Create((QueryToken)at' BuildAggregateExpressionEnumerable(pe' at' context)))); " is 138.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,ResultSelectSelectorAndContext,The length of the statement  "                resultExpressions.Keys.Select((t' i) => KVP.Create(t' TupleReflection.TupleChainProperty(Expression.Convert(pg' resultConstructor.Type)' i))).ToDictionary()); " is 158.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionEnumerable,The length of the statement  "                return Expression.Call(typeof(Enumerable)' at.AggregateFunction.ToString()' new[] { elementType' lambda.Body.Type }' new[] { collection' lambda }); " is 147.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionEnumerable,The length of the statement  "            return Expression.Call(typeof(Enumerable)' at.AggregateFunction.ToString()' new[] { elementType }' new[] { collection' lambda }); " is 129.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionQueryable,The length of the statement  "                return Expression.Call(typeof(Queryable)' at.AggregateFunction.ToString()' new[] { elementType' lambda.Body.Type }' new[] { collection' quotedLambda }); " is 152.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionQueryable,The length of the statement  "            return Expression.Call(typeof(Queryable)' at.AggregateFunction.ToString()' new[] { elementType }' new[] { collection' quotedLambda }); " is 134.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionQueryableAsync,The length of the statement  "                return Expression.Call(typeof(QueryableAsyncExtensions)' "CountAsync"' new[] { elementType }' new[] { collection' tokenConstant }); " is 131.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionQueryableAsync,The length of the statement  "                return Expression.Call(typeof(QueryableAsyncExtensions)' at.AggregateFunction.ToString() + "Async"' new[] { elementType' lambda.Body.Type }' new[] { collection' quotedLambda' tokenConstant }); " is 192.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,BuildAggregateExpressionQueryableAsync,The length of the statement  "            return Expression.Call(typeof(QueryableAsyncExtensions)' at.AggregateFunction.ToString() + "Async"' new[] { elementType }' new[] { collection' quotedLambda' tokenConstant }); " is 174.
Long Statement,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,SimpleAggregate,The length of the statement  "            var expr = BuildAggregateExpressionEnumerable(Expression.Constant(collection.Collection)' simpleAggregate' collection.Context); " is 127.
Long Statement,Signum.Engine.DynamicQuery,ColumnDescriptionFactory,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ColumnDescriptionFactory.cs,GetUnit,The length of the statement  "                    return routes.Select(pr => pr.SimplifyToProperty().PropertyInfo.GetCustomAttribute<UnitAttribute>()?.UnitName).Distinct().Only(); " is 129.
Long Statement,Signum.Engine.DynamicQuery,ColumnDescriptionFactory,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ColumnDescriptionFactory.cs,UnwrapFromPropertRoutes,The length of the statement  "                throw new InvalidOperationException("Impossible to determine the underlying type of the PrimaryKey of column {0} if PropertyRoutes is not set" " is 142.
Long Statement,Signum.Engine.DynamicQuery,ManualDynamicQueryCore<T>,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ManualDynamicQuery.cs,ExecuteQueryGroupAsync,The length of the statement  "                Columns = keys.Concat(allAggregates.Select(at => at.Parent).NotNull()).Distinct().Select(t => new Column(t' t.NiceName())).ToList()' " is 132.
Long Statement,Signum.Engine.DynamicQuery,ManualDynamicQueryCore<T>,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ManualDynamicQuery.cs,ExecuteQueryValueAsync,The length of the statement  "            if (request.ValueToken == null || request.ValueToken is AggregateToken && ((AggregateToken)request.ValueToken).AggregateFunction == AggregateFunction.Count) " is 156.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,RegisterQuery,The length of the statement  "            queries[queryName] = new DynamicQueryBucket(queryName' lazyQueryCore' entityImplementations ?? DefaultImplementations(typeof(T)' queryName)); " is 141.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,RegisterQuery,The length of the statement  "            queries[queryName] = new DynamicQueryBucket(queryName' () => DynamicQueryCore.Auto(lazyQuery())' entityImplementations ?? DefaultImplementations(typeof(T)' queryName)); " is 168.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteQuery,The length of the statement  "                return Execute(ExecuteType.ExecuteGroupQuery' request.QueryName' request' dqb => dqb.Core.Value.ExecuteQueryGroup(request)); " is 124.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteQueryAsync,The length of the statement  "                return ExecuteAsync(ExecuteType.ExecuteQuery' request.QueryName' request' dqb => dqb.Core.Value.ExecuteQueryAsync(request' token)); " is 131.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteQueryAsync,The length of the statement  "                return ExecuteAsync(ExecuteType.ExecuteGroupQuery' request.QueryName' request' dqb => dqb.Core.Value.ExecuteQueryGroupAsync(request' token)); " is 141.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteQueryCount,The length of the statement  "            return Execute(ExecuteType.ExecuteQueryCount' request.QueryName' request' dqb => dqb.Core.Value.ExecuteQueryValue(request)); " is 124.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteQueryCountAsync,The length of the statement  "            return ExecuteAsync(ExecuteType.ExecuteQueryCount' request.QueryName' request' dqb => dqb.Core.Value.ExecuteQueryValueAsync(request' token)); " is 141.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteUniqueEntity,The length of the statement  "            return Execute(ExecuteType.ExecuteUniqueEntity' request.QueryName' request' dqb => dqb.Core.Value.ExecuteUniqueEntity(request)); " is 128.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,ExecuteUniqueEntityAsync,The length of the statement  "            return ExecuteAsync(ExecuteType.ExecuteUniqueEntity' request.QueryName'request' dqb => dqb.Core.Value.ExecuteUniqueEntityAsync(request' token)); " is 144.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,AssertQueryAllowed,The length of the statement  "                throw new UnauthorizedAccessException("Access to query {0} not allowed {1}".FormatWith(queryName' QueryAllowed(queryName' false) ? " for full screen" : "")); " is 157.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,RegisterExpression,The length of the statement  "                else throw new InvalidOperationException("argument 'lambdaToMethodOrProperty' should be a simple lambda calling a method or property: {0}".FormatWith(lambdaToMethodOrProperty.ToString())); " is 188.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryManager,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,AssertExtensionMethod,The length of the statement  "                throw new InvalidOperationException("The parameter 'lambdaToMethod' should be an expression calling a expression method"); " is 122.
Long Statement,Signum.Engine.DynamicQuery,DynamicQueryFluentInclude,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,WithQuery,The length of the statement  "            dqm.RegisterQuery(typeof(T)' new DynamicQueryBucket(typeof(T)' () => DynamicQueryCore.FromSelectorUntyped(lazyQuerySelector())' Implementations.By(typeof(T)))); " is 160.
Long Statement,Signum.Engine.DynamicQuery,ExtensionInfo,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQueryManager.cs,CreateToken,The length of the statement  "            return new ExtensionToken(parent' Key' Type' IsProjection' info.Unit' info.Format' info.Implementations' info.IsAllowed()' info.PropertyRoute) " is 142.
Long Statement,Signum.Engine.DynamicQuery,AutocompleteUtils,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\AutocompleteUtils.cs,LiteByIdAsync,The length of the statement  "            return Database.Query<T>().Where(a => a.id == id).Select(a => a.ToLite()).SingleOrDefaultAsync(token).ContinueWith(t => (Lite<Entity>)t.Result); " is 144.
Long Statement,Signum.Engine.Linq,JoinExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The length of the statement  "            return "{0}\r\n{1}\r\n{2}\r\nON {3}".FormatWith(Left.ToString().Indent(4)' JoinType' Right.ToString().Indent(4)' Condition?.ToString()); " is 136.
Long Statement,Signum.Engine.Linq,SetOperatorExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The length of the statement  "            return "{0}\r\n{1}\r\n{2}\r\n as {3}".FormatWith(Left.ToString().Indent(4)' Operator' Right.ToString().Indent(4)' Alias); " is 121.
Long Statement,Signum.Engine.Linq,AggregateRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\AggregateRewriter.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' select.Top' aggColumns' select.From' select.Where' select.OrderBy' select.GroupBy' select.SelectOptions); " is 166.
Long Statement,Signum.Engine.Linq,AliasReplacer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\AliasReplacer.cs,VisitSelect,The length of the statement  "            if (top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy || newAlias != select.Alias) " is 185.
Long Statement,Signum.Engine.Linq,AliasReplacer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\AliasReplacer.cs,VisitSelect,The length of the statement  "                return new SelectExpression(newAlias' select.IsDistinct' top' columns' from' where' orderBy' groupBy' select.SelectOptions); " is 124.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,MakeSqlCondition,The length of the statement  "            var result = Expression.Equal(exp' exp.Type.IsNullable() ? new SqlConstantExpression(true).Nullify() : new SqlConstantExpression(true)); " is 136.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,MakeSqlValue,The length of the statement  "            var result =  new CaseExpression(new[] { new When(exp' new SqlConstantExpression(true)) }' new SqlConstantExpression(false)); " is 125.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,IsTrue,The length of the statement  "            return operand == TrueCondition || (operand is SqlConstantExpression && ((SqlConstantExpression)operand).Value.Equals(1)); " is 122.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,IsFalse,The length of the statement  "            return operand == FalseCondition || (operand is SqlConstantExpression && ((SqlConstantExpression)operand).Value.Equals(0)); " is 123.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,VisitSelect,The length of the statement  "            if (top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy) " is 157.
Long Statement,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' top' columns' from' where' orderBy' groupBy' select.SelectOptions); " is 128.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,VisitProjection,The length of the statement  "                    List<ColumnDeclaration> columnsSMInternal = proj.Select.Columns.Select(cd => generatorSM.MapColumn(cd.GetReference(proj.Select.Alias))).ToList(); " is 145.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,VisitProjection,The length of the statement  "                    Expression key = TupleReflection.TupleChainConstructor(columnsSMExternal.Select(cd => cd.GetReference(aliasSM).Nullify())); " is 123.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,VisitProjection,The length of the statement  "                        TupleReflection.TupleChainConstructor(columns.Select(a => a.Nullify()))' inMList != null' inMList ?? proj.Type' new LookupToken()); " is 131.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,WithoutOrder,The length of the statement  "            return new SelectExpression(sel.Alias' sel.IsDistinct' sel.Top' sel.Columns' sel.From' sel.Where' null' sel.GroupBy' sel.SelectOptions); " is 136.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,ExtractOrders,The length of the statement  "                Dictionary<OrderExpression' ColumnDeclaration> newColumns = sel.OrderBy.ToDictionary(o => o' o => cg.NewColumn(o.Expression)); " is 126.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,ExtractOrders,The length of the statement  "                innerOrders = newColumns.Select(kvp => new OrderExpression(kvp.Key.OrderType' kvp.Value.GetReference(sel.Alias))).ToList(); " is 123.
Long Statement,Signum.Engine.Linq,ChildProjectionFlattener,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,ExtractOrders,The length of the statement  "                return new SelectExpression(sel.Alias' sel.IsDistinct' sel.Top' sel.Columns.Concat(newColumns.Values)' sel.From' sel.Where' null' sel.GroupBy' sel.SelectOptions); " is 162.
Long Statement,Signum.Engine.Linq,KeyFinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,KeysSelect,The length of the statement  "                    return select.GroupBy.Select(ce => select.Columns.FirstOrDefault(cd => cd.Expression.Equals(ce) /*could be improved*/)?.Let(cd => cd.GetReference(select.Alias))).ToList(); " is 171.
Long Statement,Signum.Engine.Linq,KeyFinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ChildProjectionFlattener.cs,KeysSelect,The length of the statement  "                var result = inner.Select(ce => select.Columns.FirstOrDefault(cd => cd.Expression.Equals(ce))?.Let(cd => cd.GetReference(select.Alias))).ToList(); " is 146.
Long Statement,Signum.Engine.Linq,OrderByRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OrderByRewriter.cs,VisitSelect,The length of the statement  "            return new SelectExpression(select.Alias' select.IsDistinct' select.Top' (IEnumerable<ColumnDeclaration>)newColumns ?? select.Columns' " is 134.
Long Statement,Signum.Engine.Linq,OrderByRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OrderByRewriter.cs,AppendKeys,The length of the statement  "                var postOrders = this.gatheredKeys.Where(e => !hs.Contains(CleanCast(e))).Select(a => new OrderExpression(OrderType.Ascending' a)); " is 131.
Long Statement,Signum.Engine.Linq,GroupEntityCleaner,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\GroupEntityCleaner.cs,VisitEntity,The length of the statement  "            return new EntityExpression(fieldInit.Type' newID' null' null' null' fieldInit.AvoidExpandOnRetrieving); // remove bindings " is 123.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSetOperatorPart,The length of the statement  "                CurrentScope.AddRange(askedColumns.ToDictionary(c => new ColumnExpression(c.Type' part.Alias' c.Name)' c => (Expression)null)); " is 127.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The length of the statement  "            Dictionary<ColumnExpression' Expression> askedColumns = CurrentScope.Keys.Where(k => select.KnownAliases.Contains(k.Alias)).ToDictionary(k => k' k => (Expression)null); " is 168.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The length of the statement  "            Dictionary<ColumnExpression' Expression> externalAnswers = CurrentScope.Where(kvp => !select.KnownAliases.Contains(kvp.Key.Alias) && kvp.Value != null).ToDictionary(); " is 167.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The length of the statement  "            var externals = CurrentScope.Where(kvp => !select.KnownAliases.Contains(kvp.Key.Alias) && kvp.Value == null).ToDictionary(); " is 124.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The length of the statement  "            if (top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy) " is 157.
Long Statement,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' top' columns' from' where' orderBy' groupBy' select.SelectOptions); " is 128.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The length of the statement  "                //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector) " is 132.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The length of the statement  "                //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector) " is 152.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The length of the statement  "                    //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector); " is 254.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The length of the statement  "                    bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ); " is 124.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The length of the statement  "                else if (ReflectionTools.MethodEqual(mi' miToStringSeparatorE) || ReflectionTools.MethodEqual(mi' miToStringSeparatorQ)) " is 120.
Long Statement,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMember,The length of the statement  "            if (m.Expression != null && m.Expression.Type.IsGenericType && m.Expression.Type.GetGenericTypeDefinition() == typeof(MList<>) && m.Member is PropertyInfo && m.Member.Name == "Count") " is 183.
Long Statement,Signum.Engine.Linq,EntityCompleter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\EntityCompleter.cs,VisitLiteReference,The length of the statement  "                lite.Reference is ImplementedByExpression && ((ImplementedByExpression)lite.Reference).Implementations.Select(imp=>imp.Value.ExternalId.ValueType.Nullify()).Distinct().Count() > 1 ? " is 181.
Long Statement,Signum.Engine.Linq,DbExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionVisitor.cs,VisitSelect,The length of the statement  "            if (top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy) " is 157.
Long Statement,Signum.Engine.Linq,DbExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionVisitor.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' top' columns' from' where' orderBy' groupBy' select.SelectOptions); " is 128.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitConstant,The length of the statement  "            if (!innerProjection && IsFullNominateOrAggresive && (Schema.Current.Settings.IsDbType(c.Type.UnNullify()) || c.Type == typeof(object) && c.IsNull())) " is 150.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitSqlTableValuedFunction,The length of the statement  "                sqlFunction = new SqlTableValuedFunctionExpression(sqlFunction.SqlFunction' sqlFunction.Table' sqlFunction.Alias' args); ; " is 122.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TrySqlToString,The length of the statement  "            if (IsFullNominateOrAggresive && m.Arguments.Any() && (expression.Type.UnNullify() == typeof(DateTime) || ReflectionTools.IsNumber(expression.Type.UnNullify())) && Connector.Current.SupportsFormat) " is 197.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TrySqlToString,The length of the statement  "                    throw new InvalidOperationException($"Impossible to get the ToString of {newExp.Type.Name} because is not in the Schema"); " is 122.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,GetFormatToString,The length of the statement  "            var culture = m.TryGetArgument("culture")?.Let(e => (CultureInfo)((ConstantExpression)Visit(e)).Value) ?? CultureInfo.CurrentCulture; " is 133.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TrySqlMonthStart,The length of the statement  "                      TrySqlFunction(null' SqlFunction.DATEDIFF' typeof(int)' new SqlEnumExpression(SqlEnums.month)' new SqlConstantExpression(0)' expression)' " is 137.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,DateAdd,The length of the statement  "            return new SqlFunctionExpression(typeof(DateTime)' null' SqlFunction.DATEADD.ToString()' new Expression[] { new SqlEnumExpression(part)' dateExpression' intExpression }); " is 170.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,MinusDatePart,The length of the statement  "            return Expression.Negate(new SqlFunctionExpression(typeof(int)' null' SqlFunction.DATEPART.ToString()' new Expression[] { new SqlEnumExpression(part)' dateExpression })); " is 170.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitBinary,The length of the statement  "                    if ((b.NodeType == ExpressionType.Add || b.NodeType == ExpressionType.Subtract) && b.Left.Type.UnNullify() == typeof(DateTime) && b.Right.Type.UnNullify() == typeof(TimeSpan)) " is 175.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,NullToStringEmpty,The length of the statement  "            return new SqlFunctionExpression(typeof(string)' null' SqlFunction.ISNULL.ToString()' new[] { exp' new SqlConstantExpression("") }); " is 132.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,The length of the statement  "            if (u.NodeType == ExpressionType.Convert && u.Type.IsNullable() && u.Type.UnNullify() == u.Operand.Type && u.Operand.NodeType == ExpressionType.Conditional) " is 156.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,The length of the statement  "                    u = Expression.Convert(Expression.Convert(((UnaryExpression)u.Operand).Operand' underlying.Nullify())' u.Type); //Expand nullability " is 132.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TryCharIndex,The length of the statement  "                SqlFunctionExpression result = new SqlFunctionExpression(typeof(int)' null' SqlFunction.CHARINDEX.ToString()' new[] { newExpression' newSubExpression }); " is 153.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "DateTime.DayOfYear": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.dayofyear)' m.Expression); " is 142.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "DateTime.Hour": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.hour)' m.Expression); " is 132.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "DateTime.Minute": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.minute)' m.Expression); " is 136.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "DateTime.Second": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.second)' m.Expression); " is 136.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "DateTime.Millisecond": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.millisecond)' m.Expression); " is 146.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "TimeSpan.Hours": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.hour)' m.Expression); " is 133.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "TimeSpan.Minutes": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.minute)' m.Expression); " is 137.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "TimeSpan.Seconds": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.second)' m.Expression); " is 137.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMembers,The length of the statement  "                case "TimeSpan.Milliseconds": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.millisecond)' m.Expression); " is 147.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                        Expression charIndex = TrySqlFunction(null' SqlFunction.CHARINDEX' m.Type' m.GetArgument("value")' m.Object' startIndex); " is 121.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                    return TrySqlFunction(null' SqlFunction.REPLACE' m.Type' m.Object' m.GetArgument("oldValue")' m.GetArgument("newValue")); " is 121.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                    return TrySqlFunction(null' SqlFunction.SUBSTRING' m.Type' m.Object' Expression.Add(m.GetArgument("startIndex")' new SqlConstantExpression(1))' m.TryGetArgument("length") ?? new SqlConstantExpression(int.MaxValue)); " is 215.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                    return TryCharIndex(m.GetArgument("value")' m.Object' index => Expression.GreaterThanOrEqual(index' new SqlConstantExpression(1))); " is 131.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddDays": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.day)' m.GetArgument("value")' m.Object); " is 153.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddHours": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.hour)' m.GetArgument("value")' m.Object); " is 155.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddMilliseconds": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.millisecond)' m.GetArgument("value")' m.Object); " is 169.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddMinutes": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.minute)' m.GetArgument("value")' m.Object); " is 159.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddMonths": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.month)' m.GetArgument("months")' m.Object); " is 158.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddSeconds": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.second)' m.GetArgument("value")' m.Object); " is 159.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTime.AddYears": return TrySqlFunction(null' SqlFunction.DATEADD' m.Type' new SqlEnumExpression(SqlEnums.year)' m.GetArgument("value")' m.Object); " is 155.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTimeExtensions.YearsTo": return TryDatePartTo(new SqlEnumExpression(SqlEnums.year)' m.GetArgument("start")' m.GetArgument("end")); " is 140.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTimeExtensions.MonthsTo": return TryDatePartTo(new SqlEnumExpression(SqlEnums.month)' m.GetArgument("start")' m.GetArgument("end")); " is 142.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "DateTimeExtensions.WeekNumber": return TrySqlFunction(null' SqlFunction.DATEPART' m.Type' new SqlEnumExpression(SqlEnums.iso_week)' m.Arguments.Single()); " is 160.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "Math.Log": return m.Arguments.Count != 1 ? null : TrySqlFunction(null' SqlFunction.LOG' m.Type' m.GetArgument("d")); " is 122.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "Math.Ceiling": return TrySqlFunction(null' SqlFunction.CEILING' m.Type' m.TryGetArgument("d") ?? m.GetArgument("a")); " is 123.
Long Statement,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,HardCodedMethods,The length of the statement  "                case "Math.Truncate": return TrySqlFunction(null' SqlFunction.ROUND' m.Type' m.GetArgument("d")' new SqlConstantExpression(0)' new SqlConstantExpression(1)); " is 157.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                            return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes()); " is 161.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                        return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending); " is 122.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                        return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending); " is 123.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                        return this.BindAnyAll(m.Type' m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m.Method' m == root); " is 122.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                        return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value")' m == root); " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "            else if (m.Method.DeclaringType == typeof(Database) && (m.Method.Name == "Retrieve" || m.Method.Name == "RetrieveAndForget")) " is 125.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                throw new InvalidOperationException("{0} is not supported on queries. Consider using Lite<T>.Entity instead.".FormatWith(m.Method.MethodName())); " is 145.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "                    throw new InvalidOperationException("Method {0} is only meant to be used on {1}".FormatWith(m.Method.Name' typeof(ImplementedByExpression).Name)); " is 146.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The length of the statement  "            else if (m.Object != null && typeof(IEnumerable).IsAssignableFrom(m.Method.DeclaringType) && typeof(string) != m.Method.DeclaringType && m.Method.Name == "Contains") " is 165.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The length of the statement  "            Expression where = predicate == null ? null : DbExpressionNominator.FullNominate(MapVisitExpand(predicate' projection)); " is 120.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The length of the statement  "            Expression top = function == UniqueFunction.First || function == UniqueFunction.FirstOrDefault ? Expression.Constant(1) : null; " is 127.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The length of the statement  "            if (!isRoot && !inTableValuedFunction && pc.Projector is ColumnExpression && (function == UniqueFunction.First || function == UniqueFunction.FirstOrDefault)) " is 157.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The length of the statement  "                    new SelectExpression(alias' false' top' new[] { new ColumnDeclaration("val"' pc.Projector) }' projection.Select' where' null' null' 0)); " is 136.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindDistinct,The length of the statement  "            ProjectedColumns pc = ColumnProjector.ProjectColumns(projection.Projector' alias' isGroupKey: true' selectTrivialColumns: true); " is 128.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindOrderAlsoByKeys,The length of the statement  "                new SelectExpression(alias' false' null' pc.Columns' projection.Select' null' null' null' SelectOptions.OrderAlsoByKeys)' " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindToString,The length of the statement  "            ColumnDeclaration cd = new ColumnDeclaration(null' Expression.Add(new SqlConstantExpression(value' typeof(string))' nominated' miStringConcat)); " is 144.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindToString,The length of the statement  "            SelectExpression select = new SelectExpression(alias' false' null' new[] { cd }' projection.Select' null' null' null' SelectOptions.ForXmlPathEmpty); " is 149.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindAggregate,The length of the statement  "                SelectExpression select = new SelectExpression(alias' false' null' new[] { cd }' projection.Select' null' null' null' 0); " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindAnyAll,The length of the statement  "                Expression[] exp = ((IEnumerable)constSource.Value).Cast<object>().Select(o => Expression.Invoke(predicate' Expression.Constant(o' oType))).ToArray(); " is 150.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindContains,The length of the statement  "                    se = new InExpression(newItem' new SelectExpression(alias' false' null' pc.Columns' projection.Select' null' null' null' 0)); " is 125.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindContains,The length of the statement  "                    se = new ExistsExpression(new SelectExpression(alias' false' null' pc.Columns' projection.Select' where' null' null' 0)); " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetUniqueProjection,The length of the statement  "            SelectExpression select = new SelectExpression(alias' false' null' new[] { new ColumnDeclaration("value"' expr) }' null' null' null' null' 0); " is 142.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            ProjectionExpression subqueryProjection = VisitCastProjection(source); // make duplicate of source query as basis of element subquery by visiting the source again " is 162.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            ProjectedColumns keyPC = ColumnProjector.ProjectColumns(key' alias' isGroupKey: true' selectTrivialColumns: true);  // Use ProjectColumns to get group-by expressions from key expression " is 185.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            if (keyPC.Columns.Any(c => ContainsAggregateVisitor.ContainsAggregate(c.Expression))) //SQL Server doesn't like to use aggregates (like Count) as grouping keys' and a intermediate query is necessary " is 198.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            Expression subqueryKey = GroupEntityCleaner.Clean(MapVisitExpand(keySelector' subqueryProjection));// recompute key columns for group expressions relative to subquery (need these for doing the correlation predicate " is 214.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            ProjectedColumns subqueryKeyPC = ColumnProjector.ProjectColumns(subqueryKey' aliasGenerator.Raw("basura")' isGroupKey: true' selectTrivialColumns: true); // use same projection trick to get group-by expressions based on subquery " is 228.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            Expression subqueryElemExpr = MapVisitExpand(elementSelector' subqueryProjection); // compute element based on duplicated subquery " is 130.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "                keyPC.Columns.Zip(subqueryKeyPC.Columns' (c1' c2) => SmartEqualizer.EqualNullableGroupBy(new ColumnExpression(c1.Expression.Type' alias' c1.Name)' c2.Expression)) " is 162.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "                    new SelectExpression(elementAlias' false' null' elementPC.Columns' subqueryProjection.Select' subqueryCorrelation' null' null' 0)' " is 130.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "            NewExpression newResult = Expression.New(typeof(Grouping<'>).MakeGenericType(key.Type' subqueryElemExpr.Type).GetConstructors()[1]' " is 131.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindGroupBy,The length of the statement  "                new SelectExpression(alias' false' null' keyPC.Columns' select' null' null' keyPC.Columns.Select(c => c.Expression)' 0)' " is 120.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetOrderExpression,The length of the statement  "                else if (expr is MethodCallExpression && ReflectionTools.MethodEqual(((MethodCallExpression)expr).Method' miToUserInterface)) " is 125.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetTableValuedFunctionProjection,The length of the statement  "            SqlTableValuedFunctionExpression tableExpression = new SqlTableValuedFunctionExpression(functionName' table' tableAlias' argumens); " is 131.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,The length of the statement  "                return DispatchConditional(m' Expression.NotEqual(bin.Left' Expression.Constant(null' bin.Left.Type))' bin.Left' bin.Right); " is 124.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,The length of the statement  "                    if (e == null || e.NodeType == ExpressionType.Quote || e.NodeType == ExpressionType.Lambda || pi != null && pi.HasAttribute<EagerBindingAttribute>()) " is 149.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,The length of the statement  "                MethodCallExpression simple = Expression.Call(replace(m.Object' null)' m.Method' m.Arguments.Select((a' i) => replace(a' parameters[i])).ToArray()); " is 148.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,The length of the statement  "                        var ee = new EntityExpression(EnumEntity.Generate(source.Type.UnNullify())' new PrimaryKeyExpression(((UnaryExpression)source).Operand.Nullify())' null' null' null' false); " is 172.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "            if (source != null && m.Member is PropertyInfo && ExpressionCleaner.HasExpansions(source.Type' (PropertyInfo)m.Member) && source is EntityExpression) //new expansions discovered " is 177.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                int index = nex.Constructor.GetParameters().IndexOf(p => p.Name.Equals(m.Member.Name' StringComparison.InvariantCultureIgnoreCase)); " is 132.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                    throw new InvalidOperationException("Impossible to bind '{0}' on '{1}'".FormatWith(m.Member.Name' nex.Constructor.ConstructorSignature())); " is 139.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                            throw new InvalidOperationException("The member {0} of {1} is not accessible on queries".FormatWith(m.Member.Name' ee.Type.TypeName())); " is 136.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                            throw new InvalidOperationException("The member {0} of {1} is not accesible on queries".FormatWith(m.Member.Name' eee.Type.TypeName())); " is 136.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                            throw new InvalidOperationException("The member {0} of {1} is not accesible on queries".FormatWith(m.Member.Name' mee.Type.TypeName())); " is 136.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                                return BindMemberAccess(Expression.Property(liteRef.Reference' liteRef.Reference.Type.IsInterface ? piIdInterface : piIdClass)); " is 128.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The length of the statement  "                                        throw new InvalidOperationException("The member {0} of ImplementedByAll is not accesible on queries".FormatWith(m.Member)); " is 123.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "                var id = new PrimaryKeyExpression(CombineImplementations(strategy' expressions.SelectDictionary(imp => ((EntityExpression)imp).ExternalId.Value)' " is 145.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "                        return new EntityExpression(t' new PrimaryKeyExpression(new SqlConstantExpression(null' PrimaryKey.Type(t).Nullify()))' null' null' null' false); " is 145.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "                var stra = expressions.Values.OfType<ImplementedByExpression>().Select(a => a.Strategy).Distinct().Only(); //Default Union " is 122.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "                var hasValue = CombineImplementations(strategy' expressions.SelectDictionary(w => ((EmbeddedEntityExpression)w).HasValue ?? new SqlConstantExpression(true))' typeof(bool)); " is 172.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "            if (expressions.Any(e => e.Value is TypeImplementedByAllExpression || e.Value is TypeImplementedByExpression || e.Value is TypeEntityExpression)) " is 145.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineImplementations,The length of the statement  "                var typeId = CombineImplementations(strategy' expressions.SelectDictionary(exp => ExtractTypeId(exp).Value)' PrimaryKey.Type(typeof(TypeEntity)).Nullify()); " is 156.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ExtractTypeId,The length of the statement  "                    Expression.NotEqual(typeFie.ExternalId.Value.Nullify()' Expression.Constant(null' typeFie.ExternalId.ValueType.Nullify()))' " is 123.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ExtractTypeId,The length of the statement  "                    Expression.Condition(Expression.NotEqual(imp.Value.Value.Nullify()' Expression.Constant(null' imp.Value.ValueType.Nullify()))' " is 126.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitTypeBinary,The length of the statement  "                    throw new InvalidCastException("Impossible the type {0} (non-lite) with the expression {1}".FormatWith(type.TypeName()' b.Expression.ToString())); " is 146.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitTypeBinary,The length of the statement  "                EntityExpression[] fies = ib.Implementations.Where(imp => type.IsAssignableFrom(imp.Key)).Select(imp => imp.Value).ToArray(); " is 125.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitTypeBinary,The length of the statement  "                return fies.Select(f => (Expression)Expression.NotEqual(f.ExternalId.Nullify()' NullId(f.ExternalId.ValueType))).AggregateOr(); " is 127.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                throw new InvalidCastException("Impossible to convert {0} to {1}".FormatWith(operand.Type.TypeName()' uType.TypeName())); " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                    return new ImplementedByExpression(uType' CombineStrategy.Case' new Dictionary<Type' EntityExpression> { { operand.Type' ee } }.ToReadOnly()); " is 142.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                    return new EntityExpression(uType' new PrimaryKeyExpression(Expression.Constant(null' PrimaryKey.Type(uType).Nullify()))' null' null' null' ee.AvoidExpandOnRetrieving); " is 168.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                EntityExpression[] fies = ib.Implementations.Where(imp => uType.IsAssignableFrom(imp.Key)).Select(imp => imp.Value).ToArray(); " is 126.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                    return new EntityExpression(uType' new PrimaryKeyExpression(Expression.Constant(null' PrimaryKey.Type(uType).Nullify()))' null' null' null' avoidExpandOnRetrieving: true); " is 171.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EntityCasting,The length of the statement  "                    throw new InvalidCastException("Impossible to convert an expression of type {0} to {1}".FormatWith(lite.Type.TypeName()' uType.TypeName())); " is 140.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitBinary,The length of the statement  "                    //    throw new InvalidOperationException("Comparing {0} and {1} is not valid in SQL".FormatWith(b.Left.ToString()' b.Right.ToString()));  " is 137.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUpdate,The length of the statement  "                        throw new InvalidOperationException("The expression '{0}' can not be used as a propertyExpression. Consider using UnsafeUpdatePart" " is 131.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindInsert,The length of the statement  "            if (table is Table entityTable && entityTable.Ticks != null && assignments.None(b => b.Column == entityTable.Ticks.Name)) " is 121.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,InvalidBody,The length of the statement  "            throw new InvalidOperationException("The only allowed expressions on UnsafeInsert are: object initializers' calling method 'SetMixin'' or or calling 'Administrator.SetReadonly'"); " is 179.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,Assign,The length of the statement  "                return new[] { AssignColumn(SmartEqualizer.UnwrapPrimaryKey(colExpression)' SmartEqualizer.UnwrapPrimaryKey(expression)) }; " is 123.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,Assign,The length of the statement  "            else if (colExpression.NodeType == ExpressionType.Convert && colExpression.Type == ((UnaryExpression)colExpression).Operand.Type.UnNullify()) " is 141.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,Assign,The length of the statement  "            else if (colExpression.NodeType == ExpressionType.Convert && colExpression.Type.UnNullify().IsEnum && ((UnaryExpression)colExpression).Operand is ColumnExpression) " is 163.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,Assign,The length of the statement  "            throw new NotImplementedException("{0} can not be assigned from expression:\n{1}".FormatWith(colExpression.Type.TypeName()' expression.ToString())); " is 148.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,Completed,The length of the statement  "                var result = new EntityExpression(entity.Type' entity.ExternalId' newAlias' bindings' mixins' avoidExpandOnRetrieving: false); " is 126.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetId,The length of the statement  "                var type = ib.Implementations.Select(imp => imp.Value.ExternalId.ValueType.Nullify()).Distinct().SingleOrDefaultEx() ?? typeof(int?); " is 133.
Long Statement,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,MListProjection,The length of the statement  "            var where = DbExpressionNominator.FullNominate(SmartEqualizer.EqualNullable(mle.BackID' relationalTable.BackColumnExpression(tableAlias))); " is 139.
Long Statement,Signum.Engine.Linq,SwitchStrategy,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineValues,The length of the statement  "                    .Select(kvp => new When(Expression.NotEqual(kvp.Value.ExternalId' NullId(kvp.Value.ExternalId.ValueType))' implementations[kvp.Key])) " is 133.
Long Statement,Signum.Engine.Linq,UnionAllRequest,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ToString,The length of the statement  "            return base.ToString() + " LEFT OUTER JOIN with " + Implementations.Values.ToString(i => i.Table.ToString()' " UNION ALL "); " is 124.
Long Statement,Signum.Engine.Linq,UnionAllRequest,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,AddUnionColumn,The length of the statement  "            string name = suggestedName == null ? columnGenerator.GetNextColumnName() : columnGenerator.GetUniqueColumnName(suggestedName); " is 127.
Long Statement,Signum.Engine.Linq,UnionAllRequest,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,AddIndependentColumn,The length of the statement  "            var nullValue = type.IsValueType ? Expression.Constant(null' type.Nullify()).UnNullify() : Expression.Constant(null' type); " is 123.
Long Statement,Signum.Engine.Linq,UnionAllRequest,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ExternalAlias,The length of the statement  "            return OriginalImplementedBy.Implementations.Values.SelectMany(ee => UsedAliasGatherer.Externals(ee.ExternalId)).ToHashSet(); " is 125.
Long Statement,Signum.Engine.Linq,QueryJoinExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ApplyExpansions,The length of the statement  "                    Expression equal = DbExpressionNominator.FullNominate(SmartEqualizer.EqualNullable(tr.CompleteEntity.ExternalId' tr.CompleteEntity.GetBinding(EntityExpression.IdField))); " is 170.
Long Statement,Signum.Engine.Linq,QueryJoinExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,ApplyExpansions,The length of the statement  "                    }).Aggregate<SourceWithAliasExpression>((a' b) => new SetOperatorExpression(SetOperator.UnionAll' a' b' ur.UnionAlias)); " is 120.
Long Statement,Signum.Engine.Linq,QueryJoinExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,WrapSelect,The length of the statement  "            var select = new SelectExpression(newAlias' false' null' new ColumnDeclaration[0] /*Rebinder*/' source' null' null' null' 0); " is 125.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,CombineConditional,The length of the statement  "                       col.Bindings.Select(bin => GetBinding(bin.FieldInfo' Expression.Condition(test' t.GetBinding(bin.FieldInfo).Nullify()' f.GetBinding(bin.FieldInfo).Nullify())' bin.Binding))' " is 173.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitEntity,The length of the statement  "                        Expression.Condition(Expression.Equal(ee.ExternalId.Value.Nullify()' new SqlConstantExpression(null' ee.ExternalId.ValueType.Nullify()))' " is 137.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitEntity,The length of the statement  "                return new ImplementedByExpression(colExpression.Type' ib.Strategy' ib.Implementations.ToDictionary(kvp => kvp.Key' kvp => " is 122.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitImplementedBy,The length of the statement  "                    new PrimaryKeyExpression(QueryBinder.Coalesce(ib.Implementations.Values.Select(a => a.ExternalId.ValueType.Nullify()).Distinct().SingleEx()' ib.Implementations.Select(e => e.Value.ExternalId)))' " is 194.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitImplementedBy,The length of the statement  "                     ib.Implementations.Select(imp => new When(imp.Value.ExternalId.NotEqualsNulll()' QueryBinder.TypeConstant(imp.Key))).ToList() " is 125.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitImplementedBy,The length of the statement  "                    new EntityExpression(kvp.Key' new PrimaryKeyExpression(Expression.Constant(null' PrimaryKey.Type(kvp.Key).Nullify()))' null' null' null' false))); " is 146.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetEntityConstant,The length of the statement  "                    throw new InvalidOperationException("Impossible to convert {0} to {1}".FormatWith(type.TypeName()' colExpression.Type.TypeName())); " is 131.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,GetEntityConstant,The length of the statement  "                      new EntityExpression(kvp.Key' new PrimaryKeyExpression(type != kvp.Key ? Expression.Constant(null' id.Type.Nullify()) : id)' null' null' null' false))); " is 152.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,EmbeddedFromConstant,The length of the statement  "            return new EmbeddedEntityExpression(contant.Type' Expression.Constant(value != null)' bindings' embedded.FieldEmbedded); " is 120.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMemberInit,The length of the statement  "            var dic = init.Bindings.OfType<MemberAssignment>().ToDictionary(a => (a.Member as FieldInfo ?? Reflector.FindFieldInfo(init.Type' (PropertyInfo)a.Member)).Name' a => a.Expression); " is 180.
Long Statement,Signum.Engine.Linq,AssignAdapterExpander,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMemberInit,The length of the statement  "                                fi.FieldType.IsValueType && !fi.FieldType.IsNullable() ? dic.GetOrThrow(fi.Name' "No value defined for non-nullable field {0}") : " is 129.
Long Statement,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,CreateParameter,The length of the statement  "                Parameter = pb.CreateParameter(name' typePair.SqlDbType' typePair.UserDefinedTypeName' nullable' value.Value ?? DBNull.Value)' " is 126.
Long Statement,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,VisitJoin,The length of the statement  "            bool needsMoreParenthesis = (join.JoinType == JoinType.CrossApply || join.JoinType == JoinType.OuterApply) && join.Right is JoinExpression; " is 139.
Long Statement,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,VisitSelect,The length of the statement  "                        select = new SelectExpression(select.Alias' isDistinct' top' select.Columns' select.From' where' orderBy' groupBy' select.SelectOptions); " is 137.
Long Statement,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The length of the statement  "                if (frmHasGroupBy /*&& (select.Where != null)*/) // need to assert projection is the same in order to move group-by forward " is 123.
Long Statement,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The length of the statement  "                if (fromSelect.Top != null && (select.Top != null || /*select.Skip != null ||*/ select.IsDistinct || selHasGroupBy || HasApplyJoin(select.From) || select.Where != null)) " is 169.
Long Statement,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The length of the statement  "                if (fromSelect.IsDistinct && (select.Top != null || /*select.Skip != null ||*/ !IsNameMapProjection(select) || selHasGroupBy || (selHasOrderBy && !isTopLevel) || AggregateChecker.HasAggregates(select))) " is 202.
Long Statement,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,HasApplyJoin,The length of the statement  "                return join.JoinType == JoinType.CrossApply || join.JoinType == JoinType.OuterApply || HasApplyJoin(join.Left) || HasApplyJoin(join.Right); " is 139.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,ConstanToNewExpression,The length of the statement  "            return Expression.New(ci' ci.GetParameters().Select(p => Expression.Constant(values.GetOrThrow(p.Name)' p.ParameterType))); " is 123.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                if (exp2.NodeType == ExpressionType.Constant) return TypeConstantConstantEquals((ConstantExpression)exp1' (ConstantExpression)exp2); " is 132.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeEntityExpression) return TypeConstantFieEquals((ConstantExpression)exp1' (TypeEntityExpression)exp2); " is 122.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByExpression) return TypeConstantIbEquals((ConstantExpression)exp1' (TypeImplementedByExpression)exp2); " is 135.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByAllExpression) return TypeConstantIbaEquals((ConstantExpression)exp1' (TypeImplementedByAllExpression)exp2); " is 142.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                if (exp2.NodeType == ExpressionType.Constant) return TypeConstantFieEquals((ConstantExpression)exp2' (TypeEntityExpression)exp1); " is 129.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByExpression) return TypeFieIbEquals((TypeEntityExpression)exp1' (TypeImplementedByExpression)exp2); " is 132.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByAllExpression) return TypeFieIbaEquals((TypeEntityExpression)exp1' (TypeImplementedByAllExpression)exp2); " is 139.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                if (exp2.NodeType == ExpressionType.Constant) return TypeConstantIbEquals((ConstantExpression)exp2' (TypeImplementedByExpression)exp1); " is 135.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeEntityExpression) return TypeFieIbEquals((TypeEntityExpression)exp2' (TypeImplementedByExpression)exp1); " is 125.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByExpression) return TypeIbIbEquals((TypeImplementedByExpression)exp1' (TypeImplementedByExpression)exp2); " is 138.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByAllExpression) return TypeIbIbaEquals((TypeImplementedByExpression)exp1' (TypeImplementedByAllExpression)exp2); " is 145.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                if (exp2.NodeType == ExpressionType.Constant) return TypeConstantIbaEquals((ConstantExpression)exp2' (TypeImplementedByAllExpression)exp1); " is 139.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeEntityExpression) return TypeFieIbaEquals((TypeEntityExpression)exp2' (TypeImplementedByAllExpression)exp1); " is 129.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByExpression) return TypeIbIbaEquals((TypeImplementedByExpression)exp2' (TypeImplementedByAllExpression)exp1); " is 142.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "                else if (exp2 is TypeImplementedByAllExpression) return TypeIbaIbaEquals((TypeImplementedByAllExpression)exp1' (TypeImplementedByAllExpression)exp2); " is 149.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeEquals,The length of the statement  "            throw new InvalidOperationException("Impossible to resolve '{0}' equals '{1}'".FormatWith(exp1.ToString()' exp2.ToString())); " is 125.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeFieIbaEquals,The length of the statement  "            return Expression.And(NotEqualToNull(typeFie.ExternalId)' EqualNullable(typeIba.TypeColumn' QueryBinder.TypeConstant(typeFie.TypeValue))); " is 138.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeIbIbaEquals,The length of the statement  "                .Select(imp => Expression.And(NotEqualToNull(imp.Value)' EqualNullable(typeIba.TypeColumn' QueryBinder.TypeConstant(imp.Key)))) " is 127.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,TypeIn,The length of the statement  "            throw new InvalidOperationException("Impossible to resolve '{0}' in '{1}'".FormatWith(typeExpr.ToString()' collection.ToString(t=>t.TypeName()' "' "))); " is 152.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityIn,The length of the statement  "            Dictionary<Type' PrimaryKey[]> entityIDs = collection.Where(a => a.IdOrNull.HasValue).AgGroupToDictionary(a => a.GetType()' gr => gr.Select(a => a.Id).ToArray()); " is 162.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityIn,The length of the statement  "            Dictionary<Type' PrimaryKey[]> entityIDs = collection.Where(a => a.IdOrNull.HasValue).AgGroupToDictionary(a => a.EntityType' gr => gr.Select(a => a.Id).ToArray()); " is 163.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityIn,The length of the statement  "                    (t' f' values) => Expression.And(DbExpressionNominator.FullNominate(NotEqualToNull(f.ExternalId))' InPrimaryKey(f.ExternalId' values))) " is 135.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,LiteEquals,The length of the statement  "                    throw new InvalidOperationException("Imposible to compare expressions of type {0} == {1}".FormatWith(e1.Type.TypeName()' e2.Type.TypeName())); " is 142.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityEquals,The length of the statement  "                else if (e2 is ImplementedByAllExpression) return IbIbaEquals((ImplementedByExpression)e1' (ImplementedByAllExpression)e2); " is 123.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityEquals,The length of the statement  "                else if (e2.IsNull()) return ((ImplementedByExpression)e1).Implementations.Select(a => EqualsToNull(a.Value.ExternalId)).AggregateAnd(); " is 136.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityEquals,The length of the statement  "                else if (e2 is ImplementedByExpression) return IbIbaEquals((ImplementedByExpression)e2' (ImplementedByAllExpression)e1); " is 120.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityEquals,The length of the statement  "                else if (e2 is ImplementedByAllExpression) return IbaIbaEquals((ImplementedByAllExpression)e1' (ImplementedByAllExpression)e2); " is 127.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,EntityEquals,The length of the statement  "                else if (e2 is ImplementedByExpression) return ((ImplementedByExpression)e2).Implementations.Select(a => EqualsToNull(a.Value.ExternalId)).AggregateAnd(); " is 154.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,FieIbaEquals,The length of the statement  "                ee.ExternalId.Value == NewId ? False : EqualNullable(new SqlCastExpression(typeof(string)' ee.ExternalId.Value)' iba.Id)' " is 121.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,IbIbEquals,The length of the statement  "            var list = ib.Implementations.JoinDictionary(ib2.Implementations' (t' i' j) => EqualNullable(i.ExternalId.Value' j.ExternalId.Value)).Values.ToList(); " is 150.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,IbIbaEquals,The length of the statement  "                i.ExternalId.Value == NewId ? (Expression)False : EqualNullable(iba.Id' new SqlCastExpression(typeof(string)' i.ExternalId.Value))' " is 131.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,IbaIbaEquals,The length of the statement  "            return Expression.And(EqualNullable(iba.Id' iba2.Id)' EqualNullable(iba.TypeId.TypeColumn.Value' iba2.TypeId.TypeColumn.Value));  " is 128.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,ConstantToEntity,The length of the statement  "                var id = ei.IdOrNull?.Let(pk => Expression.Constant(pk.Object' PrimaryKey.Type(ei.GetType()).Nullify())) ?? SmartEqualizer.NewId; " is 129.
Long Statement,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,ConstantToLite,The length of the statement  "                var id = lite.IdOrNull?.Let(pk => Expression.Constant(pk.Object' PrimaryKey.Type(lite.EntityType).Nullify())) ?? SmartEqualizer.NewId; " is 134.
Long Statement,Signum.Engine.Linq,GuidComparer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,GetMethod,The length of the statement  "                    case ExpressionType.GreaterThanOrEqual: return ReflectionTools.GetMethodInfo(() => GreaterThanOrEqual(Guid.Empty' Guid.Empty)); " is 127.
Long Statement,Signum.Engine.Linq,GuidComparer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,GetMethod,The length of the statement  "                    case ExpressionType.LessThanOrEqual: return ReflectionTools.GetMethodInfo(() => LessThanOrEqual(Guid.Empty' Guid.Empty)); " is 121.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitUnary,The length of the statement  "                if (u.NodeType == ExpressionType.Convert && u.Operand is ColumnExpression && DiffersInNullability(u.Type' u.Operand.Type)) " is 122.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitMixinEntity,The length of the statement  "                throw new InvalidOperationException("Impossible to retrieve MixinEntity {0} without their main entity".FormatWith(me.Type.Name));  " is 129.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitEntity,The length of the statement  "                LambdaExpression lambda = Expression.Lambda(typeof(Action<>).MakeGenericType(fieldInit.Type)' Expression.Block(bindings)' e); " is 125.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitEmbeddedEntity,The length of the statement  "                    embeddedBindings.Add(Expression.Call(retriever' miModifiablePostRetrieving.MakeGenericMethod(eee.Type)' embeddedParam)); " is 120.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitImplementedBy,The length of the statement  "                return rb.Implementations.Select(ee => new When(Visit(ee.Value.ExternalId).NotEqualsNulll()' Visit(ee.Value))).ToCondition(rb.Type); " is 132.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitLiteValue,The length of the statement  "                    liteConstructor = Expression.Convert(Expression.Call(miLiteCreateParse' Expression.Constant(Schema.Current)' tid' id.UnNullify()' toStringOrNull)' lite.Type); " is 158.
Long Statement,Signum.Engine.Linq,ProjectionBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,VisitLiteValue,The length of the statement  "                    return Expression.Call(retriever' miModifiablePostRetrieving.MakeGenericMethod(typeof(LiteImp))' liteConstructor.TryConvert(typeof(LiteImp))).TryConvert(liteConstructor.Type); " is 175.
Long Statement,Signum.Engine.Linq,Scope,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,LookupEager,The length of the statement  "                throw new InvalidOperationException("Eager ChildProyection with UniqueFunction '{0}' not expected at this stage".FormatWith(cProj.Projection.UniqueFunction)); " is 158.
Long Statement,Signum.Engine.Linq,Scope,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,LookupMList,The length of the statement  "                throw new InvalidOperationException("Lazy ChildProyection of type '{0}' instead of MList".FormatWith(cProj.Type.TypeName())); " is 125.
Long Statement,Signum.Engine.Linq,Scope,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\TranslatorBuilder.cs,LookupMList,The length of the statement  "                throw new InvalidOperationException("Lazy ChildProyection with UniqueFunction '{0}'".FormatWith(cProj.Projection.UniqueFunction)); " is 130.
Long Statement,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,VisitSelect,The length of the statement  "            ReadOnlyCollection<Expression> groupBy = select.GroupBy.Select(e => IsConstant(e) ? null : Visit(e)).NotNull().ToReadOnly(); " is 124.
Long Statement,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,VisitSelect,The length of the statement  "            if (columns != select.Columns || orderbys != select.OrderBy || where != select.Where || from != select.From || groupBy != select.GroupBy) " is 137.
Long Statement,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' select.Top' columns' from' where' orderbys' groupBy' select.SelectOptions); " is 136.
Long Statement,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,AddSingleColumn,The length of the statement  "                throw new InvalidOperationException("Subquery has {0} columns: {1}".FormatWith(subQuery.Select.Columns.Count' subQuery.ToString())); " is 132.
Long Statement,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,VisitRowNumber,The length of the statement  "            var orderBys = Visit(rowNumber.OrderBy' o => IsConstant(o.Expression) ? null : Visit(o.Expression).Let(e => e == o.Expression ? o : new OrderExpression(o.OrderType' e))); ; " is 172.
Long Statement,Signum.Engine.Linq,EntityExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,GetBinding,The length of the statement  "            FieldBinding binding = Bindings.Where(fb => ReflectionTools.FieldEquals(fi' fb.FieldInfo)).SingleEx(() => "field '{0}' in {1} (field Ignored?)".FormatWith(fi.Name' this.Type.TypeName())); " is 187.
Long Statement,Signum.Engine.Linq,LiteReferenceExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The length of the statement  "            return "({0}).ToLite({1})".FormatWith(Reference.ToString()' CustomToStr == null ? null : ("customToStr: " + CustomToStr.ToString())); " is 133.
Long Statement,Signum.Engine.Linq,TypeImplementedByExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The length of the statement  "            return "TypeIb({0})".FormatWith(TypeImplementations.ToString(kvp => "{0}({1})".FormatWith(kvp.Key.TypeName()' kvp.Value.ToString())' " | ")); " is 141.
Long Statement,Signum.Engine.Linq,CommandSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UpdateDeleteSimplifier.cs,Simplify,The length of the statement  "            return (CommandExpression)new CommandSimplifier { removeSelectRowCount = removeSelectRowCount' aliasGenerator = aliasGenerator }.Visit(ce); " is 139.
Long Statement,Signum.Engine.Linq,MetaExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetaExpression.cs,FromToken,The length of the statement  "            //throw new InvalidOperationException("Impossible to convert {0} to {1}".FormatWith(pr.Type.TypeName()' sourceType.TypeName())); " is 128.
Long Statement,Signum.Engine.Linq,ProjectionRowEnumerator<T>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ProjectionReader.cs,LookupRequest,The length of the statement  "            Dictionary<K' MList<S>> dictionary = (Dictionary<K' MList<S>>)lookups.GetOrCreate(token' () => (IEnumerable)new Dictionary<K' MList<S>>()); " is 139.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The length of the statement  "                            return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes()); " is 161.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The length of the statement  "                        return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending); " is 122.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The length of the statement  "                        return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending); " is 123.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,AsProjection,The length of the statement  "                    PropertyRoute route = ((CleanMeta)meta.Meta).PropertyRoutes.SingleEx(() => "PropertyRoutes for {0}. Metas don't work over polymorphic MLists".FormatWith(meta.Meta)).Add("Item"); " is 177.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitConstant,The length of the statement  "                    return new MetaProjectorExpression(c.Type' new MetaExpression(type' new CleanMeta(Implementations.By(type)' PropertyRoute.Root(type)))); " is 136.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,BindMember,The length of the statement  "                if (typeof(Entity).IsAssignableFrom(source.Type) && !source.Type.IsAbstract) //Works for simple entities and also for interface casting " is 135.
Long Statement,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,CastImplementations,The length of the statement  "                    throw new InvalidOperationException("Tye type {0} is not registered in the schema as a concrete table".FormatWith(cleanType)); " is 126.
Long Statement,Signum.Engine.Linq,ScalarSubqueryRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ScalarSubqueryRewriter.cs,VisitSelect,The length of the statement  "            if (top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy) " is 157.
Long Statement,Signum.Engine.Linq,ScalarSubqueryRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ScalarSubqueryRewriter.cs,VisitSelect,The length of the statement  "                return new SelectExpression(select.Alias' select.IsDistinct' top' columns' from' where' orderBy' groupBy' select.SelectOptions); " is 128.
Long Statement,Signum.Engine.Linq,EagerChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,Fill,The length of the statement  "                ProjectionRowEnumerator<KeyValuePair<K' V>> enumerator = new ProjectionRowEnumerator<KeyValuePair<K' V>>(reader' ProjectorExpression' lookups' retriever' CancellationToken.None); " is 178.
Long Statement,Signum.Engine.Linq,EagerChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,FillAsync,The length of the statement  "                ProjectionRowEnumerator<KeyValuePair<K' V>> enumerator = new ProjectionRowEnumerator<KeyValuePair<K' V>>(reader' ProjectorExpression' lookups' retriever' token); " is 161.
Long Statement,Signum.Engine.Linq,LazyChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,Fill,The length of the statement  "                ProjectionRowEnumerator<KeyValuePair<K' MList<V>.RowIdElement>> enumerator = new ProjectionRowEnumerator<KeyValuePair<K' MList<V>.RowIdElement>>(reader' ProjectorExpression' lookups' retriever' CancellationToken.None); " is 218.
Long Statement,Signum.Engine.Linq,LazyChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,Fill,The length of the statement  "                IEnumerable<KeyValuePair<K' MList<V>.RowIdElement>> enumerabe = new ProjectionRowEnumerable<KeyValuePair<K' MList<V>.RowIdElement>>(enumerator); " is 144.
Long Statement,Signum.Engine.Linq,LazyChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,FillAsync,The length of the statement  "                ProjectionRowEnumerator<KeyValuePair<K' MList<V>.RowIdElement>> enumerator = new ProjectionRowEnumerator<KeyValuePair<K' MList<V>.RowIdElement>>(reader' ProjectorExpression' lookups' retriever' token); " is 201.
Long Statement,Signum.Engine.Linq,LazyChildProjection<K;V>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,FillAsync,The length of the statement  "                IEnumerable<KeyValuePair<K' MList<V>.RowIdElement>> enumerabe = new ProjectionRowEnumerable<KeyValuePair<K' MList<V>.RowIdElement>>(enumerator); " is 144.
Long Statement,Signum.Engine.Linq,TranslateResult<T>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,Execute,The length of the statement  "                        ProjectionRowEnumerator<T> enumerator = new ProjectionRowEnumerator<T>(reader' ProjectorExpression' lookups' retriever' CancellationToken.None); " is 144.
Long Statement,Signum.Engine.Linq,TranslateResult<T>,C:\repos\signumsoftware_framework\Signum.Engine\Linq\TranslateResult.cs,ExecuteAsync,The length of the statement  "                        ProjectionRowEnumerator<T> enumerator = new ProjectionRowEnumerator<T>(reader' ProjectorExpression' lookups' retriever' token); " is 127.
Long Statement,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,AssertGetState,The length of the statement  "                throw new InvalidOperationException($"{graphName}.GetState is not set. Consider writing something like 'GetState = a => a.State' at the beginning of your Register method."); " is 173.
Long Statement,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,ToDirectedGraph,The length of the statement  "                                            item.OperationType == OperationType.ConstructorFrom ? "[From {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) : " is 131.
Long Statement,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,ToDirectedGraph,The length of the statement  "                                            item.OperationType == OperationType.ConstructorFromMany ? "[FromMany {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) : ""; " is 143.
Long Statement,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,AssertEnterState,The length of the statement  "                throw new InvalidOperationException("After executing {0} the state should be {1}' but is {2}".FormatWith(operation.OperationSymbol' operation.ToStates.CommaOr()' state)); " is 170.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,ExceptionLogic_DeleteLogs,The length of the statement  "            Database.Query<OperationLogEntity>().Where(o => o.Start < parameters.DateLimit).UnsafeDeleteChunksLog(parameters' sb' token); " is 125.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,OperationLogic_Initializing,The length of the statement  "                                "'{0}' has '{1}' set to true' but no operation for saving has been implemented.".FormatWith(t.TypeName()' nameof(attr.RequiresSaveOperation)) : " is 143.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,OperationLogic_Initializing,The length of the statement  "                                "'{0}' is 'EntityKind.{1}'' but no operation for saving has been implemented.".FormatWith(t.TypeName()' attr.EntityKind)).ToList(); " is 131.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,EntityEventsGlobal_Saving,The length of the statement  "                EntityKindCache.RequiresSaveOperation(ident.GetType()) && !AllowSaveGlobally && !IsSaveAllowedInContext(ident.GetType())) " is 121.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,EntityEventsGlobal_Saving,The length of the statement  "                throw new InvalidOperationException("Saving '{0}' is controlled by the operations. Use OperationLogic.AllowSave<{0}>() or execute {1}".FormatWith( " is 146.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,AssertOperationAllowed,The length of the statement  "                throw new UnauthorizedAccessException(OperationMessage.Operation01IsNotAuthorized.NiceToString().FormatWith(operationSymbol.NiceToString()' operationSymbol.Key) + " is 162.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,Register,The length of the statement  "                throw new InvalidOperationException("Type '{0}' has to implement at least {1}".FormatWith(operation.OverridenType.Name)); " is 121.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,ConstructFromMany,The length of the statement  "            return (T)(IEntity)Find<IConstructorFromManyOperation>(onlyType ?? typeof(F)' symbol.Symbol).Construct(lites.Cast<Lite<IEntity>>().ToList()' args); " is 147.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,Find,The length of the statement  "                throw new InvalidOperationException("Operation '{0}' is a {1} not a {2} use {3} instead".FormatWith(operationSymbol' result.GetType().TypeName()' typeof(T).TypeName()' " is 167.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,GetContextualCanExecute,The length of the statement  "                    foreach (var grOperations in operations.GroupBy(a => a.GetType().GetGenericArguments().Let(arr=>Tuple.Create(arr[0]' arr[1])))) " is 127.
Long Statement,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,GetContextualCanExecute,The length of the statement  "                        var dic = giGetContextualGraphCanExecute.GetInvoker(grLites.Key' grOperations.Key.Item1' grOperations.Key.Item2)(grLites' grOperations); " is 136.
Long Statement,Signum.Engine.Maps,DatabaseName,C:\repos\signumsoftware_framework\Signum.Engine\Schema\ObjectName.cs,ToString,The length of the statement  "            var name = !options.DatabaseNameReplacement.HasText() ? Name.SqlEscape(): Name.Replace(Connector.Current.DatabaseName()' options.DatabaseNameReplacement).SqlEscape(); " is 166.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,AssertAllowed,The length of the statement  "                throw new UnauthorizedAccessException(EngineMessage.UnauthorizedAccessTo0Because1.NiceToString().FormatWith(type.NiceName()' error)); " is 133.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,CombineFilterResult,The length of the statement  "                return new FilterQueryResult<T>(a => result.InDatabaseExpresson.Evaluate(a) && expression.InDatabaseExpresson.Evaluate(a)' null); " is 129.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,GetInMemoryFilter,The length of the statement  "                        throw new InvalidOperationException("FilterQueryResult with InDatabaseExpresson '{0}' has no equivalent InMemoryFunction" " is 121.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,SynchronizationScript,The length of the statement  "                Replacements replacements = new Replacements() { Interactive = interactive' ReplaceDatabaseName = replaceDatabaseName' SchemaOnly = schemaOnly }; " is 145.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,SynchronizationScript,The length of the statement  "                            return new SqlPreCommandSimple("-- Exception on {0}.{1}\r\n{2}".FormatWith(e.Method.DeclaringType.Name' e.Method.Name' ex.Message.Indent(2' '-'))); " is 147.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,FindImplementations,The length of the statement  "            throw new InvalidOperationException("Impossible to determine implementations for {0}".FormatWith(route' typeof(IEntity).Name)); " is 127.
Long Statement,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,CalculateExpressionImplementations,The length of the statement  "            Expression e = MetadataVisitor.JustVisit(lambda' new MetaExpression(route.Parent.Type' new CleanMeta(route.Parent.TryGetImplementations()' new[] { route.Parent }))); " is 165.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,DeleteSqlSync,The length of the statement  "                                   .FormatWith(tml.Name' tml.BackReference.Name.SqlEscape()' variableOrId' comment ?? entity.ToString()))).Combine(Spacing.Simple); " is 128.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,DeclarePrimaryKeyVariable,The length of the statement  "            var result = new SqlPreCommandSimple($"DECLARE {variableName} {SqlBuilder.GetColumnType(this.PrimaryKey)}; SET {variableName} = COALESCE(({queryString})' 1 / 0)"); " is 163.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GetProjectorExpression,The length of the statement  "                var bindings = this.Fields.Values.Select(ef=>new FieldBinding(ef.FieldInfo' ef.Field.GetExpression(tableAlias' binder' id))).ToReadOnly(); " is 138.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GetProjectorExpression,The length of the statement  "                var hasValue = id == null ? Expression.Constant(true): SmartEqualizer.NotEqualNullable(id' Expression.Constant(null' id.Type.Nullify())); " is 137.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GetProjectorExpression,The length of the statement  "                var result = new EntityExpression(this.Type' (PrimaryKeyExpression)id' tableAlias' bindings' mixins' avoidExpandOnRetrieving: false); " is 133.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GenerateColumns,The length of the statement  "                columns.AddRange(Mixins.Values.SelectMany(m => m.Fields.Values).SelectMany(f => f.Field.Columns()).ToDictionaryEx(c => c.Name' errorSuffix)' errorSuffix); " is 154.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GenerateColumns,The length of the statement  "            inserterDisableIdentity = new ResetLazy<InsertCacheDisableIdentity>(() => InsertCacheDisableIdentity.InitializeInsertDisableIdentity(this)); " is 140.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,GeneratAllIndexes,The length of the statement  "                List<IColumn> attachedFields = fields.Where(f => s.FieldAttributes(PropertyRoute.Root(this.Type).Add(f.FieldInfo)).OfType<AttachToUniqueIndexesAttribute>().Any()) " is 162.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,AssertHasId,The length of the statement  "                throw new InvalidOperationException("{0} should have an Id' since the table has no Identity".FormatWith(ident' ident.IdOrNull)); " is 128.
Long Statement,Signum.Engine.Maps,Table,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Delete.cs,PrepareEntitySync,The length of the statement  "            DirectedGraph<Modifiable> modifiables = GraphExplorer.PreSaving(() => GraphExplorer.FromRoot(entity)' (Modifiable m' ref bool graphModified) => " is 143.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,FieldExpression,The length of the statement  "            var ci = typeof(MList<>.RowIdElement).MakeGenericType(type).GetConstructor(new[] { type' typeof(PrimaryKey)' typeof(int?) }); " is 125.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,FieldExpression,The length of the statement  "            var order =  Order == null ? (Expression)Expression.Constant(null' typeof(int?)) : OrderExpression(tableAlias).Nullify(); " is 121.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The length of the statement  "                sqlDelete = suffix => "DELETE {0} WHERE {1} = {2}".FormatWith(Name' BackReference.Name.SqlEscape()' ParameterBuilder.GetParameterName(BackReference.Name + suffix))' " is 164.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The length of the statement  "                DeleteParameter = (ident' suffix) => pb.CreateReferenceParameter(ParameterBuilder.GetParameterName(BackReference.Name + suffix)' ident.Id' this.BackReference.ReferenceTable.PrimaryKey)' " is 185.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The length of the statement  "                        .FormatWith(PrimaryKey.Name.SqlEscape()' 0.To(num).Select(i => ParameterBuilder.GetParameterName("e" + i)).ToString("' ")); " is 123.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The length of the statement  "                    list.AddRange(delete.ExceptRowIds.Select((e' i) => pb.CreateReferenceParameter(ParameterBuilder.GetParameterName("e" + i)' e' PrimaryKey))); " is 140.
Long Statement,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The length of the statement  "                    Table.CreateBlock(trios.Select(a => a.ParameterBuilder)' assigments)' paramIdent' paramItem' paramOrder' paramForbidden' paramSuffix); " is 134.
Long Statement,Signum.Engine.Maps,FieldReference,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,GetExpression,The length of the statement  "            var result = new EntityExpression(cleanType' new PrimaryKeyExpression(new ColumnExpression(this.Type.Nullify()' tableAlias' Name))' null' null' null' AvoidExpandOnRetrieving); " is 175.
Long Statement,Signum.Engine.Maps,FieldEmbedded,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,GetExpression,The length of the statement  "                id is PrimaryKeyExpression ? QueryBinder.NullId(((PrimaryKeyExpression)id).ValueType) : (Expression)Expression.Constant(null' id.Type.Nullify())) : " is 147.
Long Statement,Signum.Engine.Maps,FieldEmbedded,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The length of the statement  "            return "Embebed\r\n{0}".FormatWith(EmbeddedFields.ToString(c => "{0} : {1}".FormatWith(c.Key' c.Value)' "\r\n").Indent(2)); " is 123.
Long Statement,Signum.Engine.Maps,FieldEmbedded,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CheckNull,The length of the statement  "                throw new InvalidOperationException("Impossible to save 'null' on the not-nullable embedded field of type '{0}'".FormatWith(this.FieldType.Name)); " is 146.
Long Statement,Signum.Engine.Maps,FieldMixin,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The length of the statement  "            assigments.Add(Expression.Assign(mixin' Expression.Call(value' MixinDeclarations.miMixin.MakeGenericMethod(this.FieldType)))); " is 126.
Long Statement,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,GetExpression,The length of the statement  "                 new EntityExpression(t' new PrimaryKeyExpression(new ColumnExpression(ic.Type.Nullify()' tableAlias' ic.Name))' null' null' null' AvoidExpandOnRetrieving)); " is 156.
Long Statement,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The length of the statement  "            return "ImplementedBy\r\n{0}".FormatWith(ImplementationColumns.ToString(k => "{0} -> {1} ({2})".FormatWith(k.Value.Name' k.Value.ReferenceTable.Name' k.Key.Name)' "\r\n").Indent(2)); " is 182.
Long Statement,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateParameter,The length of the statement  "            assigments.Add(Expression.Assign(ibType' Expression.Call(Expression.Constant(this)' miCheckType' this.GetTypeFactory(value' forbidden)))); " is 138.
Long Statement,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CheckType,The length of the statement  "                throw new InvalidOperationException("Type {0} is not in the list of ImplementedBy:\r\n{1}".FormatWith(type.Name' ImplementationColumns.ToString(kvp => "{0} -> {1}".FormatWith(kvp.Key.Name' kvp.Value.Name)' "\r\n"))); " is 216.
Long Statement,Signum.Engine.Maps,FieldImplementedByAll,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,GetExpression,The length of the statement  "                new TypeImplementedByAllExpression(new PrimaryKeyExpression(new ColumnExpression(ColumnType.Type.Nullify()' tableAlias' ColumnType.Name)))); " is 140.
Long Statement,Signum.Engine.Maps,ColumnExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Basics.cs,GetSqlDbTypeString,The length of the statement  "            return column.SqlDbType.ToString().ToUpper(CultureInfo.InvariantCulture) + SqlBuilder.GetSizeScale(column.Size' column.Scale); " is 126.
Long Statement,Signum.Engine.Maps,InsertCacheDisableIdentity,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetInserter,The length of the statement  "                return insertDisableIdentityCache.GetOrAdd(numElements' (int num) => num == 1 ? GetInsertDisableIdentity() : GetInsertMultiDisableIdentity(num)); " is 145.
Long Statement,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetUpdateMultiple,The length of the statement  "                            throw new ConcurrencyException(table.Type' dt.Rows.Cast<DataRow>().Select(r => new PrimaryKey((IComparable)r[0])).ToArray()); " is 125.
Long Statement,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetUpdateMultiple,The length of the statement  "                            table.saveCollections.Value.UpdateCollections(idents.Select(e => new EntityForbidden(e' new Forbidden(graph' e))).ToList()); " is 124.
Long Statement,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetUpdateMultiple,The length of the statement  "                            throw new EntityNotFoundException(table.Type' dt.Rows.Cast<DataRow>().Select(r => new PrimaryKey((IComparable)r[0])).ToArray()); " is 128.
Long Statement,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetUpdateMultiple,The length of the statement  "                            table.saveCollections.Value.UpdateCollections(idents.Select(e => new EntityForbidden(e' new Forbidden(graph' e))).ToList()); " is 124.
Long Statement,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,InitializeUpdate,The length of the statement  "                        parameters.Add(pb.ParameterFactory(Trio.Concat(oldTicksParamName' paramSuffix)' table.Ticks.SqlDbType' null' false' table.Ticks.ConvertTicks(paramOldTicks))); " is 158.
Long Statement,Signum.Engine.Maps,TableMListCache<T>,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetUpdate,The length of the statement  "                            parameters.AddRange(UpdateParameters(pair.Entity' row.RowId.Value' row.Element' pair.Index' pair.Forbidden' i.ToString())); " is 123.
Long Statement,Signum.Engine.Maps,TableMListCache<T>,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,GetInsert,The length of the statement  "                            result.AddRange(InsertParameters(pair.Entity' pair.MList.InnerList[pair.Index].Element' pair.Index' pair.Forbidden' i.ToString())); " is 131.
Long Statement,Signum.Engine.Maps,Procedure,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaAssets.cs,CreateSql,The length of the statement  "                return new SqlPreCommandSimple("CREATE {0} {1} ".FormatWith(ProcedureType' ProcedureName) + ProcedureCodeAndArguments) { GoBefore = true' GoAfter = true }; " is 155.
Long Statement,Signum.Engine.Maps,Procedure,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaAssets.cs,AlterSql,The length of the statement  "                return new SqlPreCommandSimple("ALTER {0} {1} ".FormatWith(ProcedureType' ProcedureName) + ProcedureCodeAndArguments) { GoBefore = true' GoAfter = true }; " is 154.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,AddUniqueIndexMList,The length of the statement  "            TableMList table = ((FieldMList)Schema.FindField(Schema.Table(typeof(T))' Reflector.GetMemberList(toMList))).TableMList; " is 120.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,Include,The length of the statement  "                    throw new InvalidOperationException(route?.Let(r => "Error on field {0}: ".FormatWith(r)) + "Impossible to include in the Schema the type {0} because is abstract".FormatWith(type)); " is 181.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,Include,The length of the statement  "                    throw new InvalidOperationException(route?.Let(r => "Error on field {0}: ".FormatWith(r)) + "Impossible to include in the Schema the type {0} because is not and Entity".FormatWith(type)); " is 187.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,Include,The length of the statement  "                string name = schema.Settings.desambiguatedNames?.TryGetC(type) ?? Reflector.CleanTypeName(EnumEntity.Extract(type) ?? type); " is 125.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,Include,The length of the statement  "                    throw new InvalidOperationException(route?.Let(r => "Error on field {0}: ".FormatWith(r)) + "Two types have the same cleanName' desambiguate using Schema.Current.Settings.Desambiguate method: \r\n {0}\r\n {1}".FormatWith(schema.NameToType[name].FullName' type.FullName)); " is 271.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFields,The length of the statement  "                            throw new InvalidOperationException("Duplicated field with name {0} on {1}' shadowing not supported".FormatWith(fiToStr.Name' type.TypeName())); " is 144.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFields,The length of the statement  "                            throw new InvalidOperationException("Duplicated field with name '{0}' on '{1}'' shadowing not supported".FormatWith(fi.Name' type.TypeName())); " is 143.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateField,The length of the statement  "                KindOfField kof = GetKindOfField(route).ThrowIfNull(() => "Field {0} of type {1} has no database representation".FormatWith(route' route.Type.Name)); " is 149.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateField,The length of the statement  "                    throw new InvalidOperationException("Field {0} of type {1} can not be nested in another MList".FormatWith(route' route.Type.TypeName()' kof)); " is 142.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GetPrimaryKeyAttribute,The length of the statement  "                return new PrimaryKeyAttribute(Enum.GetUnderlyingType(type.GetGenericArguments().Single())) { Identity = false' IdentityBehaviour = false }; " is 140.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFieldMList,The length of the statement  "                throw new InvalidOperationException("Type '{0}' has field '{1}' but does not Ticks. MList requires concurrency control.".FormatWith(route.Parent.Type.TypeName()' route.FieldInfo.FieldName())); " is 192.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GenerateFieldMList,The length of the statement  "            relationalTable.Field = GenerateField(relationalTable' route.Add("Item")' NameSequence.Void' forceNull: false' inMList: true); " is 126.
Long Statement,Signum.Engine.Maps,SchemaBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,GetSchemaName,The length of the statement  "            SchemaName schema = tn.SchemaName == null && dataBase == null ? SchemaName.Default : new SchemaName(dataBase' tn.SchemaName); " is 125.
Long Statement,Signum.Engine.Maps,GlobalLazyManager,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilder.cs,AttachInvalidations,The length of the statement  "            var dependants = DirectedGraph<Table>.Generate(invalidateWith.Types.Select(t => schema.Table(t))' t => t.DependentTables().Select(kvp => kvp.Key)).Select(t => t.Type).ToHashSet(); " is 179.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,FieldAttributes,The length of the statement  "                            throw new InvalidOperationException("Route of type {0} not supported for this method".FormatWith(propertyRoute.PropertyRouteType)); " is 131.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,CreateFieldAttributeCollection,The length of the statement  "               route.PropertyInfo.GetCustomAttributes(false).Cast<Attribute>().Where(a => AttributeCollection.IsCompatibleWith(a' AttributeTargets.Field)); " is 140.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,CreateFieldAttributeCollection,The length of the statement  "            return new AttributeCollection(AttributeTargets.Field' fieldAttributes.Concat(fieldAttributesInProperty).ToList()' () => AssertNotIncluded(route.RootType)); " is 156.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,AssertNotIgnored,The length of the statement  "                throw new InvalidOperationException("In order to {0} you need to override the attributes for {1} by using SchemaBuilderSettings.FieldAttributes to remove IgnoreAttribute".FormatWith(errorContext' pr)); " is 201.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,FieldAttribute,The length of the statement  "                if (propertyRoute.PropertyRouteType == PropertyRouteType.Root || propertyRoute.PropertyRouteType == PropertyRouteType.LiteEntity) " is 129.
Long Statement,Signum.Engine.Maps,SchemaSettings,C:\repos\signumsoftware_framework\Signum.Engine\Schema\SchemaBuilder\SchemaBuilderSettings.cs,FieldAttribute,The length of the statement  "                    throw new InvalidOperationException("Route of type {0} not supported for this method".FormatWith(propertyRoute.PropertyRouteType)); " is 131.
Long Statement,Signum.Engine.Maps,IndexWhereExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Schema\UniqueIndex.cs,VisitTypeBinary,The length of the statement  "                    throw new InvalidOperationException("A {0} will never be {1}".FormatWith(fr.FieldType.TypeName()' b.TypeOperand.TypeName())); " is 125.
Long Statement,Signum.Engine.Maps,IndexWhereExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Schema\UniqueIndex.cs,VisitTypeBinary,The length of the statement  "                    throw new InvalidOperationException("No implementation ({0}) will never be {1}".FormatWith(fib.ImplementationColumns.Keys.ToString(t => t.TypeName()' "' ")' b.TypeOperand.TypeName())); " is 184.
Long Statement,Signum.Engine.Maps,IndexWhereExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Schema\UniqueIndex.cs,IsNull,The length of the statement  "                return ib.ImplementationColumns.Values.Select(ic => isNull.FormatWith(ic.Name.SqlEscape())).ToString(equals ? " AND " : " OR "); " is 128.
Complex Conditional,Signum.Engine,DiffColumn,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,CleanParenthesis,The conditional expression  "p.StartsWith("(") && p.EndsWith(")") ||                  p.StartsWith("'") && p.EndsWith("'")"  is complex.
Complex Conditional,Signum.Engine,RealRetriever,C:\repos\signumsoftware_framework\Signum.Engine\Retriever.cs,CompleteAllPrivate,The conditional expression  "liteRequests != null && liteRequests.Count > 0 ||                  requests != null && requests.Count > 0 ||                  retrieved.Count > currentlyRetrieved.Count"  is complex.
Complex Conditional,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GetSqlDbTypeParts,The conditional expression  "!(defaultSize == col.Precission || defaultSize == col.Length / DiffColumn.BytesPerChar(col.SqlDbType) || defaultSize == int.MaxValue && col.Length == -1)"  is complex.
Complex Conditional,Signum.Engine.Linq,JoinExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,JoinExpression,The conditional expression  "condition == null && joinType != JoinType.CrossApply && joinType != JoinType.OuterApply && joinType != JoinType.CrossJoin"  is complex.
Complex Conditional,Signum.Engine.Linq,AliasReplacer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\AliasReplacer.cs,VisitSelect,The conditional expression  "top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy || newAlias != select.Alias"  is complex.
Complex Conditional,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,VisitBinary,The conditional expression  "b.NodeType == ExpressionType.Equal ||                  b.NodeType == ExpressionType.NotEqual ||                  b.NodeType == ExpressionType.GreaterThan ||                  b.NodeType == ExpressionType.GreaterThanOrEqual ||                  b.NodeType == ExpressionType.LessThan ||                  b.NodeType == ExpressionType.LessThanOrEqual"  is complex.
Complex Conditional,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,VisitSelect,The conditional expression  "top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy"  is complex.
Complex Conditional,Signum.Engine.Linq,OrderByRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OrderByRewriter.cs,VisitSelect,The conditional expression  "select.IsOrderAlsoByKeys || select.HasIndex || select.Top != null && hasProjectionInProjector"  is complex.
Complex Conditional,Signum.Engine.Linq,OrderByRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OrderByRewriter.cs,VisitSelect,The conditional expression  "gatheredKeys != null && (select.IsDistinct || select.GroupBy.HasItems() || select.IsAllAggregates)"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryRebinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryRebinder.cs,VisitSelect,The conditional expression  "top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy"  is complex.
Complex Conditional,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The conditional expression  "ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ)"  is complex.
Complex Conditional,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMember,The conditional expression  "m.Expression != null && m.Expression.Type.IsGenericType && m.Expression.Type.GetGenericTypeDefinition() == typeof(MList<>) && m.Member is PropertyInfo && m.Member.Name == "Count""  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionVisitor.cs,VisitMListElement,The conditional expression  "rowId != mle.RowId || parent != mle.Parent || order != mle.Order || element != mle.Element"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionVisitor.cs,VisitSelect,The conditional expression  "top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,Visit,The conditional expression  "isFullNominate && result != null && !Has(result) && !IsExcluded(exp)"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitConstant,The conditional expression  "!innerProjection && IsFullNominateOrAggresive && (Schema.Current.Settings.IsDbType(c.Type.UnNullify()) || c.Type == typeof(object) && c.IsNull())"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitCase,The conditional expression  "newWhens.All(w => Has(w.Condition) && Has(w.Value)) && (newDefault == null || Has(newDefault))"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TrySqlToString,The conditional expression  "IsFullNominateOrAggresive && m.Arguments.Any() && (expression.Type.UnNullify() == typeof(DateTime) || ReflectionTools.IsNumber(expression.Type.UnNullify())) && Connector.Current.SupportsFormat"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitBinary,The conditional expression  "(b.NodeType == ExpressionType.Add || b.NodeType == ExpressionType.Subtract) && b.Left.Type.UnNullify() == typeof(DateTime) && b.Right.Type.UnNullify() == typeof(TimeSpan)"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,The conditional expression  "this.isFullNominate && u.NodeType == ExpressionType.Convert &&                  (u.Type.UnNullify() == typeof(PrimaryKey) || u.Operand.Type.UnNullify() == typeof(PrimaryKey))"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,The conditional expression  "u.NodeType == ExpressionType.Convert && u.Type.IsNullable() && u.Type.UnNullify() == u.Operand.Type && u.Operand.NodeType == ExpressionType.Conditional"  is complex.
Complex Conditional,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,VisitUnary,The conditional expression  "(optu == typeof(bool) || optu == typeof(int) || optu == typeof(long)) &&                          (untu == typeof(double) || untu == typeof(float) || untu == typeof(decimal))"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The conditional expression  "m.Method.DeclaringType == typeof(Queryable) ||                  m.Method.DeclaringType == typeof(Enumerable) ||                  m.Method.DeclaringType == typeof(EnumerableUniqueExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationPopulationExtensions)"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The conditional expression  "m.Object != null && typeof(IEnumerable).IsAssignableFrom(m.Method.DeclaringType) && typeof(string) != m.Method.DeclaringType && m.Method.Name == "Contains""  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,RemoveProjectionConvert,The conditional expression  "expression.NodeType == ExpressionType.Convert && (expression.Type.IsInstantiationOf(typeof(IGrouping<'>)) ||                                                                    expression.Type.IsInstantiationOf(typeof(IEnumerable<>)) ||                                                                    expression.Type.IsInstantiationOf(typeof(IQueryable<>)))"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindUniqueRow,The conditional expression  "!isRoot && !inTableValuedFunction && pc.Projector is ColumnExpression && (function == UniqueFunction.First || function == UniqueFunction.FirstOrDefault)"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMethodCall,The conditional expression  "e == null || e.NodeType == ExpressionType.Quote || e.NodeType == ExpressionType.Lambda || pi != null && pi.HasAttribute<EagerBindingAttribute>()"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,BindMemberAccess,The conditional expression  "source != null && m.Member is PropertyInfo && ExpressionCleaner.HasExpansions(source.Type' (PropertyInfo)m.Member) && source is EntityExpression"  is complex.
Complex Conditional,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,SimplifyRedundandConverts,The conditional expression  "unary.NodeType == ExpressionType.Convert && unary.Type.UnNullify() != typeof(PrimaryKey) &&                  unary.Operand.NodeType == ExpressionType.Convert && unary.Operand.Type.UnNullify() == typeof(PrimaryKey) &&                  (((UnaryExpression)unary.Operand).Operand is PrimaryKeyExpression)"  is complex.
Complex Conditional,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,VisitSelect,The conditional expression  "where != select.Where                          || orderBy != select.OrderBy                          || groupBy != select.GroupBy                          || isDistinct != select.IsDistinct                          //|| skip != select.Skip                          || top != select.Top"  is complex.
Complex Conditional,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The conditional expression  "frmHasOrderBy && (selHasGroupBy || select.IsDistinct || AggregateChecker.HasAggregates(select))"  is complex.
Complex Conditional,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The conditional expression  "fromSelect.Top != null && (select.Top != null || /*select.Skip != null ||*/ select.IsDistinct || selHasGroupBy || HasApplyJoin(select.From) || select.Where != null)"  is complex.
Complex Conditional,Signum.Engine.Linq,SubqueryMerger,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\RedundantSubqueryRemover.cs,CanMergeWithFrom,The conditional expression  "fromSelect.IsDistinct && (select.Top != null || /*select.Skip != null ||*/ !IsNameMapProjection(select) || selHasGroupBy || (selHasOrderBy && !isTopLevel) || AggregateChecker.HasAggregates(select))"  is complex.
Complex Conditional,Signum.Engine.Linq,SmartEqualizer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\SmartEqualizer.cs,LiteEquals,The conditional expression  "!e1.Type.IsLite() && !e1.IsNull() || !e2.Type.IsLite() && !e2.IsNull()"  is complex.
Complex Conditional,Signum.Engine.Linq,UnusedColumnRemover,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\UnusedColumnRemover.cs,VisitSelect,The conditional expression  "columns != select.Columns || orderbys != select.OrderBy || where != select.Where || from != select.From || groupBy != select.GroupBy"  is complex.
Complex Conditional,Signum.Engine.Linq,PrimaryKeyExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,PrimaryKeyExpression,The conditional expression  "value is ConstantExpression ce && ce.Value is PrimaryKey pk && pk.VariableName != null && PreferVariableNameVariable.Value"  is complex.
Complex Conditional,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,GatherMetadata,The conditional expression  "proj.NodeType != ExpressionType.New &&  //anonymous types                  proj.NodeType != ExpressionType.MemberInit && // not-anonymous type                  !(proj is MetaExpression && ((MetaExpression)proj).IsEntity)"  is complex.
Complex Conditional,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The conditional expression  "m.Method.DeclaringType == typeof(Math) &&                 (m.Method.Name == "Abs" ||                  m.Method.Name == "Ceiling" ||                  m.Method.Name == "Floor" ||                  m.Method.Name == "Round" ||                  m.Method.Name == "Truncate")"  is complex.
Complex Conditional,Signum.Engine.Linq,ScalarSubqueryRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ScalarSubqueryRewriter.cs,VisitSelect,The conditional expression  "top != select.Top || from != select.From || where != select.Where || columns != select.Columns || orderBy != select.OrderBy || groupBy != select.GroupBy"  is complex.
Complex Conditional,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,EntityEventsGlobal_Saving,The conditional expression  "ident.IsGraphModified &&                   EntityKindCache.RequiresSaveOperation(ident.GetType()) && !AllowSaveGlobally && !IsSaveAllowedInContext(ident.GetType())"  is complex.
Complex Conditional,Signum.Engine.Maps,TableMListCache<T>,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,RelationalUpdates,The conditional expression  "hasOrder  && row.OldIndex != i ||                                         isEmbeddedEntity && ((ModifiableEntity)(object)row.Element).IsGraphModified"  is complex.
Virtual Method Call from Constructor,Signum.Engine.Maps,Trio,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,Trio,The constructor "Trio" calls a virtual method "ParameterFactory".
Empty Catch Block,Signum.Engine.Basics,ExceptionLogic,C:\repos\signumsoftware_framework\Signum.Engine\Basics\ExceptionLogic.cs,GetEntity,The method has an empty catch block.
Magic Number,Signum.Engine,Administrator,C:\repos\signumsoftware_framework\Signum.Engine\Administrator.cs,UpdateToStrings,The following statement contains a magic number: query.Select(a => a.Id).IntervalsOf(100).ProgressForeach(inter => inter.ToString()' (interva) =>              {                  var list = query.Where(a => interva.Contains(a.Id)).ToList();                    foreach (var item in list)                  {                      if (item.ToString() != item.toStr)                          item.InDB().UnsafeUpdate()                              .Set(a => a.toStr' a => item.ToString())                              .Execute();                  }              });
Magic Number,Signum.Engine,SqlConnector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ReplaceException,The following statement contains a magic number: if (ex is SqlException se)              {                  switch (se.Number)                  {                      case -2: return new TimeoutException(ex.Message' ex);                      case 2601: return new UniqueKeyException(ex);                      case 547: return new ForeignKeyException(ex);                      default: return ex;                  }              }
Magic Number,Signum.Engine,SqlConnector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ReplaceException,The following statement contains a magic number: if (ex is SqlException se)              {                  switch (se.Number)                  {                      case -2: return new TimeoutException(ex.Message' ex);                      case 2601: return new UniqueKeyException(ex);                      case 547: return new ForeignKeyException(ex);                      default: return ex;                  }              }
Magic Number,Signum.Engine,SqlConnector,C:\repos\signumsoftware_framework\Signum.Engine\Connection\SqlConnector.cs,ReplaceException,The following statement contains a magic number: if (ex is SqlException se)              {                  switch (se.Number)                  {                      case -2: return new TimeoutException(ex.Message' ex);                      case 2601: return new UniqueKeyException(ex);                      case 547: return new ForeignKeyException(ex);                      default: return ex;                  }              }
Magic Number,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeachSequential,The following statement contains a magic number: foreach (var item in enumerator)              {                  using (HeavyProfiler.Log("ProgressForeach"' () => elementID(item)))                      try                      {                          if (transactional)                          {                              using (Transaction tr = Transaction.ForceNew())                              {                                  action(item);                                  tr.Commit();                              }                          }                          else                          {                              action(item);                          }                      }                      catch (Exception e)                      {                          writer(ConsoleColor.Red' "{0:u} Error in {1}: {2}"' DateTime.Now' elementID(item)' e.Message);                          writer(ConsoleColor.DarkRed' e.StackTrace.Indent(4));                            if (StopOnException != null && StopOnException(elementID(item)' e))                              throw;                      }                    if (!Console.IsOutputRedirected)                      SafeConsole.WriteSameLine(pi.ToString());              }
Magic Number,Signum.Engine,ProgressExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\ProgressExtensions.cs,ProgressForeachParallel,The following statement contains a magic number: try              {                    var col = collection.ToProgressEnumerator(out IProgressInfo pi);                    if (!Console.IsOutputRedirected)                      lock (SafeConsole.SyncKey)                          SafeConsole.WriteSameLine(pi.ToString());                    Exception stopException = null;                    using (ExecutionContext.SuppressFlow())                      Parallel.ForEach(col'                          paralelOptions ?? new ParallelOptions {MaxDegreeOfParallelism = Environment.ProcessorCount}'                          (item' state) =>                          {                              using (HeavyProfiler.Log("ProgressForeach"' () => elementID(item)))                                  try                                  {                                      if (transactional)                                      {                                          using (Transaction tr = Transaction.ForceNew())                                          {                                              action(item);                                              tr.Commit();                                          }                                      }                                      else                                      {                                          action(item);                                      }                                  }                                  catch (Exception e)                                  {                                      writer(ConsoleColor.Red' "{0:u} Error in {1}: {2}"' DateTime.Now' elementID(item)'                                          e.Message);                                      writer(ConsoleColor.DarkRed' e.StackTrace.Indent(4));                                        if (StopOnException != null && StopOnException(elementID(item)' e))                                          stopException = e;                                  }                                if (!Console.IsOutputRedirected)                                  lock (SafeConsole.SyncKey)                                      SafeConsole.WriteSameLine(pi.ToString());                                if (stopException != null)                                  state.Break();                            });                    if (stopException != null)                      throw stopException;              }              finally              {                  if (!Console.IsOutputRedirected)                      SafeConsole.ClearSameLine();              }
Magic Number,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,Distance,The following statement contains a magic number: return sd.LevenshteinDistance(o' n' weight: c => c.Type == StringDistance.ChoiceType.Substitute ? 2 : 1);
Magic Number,Signum.Engine,Replacements,C:\repos\signumsoftware_framework\Signum.Engine\Engine\Synchronizer.cs,SelectInteractive,The following statement contains a magic number: retry:              int maxElement = Console.LargestWindowHeight - 7;
Magic Number,Signum.Engine,SqlPreCommandExtensions,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlPreCommand.cs,OpenSqlFile,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Signum.Engine,SchemaSynchronizer,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,Clone,The following statement contains a magic number: instance.id = (int)current.id.Value + 1000000;
Magic Number,Signum.Engine,DiffColumn,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,BytesPerChar,The following statement contains a magic number: if (sqlDbType == System.Data.SqlDbType.NChar || sqlDbType == System.Data.SqlDbType.NText || sqlDbType == System.Data.SqlDbType.NVarChar)                  return 2;
Magic Number,Signum.Engine,DiffColumn,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SchemaSynchronizer.cs,CleanParenthesis,The following statement contains a magic number: while (                  p.StartsWith("(") && p.EndsWith(")") ||                  p.StartsWith("'") && p.EndsWith("'"))                  p = p.Substring(1' p.Length - 2);
Magic Number,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,CreateTableSql,The following statement contains a magic number: return new SqlPreCommandSimple("CREATE TABLE {0}(\r\n{1}\r\n)".FormatWith(                  t.Name'                  t.Columns.Values.Select(c => SqlBuilder.CreateColumn(c)).And(primaryKeyConstraint).NotNull().ToString("'\r\n").Indent(2))              );
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteServerFile,The following statement contains a magic number: sb.Append(WriteServerClass(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteServerClass,The following statement contains a magic number: sb.Append(WriteServerStartMethod(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteControllerFile,The following statement contains a magic number: sb.Append(WriteControllerClass(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteControllerClass,The following statement contains a magic number: sb.Append(WriteControllerExampleMethod(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteClientFile,The following statement contains a magic number: foreach (var gr in mod.Types.GroupBy(a => a.Namespace))              {                  sb.AppendLine("import { "                      + gr.Select(t => t.Name).GroupsOf(5).ToString(a => a.ToString("' ")' "'\r\n")                      + " } from './" + gr.Key + "'");              }
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteClientStartMethod,The following statement contains a magic number: if (entitySettings != null)                  sb.Append(entitySettings.Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteClientStartMethod,The following statement contains a magic number: if (operationSettings != null)                  sb.Append(operationSettings.Indent(4));
Magic Number,Signum.Engine.CodeGeneration,ReactCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\ReactCodeGenerator.cs,WriteEntityComponentFile,The following statement contains a magic number: foreach (var pi in GetProperties(type))              {                  string prop = WriteProperty(pi' v);                  if (prop != null)                      sb.AppendLine(prop.Indent(16));              }
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteClientFile,The following statement contains a magic number: sb.Append(WriteClientClass(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteClientClass,The following statement contains a magic number: sb.Append(WriteStartMethod(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: if (entitySettings != null)                  sb.Append(entitySettings.Indent(8));
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: if (operationSettings != null)                  sb.Append(operationSettings.Indent(8));
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WritetEntitySettings,The following statement contains a magic number: foreach (var t in mod.Types)              {                  string es = GetEntitySetting(t);                  if (es != null)                      sb.AppendLine(es.Indent(4));               }
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteViewCodeBehindFile,The following statement contains a magic number: if (viewClass != null)                  sb.Append(viewClass.Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WindowsCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WindowsCodeGenerator.cs,WriteViewFile,The following statement contains a magic number: foreach (var pi in GetProperties(type))              {                  string prop = WriteProperty(pi);                  if (prop != null)                      sb.Append(prop.Indent(8));              }
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteClientFile,The following statement contains a magic number: sb.Append(WriteClientClass(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteClientClass,The following statement contains a magic number: sb.AppendLine(GetViewPrefix(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteClientClass,The following statement contains a magic number: sb.AppendLine(GetJsModule(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteClientClass,The following statement contains a magic number: sb.Append(WriteStartMethod(mod).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: if (entitySettings != null)                  sb.Append(entitySettings.Indent(8));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: if (operationSettings != null)                  sb.Append(operationSettings.Indent(8));
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WritetEntitySettings,The following statement contains a magic number: foreach (var t in mod.Types)              {                  string es = GetEntitySetting(t);                  if (es != null)                      sb.AppendLine(es.Indent(4));               }
Magic Number,Signum.Engine.CodeGeneration,WebCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\WebCodeGenerator.cs,WriteViewFile,The following statement contains a magic number: foreach (var pi in GetProperties(type))              {                  string prop = WriteProperty(pi' v' vc);                  if (prop != null)                      sb.Append(prop.Indent(4));              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteFile,The following statement contains a magic number: sb.Append(WriteLogicClass(mod' expression).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteLogicClass,The following statement contains a magic number: foreach (var ei in expressions)              {                  string info = WriteExpressionMethod(ei);                  if (info != null)                  {                      sb.Append(info.Indent(4));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteLogicClass,The following statement contains a magic number: sb.Append(WriteStartMethod(mod' expressions).Indent(4));
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: foreach (var item in mod.Types)              {                  string include = WriteInclude(item);                  if (include != null)                      sb.Append(include.Indent(8));                    string query = WriteQuery(item);                  if (query != null)                  {                      sb.Append(query.Indent(8));                      sb.AppendLine();                  }                    string opers = WriteOperations(item);                  if (opers != null)                  {                      sb.Append(opers.Indent(8));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: foreach (var item in mod.Types)              {                  string include = WriteInclude(item);                  if (include != null)                      sb.Append(include.Indent(8));                    string query = WriteQuery(item);                  if (query != null)                  {                      sb.Append(query.Indent(8));                      sb.AppendLine();                  }                    string opers = WriteOperations(item);                  if (opers != null)                  {                      sb.Append(opers.Indent(8));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: foreach (var item in mod.Types)              {                  string include = WriteInclude(item);                  if (include != null)                      sb.Append(include.Indent(8));                    string query = WriteQuery(item);                  if (query != null)                  {                      sb.Append(query.Indent(8));                      sb.AppendLine();                  }                    string opers = WriteOperations(item);                  if (opers != null)                  {                      sb.Append(opers.Indent(8));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,WriteStartMethod,The following statement contains a magic number: if (expressions.Any())              {                  foreach (var ei in expressions)                  {                      string register = GetRegisterExpression(ei);                      if (register != null)                          sb.AppendLine(register.Indent(8));                  }                    sb.AppendLine();              }
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,GetQueryProperties,The following statement contains a magic number: return (from p in Reflector.PublicInstancePropertiesInOrder(type)                      where Reflector.QueryableProperty(type' p)                      where IsSimpleValueType(p.PropertyType) || p.PropertyType.IsEntity() || p.PropertyType.IsLite()                      orderby p.Name.Contains("Name") ? 1 : 2                      select p).Take(10);
Magic Number,Signum.Engine.CodeGeneration,LogicCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\LogicCodeGenerator.cs,GetQueryProperties,The following statement contains a magic number: return (from p in Reflector.PublicInstancePropertiesInOrder(type)                      where Reflector.QueryableProperty(type' p)                      where IsSimpleValueType(p.PropertyType) || p.PropertyType.IsEntity() || p.PropertyType.IsLite()                      orderby p.Name.Contains("Name") ? 1 : 2                      select p).Take(10);
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteFile,The following statement contains a magic number: foreach (var t in tables.OrderByDescending(a => a.Columns.Count))              {                  var entity = WriteTableEntity(fileName' t);                  if (entity != null)                  {                      sb.Append(entity.Indent(4));                      sb.AppendLine();                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteAttributeTag,The following statement contains a magic number: foreach (var gr in attributes.GroupsOf(a => a.Length' 100))              {                  sb.AppendLine("[" + gr.ToString("' ") + "]");              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,The following statement contains a magic number: if (multiColumnIndexComment != null)              {                  sb.Append(multiColumnIndexComment.Indent(4));                  sb.AppendLine();              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,The following statement contains a magic number: foreach (var col in columnGroups.SingleOrDefaultEx(g => g.Key == null).EmptyIfNull())              {                  string field = WriteField(fileName' table' col);                    if (field != null)                  {                      sb.Append(field.Indent(4));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,The following statement contains a magic number: foreach (var gr in columnGroups.Where(g => g.Key != null))              {                  string embeddedField = WriteEmbeddedField(table' gr.Key);                    if (embeddedField != null)                  {                      sb.AppendLine(embeddedField.Indent(4));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,The following statement contains a magic number: foreach (KeyValuePair<DiffTable' MListInfo> kvp in GetMListFields(table))              {                  string field = WriteFieldMList(fileName' table' kvp.Value' kvp.Key);                    if (field != null)                  {                      sb.AppendLine(field.Indent(4));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEntity,The following statement contains a magic number: if (toString != null)              {                  sb.Append(toString.Indent(4));                  sb.AppendLine();              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEmbeddedEntity,The following statement contains a magic number: if (multiColumnIndexComment != null)              {                  sb.Append(multiColumnIndexComment.Indent(4));                  sb.AppendLine();              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,WriteEmbeddedEntity,The following statement contains a magic number: foreach (var col in columns)              {                  string field = WriteField(fileName' table' col);                    if (field != null)                  {                      sb.Append(field.Indent(4));                      sb.AppendLine();                  }              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GetFieldName,The following statement contains a magic number: if (this.GetRelatedEntity(table' col) != null)              {                  if (name.Length > 2 && name.EndsWith("Id"' StringComparison.InvariantCultureIgnoreCase))                      name = name.RemoveEnd("Id".Length);                    if (name.Length > 2 && name.StartsWith("Id"' StringComparison.InvariantCultureIgnoreCase))                      name = name.RemoveStart("Id".Length);              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,GetFieldName,The following statement contains a magic number: if (this.GetRelatedEntity(table' col) != null)              {                  if (name.Length > 2 && name.EndsWith("Id"' StringComparison.InvariantCultureIgnoreCase))                      name = name.RemoveEnd("Id".Length);                    if (name.Length > 2 && name.StartsWith("Id"' StringComparison.InvariantCultureIgnoreCase))                      name = name.RemoveStart("Id".Length);              }
Magic Number,Signum.Engine.CodeGeneration,EntityCodeGenerator,C:\repos\signumsoftware_framework\Signum.Engine\CodeGeneration\EntityCodeGenerator.cs,CleanDefault,The following statement contains a magic number: if (def.StartsWith("(") && def.EndsWith(")"))                  return def.Substring(1' def.Length - 2);
Magic Number,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,UniqueAsync,The following statement contains a magic number: switch (uniqueType)              {                  case UniqueType.First: return collection.FirstAsync(token);                  case UniqueType.FirstOrDefault: return collection.FirstOrDefaultAsync(token);                  case UniqueType.Single: return collection.SingleAsync(token);                  case UniqueType.SingleOrDefault: return collection.SingleOrDefaultAsync(token);                  case UniqueType.SingleOrMany: return collection.Take(2).ToListAsync(token).ContinueWith(l => l.Result.SingleOrManyEx());                  case UniqueType.Only: return collection.Take(2).ToListAsync(token).ContinueWith(l => l.Result.Only());                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Engine.DynamicQuery,DQueryable,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\DynamicQuery.cs,UniqueAsync,The following statement contains a magic number: switch (uniqueType)              {                  case UniqueType.First: return collection.FirstAsync(token);                  case UniqueType.FirstOrDefault: return collection.FirstOrDefaultAsync(token);                  case UniqueType.Single: return collection.SingleAsync(token);                  case UniqueType.SingleOrDefault: return collection.SingleOrDefaultAsync(token);                  case UniqueType.SingleOrMany: return collection.Take(2).ToListAsync(token).ContinueWith(l => l.Result.SingleOrManyEx());                  case UniqueType.Only: return collection.Take(2).ToListAsync(token).ContinueWith(l => l.Result.Only());                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Engine.DynamicQuery,ManualDynamicQueryCore<T>,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ManualDynamicQuery.cs,ExecuteUniqueEntityAsync,The following statement contains a magic number: var req = new QueryRequest              {                  QueryName = request.QueryName'                  Filters = request.Filters'                  Orders = request.Orders'                  Columns = new List<Column> { new Column(this.EntityColumnFactory().BuildColumnDescription()' QueryName) }'                  Pagination = new Pagination.Firsts(2)'              };
Magic Number,Signum.Engine.Linq,AliasGenerator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\AliasGenerator.cs,NextTableAlias,The following statement contains a magic number: if (string.IsNullOrEmpty(abv))                  abv = tableName.TryStart(3);              else                  abv = abv.ToLower();
Magic Number,Signum.Engine.Linq,SelectExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "SELECT {0}{1}\r\n{2}\r\nFROM {3}\r\n{4}{5}{6}{7} AS {8}".FormatWith(                  IsDistinct ? "DISTINCT " : ""'                  Top?.Let(t => "TOP {0} ".FormatWith(t.ToString()))'                  Columns.ToString(c => c.ToString().Indent(4)' "'\r\n")'                  From?.Let(f => f.ToString().Let(a => a.Contains("\r\n") ? "\r\n" + a.Indent(4) : a))'                  Where?.Let(a => "WHERE " + a.ToString() + "\r\n")'                  OrderBy.Any() ? ("ORDER BY " + OrderBy.ToString(" '") + "\r\n") : null'                  GroupBy.Any() ? ("GROUP BY " + GroupBy.ToString(g => g.ToString()' " '") + "\r\n") : null'                  SelectOptions == 0 ? "" : SelectOptions.ToString() + "\r\n"'                  Alias);
Magic Number,Signum.Engine.Linq,SelectExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "SELECT {0}{1}\r\n{2}\r\nFROM {3}\r\n{4}{5}{6}{7} AS {8}".FormatWith(                  IsDistinct ? "DISTINCT " : ""'                  Top?.Let(t => "TOP {0} ".FormatWith(t.ToString()))'                  Columns.ToString(c => c.ToString().Indent(4)' "'\r\n")'                  From?.Let(f => f.ToString().Let(a => a.Contains("\r\n") ? "\r\n" + a.Indent(4) : a))'                  Where?.Let(a => "WHERE " + a.ToString() + "\r\n")'                  OrderBy.Any() ? ("ORDER BY " + OrderBy.ToString(" '") + "\r\n") : null'                  GroupBy.Any() ? ("GROUP BY " + GroupBy.ToString(g => g.ToString()' " '") + "\r\n") : null'                  SelectOptions == 0 ? "" : SelectOptions.ToString() + "\r\n"'                  Alias);
Magic Number,Signum.Engine.Linq,JoinExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "{0}\r\n{1}\r\n{2}\r\nON {3}".FormatWith(Left.ToString().Indent(4)' JoinType' Right.ToString().Indent(4)' Condition?.ToString());
Magic Number,Signum.Engine.Linq,JoinExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "{0}\r\n{1}\r\n{2}\r\nON {3}".FormatWith(Left.ToString().Indent(4)' JoinType' Right.ToString().Indent(4)' Condition?.ToString());
Magic Number,Signum.Engine.Linq,SetOperatorExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "{0}\r\n{1}\r\n{2}\r\n as {3}".FormatWith(Left.ToString().Indent(4)' Operator' Right.ToString().Indent(4)' Alias);
Magic Number,Signum.Engine.Linq,SetOperatorExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "{0}\r\n{1}\r\n{2}\r\n as {3}".FormatWith(Left.ToString().Indent(4)' Operator' Right.ToString().Indent(4)' Alias);
Magic Number,Signum.Engine.Linq,ProjectionExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "(SOURCE\r\n{0}\r\nPROJECTION\r\n{1})".FormatWith(Select.ToString().Indent(4)' Projector.ToString().Indent(4));
Magic Number,Signum.Engine.Linq,ProjectionExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Sql.cs,ToString,The following statement contains a magic number: return "(SOURCE\r\n{0}\r\nPROJECTION\r\n{1})".FormatWith(Select.ToString().Indent(4)' Projector.ToString().Indent(4));
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.IsGenericMethod && (decType == typeof(Queryable) || decType == typeof(Enumerable)))              {                  bool query = decType == typeof(Queryable);                    Type[] paramTypes = m.Method.GetGenericArguments();                  MethodInfo mi = m.Method.GetGenericMethodDefinition();                    //IE<IGrouping<K' S>> GroupBy<S' K>(this IE<S> source' Func<S' K> keySelector);                  //    GroupBy(col' a=>func(a)) -> GroupBy(col' a=>func(a)' a=>a)                     if (ReflectionTools.MethodEqual(mi' miGroupBySE) || ReflectionTools.MethodEqual(mi' miGroupBySQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                        return Expression.Call(miG' source' keySelector' Expression.Lambda(p' p));                  }                    //IE<R> GroupBy<S' K' R>(this IE<S> source' Func<S' K> keySelector' Func<K' IE<S>' R> resultSelector);                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (a'B)=>f3(a'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>=>f3(g.Key'g))                                            if (ReflectionTools.MethodEqual(mi' miGroupBySRE) || ReflectionTools.MethodEqual(mi' miGroupBySRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[0]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[0]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[2]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                               resultSelector.Parameters[1]' g)'                          g);                          ParameterExpression p = Expression.Parameter(paramTypes[0]' "p" + i++);                      return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' Expression.Lambda(p' p))'                              newResult);                  }                    //IE<R> GroupBy<S' K' E' R>(this IE<S> source' Func<S' K> keySelector' Func<S' E> elementSelector' Func<K' IE<E>' R> resultSelector)                  //    GroupBy(col' a=>f1(a)' a=>f2(a)' (k'B)=>f(k'B)) -> GroupBy(col' a=>f1(a)' a=>f2(a)).Select(g=>f3(g.Key'g))                      if (ReflectionTools.MethodEqual(mi' miGroupByNRE) || ReflectionTools.MethodEqual(mi' miGroupByNRQ))                  {                      var source = Visit(m.GetArgument("source"));                      var keySelector = (LambdaExpression)Visit(m.GetArgument("keySelector").StripQuotes());                      var elementSelector = (LambdaExpression)Visit(m.GetArgument("elementSelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(paramTypes[1]' paramTypes[2]);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNE)                          .MakeGenericMethod(paramTypes[0]' paramTypes[1]' paramTypes[2]);                        MethodInfo miS = (query ? miSelectQ : miSelectE)                          .MakeGenericMethod(groupingType' paramTypes[3]);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                        LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(Replacer.Replace(resultSelector.Body'                              resultSelector.Parameters[0]' Expression.MakeMemberAccess(g' groupingType.GetProperty("Key")))'                              resultSelector.Parameters[1]' g)'                          g);                        return                          Expression.Call(miS'                              Expression.Call(miG' source' keySelector' elementSelector)'                              newResult);                  }                    //IE<R> GroupJoin<O' I' K' R>(this IE<O> outer' IE<I> inner' Func<O' K> outerKeySelector' Func<I' K> innerKeySelector' Func<O' IE<I>' R> resultSelector)                  //    GroupJoin(outer' inner' o=>f1(o)' i=>f2                  //(i)' (o' gI)=>f3(o'gI)) -->                     //      Join(outer' GroupBy(inner' i=>f2(i)' i=>i) ' o=>f1(o)' g=>g.Key' (o'g)=>f2(o' g))							                      if (ReflectionTools.MethodEqual(mi' miGroupJoinE) || ReflectionTools.MethodEqual(mi' miGroupJoinQ))                  {                      Type tO = paramTypes[0]' tI = paramTypes[1]' tK = paramTypes[2]' tR = paramTypes[3];                        var outer = Visit(m.GetArgument("outer"));                      var inner = Visit(m.GetArgument("inner"));                        bool hasDefaultIfEmpty = ExtractDefaultIfEmpty(ref inner);                         var outerKeySelector = (LambdaExpression)Visit(m.GetArgument("outerKeySelector").StripQuotes());                      var innerKeySelector = (LambdaExpression)Visit(m.GetArgument("innerKeySelector").StripQuotes());                      var resultSelector = (LambdaExpression)Visit(m.GetArgument("resultSelector").StripQuotes());                        Type groupingType = typeof(IGrouping<'>).MakeGenericType(tK' tI);                        MethodInfo miG = (query ? miGroupByNQ : miGroupByNQ)                          .MakeGenericMethod(tI'tK' tI);                        ParameterExpression p = Expression.Parameter(tI' "p" + i++);                      Expression group = Expression.Call(miG' inner' innerKeySelector' Expression.Lambda(p' p));                        if (hasDefaultIfEmpty)                      {                          var method = (query ? miDefaultIfEmptyQ : miDefaultIfEmptyE)                              .MakeGenericMethod(groupingType);                                                  group = Expression.Call(method' group);                      }                        //IQueryable<R> Join<TOuter' TInner' TKey' R>(this IQueryable<TOuter> outer' IEnumerable<TInner> inner' Expression<Func<TOuter' TKey>> outerKeySelector' Expression<Func<TInner' TKey>> innerKeySelector' Expression<Func<TOuter' TInner' R>> resultSelector);                        MethodInfo mij = (query ? miJoinQ : miJoinE)                          .MakeGenericMethod(tO' groupingType' tK' tR);                        ParameterExpression g = Expression.Parameter(groupingType' "g" + i++);                      LambdaExpression newResult =                          Expression.Lambda(                              Replacer.Replace(resultSelector.Body' resultSelector.Parameters[1]' g)'                          resultSelector.Parameters[0]'  g);                          return                          Expression.Call(mij' outer' group' outerKeySelector'                               Expression.Lambda(Expression.MakeMemberAccess(g' groupingType.GetProperty("Key"))' g)'                              newResult);                  }                                 if (ReflectionTools.MethodEqual(mi' miCount2E) || ReflectionTools.MethodEqual(mi' miCount2Q))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.GetArgument("predicate").StripQuotes());                        MethodInfo mWhere = (query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0]);                      MethodInfo mCount = (query ? miCountQ : miCountE).MakeGenericMethod(paramTypes[0]);                                            return Expression.Call(mCount' Expression.Call(mWhere' source' predicate));                   }                    if (ReflectionTools.MethodEqual(mi' miCastE) || ReflectionTools.MethodEqual(mi' miCastQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' source' lambdaCast);                  }                    if (ReflectionTools.MethodEqual(mi' miOfTypeE) || ReflectionTools.MethodEqual(mi' miOfTypeQ))                  {                      var source = Visit(m.GetArgument("source"));                        Type elemType = source.Type.ElementType();                        ParameterExpression pe = Expression.Parameter(elemType);                        var lambdaIs = Expression.Lambda(Expression.TypeIs(pe' paramTypes[0])' pe);                        var lambdaCast = Expression.Lambda(Expression.Convert(pe' paramTypes[0])' pe);                        var where = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(elemType)' source' lambdaIs);                        return Expression.Call((query ? miSelectQ : miSelectE).MakeGenericMethod(elemType' paramTypes[0])' where' lambdaCast);                  }                        if (mi.Name.Contains("Last"))                  {                      var source = Visit(m.GetArgument("source"));                      var predicate = (LambdaExpression)Visit(m.TryGetArgument("predicate").StripQuotes());                        Expression reverse = Expression.Call((query ? miReverseQ : miReverseE).MakeGenericMethod(paramTypes[0])' source);                         if(predicate != null)                          reverse = Expression.Call((query ? miWhereQ : miWhereE).MakeGenericMethod(paramTypes[0])' reverse' predicate);                        MethodInfo mEqFirst = query ?                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultQ : miFirstQ :                          mi.Name.Contains("OrDefault") ? miFirstOrDefaultE : miFirstE;                        return Expression.Call(mEqFirst.MakeGenericMethod(paramTypes[0])' reverse);                  }                      if (ReflectionTools.MethodEqual(mi' miElementAtE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) ||                     ReflectionTools.MethodEqual(mi' miElementAtQ) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ))                  {                      bool def = ReflectionTools.MethodEqual(mi' miElementAtOrDefaultE) || ReflectionTools.MethodEqual(mi' miElementAtOrDefaultQ);                        var source = Visit(m.GetArgument("source"));                      var index = Visit(m.GetArgument("index"));                        MethodInfo first = (def ? (query ? miFirstOrDefaultQ : miFirstOrDefaultE) :                                          (query ? miFirstQ : miFirstE)).MakeGenericMethod(paramTypes[0]);                        MethodInfo skip = (query ? miSkipQ : miSkipE).MakeGenericMethod(paramTypes[0]);                      return Visit(Expression.Call(first' Expression.Call(skip' source' index)));                  }                      if(ReflectionTools.MethodEqual(mi' miSkipE) ||ReflectionTools.MethodEqual(mi' miSkipQ))                  {                      var source = Visit(m.GetArgument("source"));                      var count = Visit(m.GetArgument("count"));                        ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                       ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                       Expression lambda = Expression.Lambda(Expression.LessThanOrEqual(count' pi)' pa' pi);                        MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                        return Expression.Call(miWhereIndex' source' lambda);                   }                      if (ReflectionTools.MethodEqual(mi' miTakeE) || ReflectionTools.MethodEqual(mi' miTakeQ))                  {                        if (m.GetArgument("source") is MethodCallExpression m2)                      {                          var mi2 = (((MethodCallExpression)m2).Method).GetGenericMethodDefinition();                            if (ReflectionTools.MethodEqual(mi2' miSkipE) || ReflectionTools.MethodEqual(mi2' miSkipQ))                          {                              var source = Visit(m2.GetArgument("source"));                              var skip = Visit(m2.GetArgument("count"));                              var take = Visit(m.GetArgument("count"));                                ParameterExpression pi = Expression.Parameter(typeof(int)' "i");                              ParameterExpression pa = Expression.Parameter(paramTypes[0]' "a");                              Expression lambda = Expression.Lambda(                                  Expression.And(                                      Expression.LessThanOrEqual(skip' pi)'                                      Expression.LessThan(pi' Expression.Add(skip' take))                                  )' pa' pi);                                MethodInfo miWhereIndex = (query ? miWhereIndexQ : miWhereIndexE).MakeGenericMethod(paramTypes[0]);                                return Expression.Call(miWhereIndex' source' lambda);                          }                      }                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,OverloadingSimplifier,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\OverloadingSimplifier.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Tuple) && m.Method.Name == "Create")              {                  var types = m.Arguments.Select(e => e.Type).ToArray();                  if (types.Length < 8)                  {                      return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.ToArray());                  }                  else                  {                      Type lastType = types[7];                      types[7] = typeof(Tuple<>).MakeGenericType(lastType);                        return Expression.New(m.Method.ReturnType.GetConstructor(types)' m.Arguments.Take(7).And(                          Expression.New(types[7].GetConstructor(new[] { lastType })' m.Arguments[7])).ToArray());                  }              }
Magic Number,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,TrySqlDate,The following statement contains a magic number: if (Connector.Current.AllowsConvertToDate)                  return Add(new SqlFunctionExpression(typeof(DateTime)' null' SqlFunction.CONVERT.ToString()' new[]                  {                      new SqlConstantExpression(SqlDbType.Date)'                      expr'                      new SqlConstantExpression(101)                  }));
Magic Number,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Queryable) ||                  m.Method.DeclaringType == typeof(Enumerable) ||                  m.Method.DeclaringType == typeof(EnumerableUniqueExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationPopulationExtensions))              {                  switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Any":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "All":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value")' m == root);                      case "Count":                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                      case "StdDev":                      case "StdDevP":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes()' m == root);                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m == root);                        case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes()' m == root);                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Reverse":                          return BindReverse(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }              }              else if (m.Method.DeclaringType == typeof(LinqHints))              {                  if (m.Method.Name == "OrderAlsoByKeys")                      return BindOrderAlsoByKeys(m.Type' m.GetArgument("source"));                    if (m.Method.Name == "WithHint")                      return BindWithHints(m.GetArgument("source")' (ConstantExpression)m.GetArgument("hint"));              }              else if (m.Method.DeclaringType == typeof(Database) && (m.Method.Name == "Retrieve" || m.Method.Name == "RetrieveAndForget"))              {                  throw new InvalidOperationException("{0} is not supported on queries. Consider using Lite<T>.Entity instead.".FormatWith(m.Method.MethodName()));              }              else if (m.Method.DeclaringType == typeof(EnumerableExtensions) && m.Method.Name == "ToString")              {                  return this.BindToString(m.GetArgument("source")' m.GetArgument("separator")' m.Method);              }              else if (m.Method.DeclaringType == typeof(LinqHintEntities))              {                  var expression = Visit(m.Arguments[0]) as ImplementedByExpression;                    var ib = expression as ImplementedByExpression;                    if (ib == null)                      throw new InvalidOperationException("Method {0} is only meant to be used on {1}".FormatWith(m.Method.Name' typeof(ImplementedByExpression).Name));                    CombineStrategy strategy = GetStrategy(m.Method);                    return new ImplementedByExpression(ib.Type' strategy' expression.Implementations);              }              else if (m.Method.DeclaringType == typeof(Lite) && m.Method.Name == "ToLite")              {                  Expression toStr = Visit(m.TryGetArgument("toStr")); //could be null                    var entity = Visit(m.GetArgument("entity"));                  var converted = EntityCasting(entity' Lite.Extract(m.Type));                  return MakeLite(converted' toStr);              }              else if (m.Method.DeclaringType.IsInstantiationOf(typeof(EnumEntity<>)) && m.Method.Name == "ToEnum")              {                  EntityExpression fi = (EntityExpression)Visit(m.Object);                    return Expression.Convert((ColumnExpression)fi.ExternalId.Value' m.Method.DeclaringType.GetGenericArguments()[0]);              }              else if (m.Object != null && typeof(IEnumerable).IsAssignableFrom(m.Method.DeclaringType) && typeof(string) != m.Method.DeclaringType && m.Method.Name == "Contains")              {                  return this.BindContains(m.Type' m.Object' m.Arguments[0]' m == root);              }              else if (m.Object != null && m.Method.Name == "GetType")              {                  var expression = Visit(m.Object);                    return GetEntityType(expression) ?? Expression.Constant(expression.Type' typeof(Type));              }
Magic Number,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Queryable) ||                  m.Method.DeclaringType == typeof(Enumerable) ||                  m.Method.DeclaringType == typeof(EnumerableUniqueExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationExtensions) ||                  m.Method.DeclaringType == typeof(StandartDeviationPopulationExtensions))              {                  switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Any":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "All":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value")' m == root);                      case "Count":                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                      case "StdDev":                      case "StdDevP":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes()' m == root);                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m == root);                        case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes()' m == root);                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Reverse":                          return BindReverse(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }              }              else if (m.Method.DeclaringType == typeof(LinqHints))              {                  if (m.Method.Name == "OrderAlsoByKeys")                      return BindOrderAlsoByKeys(m.Type' m.GetArgument("source"));                    if (m.Method.Name == "WithHint")                      return BindWithHints(m.GetArgument("source")' (ConstantExpression)m.GetArgument("hint"));              }              else if (m.Method.DeclaringType == typeof(Database) && (m.Method.Name == "Retrieve" || m.Method.Name == "RetrieveAndForget"))              {                  throw new InvalidOperationException("{0} is not supported on queries. Consider using Lite<T>.Entity instead.".FormatWith(m.Method.MethodName()));              }              else if (m.Method.DeclaringType == typeof(EnumerableExtensions) && m.Method.Name == "ToString")              {                  return this.BindToString(m.GetArgument("source")' m.GetArgument("separator")' m.Method);              }              else if (m.Method.DeclaringType == typeof(LinqHintEntities))              {                  var expression = Visit(m.Arguments[0]) as ImplementedByExpression;                    var ib = expression as ImplementedByExpression;                    if (ib == null)                      throw new InvalidOperationException("Method {0} is only meant to be used on {1}".FormatWith(m.Method.Name' typeof(ImplementedByExpression).Name));                    CombineStrategy strategy = GetStrategy(m.Method);                    return new ImplementedByExpression(ib.Type' strategy' expression.Implementations);              }              else if (m.Method.DeclaringType == typeof(Lite) && m.Method.Name == "ToLite")              {                  Expression toStr = Visit(m.TryGetArgument("toStr")); //could be null                    var entity = Visit(m.GetArgument("entity"));                  var converted = EntityCasting(entity' Lite.Extract(m.Type));                  return MakeLite(converted' toStr);              }              else if (m.Method.DeclaringType.IsInstantiationOf(typeof(EnumEntity<>)) && m.Method.Name == "ToEnum")              {                  EntityExpression fi = (EntityExpression)Visit(m.Object);                    return Expression.Convert((ColumnExpression)fi.ExternalId.Value' m.Method.DeclaringType.GetGenericArguments()[0]);              }              else if (m.Object != null && typeof(IEnumerable).IsAssignableFrom(m.Method.DeclaringType) && typeof(string) != m.Method.DeclaringType && m.Method.Name == "Contains")              {                  return this.BindContains(m.Type' m.Object' m.Arguments[0]' m == root);              }              else if (m.Object != null && m.Method.Name == "GetType")              {                  var expression = Visit(m.Object);                    return GetEntityType(expression) ?? Expression.Constant(expression.Type' typeof(Type));              }
Magic Number,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,FillColumnAssigments,The following statement contains a magic number: if (body is MethodCallExpression mce)              {                  var prev = mce.Arguments[0];                  FillColumnAssigments(assignments' toInsert' prev' visitValue);                    if (mce.Method.IsInstantiationOf(miSetReadonly))                  {                      var pi = ReflectionTools.BasePropertyInfo(mce.Arguments[1].StripQuotes());                        Expression colExpression = Visit(Expression.MakeMemberAccess(toInsert' Reflector.FindFieldInfo(body.Type' pi)));                      Expression expression = visitValue(mce.Arguments[2]);                      assignments.AddRange(AdaptAssign(colExpression' expression));                  }                  else if (mce.Method.IsInstantiationOf(miSetMixin))                  {                      Type mixinType = mce.Method.GetGenericArguments()[1];                        var mi = ReflectionTools.BaseMemberInfo(mce.Arguments[1].StripQuotes());                        Expression mixin = Expression.Call(toInsert' MixinDeclarations.miMixin.MakeGenericMethod(mixinType));                        Expression colExpression = Visit(Expression.MakeMemberAccess(mixin' mi));                      Expression expression = visitValue(mce.Arguments[2]);                      assignments.AddRange(AdaptAssign(colExpression' expression));                  }                  else                      throw InvalidBody();              }              else if (body is MemberInitExpression mie)              {                  assignments.AddRange(mie.Bindings.SelectMany(m =>                  {                      MemberAssignment ma = (MemberAssignment)m;                      Expression colExpression = Visit(Expression.MakeMemberAccess(toInsert' ma.Member));                      Expression expression = visitValue(ma.Expression);                      return AdaptAssign(colExpression' expression);                  }));              }              else if (body is NewExpression)              {                  if (((NewExpression)body).Arguments.Any())                      throw InvalidBody();                    return;              }              else              {                  throw InvalidBody();              }
Magic Number,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,FillColumnAssigments,The following statement contains a magic number: if (body is MethodCallExpression mce)              {                  var prev = mce.Arguments[0];                  FillColumnAssigments(assignments' toInsert' prev' visitValue);                    if (mce.Method.IsInstantiationOf(miSetReadonly))                  {                      var pi = ReflectionTools.BasePropertyInfo(mce.Arguments[1].StripQuotes());                        Expression colExpression = Visit(Expression.MakeMemberAccess(toInsert' Reflector.FindFieldInfo(body.Type' pi)));                      Expression expression = visitValue(mce.Arguments[2]);                      assignments.AddRange(AdaptAssign(colExpression' expression));                  }                  else if (mce.Method.IsInstantiationOf(miSetMixin))                  {                      Type mixinType = mce.Method.GetGenericArguments()[1];                        var mi = ReflectionTools.BaseMemberInfo(mce.Arguments[1].StripQuotes());                        Expression mixin = Expression.Call(toInsert' MixinDeclarations.miMixin.MakeGenericMethod(mixinType));                        Expression colExpression = Visit(Expression.MakeMemberAccess(mixin' mi));                      Expression expression = visitValue(mce.Arguments[2]);                      assignments.AddRange(AdaptAssign(colExpression' expression));                  }                  else                      throw InvalidBody();              }              else if (body is MemberInitExpression mie)              {                  assignments.AddRange(mie.Bindings.SelectMany(m =>                  {                      MemberAssignment ma = (MemberAssignment)m;                      Expression colExpression = Visit(Expression.MakeMemberAccess(toInsert' ma.Member));                      Expression expression = visitValue(ma.Expression);                      return AdaptAssign(colExpression' expression);                  }));              }              else if (body is NewExpression)              {                  if (((NewExpression)body).Arguments.Any())                      throw InvalidBody();                    return;              }              else              {                  throw InvalidBody();              }
Magic Number,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,VisitInsertSelect,The following statement contains a magic number: for (int i = 0' n = insertSelect.Assigments.Count; i < n; i++)              {                  ColumnAssignment assignment = insertSelect.Assigments[i];                  if (i > 0)                  {                      sb.Append("' ");                      if (i % 4 == 0)                          this.AppendNewLine(Indentation.Same);                  }                  sb.Append(assignment.Column.SqlEscape());              }
Magic Number,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,VisitInsertSelect,The following statement contains a magic number: for (int i = 0' n = insertSelect.Assigments.Count; i < n; i++)              {                  ColumnAssignment assignment = insertSelect.Assigments[i];                  if (i > 0)                  {                      sb.Append("' ");                      if (i % 4 == 0)                          this.AppendNewLine(Indentation.Same);                  }                  this.Visit(assignment.Expression);              }
Magic Number,Signum.Engine.Linq,EntityExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The following statement contains a magic number: return constructor +                  (Bindings == null ? null : ("\r\n{\r\n " + Bindings.ToString("'\r\n ").Indent(4) + "\r\n}")) +                  (Mixins == null ? null : ("\r\n" + Mixins.ToString(m => ".Mixin({0})".FormatWith(m)' "\r\n")));
Magic Number,Signum.Engine.Linq,EmbeddedEntityExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The following statement contains a magic number: return bindings.HasText() ?                   constructor + "\r\n{" + bindings.Indent(4) + "\r\n}" :                   constructor;
Magic Number,Signum.Engine.Linq,MixinEntityExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The following statement contains a magic number: return bindings.HasText() ?                  constructor + "\r\n{" + bindings.Indent(4) + "\r\n}" :                  constructor;
Magic Number,Signum.Engine.Linq,ImplementedByExpression,C:\repos\signumsoftware_framework\Signum.Engine\Linq\DbExpressions.Signum.cs,ToString,The following statement contains a magic number: return "ImplementedBy({0}){{\r\n{1}\r\n}}".FormatWith(Strategy'                  Implementations.ToString(kvp => "{0} ->  {1}".FormatWith(kvp.Key.TypeName()' kvp.Value.ToString())' "\r\n").Indent(4)                  );
Magic Number,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Queryable) ||                  m.Method.DeclaringType == typeof(Enumerable) ||                  m.Method.DeclaringType == typeof(EnumerableUniqueExtensions))              {                  switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Count":                          return this.BindCount(m.Type' m.GetArgument("source"));                      case "DefaultIfEmpty":                          return Visit(m.GetArgument("source"));                      case "Any":                          return this.BindAny(m.Type' m.GetArgument("source"));                      case "All":                          return this.BindAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value"));                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes());                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes());                      case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes());                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                      case "Skip":                          return BindSkip(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }              }
Magic Number,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(Queryable) ||                  m.Method.DeclaringType == typeof(Enumerable) ||                  m.Method.DeclaringType == typeof(EnumerableUniqueExtensions))              {                  switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Count":                          return this.BindCount(m.Type' m.GetArgument("source"));                      case "DefaultIfEmpty":                          return Visit(m.GetArgument("source"));                      case "Any":                          return this.BindAny(m.Type' m.GetArgument("source"));                      case "All":                          return this.BindAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value"));                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes());                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes());                      case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes());                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                      case "Skip":                          return BindSkip(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }              }
Magic Number,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,ToDirectedGraph,The following statement contains a magic number: foreach (var item in OperationLogic.GraphOperations<T' S>())              {                  switch (item.OperationType)                  {                      case OperationType.Execute:                          {                              Execute gOp = (Execute)item;                                foreach (var f in gOp.FromStates)                                  foreach (var t in gOp.ToStates)                                      Add(f.ToString()' t.ToString()' item.OperationSymbol);                              } break;                      case OperationType.Delete:                          {                              Delete dOp = (Delete)item;                              foreach (var f in dOp.FromStates)                                  Add(f.ToString()' "[Deleted]"' item.OperationSymbol);                              } break;                      case OperationType.Constructor:                      case OperationType.ConstructorFrom:                      case OperationType.ConstructorFromMany:                          {                              string from = item.OperationType == OperationType.Constructor ? "[New]" :                                              item.OperationType == OperationType.ConstructorFrom ? "[From {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) :                                              item.OperationType == OperationType.ConstructorFromMany ? "[FromMany {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) : "";                                var dtoState = (IGraphToStateOperation)item;                              foreach (var t in dtoState.ToStates)                                  Add(from' t.ToString()' item.OperationSymbol);                            } break;                  }              }
Magic Number,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,ToDirectedGraph,The following statement contains a magic number: foreach (var item in OperationLogic.GraphOperations<T' S>())              {                  switch (item.OperationType)                  {                      case OperationType.Execute:                          {                              Execute gOp = (Execute)item;                                foreach (var f in gOp.FromStates)                                  foreach (var t in gOp.ToStates)                                      Add(f.ToString()' t.ToString()' item.OperationSymbol);                              } break;                      case OperationType.Delete:                          {                              Delete dOp = (Delete)item;                              foreach (var f in dOp.FromStates)                                  Add(f.ToString()' "[Deleted]"' item.OperationSymbol);                              } break;                      case OperationType.Constructor:                      case OperationType.ConstructorFrom:                      case OperationType.ConstructorFromMany:                          {                              string from = item.OperationType == OperationType.Constructor ? "[New]" :                                              item.OperationType == OperationType.ConstructorFrom ? "[From {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) :                                              item.OperationType == OperationType.ConstructorFromMany ? "[FromMany {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) : "";                                var dtoState = (IGraphToStateOperation)item;                              foreach (var t in dtoState.ToStates)                                  Add(from' t.ToString()' item.OperationSymbol);                            } break;                  }              }
Magic Number,Signum.Engine.Operations,OperationLogic,C:\repos\signumsoftware_framework\Signum.Engine\Operations\OperationLogic.cs,GetContextualGraphCanExecute,The following statement contains a magic number: var states = lites.GroupsOf(200).SelectMany(list =>                  Database.Query<T>().Where(e => list.Contains(e.ToLite())).Select(getState).Distinct()).Distinct().ToList();
Magic Number,Signum.Engine.Maps,Schema,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.cs,SynchronizationScript,The following statement contains a magic number: using (CultureInfoUtils.ChangeBothCultures(ForceCultureInfo))              using (ExecutionMode.Global())              {                  Replacements replacements = new Replacements() { Interactive = interactive' ReplaceDatabaseName = replaceDatabaseName' SchemaOnly = schemaOnly };                  SqlPreCommand command = Synchronizing                      .GetInvocationListTyped()                      .Select(e =>                      {                          try                          {                              return e(replacements);                          }                          catch (Exception ex)                          {                              return new SqlPreCommandSimple("-- Exception on {0}.{1}\r\n{2}".FormatWith(e.Method.DeclaringType.Name' e.Method.Name' ex.Message.Indent(2' '-')));                          }                      })                      .Combine(Spacing.Triple);                    return command;              }
Magic Number,Signum.Engine.Maps,TableMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,CreateCache,The following statement contains a magic number: if (result.isEmbeddedEntity || result.hasOrder)              {                  var trios = new List<Table.Trio>();                  var assigments = new List<Expression>();                    var paramRowId = Expression.Parameter(typeof(PrimaryKey)' "rowId");                    string parentId = "parentId";                  string rowId = "rowId";                    //BackReference.CreateParameter(trios' assigments' paramIdent' paramForbidden' paramSuffix);                  if (this.Order != null)                      Order.CreateParameter(trios' assigments' paramOrder' paramForbidden' paramSuffix);                  Field.CreateParameter(trios' assigments' paramItem' paramForbidden' paramSuffix);                    result.sqlUpdate = suffix => "UPDATE {0} SET \r\n{1}\r\n WHERE {2} = {3} AND {4} = {5}".FormatWith(Name'                      trios.ToString(p => "{0} = {1}".FormatWith(p.SourceColumn.SqlEscape()' p.ParameterName + suffix).Indent(2)' "'\r\n")'                      this.BackReference.Name.SqlEscape()' ParameterBuilder.GetParameterName(parentId + suffix)'                      this.PrimaryKey.Name.SqlEscape()' ParameterBuilder.GetParameterName(rowId + suffix));                    var parameters = trios.Select(a => a.ParameterBuilder).ToList();                    parameters.Add(pb.ParameterFactory(Table.Trio.Concat(parentId' paramSuffix)' this.BackReference.SqlDbType' null' false'                      Expression.Field(Expression.Property(Expression.Field(paramIdent' Table.fiId)' "Value")' "Object")));                  parameters.Add(pb.ParameterFactory(Table.Trio.Concat(rowId' paramSuffix)' this.PrimaryKey.SqlDbType' null' false'                      Expression.Field(paramRowId' "Object")));                    var expr = Expression.Lambda<Func<Entity' PrimaryKey' T' int' Forbidden' string' List<DbParameter>>>(                      Table.CreateBlock(parameters' assigments)' paramIdent' paramRowId' paramItem' paramOrder' paramForbidden' paramSuffix);                  result.UpdateParameters = expr.Compile();              }
Magic Number,Signum.Engine.Maps,FieldMList,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The following statement contains a magic number: return "Coleccion\r\n{0}".FormatWith(TableMList.ToString().Indent(2));
Magic Number,Signum.Engine.Maps,FieldEmbedded,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The following statement contains a magic number: return "Embebed\r\n{0}".FormatWith(EmbeddedFields.ToString(c => "{0} : {1}".FormatWith(c.Key' c.Value)' "\r\n").Indent(2));
Magic Number,Signum.Engine.Maps,FieldMixin,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The following statement contains a magic number: return "Mixin\r\n{0}".FormatWith(Fields.ToString(c => "{0} : {1}".FormatWith(c.Key' c.Value)' "\r\n").Indent(2));
Magic Number,Signum.Engine.Maps,FieldImplementedBy,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Expressions.cs,ToString,The following statement contains a magic number: return "ImplementedBy\r\n{0}".FormatWith(ImplementationColumns.ToString(k => "{0} -> {1} ({2})".FormatWith(k.Value.Name' k.Value.ReferenceTable.Name' k.Key.Name)' "\r\n").Indent(2));
Magic Number,Signum.Engine.Maps,UpdateCache,C:\repos\signumsoftware_framework\Signum.Engine\Schema\Schema.Save.cs,InitializeUpdate,The following statement contains a magic number: using (HeavyProfiler.LogNoStackTrace("InitializeUpdate"' () => table.Type.TypeName()))                  {                      UpdateCache result = new UpdateCache { table = table };                        var trios = new List<Trio>();                      var assigments = new List<Expression>();                      var paramIdent = Expression.Parameter(typeof(Entity)' "ident");                      var paramForbidden = Expression.Parameter(typeof(Forbidden)' "forbidden");                      var paramOldTicks = Expression.Parameter(typeof(long)' "oldTicks");                      var paramSuffix = Expression.Parameter(typeof(string)' "suffix");                        var cast = Expression.Parameter(table.Type);                      assigments.Add(Expression.Assign(cast' Expression.Convert(paramIdent' table.Type)));                        foreach (var item in table.Fields.Values.Where(a => !(a.Field is FieldPrimaryKey)))                          item.Field.CreateParameter(trios' assigments' Expression.Field(cast' item.FieldInfo)' paramForbidden' paramSuffix);                        if (table.Mixins != null)                          foreach (var item in table.Mixins.Values)                              item.CreateParameter(trios' assigments' cast' paramForbidden' paramSuffix);                        var pb = Connector.Current.ParameterBuilder;                        string idParamName = ParameterBuilder.GetParameterName("id");                        string oldTicksParamName = ParameterBuilder.GetParameterName("old_ticks");                        result.SqlUpdatePattern = (suffix' output) =>                      {                          string update = "UPDATE {0} SET \r\n{1}\r\n WHERE {2} = {3}".FormatWith(                              table.Name'                              trios.ToString(p => "{0} = {1}".FormatWith(p.SourceColumn.SqlEscape()' p.ParameterName + suffix).Indent(2)' "'\r\n")'                              table.PrimaryKey.Name.SqlEscape()'                              idParamName + suffix);                              if (table.Ticks != null)                              update += " AND {0} = {1}".FormatWith(table.Ticks.Name.SqlEscape()' oldTicksParamName + suffix);                            if (!output)                              return update;                          else                              return update + "\r\nIF @@ROWCOUNT = 0 INSERT INTO @NotFound (id) VALUES ({0})".FormatWith(idParamName + suffix);                      };                        List<Expression> parameters = trios.Select(a => (Expression)a.ParameterBuilder).ToList();                        parameters.Add(pb.ParameterFactory(Trio.Concat(idParamName' paramSuffix)' table.PrimaryKey.SqlDbType' null' false'                          Expression.Field(Expression.Property(Expression.Field(paramIdent' fiId)' "Value")' "Object")));                        if (table.Ticks != null)                      {                          parameters.Add(pb.ParameterFactory(Trio.Concat(oldTicksParamName' paramSuffix)' table.Ticks.SqlDbType' null' false' table.Ticks.ConvertTicks(paramOldTicks)));                      }                        var expr = Expression.Lambda<Func<Entity' long' Forbidden' string' List<DbParameter>>>(                          CreateBlock(parameters' assigments)' paramIdent' paramOldTicks' paramForbidden' paramSuffix);                        result.UpdateParameters = expr.Compile();                        return result;                  }
Missing Default,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,IsNumber,The following switch statement is missing a default case: switch (sqlDbType)              {                  case SqlDbType.BigInt:                  case SqlDbType.Float:                  case SqlDbType.Decimal:                  case SqlDbType.Int:                  case SqlDbType.Bit:                  case SqlDbType.Money:                  case SqlDbType.Real:                  case SqlDbType.TinyInt:                  case SqlDbType.SmallInt:                  case SqlDbType.SmallMoney:                      return true;              }
Missing Default,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,IsString,The following switch statement is missing a default case: switch (sqlDbType)              {                  case SqlDbType.NText:                  case SqlDbType.NVarChar:                  case SqlDbType.Text:                  case SqlDbType.VarChar:                      return true;              }
Missing Default,Signum.Engine,SqlBuilder,C:\repos\signumsoftware_framework\Signum.Engine\Engine\SqlBuilder.cs,IsDate,The following switch statement is missing a default case: switch (sqlDbType)              {                  case SqlDbType.DateTime:                  case SqlDbType.DateTime2:                  case SqlDbType.DateTimeOffset:                      return true;              }
Missing Default,Signum.Engine.DynamicQuery,ColumnDescriptionFactory,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ColumnDescriptionFactory.cs,GetUnit,The following switch statement is missing a default case: switch (routes[0].PropertyRouteType)              {                  case PropertyRouteType.LiteEntity:                  case PropertyRouteType.Root:                      return null;                  case PropertyRouteType.FieldOrProperty:                      return routes.Select(pr => pr.SimplifyToProperty().PropertyInfo.GetCustomAttribute<UnitAttribute>()?.UnitName).Distinct().Only();                  case PropertyRouteType.MListItems:                      return null;              }
Missing Default,Signum.Engine.DynamicQuery,ColumnDescriptionFactory,C:\repos\signumsoftware_framework\Signum.Engine\DynamicQuery\ColumnDescriptionFactory.cs,GetFormat,The following switch statement is missing a default case: switch (routes[0].PropertyRouteType)              {                  case PropertyRouteType.LiteEntity:                  case PropertyRouteType.Root:                      return null;                  case PropertyRouteType.FieldOrProperty:                      return routes.Select(pr => Reflector.FormatString(pr)).Distinct().Only();                  case PropertyRouteType.MListItems:                      return Reflector.FormatString(routes[0].Type);              }
Missing Default,Signum.Engine.Linq,DbExpressionComparer,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionComparer.cs,CompareSubquery,The following switch statement is missing a default case: switch ((DbExpressionType)a.NodeType)              {                  case DbExpressionType.Scalar:                      return CompareScalar((ScalarExpression)a' (ScalarExpression)b);                  case DbExpressionType.Exists:                      return CompareExists((ExistsExpression)a' (ExistsExpression)b);                  case DbExpressionType.In:                      return CompareIn((InExpression)a' (InExpression)b);              }
Missing Default,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,MakeSqlValue,The following switch statement is missing a default case: switch (((bool?)((ConstantExpression)exp).Value))                  {                      case false: return new SqlConstantExpression(0' exp.Type);                      case true: return new SqlConstantExpression(1' exp.Type);                      case null: return new SqlConstantExpression(null' exp.Type);                  }
Missing Default,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,IsSqlCondition,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.And:                  case ExpressionType.AndAlso:                  case ExpressionType.ExclusiveOr:                  case ExpressionType.Not:                  case ExpressionType.Or:                  case ExpressionType.OrElse:                  case ExpressionType.NotEqual:                  case ExpressionType.Equal:                  case ExpressionType.GreaterThan:                  case ExpressionType.GreaterThanOrEqual:                  case ExpressionType.LessThan:                  case ExpressionType.LessThanOrEqual:                      return true;                    case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                      Expression operand = ((UnaryExpression)expression).Operand;                      return IsBooleanExpression(operand) && IsSqlCondition(operand);                    case ExpressionType.Constant:                  case ExpressionType.Coalesce:                      return false;              }
Missing Default,Signum.Engine.Linq,ConditionsRewriter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\ConditionsRewriter.cs,IsSqlCondition,The following switch statement is missing a default case: switch (exp.DbNodeType)              {                  case DbExpressionType.Exists:                  case DbExpressionType.Like:                  case DbExpressionType.In:                  case DbExpressionType.IsNull:                  case DbExpressionType.IsNotNull:                      return true;                    case DbExpressionType.SqlFunction:                  case DbExpressionType.Column:                  case DbExpressionType.Projection:                  case DbExpressionType.Case:                  case DbExpressionType.SqlConstant:                      return false;              }
Missing Default,Signum.Engine.Linq,DbExpressionNominator,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\DbExpressionNominator.cs,IsExcluded,The following switch statement is missing a default case: switch (expDb.DbNodeType)              {                  case DbExpressionType.Table:                  case DbExpressionType.Select:                  case DbExpressionType.Projection:                  case DbExpressionType.Join:                  case DbExpressionType.AggregateRequest: //Not sure :S                   case DbExpressionType.Update:                  case DbExpressionType.Delete:                  case DbExpressionType.CommandAggregate:                  case DbExpressionType.SelectRowCount:                      return true;              }
Missing Default,Signum.Engine.Linq,QueryBinder,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryBinder.cs,VisitMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Any":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "All":                          return this.BindAnyAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes()' m.Method' m == root);                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value")' m == root);                      case "Count":                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                      case "StdDev":                      case "StdDevP":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes()' m == root);                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes()' m == root);                        case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes()' m == root);                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Reverse":                          return BindReverse(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }
Missing Default,Signum.Engine.Linq,QueryFormatter,C:\repos\signumsoftware_framework\Signum.Engine\Linq\ExpressionVisitor\QueryFormatter.cs,VisitJoin,The following switch statement is missing a default case: switch (join.JoinType)              {                  case JoinType.CrossJoin:                      sb.Append("CROSS JOIN ");                      break;                  case JoinType.InnerJoin:                      sb.Append("INNER JOIN ");                      break;                  case JoinType.LeftOuterJoin:                  case JoinType.SingleRowLeftOuterJoin:                      sb.Append("LEFT OUTER JOIN ");                      break;                  case JoinType.RightOuterJoin:                      sb.Append("RIGHT OUTER JOIN ");                      break;                  case JoinType.FullOuterJoin:                      sb.Append("FULL OUTER JOIN ");                      break;                  case JoinType.CrossApply:                      sb.Append("CROSS APPLY ");                      break;                  case JoinType.OuterApply:                      sb.Append("OUTER APPLY ");                      break;              }
Missing Default,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,VisitMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)                  {                      case "Where":                          return this.BindWhere(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Select":                          return this.BindSelect(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes());                      case "SelectMany":                          if (m.Arguments.Count == 2)                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("selector").StripQuotes()' null);                          else                              return this.BindSelectMany(m.Type' m.GetArgument("source")' m.GetArgument("collectionSelector").StripQuotes()' m.TryGetArgument("resultSelector").StripQuotes());                      case "Join":                          return this.BindJoin(                              m.Type' m.GetArgument("outer")' m.GetArgument("inner")'                              m.GetArgument("outerKeySelector").StripQuotes()'                              m.GetArgument("innerKeySelector").StripQuotes()'                              m.GetArgument("resultSelector").StripQuotes());                      case "OrderBy":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "OrderByDescending":                          return this.BindOrderBy(m.Type' m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "ThenBy":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Ascending);                      case "ThenByDescending":                          return this.BindThenBy(m.GetArgument("source")' m.GetArgument("keySelector").StripQuotes()' OrderType.Descending);                      case "GroupBy":                          return this.BindGroupBy(m.Type' m.GetArgument("source")'                              m.GetArgument("keySelector").StripQuotes()'                              m.GetArgument("elementSelector").StripQuotes());                      case "Count":                          return this.BindCount(m.Type' m.GetArgument("source"));                      case "DefaultIfEmpty":                          return Visit(m.GetArgument("source"));                      case "Any":                          return this.BindAny(m.Type' m.GetArgument("source"));                      case "All":                          return this.BindAll(m.Type' m.GetArgument("source")' m.GetArgument("predicate").StripQuotes());                      case "Contains":                          return this.BindContains(m.Type' m.GetArgument("source")' m.TryGetArgument("item") ?? m.GetArgument("value"));                      case "Sum":                      case "Min":                      case "Max":                      case "Average":                          return this.BindAggregate(m.Type' m.Method.Name.ToEnum<AggregateSqlFunction>()'                              m.GetArgument("source")' m.TryGetArgument("selector").StripQuotes());                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                          return BindUniqueRow(m.Type' m.Method.Name.ToEnum<UniqueFunction>()'                              m.GetArgument("source")' m.TryGetArgument("predicate").StripQuotes());                      case "FirstEx":                      case "SingleEx":                      case "SingleOrDefaultEx":                          return BindUniqueRow(m.Type' m.Method.Name.RemoveEnd(2).ToEnum<UniqueFunction>()'                             m.GetArgument("collection")' m.TryGetArgument("predicate").StripQuotes());                      case "Distinct":                          return BindDistinct(m.Type' m.GetArgument("source"));                      case "Take":                          return BindTake(m.Type' m.GetArgument("source")' m.GetArgument("count"));                      case "Skip":                          return BindSkip(m.Type' m.GetArgument("source")' m.GetArgument("count"));                  }
Missing Default,Signum.Engine.Linq,MetadataVisitor,C:\repos\signumsoftware_framework\Signum.Engine\Linq\Meta\MetadataVisitor.cs,BindMember,The following switch statement is missing a default case: switch (source.NodeType)              {                  case ExpressionType.MemberInit:                      return ((MemberInitExpression)source).Bindings                          .OfType<MemberAssignment>()                          .SingleEx(a => ReflectionTools.MemeberEquals(a.Member' member)).Expression;                  case ExpressionType.New:                      NewExpression nex = (NewExpression)source;                      if (nex.Type.IsInstantiationOf(typeof(Grouping<'>)) && member.Name == "Key")                      {                          return nex.Arguments[0];                      }                        if (nex.Members != null)                      {                          PropertyInfo pi = (PropertyInfo)member;                          return nex.Members.Zip(nex.Arguments).SingleEx(p => ReflectionTools.PropertyEquals((PropertyInfo)p.first' pi)).second;                      }                      break;              }
Missing Default,Signum.Engine.Operations,Graph<T;S>,C:\repos\signumsoftware_framework\Signum.Engine\Operations\GraphState.cs,ToDirectedGraph,The following switch statement is missing a default case: switch (item.OperationType)                  {                      case OperationType.Execute:                          {                              Execute gOp = (Execute)item;                                foreach (var f in gOp.FromStates)                                  foreach (var t in gOp.ToStates)                                      Add(f.ToString()' t.ToString()' item.OperationSymbol);                              } break;                      case OperationType.Delete:                          {                              Delete dOp = (Delete)item;                              foreach (var f in dOp.FromStates)                                  Add(f.ToString()' "[Deleted]"' item.OperationSymbol);                              } break;                      case OperationType.Constructor:                      case OperationType.ConstructorFrom:                      case OperationType.ConstructorFromMany:                          {                              string from = item.OperationType == OperationType.Constructor ? "[New]" :                                              item.OperationType == OperationType.ConstructorFrom ? "[From {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) :                                              item.OperationType == OperationType.ConstructorFromMany ? "[FromMany {0}]".FormatWith(item.GetType().GetGenericArguments()[2].TypeName()) : "";                                var dtoState = (IGraphToStateOperation)item;                              foreach (var t in dtoState.ToStates)                                  Add(from' t.ToString()' item.OperationSymbol);                            } break;                  }
