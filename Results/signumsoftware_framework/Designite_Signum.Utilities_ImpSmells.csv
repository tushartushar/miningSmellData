Implementation smell,Namespace,Class,File,Method,Description
Long Method,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,The method has 100 lines of code.
Long Method,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,TryParse,The method has 183 lines of code.
Complex Method,Signum.Utilities,DescriptionManager,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,Fallback,Cyclomatic complexity of the method is 8
Complex Method,Signum.Utilities,NaturalLanguageTools,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\NaturalLanguageTools.cs,Kind,Cyclomatic complexity of the method is 9
Complex Method,Signum.Utilities,TimeSpanExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\TimeSpanExtensions.cs,NiceToString,Cyclomatic complexity of the method is 10
Complex Method,Signum.Utilities,TimeSpanExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\TimeSpanExtensions.cs,ToShortString,Cyclomatic complexity of the method is 9
Complex Method,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,Cyclomatic complexity of the method is 8
Complex Method,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LongestCommonSubsequence,Cyclomatic complexity of the method is 10
Complex Method,Signum.Utilities.ExpressionTrees,MethodKey,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,Cyclomatic complexity of the method is 22
Complex Method,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,VisitBinary,Cyclomatic complexity of the method is 14
Complex Method,Signum.Utilities.DataStructures,DirectedEdgedGraph<T;E>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\DirectedEdgedGraph.cs,FeedbackEdgeSet,Cyclomatic complexity of the method is 8
Complex Method,Signum.Utilities.DataStructures,DirectedGraph<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\DirectedGraph.cs,FeedbackEdgeSet,Cyclomatic complexity of the method is 8
Complex Method,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,MemeberEquals,Cyclomatic complexity of the method is 9
Long Parameter List,Signum.Utilities,Tsv,C:\repos\signumsoftware_framework\Signum.Utilities\Tsv.cs,ToTsvFile,The method has 6 parameters. Parameters: collection' fileName' encoding' autoFlush' append' toStringFactory
Long Parameter List,Signum.Utilities,Tsv,C:\repos\signumsoftware_framework\Signum.Utilities\Tsv.cs,ToTsvFile,The method has 7 parameters. Parameters: collection' fileName' encoding' writeHeaders' autoFlush' append' toStringFactory
Long Parameter List,Signum.Utilities,Tsv,C:\repos\signumsoftware_framework\Signum.Utilities\Tsv.cs,ToTsvBytes,The method has 5 parameters. Parameters: collection' encoding' writeHeaders' autoFlush' toStringFactory
Long Parameter List,Signum.Utilities,Tsv,C:\repos\signumsoftware_framework\Signum.Utilities\Tsv.cs,ToTsv,The method has 6 parameters. Parameters: collection' stream' encoding' writeHeaders' autoFlush' toStringFactory
Long Parameter List,Signum.Utilities,PolymorphicExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,Invoke,The method has 5 parameters. Parameters: polymorphic' instance' p0' p1' p2
Long Parameter List,Signum.Utilities,PolymorphicExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,Invoke,The method has 6 parameters. Parameters: polymorphic' instance' p0' p1' p2' p3
Long Parameter List,Signum.Utilities,PolymorphicExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,Invoke,The method has 5 parameters. Parameters: polymorphic' instance' p0' p1' p2
Long Parameter List,Signum.Utilities,PolymorphicExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,Invoke,The method has 6 parameters. Parameters: polymorphic' instance' p0' p1' p2' p3
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ToCsvFile,The method has 8 parameters. Parameters: collection' fileName' encoding' culture' writeHeaders' autoFlush' append' toStringFactory
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ToCsvBytes,The method has 6 parameters. Parameters: collection' encoding' culture' writeHeaders' autoFlush' toStringFactory
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ToCsv,The method has 7 parameters. Parameters: collection' stream' encoding' culture' writeHeaders' autoFlush' toStringFactory
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ReadFile,The method has 5 parameters. Parameters: fileName' encoding' culture' skipLines' options
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ReadBytes,The method has 5 parameters. Parameters: data' encoding' culture' skipLines' options
Long Parameter List,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ReadStream,The method has 5 parameters. Parameters: stream' encoding' culture' skipLines' options
Long Parameter List,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,ToDictionaryEx,The method has 5 parameters. Parameters: source' keySelector' elementSelector' comparer' errorContext
Long Parameter List,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,AddRange,The method has 5 parameters. Parameters: dictionary' collection' keySelector' valueSelector' errorContext
Long Parameter List,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,JoinStrict,The method has 6 parameters. Parameters: currentCollection' shouldCollection' currentKeySelector' shouldKeySelector' resultSelector' action
Long Parameter List,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,JoinRelaxed,The method has 6 parameters. Parameters: currentCollection' shouldCollection' currentKeySelector' shouldKeySelector' resultSelector' action
Long Parameter List,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,JoinStrict,The method has 5 parameters. Parameters: currentCollection' shouldCollection' currentKeySelector' shouldKeySelector' resultSelector
Long Parameter List,Signum.Utilities,ExpressionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ExpressionExtensions.cs,Evaluate,The method has 5 parameters. Parameters: expr' a0' a1' a2' a3
Long Parameter List,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The method has 7 parameters. Parameters: r' minR' maxR' minG' maxG' minB' maxB
Long Parameter List,Signum.Utilities,RegexExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\RegexExtensions.cs,JoinSimilar,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The method has 5 parameters. Parameters: strOld' strNew' comparer' weight' allowTransposition
Long Parameter List,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The method has 5 parameters. Parameters: strOld' strNew' comparer' weight' allowTransposition
Long Parameter List,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LongestCommonSubstring,The method has 5 parameters. Parameters: str1' str2' startPos1' startPos2' comparer
Long Parameter List,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LongestCommonSubstring,The method has 5 parameters. Parameters: str1' str2' startPos1' startPos2' comparer
Long Parameter List,Signum.Utilities.DataStructures,Cube<T1;T2;T3>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Cube.cs,Cube,The method has 6 parameters. Parameters: minX' maxX' minY' maxY' minZ' maxZ
Long Parameter List,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,BuildString,The method has 5 parameters. Parameters: formatProvider' middle' start' end' all
Long Parameter List,Signum.Utilities.Reflection,MemberEntry<T>,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\MemberEntryFactory.cs,MemberEntry,The method has 6 parameters. Parameters: name' memberInfo' getter' untypedGetter' setter' untypedSetter
Long Statement,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,CompilationTime,The length of the statement  "            return new DateTime(v.Build * TimeSpan.TicksPerDay + v.Revision * TimeSpan.TicksPerSecond * 2).AddYears(1999).AddDays(-1); " is 122.
Long Statement,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,FrameworkVersions,The length of the statement  "            RegistryKey oldComponentsKey = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Active Setup\Installed Components\{78705f0d-e8db-4b2d-8193-982bdda15ecd}\"); " is 161.
Long Statement,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,FrameworkVersions,The length of the statement  "                oldComponentsKey = Registry.LocalMachine.OpenSubKey(@"HKLM\Software\Microsoft\Active Setup\Installed Components\{FDC11A6F-17D1-48f9-9EA3-9051954BAA24}\"); " is 154.
Long Statement,Signum.Utilities,Tsv,C:\repos\signumsoftware_framework\Signum.Utilities\Tsv.cs,ReadObject,The length of the statement  "                throw new FormatException("Only {0} columns found (instead of {1}) in line: {2}".FormatWith(vals.Count' members.Count' line)); " is 126.
Long Statement,Signum.Utilities,ArgsExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArgsExtensions.cs,SmartConvertTo,The length of the statement  "                        throw new InvalidOperationException($"Converting {obj} ({obj.GetType().TypeName()}) to {typeof(T).GetType().TypeName()} would lose precission"); " is 144.
Long Statement,Signum.Utilities,ArrayExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArrayExtensions.cs,SelectArray,The length of the statement  "            return new S[values.GetLength(0)' values.GetLength(1)' values.GetLength(2)].Initialize((i' j' k) => selector(values[i' j' k])); " is 127.
Long Statement,Signum.Utilities,ArrayExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArrayExtensions.cs,SelectArray,The length of the statement  "            return new S[values.GetLength(0)' values.GetLength(1)' values.GetLength(2)].Initialize((i' j' k) => selector(i' j' k' values[i' j' k])); " is 136.
Long Statement,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The length of the statement  "                    // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here. " is 139.
Long Statement,Signum.Utilities,Statics,C:\repos\signumsoftware_framework\Signum.Utilities\Statics.cs,ExportThreadContext,The length of the statement  "            return threadVariables.Where(t => !t.Value.IsClean && (!t.Value.AvoidExportImport || force)).ToDictionaryEx(kvp => kvp.Key' kvp => kvp.Value.UntypedValue); " is 155.
Long Statement,Signum.Utilities,Statics,C:\repos\signumsoftware_framework\Signum.Utilities\Statics.cs,CleanThreadContextAndAssert,The length of the statement  "            string errors = threadVariables.Values.Where(v => !v.IsClean).ToString(v => "{0} contains the non-default value {1}".FormatWith(v.Name' v.UntypedValue)' "\r\n"); " is 161.
Long Statement,Signum.Utilities,ScopeSessionFactory,C:\repos\signumsoftware_framework\Signum.Utilities\Statics.cs,OverrideSession,The length of the statement  "                throw new InvalidOperationException("Impossible to OverrideSession because Statics.SessionFactory is not a ScopeSessionFactory");  " is 129.
Long Statement,Signum.Utilities,DescriptionOptionsExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,IsSetAssert,The length of the statement  "            if ((opts.IsSet(DescriptionOptions.PluralDescription) || opts.IsSet(DescriptionOptions.Gender)) && !opts.IsSet(DescriptionOptions.Description)) " is 143.
Long Statement,Signum.Utilities,DescriptionOptionsExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,IsSetAssert,The length of the statement  "                throw new InvalidOperationException("{0} has {1} set also requires {2}".FormatWith(member.Name' opts' DescriptionOptions.Description)); " is 135.
Long Statement,Signum.Utilities,DescriptionManager,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,DefaultTypeDescription,The length of the statement  "            return type.GetCustomAttribute<DescriptionAttribute>()?.Description ?? DescriptionManager.CleanTypeName(type).SpacePascal(); " is 124.
Long Statement,Signum.Utilities,LocalizedAssembly,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,TranslationFileName,The length of the statement  "            return Path.Combine(DescriptionManager.TranslationDirectory' "{0}.{1}.xml".FormatWith(assembly.GetName().Name' cultureInfo.Name)); " is 130.
Long Statement,Signum.Utilities,LocalizedAssembly,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,GetDefaultAssemblyCulture,The length of the statement  "                throw new InvalidOperationException($"No {nameof(DefaultAssemblyCultureAttribute)} found in {assembly.GetName().Name}"); " is 120.
Long Statement,Signum.Utilities,LocalizedType,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,Contains,The length of the statement  "                this.Members != null && this.Members.Any(m => m.Key.Contains(text' StringComparison.InvariantCultureIgnoreCase) || m.Value.Contains(text' StringComparison.InvariantCultureIgnoreCase));  " is 184.
Long Statement,Signum.Utilities,TemporalFile,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\FileExtensions.cs,Create,The length of the statement  "                    "{0}{1}".FormatWith(System.IO.Path.GetTempFileName()' extension.HasText() ? "." + extension.Replace("."' null) : null)); " is 120.
Long Statement,Signum.Utilities,PolymorphicMerger,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,InheritanceAndInterfaces,The length of the statement  "                throw new InvalidOperationException("Ambiguity for type {0} between interfaces {1}".FormatWith(currentValue.Key.Name' newInterfacesValues.CommaAnd(t => t.Key.Name))); " is 166.
Long Statement,Signum.Utilities,PolymorphicMerger,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,InheritDictionaryInterfaces,The length of the statement  "                var types = interfaces.Where(a => a.Value.ContainsKey(item)).Select(a => new { a.Key' Value = a.Value[item] }).ToList(); " is 120.
Long Statement,Signum.Utilities,PolymorphicMerger,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,InheritDictionaryInterfaces,The length of the statement  "                    throw new InvalidOperationException("Ambiguity for key {0} in type {0} between interfaces {1}".FormatWith(item' currentValue.Key.Name' types.CommaAnd(t => t.Key.Name))); " is 169.
Long Statement,Signum.Utilities,Polymorphic<T>,C:\repos\signumsoftware_framework\Signum.Utilities\Polymorphic.cs,TryGetValueInternal,The length of the statement  "            return merger(KVP.Create(type' currentValue)' KVP.Create(type.BaseType' baseValue)' interfaces.Select(inter => KVP.Create(inter' TryGetValue(inter))).ToList()); " is 160.
Long Statement,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,ReadObject,The length of the statement  "                throw new FormatException("Only {0} columns found (instead of {1}) in line: {2}".FormatWith(vals.Count' members.Count' m.Value)); " is 129.
Long Statement,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,GetRegex,The length of the statement  "                new Regex(BaseRegex.Replace('\''' '"').Replace(';'' s)' RegexOptions.Multiline | RegexOptions.ExplicitCapture' timeout)); " is 121.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,TrimToSeconds,The length of the statement  "            return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' dateTime.Hour' dateTime.Minute' dateTime.Second' dateTime.Kind); " is 129.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The length of the statement  "                return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper()); " is 136.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The length of the statement  "                return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper()); " is 136.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The length of the statement  "                return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper()); " is 125.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The length of the statement  "                return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper()); " is 125.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The length of the statement  "                return resource.FormatWith((months == 1 ? DateTimeMessage._0Month.NiceToString() : DateTimeMessage._0Months.NiceToString()).FormatWith(Math.Abs(months))).ToLower(); " is 164.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The length of the statement  "                return resource.FormatWith((ts.Days == 1 ? DateTimeMessage._0Day.NiceToString() : DateTimeMessage._0Days.NiceToString()).FormatWith(Math.Abs(ts.Days))).ToLower(); " is 162.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The length of the statement  "                return resource.FormatWith((ts.Hours == 1 ? DateTimeMessage._0Hour.NiceToString() : DateTimeMessage._0Hours.NiceToString()).FormatWith(Math.Abs(ts.Hours))).ToLower(); " is 166.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The length of the statement  "                return resource.FormatWith((ts.Minutes == 1 ? DateTimeMessage._0Minute.NiceToString() : DateTimeMessage._0Minutes.NiceToString()).FormatWith(Math.Abs(ts.Minutes))).ToLower(); " is 174.
Long Statement,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The length of the statement  "            return resource.FormatWith((ts.Seconds == 1 ? DateTimeMessage._0Second.NiceToString() : DateTimeMessage._0Seconds.NiceToString()).FormatWith(Math.Abs(ts.Seconds))).ToLower(); " is 174.
Long Statement,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,GetOrThrow,The length of the statement  "                throw new KeyNotFoundException("Key '{0}' ({1}) not found on {2}".FormatWith(key' key.GetType().TypeName()' dictionary.GetType().TypeName())); " is 142.
Long Statement,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,JoinDictionaryStrict,The length of the statement  "                    throw new InvalidOperationException("Error {0}\r\n Extra: {1}\r\n Lacking: {2}".FormatWith(errorContext' currentOnly.ToString("' ")' shouldOnly.ToString("' "))); " is 161.
Long Statement,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,JoinDictionaryForeachStrict,The length of the statement  "                    throw new InvalidOperationException("Error {0}\r\n Extra: {1}\r\n Lacking: {2}".FormatWith(errorContext' currentOnly.ToString("' ")' shouldOnly.ToString("' "))); " is 161.
Long Statement,Signum.Utilities,HeavyProfiler,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,SqlStatistics,The length of the statement  "                            References = gr.Select(a => new SqlProfileReference { FullKey = a.FullIndex()' ElapsedToString = a.ElapsedToString() }).ToList()' " is 129.
Long Statement,Signum.Utilities,EnumerableUniqueExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,SingleEx,The length of the statement  "                () => forEndUser ? CollectionMessage.No0Found.NiceToString(elementName()) : "Sequence contains no {0}".FormatWith(elementName())' " is 129.
Long Statement,Signum.Utilities,EnumerableUniqueExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,SingleEx,The length of the statement  "                () => forEndUser ? CollectionMessage.MoreThanOne0Found.NiceToString(elementName()) : "Sequence contains more than one {0}".FormatWith(elementName())' " is 149.
Long Statement,Signum.Utilities,UniqueExExpander,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,Expand,The length of the statement  "                var uniqueMi = mi.DeclaringType.GetMethods().SingleEx(m => m.Name == mi.Name && m.IsGenericMethod && m.GetParameters().Length == (mi.GetParameters().Length - 1)); " is 162.
Long Statement,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,FormatTable,The length of the statement  "            return 0.To(height).Select(j => 0.To(width).ToString(i => table[i' j].PadChopRight(lengths[i])' separator)).ToString("\r\n"); " is 125.
Long Statement,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,JoinRelaxed,The length of the statement  "                    //In production' in some cases its OK to attempt starting an application with a slightly different schema (dynamic entities' green-blue deployments).   " is 149.
Long Statement,Signum.Utilities,ExpressionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ExpressionExtensions.cs,DuplicateMessage,The length of the statement  "Use this method only with constant expressions stored in static fields.".FormatWith(exp.ToString()' already.ToString()); " is 120.
Long Statement,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,IsInstantiationOf,The length of the statement  "            return method.IsGenericMethod && ReflectionTools.MethodEqual(method.GetGenericMethodDefinition()' genericMethodDefinition); " is 123.
Long Statement,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,GetBaseDefinition,The length of the statement  "            return baseMethod.DeclaringType.GetProperty(propertyInfo.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' " is 132.
Long Statement,Signum.Utilities,Extensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\Extensions.cs,GetQueryString,The length of the statement  "                    result.AddRange(from object v in enumerable select string.Format("{0}={1}"' p.Name' HttpUtility.UrlEncode(v?.ToString() ?? ""))); " is 129.
Long Statement,Signum.Utilities,ExpandContainsAll,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionExpanderSamples.cs,Expand,The length of the statement  "            return parts.Select(p => (Expression)Expression.Call(parameters[0]' miContains' Expression.Constant(p))).AggregateAnd(); " is 120.
Long Statement,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The length of the statement  "                        if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1])) " is 139.
Long Statement,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,DiffText,The length of the statement  "                        return new DiffPair<List<DiffPair<string>>>(DiffAction.Added' new List<DiffPair<string>> { new DiffPair<string>(DiffAction.Added' c.Added) }); " is 142.
Long Statement,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,DiffText,The length of the statement  "                        return new DiffPair<List<DiffPair<string>>>(DiffAction.Removed' new List<DiffPair<string>> { new DiffPair<string>(DiffAction.Removed' c.Removed) }); " is 148.
Long Statement,Signum.Utilities,StringExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\StringExtensions.cs,Wildcards,The length of the statement  "            var pattern = wildcardsPatterns.GetOrCreate(wildcard' wildcard.Replace("."' "[.]").Replace("*"' ".*").Replace("?"' ".")); " is 121.
Long Statement,Signum.Utilities.ExpressionTrees,QueryableAsyncExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\QueryableAsyncExtensions.cs,Bind,The length of the statement  "            List<Expression> otherExpressions = mce.Arguments.Skip(1).Select(a => (Expression)ExpressionEvaluator.Eval(a)).ToList(); " is 120.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionEvaluator,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,GetExtensionMethodCaller,The length of the statement  "                return Expression.Lambda<Func<object' object>>(Expression.Convert(Expression.Call(mi' Expression.Convert(p' mi.GetParameters()[0].ParameterType))' typeof(object))' p).Compile(); " is 177.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionEvaluator,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,GetInstanceMethodCaller,The length of the statement  "                return Expression.Lambda<Func<object' object>>(Expression.Convert(Expression.Call(Expression.Convert(p' mi.DeclaringType)' mi)' typeof(object))' p).Compile(); " is 158.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionEvaluator,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,GetStaticGetter,The length of the statement  "                return Expression.Lambda<Func<object>>(Expression.Convert(Expression.MakeMemberAccess(null' mi)' typeof(object))).Compile(); " is 124.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionEvaluator,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,GetInstanceGetter,The length of the statement  "                return Expression.Lambda<Func<object' object>>(Expression.Convert(Expression.MakeMemberAccess(Expression.Convert(p' mi.DeclaringType)' mi)' typeof(object))' p).Compile(); " is 170.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionHelper,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionHelper.cs,RemoveNullify,The length of the statement  "            if (expression.NodeType == ExpressionType.Convert && expression.Type == ((UnaryExpression)expression).Operand.Type.Nullify()) " is 125.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionHelper,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionHelper.cs,RemoveUnNullify,The length of the statement  "            if (expression.NodeType == ExpressionType.Convert && expression.Type == ((UnaryExpression)expression).Operand.Type.UnNullify()) " is 127.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionHelper,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionHelper.cs,RemoveUnNullify,The length of the statement  "            if (expression.NodeType == ExpressionType.MemberAccess && ((MemberExpression)expression).Member.Name == "Value" && expression.Type == ((MemberExpression)expression).Expression.Type.UnNullify()) " is 193.
Long Statement,Signum.Utilities.ExpressionTrees,LinqHints,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionNominator.cs,DisableQueryFilter,The length of the statement  "            return source.Provider.CreateQuery<T>(Expression.Call(null' ((MethodInfo)MethodBase.GetCurrentMethod()).MakeGenericMethod(new Type[] { typeof(T) })' " is 148.
Long Statement,Signum.Utilities.ExpressionTrees,LinqHints,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionNominator.cs,WithHint,The length of the statement  "            return source.Provider.CreateQuery<T>(Expression.Call(null' ((MethodInfo) MethodBase.GetCurrentMethod()).MakeGenericMethod(new Type[] { typeof(T) })' new Expression[] { source.Expression' Expression.Constant(hint' typeof(string)) })); " is 234.
Long Statement,Signum.Utilities.ExpressionTrees,DistinctNullExpander,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionNominator.cs,Expand,The length of the statement  "                var c3 = Expression.And(Expression.And(Expression.NotEqual(a' n)' Expression.NotEqual(b' n))' Expression.NotEqual(a' b)); " is 121.
Long Statement,Signum.Utilities.ExpressionTrees,QueryProvider,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\QueryProvider.cs,CreateQuery,The length of the statement  "                return (IQueryable)Activator.CreateInstance(typeof(Query<>).MakeGenericType(elementType)' new object[] { this' expression }); " is 125.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,The length of the statement  "                        return new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(TypeReference( descriptor.MemberInfo.DeclaringType' importedNamespaces))' descriptor.MemberInfo.Name); " is 174.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,The length of the statement  "                        return new CodePropertyReferenceExpression(new CodeTypeReferenceExpression(TypeReference(descriptor.MemberInfo.DeclaringType' importedNamespaces))' descriptor.MemberInfo.Name); " is 176.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,The length of the statement  "                        CodeMethodInvokeExpression expression4 = new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(descriptor.MemberInfo.DeclaringType.FullName)' descriptor.MemberInfo.Name' new CodeExpression[0]); " is 202.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,GetRightExpressionForValue,The length of the statement  "                        CodeObjectCreateExpression expression6 = new CodeObjectCreateExpression(descriptor.MemberInfo.DeclaringType.FullName' new CodeExpression[0]); " is 141.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpTreeVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpTreeVisitor.cs,VisitConditional,The length of the statement  "            return "{0} ? {1} : {2}".FormatWith(Visit(c.Test' c.NodeType)' Visit(c.IfTrue' c.NodeType)' Visit(c.IfFalse' c.NodeType)); " is 122.
Long Statement,Signum.Utilities.ExpressionTrees,CSharpTreeVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpTreeVisitor.cs,VisitMemberAccess,The length of the statement  "                object value = m.Member is FieldInfo ? ((FieldInfo)m.Member).GetValue(obj) : ((PropertyInfo)m.Member).GetValue(obj' null); " is 122.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,BindMethodExpression,The length of the statement  "                        throw new InvalidOperationException("Expansion failed' '{0}' does not implement IMethodExpander or GenericMethodExpander".FormatWith(attribute.ExpanderType.TypeName())); " is 169.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,BindMethodExpression,The length of the statement  "                        throw new InvalidOperationException("Expansion failed' '{0}' does not implement IMethodExpander or GenericMethodExpander".FormatWith(attribute.ExpanderType.TypeName())); " is 169.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,GetExpansion,The length of the statement  "                throw new InvalidOperationException($"The {nameof(ExpressionFieldAttribute)} for {mi.DeclaringType.TypeName()}.{mi.MemberName()} has the default value 'auto'.\r\nMaybe Signum.MSBuildTask is not running in assemby {mi.DeclaringType.Assembly.GetName().Name}?"); " is 259.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,GetExpansion,The length of the statement  "                throw new InvalidOperationException("Expression field '{0}' does not contain a lambda expression".FormatWith(efa.Name' type.TypeName())); " is 137.
Long Statement,Signum.Utilities.ExpressionTrees,ExpressionCleaner,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionCleaner.cs,GetMember,The length of the statement  "                    return decType.GetProperty(mi.DeclaringType.FullName + "." + mi.Name' flags' null' ((PropertyInfo)mi).PropertyType' types' null); " is 129.
Long Statement,Signum.Utilities.DataStructures,DirectedEdgedGraph<T;E>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\DirectedEdgedGraph.cs,ToGraphviz,The length of the statement  "            string edges = EdgesWithValue.ToString(e => "   {0} -> {1} [ label =\"{2}\"];".FormatWith(nodeDic[e.From]' nodeDic[e.To]' getEdgeLabel(e.Value))' "\r\n"); " is 154.
Long Statement,Signum.Utilities.DataStructures,CubeDictionary<K1;K2;K3;V>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\CubeDictionary.cs,Add,The length of the statement  "                            throw new InvalidOperationException(string.Format("Inconsistence found on cube [{0}' {1}' {2}]' could have values '{3}' or '{4}'"' xDimension.Intervals[x]' yDimension.Intervals[y]' zDimension.Intervals[z]' values[x' y' z]' value)); " is 231.
Long Statement,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Intersection,The length of the statement  "            T? minVal = min.HasValue && other.min.HasValue ? (min.Value.CompareTo(other.min.Value) > 0 ? min.Value : other.min.Value) : min ?? other.min; " is 141.
Long Statement,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Intersection,The length of the statement  "            T? maxVal = max.HasValue && other.max.HasValue ? (max.Value.CompareTo(other.max.Value) < 0 ? max.Value : other.max.Value) : max ?? other.max; " is 141.
Long Statement,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Union,The length of the statement  "            T? minVal = !min.HasValue || !other.min.HasValue ? (T?)null : min.Value.CompareTo(other.min.Value) > 0 ? other.min.Value : min.Value; " is 133.
Long Statement,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Union,The length of the statement  "            T? maxVal = !max.HasValue || !other.max.HasValue ? (T?)null : max.Value.CompareTo(other.max.Value) < 0 ? other.max.Value : max.Value; " is 133.
Long Statement,Signum.Utilities.DataStructures,ContainsNullableMethodExpander,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Expand,The length of the statement  "                Expression.Or(Expression.Not(Expression.Property(min' "HasValue"))' Expression.LessThanOrEqual(Expression.Property(min' "Value")' arguments[0]))' " is 145.
Long Statement,Signum.Utilities.DataStructures,ContainsNullableMethodExpander,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,Expand,The length of the statement  "                Expression.Or(Expression.Not(Expression.Property(max' "HasValue"))' Expression.LessThan(arguments[0]' Expression.Property(max' "Value")))); " is 139.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionary<K;V>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,Add,The length of the statement  "                        throw new ArgumentException("Interval {0} overlaps with the exisiting one {1} (value {2})".FormatWith(interval' previousInt' value)); " is 133.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,Mix,The length of the statement  "            Interval<K>[] keys = me.Intervals.Concat(other.Intervals).SelectMany(a => a.Elements()).Distinct().OrderBy().BiSelect((min' max) => new Interval<K>(min' max)).ToArray(); " is 169.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,Collapse,The length of the statement  "            Interval<K>[] keys = collection.SelectMany(a => a).SelectMany(a => a.Key.Elements()).Distinct().OrderBy().BiSelect((min' max) => new Interval<K>(min' max)).ToArray(); " is 166.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,Collapse,The length of the statement  "            return new IntervalDictionary<K' VR>(keys.Select(k => KVP.Create(k' mixer(k' collection.Select(intDic => intDic.TryGetValue(k.Min)).Where(vi => vi.HasInterval).Select(vi => vi.Value))))); " is 187.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,AggregateIntervalDictionary,The length of the statement  "            Interval<K>[] keys = collection.SelectMany(a => a.interval.Elements()).Distinct().OrderBy().BiSelect((min' max) => new Interval<K>(min' max)).ToArray(); " is 152.
Long Statement,Signum.Utilities.DataStructures,IntervalDictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\IntervalDictionary.cs,AggregateIntervalDictionary,The length of the statement  "            return new IntervalDictionary<K' VR>(keys.Select(k => KVP.Create(k' mixer(k' collection.Where(a => a.interval.Subset(k)).Select(a => a.value))))); " is 146.
Long Statement,Signum.Utilities.DataStructures,SquareDictionary<K1;K2;V>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\SquareDictionary.cs,Add,The length of the statement  "                        throw new InvalidOperationException(string.Format("Inconsistende found on square [{0}'{1}] could have values '{2}' or '{3}'"' xDimension.Intervals[x]' yDimension.Intervals[y]' values[x' y]' value)); " is 198.
Long Statement,Signum.Utilities.Reflection,GenericInvoker<T>,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\GenericInvoker.cs,GetInvoker,The length of the statement  "                throw new InvalidOperationException("Invalid generic arguments ({0} instead of {1})".FormatWith(types.Length' numParams)); " is 122.
Long Statement,Signum.Utilities.Reflection,GenericParametersVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\GenericInvoker.cs,GenericParameters,The length of the statement  "                throw new InvalidOperationException("No generic method or constructor found on expression:\r\n{0}".FormatWith(expression.ToString())); " is 134.
Long Statement,Signum.Utilities.Reflection,MemberEntryFactory,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\MemberEntryFactory.cs,GenerateList,The length of the statement  "            PropertyInfo[] properties = (options & MemberOptions.Properties) == 0 ? new PropertyInfo[0] : typeof(T).GetProperties(bf); " is 122.
Long Statement,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,GetGenericConstructorDefinition,The length of the statement  "            return ci.DeclaringType.GetGenericTypeDefinition().GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SingleEx(a => a.MetadataToken == ci.MetadataToken); " is 188.
Long Statement,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,MakeGenericConstructor,The length of the statement  "            return ci.DeclaringType.MakeGenericType(types).GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SingleEx(a => a.MetadataToken == ci.MetadataToken); " is 184.
Long Statement,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,CreateGetterUntyped,The length of the statement  "                var exp = Expression.Lambda(lambdaType' Expression.Convert(Expression.MakeMemberAccess(Expression.Convert(p' type)' m)' typeof(object))' p); " is 140.
Long Statement,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,CreateSetterUntyped,The length of the statement  "                    Expression.Assign(Expression.MakeMemberAccess(Expression.Convert(t' type)' m)' Expression.Convert(p' m.ReturningType()))' t' p); " is 128.
Long Statement,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ChangeType,The length of the statement  "                        var colType = type.IsInstantiationOf(typeof(IEnumerable<>)) ? typeof(List<>).MakeGenericType(type.GetGenericArguments()) : type; " is 128.
Complex Conditional,Signum.Utilities,DescriptionOptionsExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\DescriptionManager.cs,IsSetAssert,The conditional expression  "(member is PropertyInfo || member is FieldInfo) &&                  (opts.IsSet(DescriptionOptions.PluralDescription) ||                   opts.IsSet(DescriptionOptions.Gender) ||                   opts.IsSet(DescriptionOptions.Members))"  is complex.
Complex Conditional,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,EncodeCsv,The conditional expression  "p.Contains(separator) || p.Contains("\"") || p.Contains("\r") || p.Contains("\n")"  is complex.
Complex Conditional,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,AssertDateOnly,The conditional expression  "d.Hour != 0 || d.Minute != 0 || d.Second != 0 || d.Millisecond != 0"  is complex.
Complex Conditional,Signum.Utilities,DateSpan,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,DateSpan,The conditional expression  "0 < sign && (months < 0 || days < 0) ||                  sign < 0 && (0 < months || 0 < days)"  is complex.
Complex Conditional,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The conditional expression  "allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1])"  is complex.
Complex Conditional,Signum.Utilities.ExpressionTrees,CSharpRenderer,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpRenderer.cs,TypeReference,The conditional expression  "!type.IsGenericType && !type.IsArray && importedNamespaces != null && importedNamespaces.Contains(type.Namespace)"  is complex.
Complex Conditional,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertTrio,The conditional expression  "cent == 0 && dec == 0 && unit == 0 && group % 2 == 1"  is complex.
Complex Conditional,Signum.Utilities.DataStructures,CubeDictionary<K1;K2;K3;V>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\CubeDictionary.cs,TryGetValue,The conditional expression  "!xDimension.TryGetValue(x' out int ix) ||                  !yDimension.TryGetValue(y' out int iy) ||                  !zDimension.TryGetValue(z' out int iz) || !used[ix' iy' iz]"  is complex.
Complex Conditional,Signum.Utilities.DataStructures,CubeDictionary<K1;K2;K3;V>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\CubeDictionary.cs,TryGetValue,The conditional expression  "!xDimension.TryGetValue(x' out int ix) ||                  !yDimension.TryGetValue(y' out int iy) ||                  !zDimension.TryGetValue(z' out int iz) || !used[ix' iy' iz]"  is complex.
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following statement contains a magic number: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,CompilationTime,The following statement contains a magic number: return new DateTime(v.Build * TimeSpan.TicksPerDay + v.Revision * TimeSpan.TicksPerSecond * 2).AddYears(1999).AddDays(-1);
Magic Number,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,CompilationTime,The following statement contains a magic number: return new DateTime(v.Build * TimeSpan.TicksPerDay + v.Revision * TimeSpan.TicksPerSecond * 2).AddYears(1999).AddDays(-1);
Magic Number,Signum.Utilities,ArrayExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArrayExtensions.cs,Initialize,The following statement contains a magic number: for (int k = 0; k < array.GetLength(2); k++)                  for (int j = 0; j < array.GetLength(1); j++)                      for (int i = 0; i < array.GetLength(0); i++)                          array[i' j' k] = valueXYZ(i' j' k);
Magic Number,Signum.Utilities,ArrayExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArrayExtensions.cs,SelectArray,The following statement contains a magic number: return new S[values.GetLength(0)' values.GetLength(1)' values.GetLength(2)].Initialize((i' j' k) => selector(values[i' j' k]));
Magic Number,Signum.Utilities,ArrayExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ArrayExtensions.cs,SelectArray,The following statement contains a magic number: return new S[values.GetLength(0)' values.GetLength(1)' values.GetLength(2)].Initialize((i' j' k) => selector(i' j' k' values[i' j' k]));
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: while (H < 0) { H += 360; }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: while (H >= 360) { H -= 360; }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: while (H >= 360) { H -= 360; }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: if (V <= 0)              { R = G = B = 0; }              else if (S <= 0)              {                  R = G = B = V;              }              else              {                  double hf = H / 60.0;                  int i = (int)Math.Floor(hf);                  double f = hf - i;                  double pv = V * (1 - S);                  double qv = V * (1 - S * f);                  double tv = V * (1 - S * (1 - f));                  switch (i)                  {                        // Red is the dominant color                        case 0:                          R = V;                          G = tv;                          B = pv;                          break;                        // Green is the dominant color                        case 1:                          R = qv;                          G = V;                          B = pv;                          break;                      case 2:                          R = pv;                          G = V;                          B = tv;                          break;                        // Blue is the dominant color                        case 3:                          R = pv;                          G = qv;                          B = V;                          break;                      case 4:                          R = tv;                          G = pv;                          B = V;                          break;                        // Red is the dominant color                        case 5:                          R = V;                          G = pv;                          B = qv;                          break;                        // Just in case we overshoot on our math by a little' we put these here. Since its a switch it won't slow us down at all to put these here.                        case 6:                          R = V;                          G = tv;                          B = pv;                          break;                      case -1:                          R = V;                          G = pv;                          B = qv;                          break;                        // The color is not defined' we should throw an error.                        default:                          //LFATAL("i Value error in Pixel conversion' Value is %d"' i);                          R = G = B = V; // Just pretend its black/white                          break;                  }              }
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: return Color.FromArgb(                  Clamp((int)(R * 255.0))'                  Clamp((int)(G * 255.0))'                  Clamp((int)(B * 255.0)));
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: return Color.FromArgb(                  Clamp((int)(R * 255.0))'                  Clamp((int)(G * 255.0))'                  Clamp((int)(B * 255.0)));
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,FromHsv,The following statement contains a magic number: return Color.FromArgb(                  Clamp((int)(R * 255.0))'                  Clamp((int)(G * 255.0))'                  Clamp((int)(B * 255.0)));
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,Clamp,The following statement contains a magic number: if (i > 255) return 255;
Magic Number,Signum.Utilities,ColorExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ColorExtensions.cs,Clamp,The following statement contains a magic number: if (i > 255) return 255;
Magic Number,Signum.Utilities,ConsoleSwitch<K;V>,C:\repos\signumsoftware_framework\Signum.Utilities\ConsoleSwitch.cs,ChooseTuple,The following statement contains a magic number: var noOfOptsPerScreen = numberOfOptions.GetValueOrDefault(Console.WindowHeight - 10);
Magic Number,Signum.Utilities,ConsoleSwitch<K;V>,C:\repos\signumsoftware_framework\Signum.Utilities\ConsoleSwitch.cs,TryGetValue,The following statement contains a magic number: if (sd.LevenshteinDistance(input.ToLowerInvariant()' best.ToLowerInvariant()) <= 2)              {                  if (SafeConsole.Ask($"Did you mean '{best}'?"))                      return dictionary.GetOrThrow(best);              }
Magic Number,Signum.Utilities,NaturalLanguageTools,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\NaturalLanguageTools.cs,Kind,The following statement contains a magic number: if (!char.IsUpper(pascalStr[i - 1]))              {                  if (i + 2 == pascalStr.Length)                      return CharKind.StartOfAbbreviation; //aXB|                    if (!char.IsUpper(pascalStr[i + 2]))                      return CharKind.StartOfWord; //aXBc                    return CharKind.StartOfAbbreviation; //aXBC              }
Magic Number,Signum.Utilities,NaturalLanguageTools,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\NaturalLanguageTools.cs,Kind,The following statement contains a magic number: if (!char.IsUpper(pascalStr[i - 1]))              {                  if (i + 2 == pascalStr.Length)                      return CharKind.StartOfAbbreviation; //aXB|                    if (!char.IsUpper(pascalStr[i + 2]))                      return CharKind.StartOfWord; //aXBc                    return CharKind.StartOfAbbreviation; //aXBC              }
Magic Number,Signum.Utilities,Csv,C:\repos\signumsoftware_framework\Signum.Utilities\Csv.cs,DecodeCsv,The following statement contains a magic number: if (s.StartsWith("\"") && s.EndsWith("\""))              {                  string str = s.Substring(1' s.Length - 2).Replace("\"\""' "\"");                    return Regex.Replace(str' "(?<!\r)\n"' "\r\n");              }
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,MonthsTo,The following statement contains a magic number: int result = end.Month - start.Month + (end.Year - start.Year) * 12;
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The following statement contains a magic number: if (-7 <= datediff && datediff <= -2)                  return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The following statement contains a magic number: if (-7 <= datediff && datediff <= -2)                  return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The following statement contains a magic number: if (2 <= datediff && datediff <= 7)                  return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartShortDatePattern,The following statement contains a magic number: if (2 <= datediff && datediff <= 7)                  return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The following statement contains a magic number: if (-7 <= datediff && datediff <= -2)                  return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The following statement contains a magic number: if (-7 <= datediff && datediff <= -2)                  return DateTimeMessage.Last0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The following statement contains a magic number: if (2 <= datediff && datediff <= 7)                  return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,SmartDatePattern,The following statement contains a magic number: if (2 <= datediff && datediff <= 7)                  return DateTimeMessage.This0.NiceToString(CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(date.DayOfWeek).FirstUpper());
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,ToAgoString,The following statement contains a magic number: int months = Math.Abs(ts.Days) / 30;
Magic Number,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,JavascriptMilliseconds,The following statement contains a magic number: return (long)new TimeSpan(dateTime.Ticks - new DateTime(1970' 1' 1).Ticks).TotalMilliseconds;
Magic Number,Signum.Utilities,IsInIntervalExpander,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,Expand,The following statement contains a magic number: return Expression.Invoke(func' arguments[0]' arguments[1]' arguments[2]);
Magic Number,Signum.Utilities,IsInIntervalExpanderNull,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,Expand,The following statement contains a magic number: return Expression.Invoke(func' arguments[0]' arguments[1]' arguments[2]);
Magic Number,Signum.Utilities,IsInIntervalExpanderNullNull,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,Expand,The following statement contains a magic number: return Expression.Invoke(func' arguments[0]' arguments[1]' arguments[2]);
Magic Number,Signum.Utilities,DateSpan,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,FromToDates,The following statement contains a magic number: if (months < 0)              {                  years -= 1;                  months += 12;              }
Magic Number,Signum.Utilities,DictionaryExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DictionaryExtensions.cs,AddRange,The following statement contains a magic number: if (repetitions.Count > 0)                  throw new ArgumentException($@"There are some repeated {errorContext}...  {repetitions.ToString(kvp => $@"Key ""{kvp.Key}"" has {kvp.Value.Count} repetitions:  {kvp.Value.Take(ErrorExampleLimit).ToString("\r\n").Indent(4)}"' "\r\n")}");
Magic Number,Signum.Utilities,HeavyProfiler,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,CreateNewEntry,The following statement contains a magic number: var newCurrent = current.Value = new HeavyProfilerEntry()              {                  BeforeStart = beforeStart'                  Role = role'                  AdditionalData = additionalData == null ? null : additionalData()'                  StackTrace = stackTrace ? new StackTrace(2' true) : null'                  Parent = parent'                  Depth = parent == null ? 0 : (parent.Depth + 1)'              };
Magic Number,Signum.Utilities,HeavyProfilerEntry,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,ElapsedToString,The following statement contains a magic number: if (ms < 10)                  return ms.ToString("0.0000") + "ms";
Magic Number,Signum.Utilities,HeavyProfilerEntry,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,ExternalStackTraceFromXml,The following statement contains a magic number: return st.Elements("StackFrame").Select(a =>              {                  var parts = a.Attribute("Method").Value.Split('.');                  var line = a.Attribute("Line").Value;                    return new ExternalStackTrace                  {                      MethodName = parts.LastOrDefault()'                      Type = parts.ElementAtOrDefault(parts.Length - 2)'                      Namespace = parts.Take(parts.Length - 2).ToString(".")'                      FileName = line.BeforeLast(":")'                      LineNumber = line.AfterLast(":").ToInt()'                  };              }).ToList();
Magic Number,Signum.Utilities,HeavyProfilerEntry,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,ExternalStackTraceFromXml,The following statement contains a magic number: return st.Elements("StackFrame").Select(a =>              {                  var parts = a.Attribute("Method").Value.Split('.');                  var line = a.Attribute("Line").Value;                    return new ExternalStackTrace                  {                      MethodName = parts.LastOrDefault()'                      Type = parts.ElementAtOrDefault(parts.Length - 2)'                      Namespace = parts.Take(parts.Length - 2).ToString(".")'                      FileName = line.BeforeLast(":")'                      LineNumber = line.AfterLast(":").ToInt()'                  };              }).ToList();
Magic Number,Signum.Utilities,PerfCounter,C:\repos\signumsoftware_framework\Signum.Utilities\Profiler\HeavyProfiler.cs,PerfCounter,The following statement contains a magic number: FrequencyMilliseconds = freq / 1000;
Magic Number,Signum.Utilities,EnumerableExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\EnumerableExtensions.cs,FormatTable,The following statement contains a magic number: int[] lengths = 0.To(width).Select(i => Math.Max(3' start.To(height).Max(j => table[i' j].Length))).ToArray();
Magic Number,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,CompilationDate,The following statement contains a magic number: return CompilationDatesCache.GetOrAdd(assembly' a =>              {                  string filePath = a.Location;                  const int c_PeHeaderOffset = 60;                  const int c_LinkerTimestampOffset = 8;                  byte[] b = new byte[2048];                  System.IO.Stream s = null;                    try                  {                      s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                      s.Read(b' 0' 2048);                  }                  finally                  {                      if (s != null)                      {                          s.Close();                      }                  }                    int i = System.BitConverter.ToInt32(b' c_PeHeaderOffset);                  int secondsSince1970 = System.BitConverter.ToInt32(b' i + c_LinkerTimestampOffset);                  DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  dt = dt.AddSeconds(secondsSince1970);                  dt = dt.ToLocalTime();                  return dt;              });
Magic Number,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,CompilationDate,The following statement contains a magic number: return CompilationDatesCache.GetOrAdd(assembly' a =>              {                  string filePath = a.Location;                  const int c_PeHeaderOffset = 60;                  const int c_LinkerTimestampOffset = 8;                  byte[] b = new byte[2048];                  System.IO.Stream s = null;                    try                  {                      s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                      s.Read(b' 0' 2048);                  }                  finally                  {                      if (s != null)                      {                          s.Close();                      }                  }                    int i = System.BitConverter.ToInt32(b' c_PeHeaderOffset);                  int secondsSince1970 = System.BitConverter.ToInt32(b' i + c_LinkerTimestampOffset);                  DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  dt = dt.AddSeconds(secondsSince1970);                  dt = dt.ToLocalTime();                  return dt;              });
Magic Number,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,CompilationDate,The following statement contains a magic number: return CompilationDatesCache.GetOrAdd(assembly' a =>              {                  string filePath = a.Location;                  const int c_PeHeaderOffset = 60;                  const int c_LinkerTimestampOffset = 8;                  byte[] b = new byte[2048];                  System.IO.Stream s = null;                    try                  {                      s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                      s.Read(b' 0' 2048);                  }                  finally                  {                      if (s != null)                      {                          s.Close();                      }                  }                    int i = System.BitConverter.ToInt32(b' c_PeHeaderOffset);                  int secondsSince1970 = System.BitConverter.ToInt32(b' i + c_LinkerTimestampOffset);                  DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  dt = dt.AddSeconds(secondsSince1970);                  dt = dt.ToLocalTime();                  return dt;              });
Magic Number,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,CompilationDate,The following statement contains a magic number: return CompilationDatesCache.GetOrAdd(assembly' a =>              {                  string filePath = a.Location;                  const int c_PeHeaderOffset = 60;                  const int c_LinkerTimestampOffset = 8;                  byte[] b = new byte[2048];                  System.IO.Stream s = null;                    try                  {                      s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                      s.Read(b' 0' 2048);                  }                  finally                  {                      if (s != null)                      {                          s.Close();                      }                  }                    int i = System.BitConverter.ToInt32(b' c_PeHeaderOffset);                  int secondsSince1970 = System.BitConverter.ToInt32(b' i + c_LinkerTimestampOffset);                  DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  dt = dt.AddSeconds(secondsSince1970);                  dt = dt.ToLocalTime();                  return dt;              });
Magic Number,Signum.Utilities,ReflectionExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\ReflectionExtensions.cs,CompilationDate,The following statement contains a magic number: return CompilationDatesCache.GetOrAdd(assembly' a =>              {                  string filePath = a.Location;                  const int c_PeHeaderOffset = 60;                  const int c_LinkerTimestampOffset = 8;                  byte[] b = new byte[2048];                  System.IO.Stream s = null;                    try                  {                      s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                      s.Read(b' 0' 2048);                  }                  finally                  {                      if (s != null)                      {                          s.Close();                      }                  }                    int i = System.BitConverter.ToInt32(b' c_PeHeaderOffset);                  int secondsSince1970 = System.BitConverter.ToInt32(b' i + c_LinkerTimestampOffset);                  DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  dt = dt.AddSeconds(secondsSince1970);                  dt = dt.ToLocalTime();                  return dt;              });
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextBool,The following statement contains a magic number: return r.Next(2) == 1;
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextAlphaColor,The following statement contains a magic number: return Color(r.Next(256)' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextAlphaColor,The following statement contains a magic number: return Color(r.Next(256)' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextAlphaColor,The following statement contains a magic number: return Color(r.Next(256)' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextAlphaColor,The following statement contains a magic number: return Color(r.Next(256)' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The following statement contains a magic number: return Color(255' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The following statement contains a magic number: return Color(255' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The following statement contains a magic number: return Color(255' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The following statement contains a magic number: return Color(255' r.Next(256)' r.Next(256)' r.Next(256));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,NextColor,The following statement contains a magic number: return Color(255' minR + r.Next(maxR - minR)' minG + r.Next(maxG - minG)' minB + r.Next(maxB - minB));
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,Color,The following statement contains a magic number: return a << 24 | r << 16 | g << 8 | b;
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,Color,The following statement contains a magic number: return a << 24 | r << 16 | g << 8 | b;
Magic Number,Signum.Utilities,RandomExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\MyRandom.cs,Color,The following statement contains a magic number: return a << 24 | r << 16 | g << 8 | b;
Magic Number,Signum.Utilities,SafeConsole,C:\repos\signumsoftware_framework\Signum.Utilities\SafeConsole.cs,WaitExecute,The following statement contains a magic number: try              {                  int left = Console.CursorLeft;                                                   DateTime dt = DateTime.Now;                    Task t = Task.Factory.StartNew(() =>                  {                      while (result == null)                      {                          var str = " (" + (DateTime.Now - dt).NiceToString(DateTimePrecision.Seconds) + ")";                          Console.SetCursorPosition(Math.Max(0'Math.Min(left' Console.WindowWidth - str.Length - 1))' Console.CursorTop);                            lock (SafeConsole.SyncKey)                              SafeConsole.WriteColor(ConsoleColor.DarkGray'str);                            Thread.Sleep(1000);                      }                  });                    action();               }              finally              {                  result = -1;              }
Magic Number,Signum.Utilities,ProgressProxy,C:\repos\signumsoftware_framework\Signum.Utilities\ProgressProxy.cs,RoundToPowerOfTwoMinusOne,The following statement contains a magic number: n |= n >> 2;
Magic Number,Signum.Utilities,ProgressProxy,C:\repos\signumsoftware_framework\Signum.Utilities\ProgressProxy.cs,RoundToPowerOfTwoMinusOne,The following statement contains a magic number: n |= n >> 4;
Magic Number,Signum.Utilities,ProgressProxy,C:\repos\signumsoftware_framework\Signum.Utilities\ProgressProxy.cs,RoundToPowerOfTwoMinusOne,The following statement contains a magic number: n |= n >> 8;
Magic Number,Signum.Utilities,ProgressProxy,C:\repos\signumsoftware_framework\Signum.Utilities\ProgressProxy.cs,RoundToPowerOfTwoMinusOne,The following statement contains a magic number: n |= n >> 16;
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The following statement contains a magic number: for (int i = 1; i < M1; i++)              {                  for (int j = 1; j < M2; j++)                  {                      if (comparer.Equals(strOld[i - 1]' strNew[j - 1]))                          num[i' j] = num[i - 1' j - 1];                      else                      {                          num[i' j] = Math.Min(Math.Min(                              num[i - 1' j] + weight(Choice<T>.Remove(strOld[i - 1]))'                              num[i' j - 1] + weight(Choice<T>.Add(strNew[j - 1])))'                              num[i - 1' j - 1] + weight(Choice<T>.Substitute(strOld[i - 1]' strNew[j - 1])));                            if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1]))                              num[i' j] = Math.Min(num[i' j]' num[i - 2' j - 2] + weight(Choice<T>.Transpose(strOld[i - 1]' strOld[i - 2])));                      }                  }              }
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The following statement contains a magic number: for (int i = 1; i < M1; i++)              {                  for (int j = 1; j < M2; j++)                  {                      if (comparer.Equals(strOld[i - 1]' strNew[j - 1]))                          num[i' j] = num[i - 1' j - 1];                      else                      {                          num[i' j] = Math.Min(Math.Min(                              num[i - 1' j] + weight(Choice<T>.Remove(strOld[i - 1]))'                              num[i' j - 1] + weight(Choice<T>.Add(strNew[j - 1])))'                              num[i - 1' j - 1] + weight(Choice<T>.Substitute(strOld[i - 1]' strNew[j - 1])));                            if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1]))                              num[i' j] = Math.Min(num[i' j]' num[i - 2' j - 2] + weight(Choice<T>.Transpose(strOld[i - 1]' strOld[i - 2])));                      }                  }              }
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The following statement contains a magic number: for (int i = 1; i < M1; i++)              {                  for (int j = 1; j < M2; j++)                  {                      if (comparer.Equals(strOld[i - 1]' strNew[j - 1]))                          num[i' j] = num[i - 1' j - 1];                      else                      {                          num[i' j] = Math.Min(Math.Min(                              num[i - 1' j] + weight(Choice<T>.Remove(strOld[i - 1]))'                              num[i' j - 1] + weight(Choice<T>.Add(strNew[j - 1])))'                              num[i - 1' j - 1] + weight(Choice<T>.Substitute(strOld[i - 1]' strNew[j - 1])));                            if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1]))                              num[i' j] = Math.Min(num[i' j]' num[i - 2' j - 2] + weight(Choice<T>.Transpose(strOld[i - 1]' strOld[i - 2])));                      }                  }              }
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The following statement contains a magic number: for (int i = 1; i < M1; i++)              {                  for (int j = 1; j < M2; j++)                  {                      if (comparer.Equals(strOld[i - 1]' strNew[j - 1]))                          num[i' j] = num[i - 1' j - 1];                      else                      {                          num[i' j] = Math.Min(Math.Min(                              num[i - 1' j] + weight(Choice<T>.Remove(strOld[i - 1]))'                              num[i' j - 1] + weight(Choice<T>.Add(strNew[j - 1])))'                              num[i - 1' j - 1] + weight(Choice<T>.Substitute(strOld[i - 1]' strNew[j - 1])));                            if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1]))                              num[i' j] = Math.Min(num[i' j]' num[i - 2' j - 2] + weight(Choice<T>.Transpose(strOld[i - 1]' strOld[i - 2])));                      }                  }              }
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,LevenshteinDistance,The following statement contains a magic number: for (int i = 1; i < M1; i++)              {                  for (int j = 1; j < M2; j++)                  {                      if (comparer.Equals(strOld[i - 1]' strNew[j - 1]))                          num[i' j] = num[i - 1' j - 1];                      else                      {                          num[i' j] = Math.Min(Math.Min(                              num[i - 1' j] + weight(Choice<T>.Remove(strOld[i - 1]))'                              num[i' j - 1] + weight(Choice<T>.Add(strNew[j - 1])))'                              num[i - 1' j - 1] + weight(Choice<T>.Substitute(strOld[i - 1]' strNew[j - 1])));                            if (allowTransposition && i > 1 && j > 1 && comparer.Equals(strOld[i - 1]' strNew[j - 2]) && comparer.Equals(strOld[i - 2]' strNew[j - 1]))                              num[i' j] = Math.Min(num[i' j]' num[i - 2' j - 2] + weight(Choice<T>.Transpose(strOld[i - 1]' strOld[i - 2])));                      }                  }              }
Magic Number,Signum.Utilities,StringDistance,C:\repos\signumsoftware_framework\Signum.Utilities\StringDistance.cs,DiffText,The following statement contains a magic number: return groups.SelectMany(g=>              {                  if (g.Key)                      return g.Select(dp => new DiffPair<List<DiffPair<string>>>(DiffAction.Equal' new List<DiffPair<string>> { dp }));                     var removed = g.Where(a=>a.Action == DiffAction.Removed).Select(a=>a.Value).ToArray();                  var added = g.Where(a=>a.Action == DiffAction.Added).Select(a=>a.Value).ToArray();                    var choices = this.LevenshteinChoices<string>(removed' added' weight: c =>                  {                      if (c.Type == ChoiceType.Add)                          return c.Added.Length;                        if (c.Type == ChoiceType.Remove)                          return c.Removed.Length;                        var distance = sd.LevenshteinDistance(c.Added' c.Removed);                        return distance * 2;                  });                    return choices.Select(c =>                  {                      if (c.Type == ChoiceType.Add)                          return new DiffPair<List<DiffPair<string>>>(DiffAction.Added' new List<DiffPair<string>> { new DiffPair<string>(DiffAction.Added' c.Added) });                        if (c.Type == ChoiceType.Remove)                          return new DiffPair<List<DiffPair<string>>>(DiffAction.Removed' new List<DiffPair<string>> { new DiffPair<string>(DiffAction.Removed' c.Removed) });                        var diffWords = sd.DiffWords(c.Removed' c.Added);                        return new DiffPair<List<DiffPair<string>>>(DiffAction.Equal' diffWords);                   });              }).ToList();
Magic Number,Signum.Utilities,StringExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\StringExtensions.cs,Indent,The following statement contains a magic number: string result = sb.ToString(0' str.EndsWith("\r\n") ? sb.Length : Math.Max(sb.Length - 2' 0));
Magic Number,Signum.Utilities,StringExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\StringExtensions.cs,ToComputerSize,The following statement contains a magic number: for (i = 0; i < magnitudes.Length && valor >= 1024; i++)                  valor /= 1024.0;
Magic Number,Signum.Utilities,StringExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\StringExtensions.cs,ToComputerSize,The following statement contains a magic number: for (i = 0; i < magnitudes.Length && valor >= 1024; i++)                  valor /= 1024.0;
Magic Number,Signum.Utilities.ExpressionTrees,CSharpTreeVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpTreeVisitor.cs,VisitMemberInit,The following statement contains a magic number: if (newExpr.EndsWith("()"))                  newExpr = newExpr.RemoveEnd(2);
Magic Number,Signum.Utilities.ExpressionTrees,CSharpTreeVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpTreeVisitor.cs,VisitListInit,The following statement contains a magic number: if (newExpr.EndsWith("()"))                  newExpr = newExpr.RemoveEnd(2);
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertNumber,The following statement contains a magic number: for (int i = 0; numAux > 0; i++' numAux /= 1000)                  result = " ".Combine(ConvertTrio((int)(numAux % 1000)' i' femenine)' " "' result);
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertNumber,The following statement contains a magic number: for (int i = 0; numAux > 0; i++' numAux /= 1000)                  result = " ".Combine(ConvertTrio((int)(numAux % 1000)' i' femenine)' " "' result);
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertNumber,The following statement contains a magic number: long numMod1M = num % 1000000;
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertTrio,The following statement contains a magic number: int unit = CharUtil.ToInt(trio[2]);
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertTrio,The following statement contains a magic number: if (cent == 0 && dec == 0 && unit == 0 && group % 2 == 1)                  return null;
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,ConvertTrio,The following statement contains a magic number: string num = CentsDecsUnits(cent' dec' unit' group >= 2 ? null : femenine);
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,UnitsGroup,The following statement contains a magic number: switch (numGroup)              {                  case 0: return null;                  case 1:                  case 3:                  case 5:                  case 7:                  case 9: return "mil";                    case 2: return plural ? "millones" : "millón";                  case 4: return plural ? "billones" : "billón";                  case 6: return plural ? "trillones" : "trillón";                  case 8: return plural ? "cuatrillones" : "cuatrillón";                  default: throw new InvalidOperationException("valores superiores a miles de cuatrillones no soportados");              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,DecsUnits,The following statement contains a magic number: switch (decena)              {                  case 1:                      //se trata de once' doce...                      switch (unit)                      {                          case 0: return "diez";                          case 1: return "once";                          case 2: return "doce";                          case 3: return "trece";                          case 4: return "catorce";                          case 5: return "quince";                          case 6: return "dieciséis";                          case 7: return "diecisiete";                          case 8: return "dieciocho";                          case 9: return "diecinueve";                          default: throw new InvalidOperationException();                      }                  case 2:                      switch (unit)                      {                          case 0: return "veinte";                          case 1: return                              femenine == true ? "veintiuna" :                              femenine == false ? "veitiuno" : "veintiún";                          default: return "veinti" + Units(unit' femenine);                      }                  default:                      return " y ".Combine(Decs(decena)' Units(unit' femenine));              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Units,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return                      femenine == true ? "una" :                      femenine == false ? "uno" : "un";                  case 2: return "dos";                  case 3: return "tres";                  case 4: return "cuatro";                  case 5: return "cinco";                  case 6: return "seis";                  case 7: return "siete";                  case 8: return "ocho";                  case 9: return "nueve";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Decs,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "diez";                  case 2: return "veinte";                  case 3: return "treinta";                  case 4: return "cuarenta";                  case 5: return "cincuenta";                  case 6: return "sesenta";                  case 7: return "setenta";                  case 8: return "ochenta";                  case 9: return "noventa";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.NaturalLanguage,SpanishNumberWriter,C:\repos\signumsoftware_framework\Signum.Utilities\NaturalLanguage\Spanish.cs,Cents,The following statement contains a magic number: switch (num)              {                  case 0: return null;                  case 1: return "ciento";                  case 2: return femenine ? "doscientas" : "doscientos";                  case 3: return femenine ? "trescientas" : "trescientos";                  case 4: return femenine ? "cuentrocientas" : "cuatrocientos";                  case 5: return femenine ? "quinientas" : "quinientos";                  case 6: return femenine ? "seiscientas" : "seiscientos";                  case 7: return femenine ? "setecientas" : "setecientos";                  case 8: return femenine ? "ochocientas" : "ochocientos";                  case 9: return femenine ? "novecientas" : "novecientos";                  default: throw new InvalidOperationException();              }
Magic Number,Signum.Utilities.DataStructures,MinMax,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\MinMax.cs,GetHashCode,The following statement contains a magic number: int num = -722197669;
Magic Number,Signum.Utilities.DataStructures,MinMax,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\MinMax.cs,GetHashCode,The following statement contains a magic number: num = (-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode(this.Min);
Magic Number,Signum.Utilities.DataStructures,MinMax,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\MinMax.cs,GetHashCode,The following statement contains a magic number: return (-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode(this.Max);
Magic Number,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,ToString,The following statement contains a magic number: if (format.HasText() && format.Contains("{"))              {                  if (format.Contains("|"))                  {                      string[] parts = format.Split('|');                      if (parts.Length != 4)                          throw new FormatException("Formatting an interval needs 4 parts: Middle | Start | End | All");                        return BuildString(formatProvider' parts[0]' parts[1]' parts[2]' parts[3]);                  }                    return BuildString(formatProvider' format' format' format' format);              }
Magic Number,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,ToString,The following statement contains a magic number: if (format.HasText() && format.Contains("{"))              {                  if (format.Contains("|"))                  {                      string[] parts = format.Split('|');                      if (parts.Length != 4)                          throw new FormatException("Formatting an interval needs 4 parts: Middle | Start | End | All");                        return BuildString(formatProvider' parts[0]' parts[1]' parts[2]' parts[3]);                  }                    return BuildString(formatProvider' format' format' format' format);              }
Magic Number,Signum.Utilities.DataStructures,NullableInterval,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\IntervalDictionaries\Interval.cs,ToString,The following statement contains a magic number: if (format.HasText() && format.Contains("{"))              {                  if (format.Contains("|"))                  {                      string[] parts = format.Split('|');                      if (parts.Length != 4)                          throw new FormatException("Formatting an interval needs 4 parts: Middle | Start | End | All");                        return BuildString(formatProvider' parts[0]' parts[1]' parts[2]' parts[3]);                  }                    return BuildString(formatProvider' format' format' format' format);              }
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Push,The following statement contains a magic number: do              {                  if (p == 0)                      break;                  int p2 = (p - 1) / 2;                  if (Compare(p' p2) < 0)                  {                      SwitchElements(p' p2);                      p = p2;                  }                  else                      break;              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Pop,The following statement contains a magic number: do              {                  int pn = p;                  int p1 = 2 * p + 1;                  int p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                    SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Pop,The following statement contains a magic number: do              {                  int pn = p;                  int p1 = 2 * p + 1;                  int p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                    SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Pop,The following statement contains a magic number: do              {                  int pn = p;                  int p1 = 2 * p + 1;                  int p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                    SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Update,The following statement contains a magic number: do              {                  if (p == 0)                      break;                  p2 = (p - 1) / 2;                  if (Compare(p' p2) < 0)                  {                      SwitchElements(p' p2);                      p = p2;                  }                  else                      break;              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2 * p + 1;                  p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2 * p + 1;                  p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.DataStructures,PriorityQueue<T>,C:\repos\signumsoftware_framework\Signum.Utilities\DataStructures\PriorityQueue.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2 * p + 1;                  p2 = 2 * p + 2;                  if (list.Count > p1 && Compare(p' p1) > 0)                      p = p1;                  if (list.Count > p2 && Compare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleOf,The following statement contains a magic number: switch (numParameters)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);                  default: return null;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following statement contains a magic number: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following statement contains a magic number: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainType,The following statement contains a magic number: if (count >= 8)                  return TupleOf(8).MakeGenericType(tupleElementTypes.Take(7).And(TupleChainType(tupleElementTypes.Skip(7))).ToArray());
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainType,The following statement contains a magic number: if (count >= 8)                  return TupleOf(8).MakeGenericType(tupleElementTypes.Take(7).And(TupleChainType(tupleElementTypes.Skip(7))).ToArray());
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainType,The following statement contains a magic number: if (count >= 8)                  return TupleOf(8).MakeGenericType(tupleElementTypes.Take(7).And(TupleChainType(tupleElementTypes.Skip(7))).ToArray());
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainType,The following statement contains a magic number: if (count >= 8)                  return TupleOf(8).MakeGenericType(tupleElementTypes.Take(7).And(TupleChainType(tupleElementTypes.Skip(7))).ToArray());
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainConstructor,The following statement contains a magic number: if (count >= 8)                  return Expression.New(ci' fieldExpressions.Take(7).And(TupleChainConstructor(fieldExpressions.Skip(7))));
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainConstructor,The following statement contains a magic number: if (count >= 8)                  return Expression.New(ci' fieldExpressions.Take(7).And(TupleChainConstructor(fieldExpressions.Skip(7))));
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainConstructor,The following statement contains a magic number: if (count >= 8)                  return Expression.New(ci' fieldExpressions.Take(7).And(TupleChainConstructor(fieldExpressions.Skip(7))));
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainProperty,The following statement contains a magic number: if (index >= 7)                  return TupleChainProperty(Expression.Property(expression' TupleProperty(expression.Type' 7))' index - 7);
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainProperty,The following statement contains a magic number: if (index >= 7)                  return TupleChainProperty(Expression.Property(expression' TupleProperty(expression.Type' 7))' index - 7);
Magic Number,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleChainProperty,The following statement contains a magic number: if (index >= 7)                  return TupleChainProperty(Expression.Property(expression' TupleProperty(expression.Type' 7))' index - 7);
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Magic Number,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,ParsePercentage,The following statement contains a magic number: switch (Type.GetTypeCode(targetType.UnNullify()))              {                  case TypeCode.Single: return Single.Parse(value' culture) / 100.0f;                  case TypeCode.Double: return Double.Parse(value' culture) / 100.0;                  case TypeCode.Decimal: return Decimal.Parse(value' culture) / 100M;                    case TypeCode.Byte: return (Byte)(Byte.Parse(value' culture) / 100);                    case TypeCode.Int16: return (Int16)(Int16.Parse(value' culture) / 100);                  case TypeCode.Int32: return (Int32)(Int32.Parse(value' culture) / 100);                  case TypeCode.Int64: return (Int64)(Int64.Parse(value' culture) / 100);                  case TypeCode.UInt16: return (UInt16)(UInt16.Parse(value' culture) / 100);                  case TypeCode.UInt32: return (UInt32)(UInt32.Parse(value' culture) / 100);                  case TypeCode.UInt64: return (UInt64)(UInt64.Parse(value' culture) / 100);                  default:                      throw new InvalidOperationException("targetType is not a number");              }
Missing Default,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following switch statement is missing a default case: switch (os.Platform)              {                  case PlatformID.Win32Windows:                      switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }                      break;                  case PlatformID.Win32NT:                      switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }                      break;              }
Missing Default,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following switch statement is missing a default case: switch (os.Version.Minor)                      {                          case 0: return "Windows 95";                          case 10:                              if (os.Version.Revision.ToString() == "2222A")                                  return "Windows 98 SE";                              else                                  return "Windows 98";                          case 90: return "Windows ME";                      }
Missing Default,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following switch statement is missing a default case: switch (os.Version.Major)                      {                          case 3: return "Windows NT 3.51";                          case 4: return "Windows NT 4.0";                          case 5:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }                              break;                          case 6:                              switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }                              break;                      }
Missing Default,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following switch statement is missing a default case: switch (os.Version.Minor)                              {                                  case 0: return "Windows 2000";                                  case 1: return "Windows XP";                                  case 2: return "Windows 2003 Server";                              }
Missing Default,Signum.Utilities,AboutTools,C:\repos\signumsoftware_framework\Signum.Utilities\AboutTools.cs,NiceWindowsVersion,The following switch statement is missing a default case: switch (os.Version.Minor)                              {                                  case 0: return "Windows Vista / 2008 Server";                                  case 1: return "Windows 7";                                  case 2: return "Windows 8";                              }
Missing Default,Signum.Utilities,TimeSpanExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\TimeSpanExtensions.cs,TrimTo,The following switch statement is missing a default case: switch (precision)              {                  case DateTimePrecision.Days: return time.TrimToDays();                  case DateTimePrecision.Hours: return TrimToHours(time);                  case DateTimePrecision.Minutes: return TrimToMinutes(time);                  case DateTimePrecision.Seconds: return TrimToSeconds(time);                  case DateTimePrecision.Milliseconds: return time;              }
Missing Default,Signum.Utilities,DateTimeExtensions,C:\repos\signumsoftware_framework\Signum.Utilities\Extensions\DateTimeExtensions.cs,TrimTo,The following switch statement is missing a default case: switch (precision)              {                  case DateTimePrecision.Days: return dateTime.Date;                  case DateTimePrecision.Hours: return TrimToHours(dateTime);                  case DateTimePrecision.Minutes: return TrimToMinutes(dateTime);                  case DateTimePrecision.Seconds: return TrimToSeconds(dateTime);                  case DateTimePrecision.Milliseconds: return dateTime;              }
Missing Default,Signum.Utilities.ExpressionTrees,ExpressionEvaluator,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\ExpressionEvaluator.cs,Eval,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Constant:                      return ((ConstantExpression)expression).Value;                    case ExpressionType.MemberAccess:                      {                          var me = (MemberExpression)expression;                          if (me.Expression == null)                              return GetStaticGetter(me.Member)();                          else                              return GetInstanceGetter(me.Member)(Eval(me.Expression));                      }                    case ExpressionType.Convert:                      {                          var conv = (UnaryExpression)expression;                          var operand = Eval(conv.Operand);                            if(conv.Method != null)                              return GetExtensionMethodCaller(conv.Method)(operand);                            if (operand is IConvertible)                              return ReflectionTools.ChangeType(operand' conv.Type);                            return operand;                      }                  case ExpressionType.Call:                      {                          var call = (MethodCallExpression)expression;                          if (call.Method.IsStatic)                          {                              if (call.Arguments.Count == 0)                                  return GetStaticMethodCaller(call.Method)();                              if (call.Arguments.Count == 1)                                  return GetExtensionMethodCaller(call.Method)(Eval(call.Arguments[0]));                          }                          else                          {                              if (call.Arguments.Count == 0)                                  return GetInstanceMethodCaller(call.Method)(Eval(call.Object));                          }                          break;                      }                    case ExpressionType.Equal:                      {                          var be = (BinaryExpression)expression;                          return object.Equals(Eval(be.Left)' Eval(be.Right));                      }                  case ExpressionType.NotEqual:                      {                          var be = (BinaryExpression)expression;                          return !object.Equals(Eval(be.Left)' Eval(be.Right));                      }              }
Missing Default,Signum.Utilities.ExpressionTrees,CSharpTreeVisitor,C:\repos\signumsoftware_framework\Signum.Utilities\ExpressionTrees\CSharpTreeVisitor.cs,VisitReal,The following switch statement is missing a default case: switch (exp.NodeType)              {                  case ExpressionType.Add:                  case ExpressionType.AddChecked:                  case ExpressionType.And:                  case ExpressionType.AndAlso:                  case ExpressionType.ArrayIndex:                  case ExpressionType.Coalesce:                  case ExpressionType.Divide:                  case ExpressionType.Equal:                  case ExpressionType.ExclusiveOr:                  case ExpressionType.GreaterThan:                  case ExpressionType.GreaterThanOrEqual:                  case ExpressionType.LeftShift:                  case ExpressionType.LessThan:                  case ExpressionType.LessThanOrEqual:                  case ExpressionType.Modulo:                  case ExpressionType.Multiply:                  case ExpressionType.MultiplyChecked:                  case ExpressionType.NotEqual:                  case ExpressionType.Or:                  case ExpressionType.OrElse:                  case ExpressionType.Power:                  case ExpressionType.RightShift:                  case ExpressionType.Subtract:                  case ExpressionType.SubtractChecked:                      return VisitBinary((BinaryExpression)exp);                    case ExpressionType.ArrayLength:                  case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                  case ExpressionType.Negate:                  case ExpressionType.UnaryPlus:                  case ExpressionType.NegateChecked:                  case ExpressionType.Not:                  case ExpressionType.Quote:                  case ExpressionType.TypeAs:                      return VisitUnary((UnaryExpression)exp);                    case ExpressionType.Call:                      return VisitMethodCall((MethodCallExpression)exp);                    case ExpressionType.Conditional:                      return VisitConditional((ConditionalExpression)exp);                    case ExpressionType.Constant:                      return VisitConstant((ConstantExpression)exp' literal);                    case ExpressionType.Invoke:                      return VisitInvocation((InvocationExpression)exp);                    case ExpressionType.Lambda:                      return VisitLambda((LambdaExpression)exp);                    case ExpressionType.ListInit:                      return VisitListInit((ListInitExpression)exp' collapse);                    case ExpressionType.MemberAccess:                      return VisitMemberAccess((MemberExpression)exp' literal);                    case ExpressionType.MemberInit:                      return VisitMemberInit((MemberInitExpression)exp' collapse);                    case ExpressionType.New:                      return VisitNew((NewExpression)exp);                    case ExpressionType.NewArrayInit:                  case ExpressionType.NewArrayBounds:                      return VisitNewArray((NewArrayExpression)exp' collapse);                    case ExpressionType.Parameter:                      return VisitParameter((ParameterExpression)exp);                    case ExpressionType.TypeIs:                      return VisitTypeIs((TypeBinaryExpression)exp);              }
Missing Default,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleIndex,The following switch statement is missing a default case: switch (pi.Name)              {                  case "Item1": return 0;                  case "Item2": return 1;                  case "Item3": return 2;                  case "Item4": return 3;                  case "Item5": return 4;                  case "Item6": return 5;                  case "Item7": return 6;                  case "Rest": return 7;              }
Missing Default,Signum.Utilities.Reflection,TupleReflection,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\TupleExtensions.cs,TupleProperty,The following switch statement is missing a default case: switch (index)              {                  case 0: return type.GetProperty("Item1");                  case 1: return type.GetProperty("Item2");                  case 2: return type.GetProperty("Item3");                  case 3: return type.GetProperty("Item4");                  case 4: return type.GetProperty("Item5");                  case 5: return type.GetProperty("Item6");                  case 6: return type.GetProperty("Item7");                  case 7: return type.GetProperty("Rest");              }
Missing Default,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,IsNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))              {                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                    case TypeCode.Byte:                    case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64: return true;              }
Missing Default,Signum.Utilities.Reflection,ReflectionTools,C:\repos\signumsoftware_framework\Signum.Utilities\Reflection\ReflectionTools.cs,IsDecimalNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))              {                  case TypeCode.Decimal:                  case TypeCode.Double:                  case TypeCode.Single:                      return true;              }
