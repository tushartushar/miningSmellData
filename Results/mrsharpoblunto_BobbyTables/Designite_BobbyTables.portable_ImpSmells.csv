Implementation smell,Namespace,Class,File,Method,Description
Long Method,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DetermineOperations,The method has 118 lines of code.
Long Method,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SerializeValue,The method has 122 lines of code.
Long Method,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The method has 123 lines of code.
Long Parameter List,BobbyTables,Utils,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,Backtrack,The method has 7 parameters. Parameters: lcs' num' equalityFunc' a' b' i' j
Long Statement,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PullAsync,The length of the statement  "					throw new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending"); " is 129.
Long Statement,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PullAsync,The length of the statement  "					failure(new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending")); " is 132.
Long Statement,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullRequest,The length of the statement  "					throw new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending"); " is 129.
Long Statement,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?get_deltas=" + Uri.EscapeDataString(args.ToString(Formatting.None))' _manager.ApiToken); " is 164.
Long Statement,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitListChangesRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?list_datastores=" + Uri.EscapeDataString(args.ToString(Formatting.None))' ApiToken); " is 160.
Long Statement,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitDatastoreChangesRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?get_deltas=" + Uri.EscapeDataString(args.ToString(Formatting.None))' ApiToken); " is 155.
Long Statement,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The length of the statement  "						if (row.Data != null) throw new ArgumentException("Cannot insert row " + rowId + " as it already exists and has a value"); " is 122.
Long Statement,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The length of the statement  "						throw new ArgumentException("Expected last property of insert insert row " + rowId + " to be Object' but was " + change.Last.Type); " is 131.
Long Statement,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The length of the statement  "				if (type != typeof(string)) throw new ArgumentException("Unable to deserialize JSON type " + value.Type + " to type " + type); " is 126.
Complex Conditional,BobbyTables,Table<T>,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,GetId,The conditional expression  "propInfo != null && propInfo.PropertyType == typeof(string) && propInfo.CanRead && propInfo.CanWrite"  is complex.
Complex Conditional,BobbyTables,Table<T>,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SetId,The conditional expression  "propInfo != null && propInfo.PropertyType == typeof(string) && propInfo.CanRead && propInfo.CanWrite"  is complex.
Empty Catch Block,BobbyTables,ApiRequest,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\ApiRequest.cs,GetResponseCallback,The method has an empty catch block.
Magic Number,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,GetSnapshotResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call get_snapshot returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,GetDeltasResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call get_deltas returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,ApplyChanges,The following statement contains a magic number: foreach (var delta in deltas)  			{  				var rev = delta["rev"].Value<int>();  				if (rev < Rev) continue;  				Rev = rev + 1;  				var changes = delta["changes"] as JArray;  				foreach (JArray change in changes)  				{  					var tid = change[1].Value<string>();  					var rowid = change[2].Value<string>();    					Table table;  					if (!_tables.TryGetValue(tid' out table))  					{  						table = new Table(_manager' this' tid);  						_tables.Add(tid' table);  					}  					table.ApplyChange(change);  				}  			}
Magic Number,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("await returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,Datastore,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PushResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call put_delta returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,GetResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call list_datastores returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,ListResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call list_datastores returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,ListDatastores,The following statement contains a magic number: foreach (var datastore in dataStores)  			{  				Datastore store;  				string dsid = datastore["dsid"].Value<string>();  				string handle = datastore["handle"].Value<string>();  				if (!_datastores.TryGetValue(dsid' out store))  				{  					store = new Datastore(this' dsid' handle);  					_datastores.Add(dsid' store);  				}  				if (datastore["info"] != null)  				{  					var title = datastore["info"]["title"].Value<string>();  					if (!string.IsNullOrEmpty(title))  					{  						store.Title = title;  					}  					var mtime = datastore["info"]["mtime"];  					if (mtime != null)  					{  						store.Modified = (new DateTime(1970' 1' 1)).AddMilliseconds(mtime["T"].Value<Int64>());  					}  				}  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitListChangesResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call await returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitDatastoreChangesResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("await returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,GetOrCreateResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call get_or_create_datastore returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,CreateResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call create_datastore returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,DatastoreManager,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,DeleteResponse,The following statement contains a magic number: if (response.StatusCode != 200)  			{  				throw new DatastoreException("Api call create_datastore returned status code " + response.StatusCode);  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,RevertPendingChanges,The following statement contains a magic number: foreach (var change in _pendingChanges)  			{  				Row row;  				var rowId = change[2].Value<string>();  				if (_rows.TryGetValue(rowId' out row))  				{  					row.State = RowState.Unchanged;  					if (row.Data == null)  					{  						_rows.Remove(rowId);  					}  				}  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The following statement contains a magic number: var rowId = change[2].Value<string>();
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: foreach (var child in updates.Last as JObject)  			{  				switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: foreach (var child in updates.Last as JObject)  			{  				switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: foreach (var child in updates.Last as JObject)  			{  				switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,AddPendingOperations,The following statement contains a magic number: foreach (var op in operations)  			{  				// this dictionary already has a change for this key  				// so we need to start a new change set  				if (dictionary[name] != null)  				{  					_pendingChanges.Add(change);  					var rowId = change[2].Value<string>();    					change = new JArray();  					change.Add("U");  					change.Add(Id);  					change.Add(rowId);  					dictionary = new JObject();  					change.Add(dictionary);  				}    				dictionary[name] = op;  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,GenerateId,The following statement contains a magic number: return encoded.Substring(0' 22);
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SerializeValue,The following statement contains a magic number: if (type.IsArray && type.GetElementType() != typeof(byte))  			{  				JArray array = new JArray();  				Array valueArray = value as Array;  				foreach (var element in valueArray)  				{  					array.Add(SerializeValue(element));  				}  				return array;  			}  			else if (type == typeof(bool))  			{  				return new JValue((bool)value);  			}  			else if (type == typeof(string))  			{  				return new JValue((string)value);  			}  			else if (type == typeof(float))  			{  				return new JValue((float)value);  			}  			else if (type == typeof(double))  			{  				return new JValue((double)value);  			}  			else if (type == typeof(Int16))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)(Int16)value).ToString();  				return obj;  			}  			else if (type == typeof(UInt16))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)(UInt16)value).ToString();  				return obj;  			}  			else if (type == typeof(int))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)(int)value).ToString();  				return obj;  			}  			else if (type == typeof(uint))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)(uint)value).ToString();  				return obj;  			}  			else if (type == typeof(long))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)value).ToString();  				return obj;  			}  			else if (type == typeof(ulong))  			{  				JObject obj = new JObject();  				obj["I"] = ((long)(ulong)value).ToString();  				return obj;  			}  			else if (type == typeof(DateTime))  			{  				JObject obj = new JObject();  				obj["T"] = ((Int64)Math.Floor((((DateTime)value) - new DateTime(1970' 1' 1)).TotalMilliseconds)).ToString();  				return obj;  			}  			else if (type == typeof(byte[]))  			{  				JObject obj = new JObject();  				obj["B"] = Utils.ToDBase64((byte[])value);  				return obj;  			}  			else if (type.IsEnum)  			{  				JObject obj = new JObject();  				Enum.GetUnderlyingType(type);  				obj["I"] = ((long)(int)value).ToString();  				return obj;  			}  			else if (typeof(IList<byte>).IsAssignableFrom(type))  			{  				IList<byte> list = value as IList<byte>;  				byte[] array = new byte[list.Count];  				list.CopyTo(array' 0);    				JObject obj = new JObject();  				obj["B"] = Utils.ToDBase64(array);  				return obj;  			}  			else  			{  				foreach (Type interfaceType in type.GetInterfaces())  				{  					if (interfaceType.IsGenericType &&  						interfaceType.GetGenericTypeDefinition()  						== typeof(IList<>))  					{  						JArray array = new JArray();  						IList collection = (IList)value;  						foreach (var element in collection)  						{  							if (element == null)  							{  								throw new ArgumentException("Unable to serialize null value to Atom");  							}  							array.Add(SerializeValue(element));  						}  						return array;  					}  				}  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The following statement contains a magic number: if (value.Type == JTokenType.Boolean)  			{                  if (type == typeof(bool) || type == typeof(bool?))                  {                      return value.Value<bool>();                  }                  throw new ArgumentException("Unable to deserialize JSON type " + value.Type + " to type " + type);  			}  			else if (value.Type == JTokenType.String)  			{  				if (type != typeof(string)) throw new ArgumentException("Unable to deserialize JSON type " + value.Type + " to type " + type);  				return value.Value<string>();  			}  			else if (value.Type == JTokenType.Float || value.Type == JTokenType.Integer)  			{                  if (type == typeof(float) || type == typeof(float?))  				{  					return value.Value<float>();  				}                  else if (type == typeof(double) || type == typeof(double?))  				{  					return value.Value<double>();  				}  				throw new ArgumentException("Unable to deserialize JSON type " + value.Type + " to type " + type);  			}  			else if (value.Type == JTokenType.Object)  			{  				if (value["I"] != null)  				{  					//Integer values  					if (type.IsEnum)  					{  						return Enum.ToObject(type' value["I"].Value<ulong>());  					}  					if (type == typeof(int) || type == typeof(int?))  					{  						return value["I"].Value<int>();  					}  					else if (type == typeof(Int16) || type == typeof(Int16?))  					{  						return value["I"].Value<Int16>();  					}  					else if (type == typeof(UInt16) || type == typeof(UInt16?))  					{  						return value["I"].Value<UInt16>();  					}  					else if (type == typeof(uint) || type == typeof(uint?))  					{  						return value["I"].Value<uint>();  					}  					else if (type == typeof(long) || type == typeof(long?))  					{  						return value["I"].Value<long>();  					}  					else if (type == typeof(ulong) || type == typeof(ulong?))  					{  						return value["I"].Value<ulong>();  					}  					throw new ArgumentException("Unable to deserialize Wrapped Integer to type " + type);  				}  				else if (value["T"] != null)  				{  					//DateTime values  					if (type == typeof(DateTime) || type == typeof(DateTime?))  					{  						return (new DateTime(1970' 1' 1)).AddMilliseconds(value["T"].Value<Int64>());  					}  					throw new ArgumentException("Unable to deserialize Wrapped Timestamp to type " + type);  				}  				else if (value["B"] != null)  				{  					//Byte array values  					if (type == typeof(byte[]))  					{  						return Utils.FromDBase64(value["B"].Value<string>());  					}  					else if (typeof(IList<byte>).IsAssignableFrom(type))  					{  						var array = Utils.FromDBase64(value["B"].Value<string>());  						IList collection = (IList)Activator.CreateInstance(type' new object[] { });  						foreach (var element in array) {  							collection.Add(element);  						}  						return collection;  					}  					throw new ArgumentException("Unable to deserialize Wrapped Byte array to type " + type);  				}  			}  			else if (value.Type == JTokenType.Array)  			{  				JArray array = value as JArray;  				if (type.IsArray)  				{  					object[] typedArray = (object[])Activator.CreateInstance(type' new object[] { array.Count });  					for (int i = 0; i < array.Count; ++i)  					{  						typedArray[i] = DeserializeValue(array[i]' type.GetElementType());  					}  					return typedArray;  				}  				else  				{  					foreach (Type interfaceType in type.GetInterfaces())  					{  						if (interfaceType.IsGenericType &&  							interfaceType.GetGenericTypeDefinition()  							== typeof(IList<>))  						{  							Type itemType = interfaceType.GetGenericArguments()[0];  							IList collection = (IList)Activator.CreateInstance(type' new object[] { });  							foreach (var element in array)  							{  								collection.Add(DeserializeValue(element' itemType));  							}  							return collection;  						}  					}  				}  				throw new ArgumentException("Unable to deserialize Array to type " + type);  			}
Magic Number,BobbyTables,Table,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The following statement contains a magic number: if (value.Type == JTokenType.Boolean)  			{  				return value.Value<bool>();  			}  			else if (value.Type == JTokenType.String)  			{  				return value.Value<string>();  			}  			else if (value.Type == JTokenType.Float || value.Type == JTokenType.Integer)  			{		  				return value.Value<double>();  			}  			else if (value.Type == JTokenType.Object)  			{  				if (value["I"] != null)  				{  					//Integer values  					return value["I"].Value<int>();  				}  				else if (value["T"] != null)  				{  					//DateTime values  					return (new DateTime(1970' 1' 1)).AddMilliseconds(value["T"].Value<Int64>());  				}  				else if (value["B"] != null)  				{	  					return Utils.FromDBase64(value["B"].Value<string>());  				}  			}  			else if (value.Type == JTokenType.Array)  			{  				JArray array = value as JArray;  				// we could possibly infer the type of the array based on the type of the   				// first element we deserialized' but then the array type would change if the  				// array ever became empty - to make things more predictable we'll just always  				// make the array of type object.  				object[] typedArray = new object[array.Count];  				for (int i = 0; i < array.Count; ++i)  				{  					typedArray[i] = DeserializeValue(array[i]);  				}  				return typedArray;  			}
Magic Number,BobbyTables,Utils,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: if (b64.Length % 4 != 0)  				b64 += ("===").Substring(0' 4 - (b64.Length % 4));
Magic Number,BobbyTables,Utils,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: if (b64.Length % 4 != 0)  				b64 += ("===").Substring(0' 4 - (b64.Length % 4));
Magic Number,BobbyTables,Utils,C:\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: if (b64.Length % 4 != 0)  				b64 += ("===").Substring(0' 4 - (b64.Length % 4));
