Implementation smell,Namespace,Class,File,Method,Description
Long Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DetermineOperations,The method has 118 lines of code.
Long Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SerializeValue,The method has 122 lines of code.
Long Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The method has 123 lines of code.
Complex Method,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,Datastore,Cyclomatic complexity of the method is 12
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,Cyclomatic complexity of the method is 9
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,Cyclomatic complexity of the method is 9
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,Insert,Cyclomatic complexity of the method is 13
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,Get,Cyclomatic complexity of the method is 12
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DetermineOperations,Cyclomatic complexity of the method is 13
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SerializeValue,Cyclomatic complexity of the method is 22
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SerializedValuesEqual,Cyclomatic complexity of the method is 11
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,Cyclomatic complexity of the method is 29
Complex Method,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,Cyclomatic complexity of the method is 10
Complex Method,BobbyTables,Utils,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,ComputeLCS,Cyclomatic complexity of the method is 10
Long Parameter List,BobbyTables,Utils,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,Backtrack,The method has 7 parameters. Parameters: lcs' num' equalityFunc' a' b' i' j
Long Statement,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PullAsync,The length of the statement  "					throw new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending"); " is 129.
Long Statement,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PullAsync,The length of the statement  "					failure(new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending")); " is 132.
Long Statement,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullRequest,The length of the statement  "					throw new DatastoreException("Unable to pull in remote changes to Datastore with id " + Id + " as it has local changes pending"); " is 129.
Long Statement,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?get_deltas=" + Uri.EscapeDataString(args.ToString(Formatting.None))' _manager.ApiToken); " is 164.
Long Statement,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitListChangesRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?list_datastores=" + Uri.EscapeDataString(args.ToString(Formatting.None))' ApiToken); " is 160.
Long Statement,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitDatastoreChangesRequest,The length of the statement  "			IApiRequest request = ApiRequestFactory.Current.CreateRequest("GET"' "await?get_deltas=" + Uri.EscapeDataString(args.ToString(Formatting.None))' ApiToken); " is 155.
Long Statement,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The length of the statement  "						if (row.Data != null) throw new ArgumentException("Cannot insert row " + rowId + " as it already exists and has a value"); " is 122.
Long Statement,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The length of the statement  "						throw new ArgumentException("Expected last property of insert insert row " + rowId + " to be Object' but was " + change.Last.Type); " is 131.
Long Statement,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,DeserializeValue,The length of the statement  "				if (type != typeof(string)) throw new ArgumentException("Unable to deserialize JSON type " + value.Type + " to type " + type); " is 126.
Complex Conditional,BobbyTables,Table<T>,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,GetId,The conditional expression  "propInfo != null && propInfo.PropertyType == typeof(string) && propInfo.CanRead && propInfo.CanWrite"  is complex.
Complex Conditional,BobbyTables,Table<T>,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,SetId,The conditional expression  "propInfo != null && propInfo.PropertyType == typeof(string) && propInfo.CanRead && propInfo.CanWrite"  is complex.
Empty Catch Block,BobbyTables,ApiRequest,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\ApiRequest.cs,GetResponseCallback,The method has an empty catch block.
Magic Number,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,GetSnapshotResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,GetDeltasResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,ApplyChanges,The following statement contains a magic number: var rowid = change[2].Value<string>();
Magic Number,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,AwaitPullResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,Datastore,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Datastore.cs,PushResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,GetResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,ListResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,ListDatastores,The following statement contains a magic number: store.Modified = (new DateTime(1970' 1' 1)).AddMilliseconds(mtime["T"].Value<Int64>());
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitListChangesResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,AwaitDatastoreChangesResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,GetOrCreateResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,CreateResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,DatastoreManager,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\DatastoreManager.cs,DeleteResponse,The following statement contains a magic number: response.StatusCode != 200
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,RevertPendingChanges,The following statement contains a magic number: var rowId = change[2].Value<string>();
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyChange,The following statement contains a magic number: var rowId = change[2].Value<string>();
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,ApplyUpdate,The following statement contains a magic number: switch (child.Value[0].Value<string>())  				{  					case "P":  						row.Data[child.Key] = child.Value[1];  						break;  					case "D":  						row.Data.Remove(child.Key);  						break;  					case "LC":  						row.Data[child.Key] = new JArray();  						break;  					case "LP":  						row.Data[child.Key][child.Value[1].Value<int>()] = child.Value[2];  						break;  					case "LI":  						(row.Data[child.Key] as JArray).Insert(child.Value[1].Value<int>()' child.Value[2]);  						break;  					case "LD":  						(row.Data[child.Key] as JArray).RemoveAt(child.Value[1].Value<int>());  						break;  					case "LM":  						{  							int oldIndex = child.Value[1].Value<int>();  							var value = row.Data[child.Key][oldIndex];  							var array = row.Data[child.Key] as JArray;  							array.RemoveAt(oldIndex);  							array.Insert(child.Value[2].Value<int>()' value);  						}  						break;  					default:  						throw new ArgumentException("Unknown fieldop type " + child.Value[0].Value<string>());  				}
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,AddPendingOperations,The following statement contains a magic number: var rowId = change[2].Value<string>();
Magic Number,BobbyTables,Table,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Table.cs,GenerateId,The following statement contains a magic number: return encoded.Substring(0' 22);
Magic Number,BobbyTables,Utils,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: b64 += ("===").Substring(0' 4 - (b64.Length % 4));
Magic Number,BobbyTables,Utils,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: b64 += ("===").Substring(0' 4 - (b64.Length % 4));
Magic Number,BobbyTables,Utils,C:\research\architectureSmells\repos\mrsharpoblunto_BobbyTables\BobbyTables\Utils.cs,FromDBase64,The following statement contains a magic number: b64.Length % 4 != 0
