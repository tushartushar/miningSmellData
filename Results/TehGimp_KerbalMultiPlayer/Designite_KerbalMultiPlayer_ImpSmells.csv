Implementation smell,Namespace,Class,File,Method,Description
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has 296 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The method has 128 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The method has 204 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The method has 133 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The method has 567 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,The method has 101 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The method has 113 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The method has 111 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The method has 142 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The method has 208 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The method has 198 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The method has 303 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The method has 110 lines of code.
Long Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The method has 173 lines of code.
Long Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The method has 101 lines of code.
Long Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,The method has 168 lines of code.
Long Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The method has 262 lines of code.
Long Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The method has 230 lines of code.
Complex Method,KMP,KMPChatDX,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,enqueueChatLine,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,Cyclomatic complexity of the method is 59
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkVesselPrivacy,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,Cyclomatic complexity of the method is 20
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,Cyclomatic complexity of the method is 15
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,Cyclomatic complexity of the method is 36
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,Cyclomatic complexity of the method is 29
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,Cyclomatic complexity of the method is 10
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,Cyclomatic complexity of the method is 92
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,Cyclomatic complexity of the method is 15
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,Cyclomatic complexity of the method is 25
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,Cyclomatic complexity of the method is 13
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,Cyclomatic complexity of the method is 11
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadGlobalSettings,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,Cyclomatic complexity of the method is 20
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,Cyclomatic complexity of the method is 34
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,Cyclomatic complexity of the method is 23
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,Cyclomatic complexity of the method is 10
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,Cyclomatic complexity of the method is 20
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,Cyclomatic complexity of the method is 32
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,Cyclomatic complexity of the method is 10
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,Cyclomatic complexity of the method is 38
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,CheckEditorLock,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,Cyclomatic complexity of the method is 17
Complex Method,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,Cyclomatic complexity of the method is 16
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,Cyclomatic complexity of the method is 14
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,resourceCheck,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,Cyclomatic complexity of the method is 14
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,Cyclomatic complexity of the method is 45
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,Cyclomatic complexity of the method is 33
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,Cyclomatic complexity of the method is 15
Complex Method,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,Cyclomatic complexity of the method is 9
Long Parameter List,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The method has 5 parameters. Parameters: protovessel' vessel_id' kvessel' update' distance
Long Parameter List,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The method has 11 parameters. Parameters: oldVessel' newWorldPos' newOrbitVel' wasLoaded' wasActive' setTarget' protovessel' vessel_id' kvessel' update' distance
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The length of the parameter timeFromLastSyncSecondsAdjusted is 31.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the parameter playerNameInScreenshotsWaiting is 30.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter MAX_INACTIVE_VESSELS_PER_UPDATE is 31.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter FULL_PROTOVESSEL_UPDATE_TIMEOUT is 31.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter PRIVATE_VESSEL_MIN_TARGET_DISTANCE is 34.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE is 54.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE is 54.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MIN_DELAY is 30.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG is 35.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG is 35.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_SCALE_FACTOR is 30.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_LastUpdateDistanceTime is 36.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_RendezvousSmoothPos is 33.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_RendezvousSmoothVel is 33.
Long Identifier,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_SkippedRendezvousUpdates is 38.
Long Identifier,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter screenshotSharePlayerNameIndex is 30.
Long Identifier,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The length of the parameter joined_message_data_decompressed is 32.
Long Identifier,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,,The length of the parameter CLIENT_DATA_FORCE_WRITE_INTERVAL is 32.
Long Statement,KMP,LoadedFileInfo,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleHash,The length of the statement  "				using (System.IO.Stream hashStream = new System.IO.FileStream(FullPath' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 155.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                                    vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 234.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                                vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronized new universe!"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                            vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + FlightGlobals.Vessels.Count' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 148.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                        vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing to server clock: " + listClientTimeSyncOffset.Count + "/" + SYNC_TIME_VALID_COUNT + " (" + (listClientTimeSyncOffset.Count * 100 / SYNC_TIME_VALID_COUNT) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 268.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (st.mainCamera.target.vessel != null && (serverVessels_IsMine[st.mainCamera.target.vessel.id] || !serverVessels_IsPrivate[st.mainCamera.target.vessel.id])) " is 158.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "							if (st.mainCamera.target.vessel.mainBody.bodyName == "Kerbin" && (st.mainCamera.target.vessel.situation == Vessel.Situations.LANDED || st.mainCamera.target.vessel.situation == Vessel.Situations.SPLASHED)) " is 204.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                foreach (Vessel vessel in FlightGlobals.Vessels.Where(v => v.vesselType == VesselType.SpaceObject && !serverVessels_RemoteID.ContainsKey(v.id))) " is 144.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						vessel.vesselName = (((serverVessels_InUse.ContainsKey(vessel.id) ? serverVessels_InUse[vessel.id] : false) || ((serverVessels_IsPrivate.ContainsKey(vessel.id) ? serverVessels_IsPrivate[vessel.id]: false) && (serverVessels_IsMine.ContainsKey(vessel.id) ? !serverVessels_IsMine[vessel.id] : false))) ? "* " : "") + baseName; " is 323.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						try { if (!vessel.isEVA) killVessel(vessel); } catch (Exception e) { Log.Debug("Exception thrown in updateStep()' catch 1' Exception: {0}"' e.ToString()); } " is 156.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (InputLockManager.GetControlLock("KMP_Occupied") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Occupied"); " is 128.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "				if (isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)) " is 164.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (InputLockManager.GetControlLock("KMP_Private") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Private"); " is 126.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (distanceToTarget < PRIVATE_VESSEL_MIN_TARGET_DISTANCE && serverVessels_IsPrivate.ContainsKey(vesselTarget.id) && serverVessels_IsMine.ContainsKey(vesselTarget.id)) " is 167.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)) vrb.ssuiButton.Unlock(); " is 241.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                if (HighLogic.CurrentGame.flightState.universalTime < Planetarium.GetUniversalTime()) HighLogic.CurrentGame.flightState.universalTime = Planetarium.GetUniversalTime(); " is 167.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						entry.vessel.updateRenderProperties(!KMPGlobalSettings.instance.showInactiveShips && entry.vessel.info.state != State.ACTIVE); " is 126.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "			} catch (Exception ex) { Log.Debug("Exception thrown in updateStep()' catch 4' Exception: {0}"' ex.ToString()); Log.Debug("uS err: " + ex.Message + " " + ex.StackTrace); } " is 171.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,kickToTrackingStation,The length of the statement  "				ScreenMessages.PostScreenMessage("Selected vessel is controlled from past or destroyed!"' 5f'ScreenMessageStyle.UPPER_RIGHT); " is 125.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The length of the statement  "				foreach (Vessel vessel in FlightGlobals.Vessels.FindAll(v => v.loaded && v.id != FlightGlobals.ActiveVessel.id && serverVessels_PartCounts.ContainsKey(v.id) && serverVessels_ProtoVessels.ContainsKey(v.id))) " is 206.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The length of the statement  "							try { if (!part.vessel.isEVA && part.vessel.id != FlightGlobals.ActiveVessel.id) killVessel(part.vessel); } catch (Exception e) { Log.Debug("Exception thrown in checkRemoteVesselIntegrity()' catch 1' Exception: {0}"' e.ToString()); } " is 233.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The length of the statement  "				ScreenMessages.PostScreenMessage("You have been disconnected. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 146.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The length of the statement  "				ScreenMessages.PostScreenMessage("You have been disconnected. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 146.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The length of the statement  "                activeVesselIsInBubble = isInSafetyBubble(FlightGlobals.ship_position' FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.altitude); " is 145.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The length of the statement  "                activeVesselIsMine = (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true); " is 148.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "                activeVesselIsInBubble = isInSafetyBubble(FlightGlobals.ship_position' FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.altitude); " is 145.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "            if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate) " is 173.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <")); " is 143.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown"; " is 122.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update)); " is 126.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); } " is 151.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "                                if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true) " is 129.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "					if (vessel != FlightGlobals.ActiveVessel && vessel.loaded && !vessel.name.Contains(" [Past]") && !vessel.name.Contains(" [Future]") && vessel.id.ToString() != SYNC_PLATE_ID) " is 173.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "						   ((update.situation == Situation.DESCENDING || update.situation == Situation.FLYING) //If other vessel is flying/descending " is 122.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "							    && (serverVessels_InUse.ContainsKey(enumerator.Current.Value.id) ? serverVessels_InUse[enumerator.Current.Value.id] : false) " is 124.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "							    //&& (serverVessels_LoadDelay.ContainsKey(enumerator.Current.Value.id) ? (serverVessels_LoadDelay[enumerator.Current.Value.id] < UnityEngine.Time.realtimeSinceStartup) : true) " is 175.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									Log.Debug ("sending docking-mode update' distance: " + enumerator.Current.Key + " id: " + FlightGlobals.ActiveVessel.id); " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.findWorldCenterOfMass() - FlightGlobals.ship_CoM); " is 155.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity()); " is 178.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,sendVesselMessage,The length of the statement  "                        update.state = isInFlight ? (FlightGlobals.ActiveVessel.id == vessel.id ? State.ACTIVE : State.INACTIVE) : State.INACTIVE; " is 122.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "            //Log.Debug("TimeDelta: " + ((UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT)); " is 133.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "			    	((isInFlight ? vessel.id != FlightGlobals.ActiveVessel.id : true) || (UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT) //not active vessel' or full protovessel timeout hasn't passed " is 234.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "				if ((serverVessels_PartCounts.ContainsKey(vessel.id) ? serverVessels_PartCounts[vessel.id] == vessel.Parts.Count : false) //Part count is the same " is 146.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "					&& (sentVessels_Situations.ContainsKey(vessel.id) ? (sentVessels_Situations[vessel.id] == vessel.situation) : false)) //Situation hasn't changed " is 144.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "					else if ((UnityEngine.Time.realtimeSinceStartup - newFlags[vessel.id]) < 65f) //Is a flag' but plaque timeout hasn't expired " is 124.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "			if ((vessel.loaded && vessel.GetTotalMass() <= 0.0) || (vessel.vesselType == VesselType.Debris && vessel.situation == Vessel.Situations.SUB_ORBITAL)) " is 149.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "						if (vessel.situation == Vessel.Situations.ESCAPING || (float)vessel.orbit.ApA > vessel.orbit.referenceBody.maxAtmosphereAltitude) " is 129.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "			if (detail.activity == Activity.NONE && FlightGlobals.fetch.VesselTarget != null && FlightGlobals.fetch.VesselTarget is ModuleDockingNode " is 137.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "				&& Vector3.Distance(vessel.GetWorldPos3D()' FlightGlobals.fetch.VesselTarget.GetTransform().position) < DOCKING_TARGET_RANGE) " is 125.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,returnToSpaceCenter,The length of the statement  "            if (FlightGlobals.ClearToSave() == ClearToSaveStatus.CLEAR || !isInFlight || (FlightGlobals.ActiveVessel != null ? FlightGlobals.ActiveVessel.state == Vessel.State.DEAD : true)) " is 177.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "			Log.Debug("Game status=" + g.Status + " modes=" + g.Mode + " IsResumable=" + g.IsResumable() + " startScene=" + g.startScene+" NumScenarios="+g.scenarios.Count); " is 161.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "						Log.Debug("g.scenarios[" + i + "].moduleName=" + g.scenarios[i].moduleName + "' and moduleRef=" + (g.scenarios[i].moduleRef != null ? g.scenarios[i].moduleRef.ClassName : "null")); " is 180.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "								//This was happening later on when there were four "scenarios" and the ones with null moduleRefs had somehow been replaced by actual moduleRefs. " is 144.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "								Log.Error("More than one ResearchAndDevelopment scenario module in the game! Science was already " + science + "' now we've found another which says it is " + rd.Science + "!"); " is 177.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "							Log.Error("ProtoScenarioModule claims to be a ResearchAndDevelopment but contains no such thing! moduleRef is " + (proto.moduleRef != null ? proto.moduleRef.ClassName : "null")); " is 178.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The length of the statement  "                    } catch (Exception e) { KMPClientMain.sendConnectionEndMessage("Error in handling scenario data. Please restart your client. "); Log.Debug(e.ToString());  } " is 156.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The length of the statement  "                //var proto = HighLogic.CurrentGame.AddProtoScenarioModule(newScenario.GetType()' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 150.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "            if (!vesselUpdatesLoaded.Contains(vessel_update.id)) //This can be moved elsewhere in addRemoteVessel (or applyVesselUpdate) to help track issues with loading a specific vessel " is 176.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			Log.Debug("vessel state: " + vessel_update.state.ToString() + "' tick=" + vessel_update.tick + "' realTick=" + Planetarium.GetUniversalTime()); " is 143.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			if (vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate && vessel_update.relTime != RelativeTime.FUTURE && !vessel_update.isDockUpdate) " is 154.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				serverVessels_InUse[vessel_update.id] = vessel_update.state == State.ACTIVE && !vessel_update.isMine && !vessel_update.isSyncOnlyUpdate; " is 136.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				Log.Debug("status flags updated: " + (vessel_update.state == State.ACTIVE) + " " + vessel_update.isSyncOnlyUpdate + " " + vessel_update.isPrivate + " " + vessel_update.isMine); " is 176.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				if (vessel_update.situation == Situation.DESTROYED && (isInFlight ? vessel_update.id != FlightGlobals.ActiveVessel.id : true)) " is 126.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						try { killVessel(extant_vessel); } catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 1' Exception: {0}"' e.ToString()); } " is 151.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			if (vessel_update.getProtoVesselNode() != null) serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode(); " is 130.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id])))) " is 245.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "//						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true) " is 159.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by " is 128.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true))) " is 264.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f); " is 153.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "    												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position); " is 129.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count; " is 200.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count; " is 149.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch) " is 184.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f) " is 224.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f; " is 129.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup; " is 164.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id)) " is 159.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection); " is 229.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f) " is 170.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED)) " is 123.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d); " is 131.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f); " is 159.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1 " is 122.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f); " is 159.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false )) " is 200.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity; " is 131.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG) " is 126.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false) " is 167.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection); " is 229.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag) " is 124.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); } " is 185.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer"); " is 120.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER); " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true) " is 151.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition); " is 148.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity()); " is 164.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass(); " is 120.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2])); " is 157.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])); " is 157.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0; " is 130.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case " is 249.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false); " is 358.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck) " is 193.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false) " is 338.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id)) " is 149.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id)) " is 124.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude); " is 127.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d)); " is 229.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkOrbitForCollision,The length of the statement  "			//else Log.Debug("Orbit does not collide with body: {0} {1} {2} {3} {4}"'orbit.PeA'body.maxAtmosphereAltitude'orbit.timeToPe'tick'fromTick); " is 140.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			if (vessel_id == FlightGlobals.ActiveVessel.id && (serverVessels_InUse.ContainsKey(vessel_id) ? !serverVessels_InUse.ContainsKey(vessel_id) : false)) return; " is 157.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			if (serverVessels_LoadDelay.ContainsKey(vessel_id) ? serverVessels_LoadDelay[vessel_id] >= UnityEngine.Time.realtimeSinceStartup : false) return; " is 145.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			Log.Debug("addRemoteVessel: " + vessel_id.ToString() + "' name: " + protovessel.vesselName.ToString() + "' type: " + protovessel.vesselType.ToString()); " is 152.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "							try { if (part.vessel != null && part.vessel.id != oldVessel.id) killVessel(part.vessel); } catch (Exception e) {  Log.Debug("Exception thrown in addRemoteVessel()' catch 1' Exception: {0}"' e.ToString()); } " is 207.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "				if ((protovessel.vesselType != VesselType.Debris && protovessel.vesselType != VesselType.Unknown) && protovessel.situation == Vessel.Situations.SUB_ORBITAL && protovessel.altitude < 25d) " is 186.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "					StartCoroutine(loadProtovessel(oldVessel' newWorldPos' newOrbitVel' wasLoaded' wasActive' setTarget' protovessel' vessel_id' kvessel' update' distance)); " is 153.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "            Log.Debug("Loading protovessel: {0}"' vessel_id.ToString() + "' name: " + protovessel.vesselName + "' type: " + protovessel.vesselType); " is 136.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "                Log.Debug(created_vessel.id.ToString() + " initializing: ProtoParts=" + protovessel.protoPartSnapshots.Count + "'Parts=" + created_vessel.Parts.Count + "'Sit=" + created_vessel.situation.ToString() + "'type=" + created_vessel.vesselType + "'alt=" + protovessel.altitude); " is 271.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "                                created_vessel.ChangeWorldVelocity((-1 * created_vessel.GetObtVelocity()) + (new Vector3(newOrbitVel.x' newOrbitVel.z' newOrbitVel.y))); //xzy? " is 143.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,acceptClientInterop,The length of the statement  "				} catch (Exception e) { Log.Debug("Exception thrown in acceptClientInterop()' catch 1' Exception: {0}"' e.ToString()); } " is 120.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The length of the statement  "			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); } " is 143.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Awake,The length of the statement  "                List<string> filenames = System.IO.Directory.GetFiles(KSPUtil.ApplicationRootPath + "GameData"' "*.dll"' System.IO.SearchOption.AllDirectories).ToList(); // add files that weren't immediately loaded (e.g. files that plugins use later) " is 234.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselLoaded,The length of the statement  "                //data.distancePackThreshold = Vector3.Distance(data.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position) + 100f; " is 144.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The length of the statement  "                Log.Debug("Vessel termination: " + data.vesselID + " " + serverVessels_RemoteID.ContainsKey(data.vesselID) + " " + (HighLogic.LoadedScene == GameScenes.TRACKSTATION) + " " + (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))); " is 312.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The length of the statement  "                    && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))) //and is debris or owned vessel " is 172.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The length of the statement  "                    //Mark vessel to stay unloaded for a bit' to help prevent any performance impact from vessels that are still in-universe' but that can't load under current conditions " is 166.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The length of the statement  "                        && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.id) ? serverVessels_IsMine[data.id] : true))))) //and target is debris or owned vessel " is 169.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFlightReady,The length of the statement  "                if (!FlightGlobals.ActiveVessel.isEVA && !FlightGlobals.ActiveVessel.protoVessel.protoPartSnapshots.TrueForAll(pps => KMPClientMain.partList.Contains(pps.partName))) " is 165.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFlightReady,The length of the statement  "                    ScreenMessages.PostScreenMessage("Can't start flight - Vessel has prohibited parts! Sorry!"' 10f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                    var proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ScenarioDiscoverableObjects)' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 162.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                if (HighLogic.CurrentGame.scenarios.Where(psm => psm.moduleName == "ResearchAndDevelopment").Count() < 1 && gameMode == 1) " is 122.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                    var proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ResearchAndDevelopment)' GameScenes.SPACECENTER' GameScenes.EDITOR' GameScenes.FLIGHT' GameScenes.TRACKSTATION' GameScenes.SPH); " is 192.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                        proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ProgressTracking)' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 147.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "							if (FlightGlobals.ActiveVessel.orbit.referenceBody == null) FlightGlobals.ActiveVessel.orbit.referenceBody = FlightGlobals.Bodies.Find(b => b.name == "Sun"); " is 157.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "					    && !(FlightGlobals.ActiveVessel.orbit.referenceBody.atmosphere && FlightGlobals.ActiveVessel.orbit.altitude < FlightGlobals.ActiveVessel.orbit.referenceBody.maxAtmosphereAltitude)) //and not in atmo " is 198.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "						foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && (v.id != FlightGlobals.ActiveVessel.id) && (v.loaded && Vector3d.Distance(FlightGlobals.ship_position'v.GetWorldPos3D()) < INACTIVE_VESSEL_RANGE))) " is 232.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "						FlightGlobals.ActiveVessel.ChangeWorldVelocity((-1 * oldObtVel) + FlightGlobals.ActiveVessel.orbitDriver.orbit.getOrbitalVelocityAtUT(krakensTick).xzy); " is 152.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The length of the statement  "				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds. " is 180.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The length of the statement  "				Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset"); " is 151.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The length of the statement  "                    //if (KMPGlobalSettings.instance.chatDXWindowEnabled) KMPChatDX.enqueueChatLine("Press Chat key (" + (KMPGlobalSettings.instance.chatTalkKey == KeyCode.BackQuote ? "~" : KMPGlobalSettings.instance.chatTalkKey.ToString()) + ") to send a message"); " is 246.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The length of the statement  "			} catch (Exception ex) { Log.Debug("Exception thrown in Update()' catch 2' Exception: {0}"' ex.ToString()); Log.Debug ("u err: " + ex.Message + " " + ex.StackTrace); } " is 167.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The length of the statement  "						KMPInfoDisplay.infoDisplayMinimized ? "KMP" : "KerbalMP v"+KMPCommon.PROGRAM_VERSION+" ("+KMPGlobalSettings.instance.guiToggleKey+")"' " is 134.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The length of the statement  "					if (!serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) || !serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)) " is 140.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The length of the statement  "					if (!wasLocked && (serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id) ? !serverVessels_InUse[FlightGlobals.ActiveVessel.id] : true)) " is 144.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The length of the statement  "				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle); " is 184.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The length of the statement  "				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle); " is 176.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//This is done because scenarios is not cleared properly even when a new game is started' and it was causing bugs in KMP. " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//Instead of clearing scenarios' KSP appears to set the moduleRefs of each module to null' which is what was causing KMP bugs #578'  " is 131.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//and could be the cause of #579 (but closing KSP after disconnecting from a server' before connecting again' prevented it from happening'  " is 138.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					KMPChatDX.enqueueChatLine("Press Chat key (" + (KMPGlobalSettings.instance.chatTalkKey == KeyCode.BackQuote ? "~" : KMPGlobalSettings.instance.chatTalkKey.ToString()) + ") to send a message"); " is 192.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "                        KMPClientMain.SetFavorites(favorites); // I would love to have this as a seperate object in the manager' no more getting and setting.  " is 133.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "                    if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar)) " is 125.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindow,The length of the statement  "			KMPGlobalSettings.instance.chatWindowWide = GUILayout.Toggle(KMPGlobalSettings.instance.chatWindowWide' "Wide"' GUI.skin.button); " is 129.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The length of the statement  "                    if (InputLockManager.GetControlLock("KMP_ChatActive") == (ControlTypes.All)) InputLockManager.RemoveControlLock("KMP_ChatActive"); " is 130.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The length of the statement  "			if (showSync && FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f && !isObserving) syncRequest |= GUILayout.Button("Sync"'syncButtonStyle); " is 145.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the statement  "			bool player_selected = GUILayout.Toggle(KMPScreenshotDisplay.watchPlayerName == name' name' playerScreenshotButtonStyle); " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The length of the statement  "            //Cylindrical safety bubble -- project vessel position to a plane positioned at KSC with normal pointed away from surface " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The length of the statement  "            return Vector3d.Distance(kscPosition' projectedPos) < safetyBubbleRadius || runwayDistance < MIN_SAFETY_BUBBLE_DISTANCE || landingPadDistance < MIN_SAFETY_BUBBLE_DISTANCE; " is 171.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isProtoVesselInSafetyBubble,The length of the statement  "            Vector3d protoVesselPosition = kerbinBody.GetWorldSurfacePosition(protovessel.latitude' protovessel.longitude' protovessel.altitude); " is 133.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The length of the statement  "			//Cylindrical safety bubble -- project vessel position to a plane positioned at KSC with normal pointed away from surface " is 121.
Long Statement,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,CheckEditorLock,The length of the statement  "				bool should_lock = (KMPInfoDisplay.infoWindowPos.Contains(mousePos)	|| (KMPScreenshotDisplay.windowEnabled && KMPScreenshotDisplay.windowPos.Contains(mousePos))); " is 162.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,InitMPClient,The length of the statement  "            else if (Environment.GetCommandLineArgs().Count(s => s.Contains("-kmpLogLevel:")) == 1)//if a -kmpLogLevel:[loglevel] is in the arguments " is 137.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                        if (KMPManager.LoadedModfiles.Where(x => x.ModPath == entry.Key && x.SHA256 == entry.Value.sha.ToUpperInvariant()).Count() == 0 && entry.Value.sha != "") " is 153.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            modMismatchError = "SHA Checksum Mismatch: " + entry.Key + " " + debugTest.SHA256 + "/" + entry.Value.sha.ToUpperInvariant(); " is 125.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                                using (System.IO.Stream hashStream = new System.IO.FileStream(fileToCheck' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 158.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            if (KMPManager.LoadedModfiles.Where(x => x.ModPath == entry.Key && x.SHA256 == entry.Value.sha.ToUpperInvariant()) == null && entry.Value.sha != "") " is 148.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            using (System.IO.Stream hashStream = new System.IO.FileStream(fileToCheck' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 158.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,resourceCheck,The length of the statement  "                        if (!resourceList.Contains(file.ModPath) && !modFileList.ContainsKey(file.ModPath) && !allowList.Contains(file.ModPath)) // check if the resource is a) whitelisted' or b) listed in the optional or required SHA sections. If not' the file is not allowed to be loaded. " is 265.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,modCheck,The length of the statement  "				string modFilePath = System.IO.Path.Combine(GAMEDATAPATH' "KMP/Plugins/PluginData/KerbalMultiPlayer/" + MOD_CONTROL_FILENAME); " is 126.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,The length of the statement  "                        ScreenMessages.PostScreenMessage("Lost connection with server. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 147.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the statement  "            //LogAndShare("Message ID: " + id.ToString() + " data: " + (data == null ? "0" : System.Text.Encoding.ASCII.GetString(data))); " is 126.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the statement  "						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x."); " is 176.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                            sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US"))); " is 121.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled")); " is 129.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                        enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY)); " is 166.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                        enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number."); " is 124.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The length of the statement  "                    if (stopwatch.ElapsedMilliseconds - lastTCPMessageSendTime >= KEEPALIVE_DELAY && stopwatch.ElapsedMilliseconds - lastKeepAliveSendTime >= KEEPALIVE_DELAY) { " is 156.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The length of the statement  "                Log.Debug("Exception thrown in handleConnection()' catch 2' last message type: " + handlingMessageType.ToString() +"' Exception: {0}"' e.ToString()); " is 149.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildNewXML,The length of the statement  "            return String.Format("<?xml version=\"1.0\"?><settings><global {0}=\"\" {1}=\"\" {2}=\"\"/><favourites></favourites></settings>"' USERNAME_LABEL' IP_LABEL' AUTO_RECONNECT_LABEL); " is 178.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,readConfigFile,The length of the statement  "                    sPath = KSP.IO.IOUtils.GetFilePathFor(typeof(KMPClientMain)' CLIENT_CONFIG_FILENAME);  // Get the Client config file path " is 121.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,readConfigFile,The length of the statement  "						String[] sArr = {xmlNode.Attributes[IP_LABEL].Value'  xmlNode.Attributes[PORT_LABEL].Value' xmlNode.Attributes[USERNAME_LABEL].Value}; " is 134.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "            String sPath = KSP.IO.IOUtils.GetFilePathFor(typeof(KMPClientMain)' CLIENT_CONFIG_FILENAME); // Get the path to the config file " is 127.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "                xmlDoc.LoadXml(String.Format("<?xml version=\"1.0\"?><settings><global {0}=\"\" {1}=\"\" {2}=\"\"/><favourites></favourites></settings>"' USERNAME_LABEL' IP_LABEL' AUTO_RECONNECT_LABEL)); " is 187.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "            xmlDoc.SelectSingleNode("/settings/global/@" + AUTO_RECONNECT_LABEL).Value = autoReconnect.ToString(); // Set the reconnect attribute " is 133.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The length of the statement  "					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now."); " is 143.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The length of the statement  "					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(ReceiveCallback)' state); " is 158.
Long Statement,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendOutgoingMessages,The length of the statement  "					if ((queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isClientSendingData) " is 137.
Complex Conditional,KMP,ChatLine,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,ChatLine,The conditional expression  "line.Length > 3 && (line.First() == '<' || (line.StartsWith("[" + KMPCommon.ADMIN_MARKER + "]") && line.Contains('<')))"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The conditional expression  "isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The conditional expression  "vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The conditional expression  "!isInFlight || syncing || warping || docking"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The conditional expression  "isInFlight && !syncing && !warping && activeVesselOk && !activeVesselIsInBubble && activeVesselIsMine"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The conditional expression  "!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The conditional expression  "vessel != FlightGlobals.ActiveVessel && vessel.loaded && !vessel.name.Contains(" [Past]") && !vessel.name.Contains(" [Future]") && vessel.id.ToString() != SYNC_PLATE_ID"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The conditional expression  "! //Don't keep sending a secondary vessel that will stay destroyed for any other client:  						   ((update.situation == Situation.DESCENDING || update.situation == Situation.FLYING) //If other vessel is flying/descending  						    && enumerator.Current.Value.mainBody.atmosphere //and is near a body with atmo  						    && enumerator.Current.Value.altitude < enumerator.Current.Value.mainBody.maxAtmosphereAltitude //and is in atmo  						    && !newVessel)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The conditional expression  "!forceFullUpdate //not a forced update  			    && !docking //not in the middle of a docking event  			    && (serverVessels_PartCounts.ContainsKey(vessel.id) ?   			    	((isInFlight ? vessel.id != FlightGlobals.ActiveVessel.id : true) || (UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT) //not active vessel' or full protovessel timeout hasn't passed  			    	: false)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The conditional expression  "(vessel.loaded && vessel.GetTotalMass() <= 0.0) || (vessel.vesselType == VesselType.Debris && vessel.situation == Vessel.Situations.SUB_ORBITAL)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The conditional expression  "vessel.orbit != null && vessel.orbit.referenceBody != null  				&& vessel.orbit.referenceBody.atmosphere && vessel.orbit.altitude < vessel.orbit.referenceBody.maxAtmosphereAltitude"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The conditional expression  "detail.activity == Activity.NONE && FlightGlobals.fetch.VesselTarget != null && FlightGlobals.fetch.VesselTarget is ModuleDockingNode  				&& Vector3.Distance(vessel.GetWorldPos3D()' FlightGlobals.fetch.VesselTarget.GetTransform().position) < DOCKING_TARGET_RANGE"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The conditional expression  "proto != null && proto.moduleName == update.name && proto.moduleRef != null && update.getScenarioNode() != null"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleVesselUpdate,The conditional expression  "vessel == null || vessel.gameObj == null || (vessel.vesselRef != null && vessel.vesselRef.id != vessel_update.id)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate && vessel_update.relTime != RelativeTime.FUTURE && !vessel_update.isDockUpdate"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id])))"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true))"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "(vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncOrbit,The conditional expression  "newOrbit.EndUT > 0 && newOrbit.EndUT < tick && newOrbit.EndUT > lastEndUT && newOrbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,The conditional expression  "newOrbit.EndUT > 0 && newOrbit.EndUT < tick && newOrbit.EndUT > lastEndUT && newOrbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The conditional expression  "(protovessel.vesselType != VesselType.Debris && protovessel.vesselType != VesselType.Unknown) && protovessel.situation == Vessel.Situations.SUB_ORBITAL && protovessel.altitude < 25d"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The conditional expression  "serverVessels_RemoteID.ContainsKey(data.vesselID) //"activeTermination" only if this is remote vessel                      && HighLogic.LoadedScene == GameScenes.TRACKSTATION //and at TrackStation                      && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The conditional expression  "serverVessels_RemoteID.ContainsKey(data.id) //Send destroy message to server if  is a remote vessel                          && ((isInFlight && data.id == FlightGlobals.ActiveVessel.id) //and is in-flight/ours OR                          || (HighLogic.LoadedScene == GameScenes.TRACKSTATION //still at trackstation                          && activeTermination //and activeTermination is set                          && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.id) ? serverVessels_IsMine[data.id] : true))))"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The conditional expression  "FlightGlobals.ActiveVessel.orbit.EndUT > 0  						       && FlightGlobals.ActiveVessel.orbit.EndUT < krakensTick  						       && FlightGlobals.ActiveVessel.orbit.EndUT > lastEndUT  						       && FlightGlobals.ActiveVessel.orbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The conditional expression  "KMPClientMain.handshakeCompleted && KMPClientMain.tcpClient != null && !gameRunning && gameStart"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The conditional expression  "show_mass || show_fuel || show_rcs || show_crew"  is complex.
Complex Conditional,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The conditional expression  "name_pressed  				&& HighLogic.LoadedSceneHasPlanetarium && planetariumCam != null  					&& status.info != null  					&& status.info.bodyName.Length > 0"  is complex.
Complex Conditional,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The conditional expression  "!situationIsGrounded(info.situation)  					&& ((localPosition.x == 0.0f && localPosition.y == 0.0f && localPosition.z == 0.0f)  						|| (localVelocity.x == 0.0f && localVelocity.y == 0.0f && localVelocity.z == 0.0f)  						|| localPosition.magnitude > mainBody.sphereOfInfluence)"  is complex.
Complex Conditional,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The conditional expression  "data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username"  is complex.
Complex Conditional,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The conditional expression  "command == "width" || command == "height" || command == "top" || command == "left""  is complex.
Complex Conditional,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendOutgoingMessages,The conditional expression  "(queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isClientSendingData"  is complex.
Empty Catch Block,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has an empty catch block.
Empty Catch Block,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has an empty catch block.
Empty Catch Block,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,sendVesselMessage,The method has an empty catch block.
Magic Number,KMP,KMPChatDX,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,enqueueChatLine,The following statement contains a magic number: choppedLine.Length + word.Length > chatboxWidth / 7
Magic Number,KMP,KMPChatDX,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,setStyle,The following statement contains a magic number: chatStyle.padding.left = 5;
Magic Number,KMP,ChatLine,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,ChatLine,The following statement contains a magic number: line.Length > 3 && (line.First() == '<' || (line.StartsWith("[" + KMPCommon.ADMIN_MARKER + "]") && line.Contains('<')))
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: clone.transform.localPosition = new Vector3(-0.2621014f' -0.1907118f' 1.004246f);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: clone.transform.localPosition = new Vector3(-0.2621014f' -0.1907118f' 1.004246f);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: clone.transform.localPosition = new Vector3(-0.2621014f' -0.1907118f' 1.004246f);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3.transform.position = new Vector3(18' 0' 4);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3.transform.position = new Vector3(18' 0' 4);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3camstart.transform.position = new Vector3(19' 0' 5);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3camstart.transform.position = new Vector3(19' 0' 5);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stages.Count < 3
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Start,The following statement contains a magic number: mainMenu.envLogic.GoToStage(2);
Magic Number,KMP,KMPMenuItem,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,KMPButtonPressed,The following statement contains a magic number: mainMenu.envLogic.GoToStage(2);
Magic Number,KMP,KMPChatDisplay,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDisplay.cs,enqueueChatLine,The following statement contains a magic number: chat_line.color = new Color(0.65f' 1.0f' 1.0f);
Magic Number,KMP,KMPChatDisplay,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDisplay.cs,enqueueChatLine,The following statement contains a magic number: line.Length > 3 && line.First() == '['
Magic Number,KMP,KMPChatDisplay,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPChatDisplay.cs,enqueueChatLine,The following statement contains a magic number: scrollPos.y += 100;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: baseName = baseName.Substring(2);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: ScreenMessages.PostScreenMessage("This vessel is private..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Can't dock - Target vessel is Private"' 4f' ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: setPartOpacity(part' 0.75f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,kickToTrackingStation,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Selected vessel is controlled from past or destroyed!"' 5f'ScreenMessageStyle.UPPER_RIGHT);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The following statement contains a magic number: serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 10f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The following statement contains a magic number: ScreenMessages.PostScreenMessage("You have been disconnected. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The following statement contains a magic number: ScreenMessages.PostScreenMessage(message' 300f'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The following statement contains a magic number: i < 3
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The following statement contains a magic number: enumerator.Current.Value.loaded  							    && (serverVessels_InUse.ContainsKey(enumerator.Current.Value.id) ? serverVessels_InUse[enumerator.Current.Value.id] : false)  							    && FlightGlobals.ActiveVessel.altitude > 10000d
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The following statement contains a magic number: i < 3
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The following statement contains a magic number: update.w_pos[2] = vessel.longitude;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: detail.percentFuel = (byte)Math.Round(kerbal.Fuel / kerbal.FuelCapacity * 100);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: detail.percentFuel = (byte)Math.Round(fuel_amount / fuel_capacity * 100);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: detail.percentRCS = (byte)Math.Round(rcs_amount / rcs_capacity * 100);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: byte[] update_bytes = new byte[1 + 4 + title_bytes.Length + 4 + watch_bytes.Length];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: byte[] update_bytes = new byte[1 + 4 + title_bytes.Length + 4 + watch_bytes.Length];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status.detailText = status_array[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status_array.Length >= 3
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status.currentSubspaceID = Int32.Parse(status_array[3]);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3])
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3])
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status.vesselID = new Guid(status_array[4]);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: status_array.Length >= 5
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,setNewVesselNotInPresent,The following statement contains a magic number: setPartOpacity(part'0.3f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: RenderTexture render_tex = new RenderTexture(w' h' 24);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2)
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2)
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: byte[] bytes = new byte[4 + description.Length + data.Length];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: description.CopyTo(bytes' 4);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: data.CopyTo(bytes' 4 + description.Length);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: Vector3 pos = new Vector3(vessel_update.pos[0]' vessel_update.pos[1]' vessel_update.pos[2]);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: Vector3 dir = new Vector3(vessel_update.dir[0]' vessel_update.dir[1]' vessel_update.dir[2]);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: Vector3 vel = new Vector3(vessel_update.vel[0]' vessel_update.vel[1]' vessel_update.vel[2]);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: float incomingDistance = 2500f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: incomingDistance = 3000f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: float ourDistance = 3000f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: (vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: (vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The following statement contains a magic number: serverVessels_LoadDelay[vessel_id] = UnityEngine.Time.realtimeSinceStartup + 5f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The following statement contains a magic number: Invoke("ClearFlagLock"' 5f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The following statement contains a magic number: (protovessel.vesselType != VesselType.Debris && protovessel.vesselType != VesselType.Unknown) && protovessel.situation == Vessel.Situations.SUB_ORBITAL && protovessel.altitude < 25d
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The following statement contains a magic number: distance > 1000d
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The following statement contains a magic number: serverVessels_LoadDelay[vessel_id] = UnityEngine.Time.realtimeSinceStartup + 5f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The following statement contains a magic number: created_vessel.ctrlState.CopyFrom(update.flightCtrlState.getAsFlightCtrlState(0.75f));
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeIntToStream,The following statement contains a magic number: stream.Write(KMPCommon.intToBytes(val)' 0' 4);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,readIntFromStream,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,readIntFromStream,The following statement contains a magic number: stream.Read(bytes' 0' 4);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,processClientInterop,The following statement contains a magic number: int data_length = KMPCommon.intFromBytes(bytes' 4);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScreenshotTexture,The following statement contains a magic number: KMPScreenshotDisplay.texture = new Texture2D(4' 4' TextureFormat.RGB24' false' true);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScreenshotTexture,The following statement contains a magic number: KMPScreenshotDisplay.texture = new Texture2D(4' 4' TextureFormat.RGB24' false' true);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,enqueuePluginInteropMessage,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Awake,The following statement contains a magic number: InvokeRepeating("updateStep"' 1/30.0f' 1/30.0f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,Awake,The following statement contains a magic number: InvokeRepeating("updateStep"' 1/30.0f' 1/30.0f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnPartCouple,The following statement contains a magic number: Invoke("setMidDocking"' 2f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,setMidDocking,The following statement contains a magic number: Invoke("setFinishDocking"' 2f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The following statement contains a magic number: serverVessels_LoadDelay[data.id] = UnityEngine.Time.realtimeSinceStartup + 10f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFirstFlightReady,The following statement contains a magic number: Invoke("sendInitialSyncRequest"' 0.5f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFirstFlightReady,The following statement contains a magic number: Invoke("handleSyncTimeout"' 300f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFlightReady,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Can't start flight - Vessel has prohibited parts! Sorry!"' 10f' ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,beginFinishSync,The following statement contains a magic number: Invoke("finishSync"' 3f + (vesselUpdatesLoaded.Count / 75f));
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,beginFinishSync,The following statement contains a magic number: Invoke("finishSync"' 3f + (vesselUpdatesLoaded.Count / 75f));
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The following statement contains a magic number: Math.Abs(krakensTick - currentTick) > 2.5d //if badly out of sync  					    && !(FlightGlobals.ActiveVessel.orbit.referenceBody.atmosphere && FlightGlobals.ActiveVessel.orbit.altitude < FlightGlobals.ActiveVessel.orbit.referenceBody.maxAtmosphereAltitude)
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The following statement contains a magic number: isInFlight && Math.Abs(krakensTick - currentTick) > 5d
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: double currentErrorMs = Math.Round (currentError * 1000' 2);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: double currentErrorMs = Math.Round (currentError * 1000' 2);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: Math.Abs (currentError) > 5
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: float timeWarpRate = (float) Math.Pow(2' -currentError);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: timeWarpRate = 1.5f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: timeWarpRate > 1.5f
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: timeWarpRate = 0.5f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: timeWarpRate < 0.5f
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: Math.Abs(currentError) > 0.2
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: Math.Abs(currentError) < 0.05 && isSkewingTime
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: listClientTimeWarp.Count > 300
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long latencySyncTickMs = latencySyncTick / 10000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long serverLagSeconds = tempServerLag / 10000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: tempServerLag -= serverLagSeconds * 10000000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: long serverLagMilliseconds = tempServerLag / 10000;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 serverReceive = BitConverter.ToInt64 (data' 8);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 serverSend = BitConverter.ToInt64 (data' 16);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 clientOffset = ((serverReceive - clientSend) + (serverSend - clientReceive))/2;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset");
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset");
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Invoke("sendInitialSyncRequest"'0.5f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.layoutOptions = new GUILayoutOption[6];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.layoutOptions = new GUILayoutOption[4];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.layoutOptions[2] = GUILayout.MinHeight(KMPChatDX.chatboxHeight);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.layoutOptions[3] = GUILayout.MaxHeight(KMPChatDX.chatboxHeight);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPScreenshotDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPConnectionDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPVesselLockDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.windowPos = GUILayout.Window(                      GUIUtility.GetControlID(999994' FocusType.Passive)'                      KMPChatDX.getWindowPos()'                      chatWindowDX'                      ""'                      KMPChatDX.windowStyle'                      KMPChatDX.layoutOptions                      );
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: GUILayout.Window(  						GUIUtility.GetControlID(999996' FocusType.Passive)'  						KMPConnectionDisplay.windowPos'  						connectionWindow'  						"Connection Settings"'  						KMPConnectionDisplay.layoutOptions  						);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPInfoDisplay.infoWindowPos = GUILayout.Window(  						GUIUtility.GetControlID(999999' FocusType.Passive)'  						KMPInfoDisplay.infoWindowPos'  						infoDisplayWindow'  						KMPInfoDisplay.infoDisplayMinimized ? "KMP" : "KerbalMP v"+KMPCommon.PROGRAM_VERSION+" ("+KMPGlobalSettings.instance.guiToggleKey+")"'  						KMPInfoDisplay.layoutOptions  						);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: GUILayout.Window(  							GUIUtility.GetControlID(999995' FocusType.Passive)'  							KMPVesselLockDisplay.windowPos'  							lockWindow'  							syncing ? "Bailout" : "Lock"'  							KMPVesselLockDisplay.layoutOptions  							);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPScreenshotDisplay.windowPos = GUILayout.Window(  					GUIUtility.GetControlID(999998' FocusType.Passive)'  					KMPScreenshotDisplay.windowPos'  					screenshotWindow'  					"KerbalMP Viewer (" + KMPGlobalSettings.instance.screenshotToggleKey + ")"'  					KMPScreenshotDisplay.layoutOptions  					);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The following statement contains a magic number: lockButtonStyle.fontSize = 10;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Your vessel is now marked Private"'5'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: playerNameStyle.margin = new RectOffset(0' 0' 2' 0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: stateTextStyle.margin = new RectOffset(4' 0' 0' 0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: stateTextStyle.fontSize = 12;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: chatMessagesWaiting > 5
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: numScreenshotsWaiting > 3
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: GameSettings.PHYSICS_FRAME_DT_LIMIT = 0.04f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: i<50
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: name_options[0] = GUILayout.MaxWidth(300);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: field_options[0] = GUILayout.MaxWidth(60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: btn_options[0] = GUILayout.MaxWidth(126);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: GUILayoutOption[] connection_list_options = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: connection_list_options[0] = GUILayout.MinWidth(290);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: connection_list_options[1] = GUILayout.MinHeight(140);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: label_options[0] = GUILayout.MinWidth(75);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: pane_options[0] = GUILayout.MaxWidth(50);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: pane_btn_options[0] = GUILayout.Width(80);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: status_options[0] = GUILayout.MaxWidth(310);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: GUILayoutOption[] screenshot_box_options = new GUILayoutOption[4];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshot_box_options[2] = GUILayout.MinHeight(KMPScreenshotDisplay.screenshotSettings.maxHeight);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshot_box_options[3] = GUILayout.MaxHeight(KMPScreenshotDisplay.screenshotSettings.maxHeight);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshotDescriptionStyle.padding.top = 4;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: user_list_options[0] = GUILayout.MinWidth(150);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindow,The following statement contains a magic number: entry_field_options[0] = GUILayout.MaxWidth(KMPChatDisplay.windowWidth-58);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: GUILayoutOption[] entry_field_options = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: entry_field_options[0] = GUILayout.MaxWidth(KMPChatDX.chatboxWidth - 75);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: entry_field_options[1] = GUILayout.MinWidth(KMPChatDX.chatboxWidth - 75);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: position.x += 2;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: position.y += 2;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: playerNameStyle.normal.textColor = status.color * 0.75f + Color.white * 0.25f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: playerNameStyle.normal.textColor = status.color * 0.75f + Color.white * 0.25f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.margin = new RectOffset(150'10'0'0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.margin = new RectOffset(150'10'0'0);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.fixedHeight = 22f;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The following statement contains a magic number: playerScreenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The following statement contains a magic number: playerScreenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The following statement contains a magic number: playerScreenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,enforceWindowBoundaries,The following statement contains a magic number: const int padding = 20;
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654' -74.5753856554);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654' -74.5753856554);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654'-74.5753856554);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654'-74.5753856554);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,KMPVessel,The following statement contains a magic number: gameObj.layer = 9;
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,KMPVessel,The following statement contains a magic number: line.SetVertexCount(2);
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: int val = 5381;
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: val = ((val << 5) + val) + c;
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The following statement contains a magic number: i < 3
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The following statement contains a magic number: localPosition = new Vector3(1000.0f' 1000.0f' 1000.0f);
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The following statement contains a magic number: localPosition = new Vector3(1000.0f' 1000.0f' 1000.0f);
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The following statement contains a magic number: localPosition = new Vector3(1000.0f' 1000.0f' 1000.0f);
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following statement contains a magic number: float apparent_size = 0.01f;
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following statement contains a magic number: switch (info.state)  			{  				case State.ACTIVE:  					apparent_size = 0.015f;  					pointed = true;  					break;    				case State.INACTIVE:  					apparent_size = 0.01f;  					pointed = true;  					break;    				case State.DEAD:  					apparent_size = 0.01f;  					pointed = false;  					break;    			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following statement contains a magic number: switch (info.state)  			{  				case State.ACTIVE:  					apparent_size = 0.015f;  					pointed = true;  					break;    				case State.INACTIVE:  					apparent_size = 0.01f;  					pointed = true;  					break;    				case State.DEAD:  					apparent_size = 0.01f;  					pointed = false;  					break;    			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following statement contains a magic number: switch (info.state)  			{  				case State.ACTIVE:  					apparent_size = 0.015f;  					pointed = true;  					break;    				case State.INACTIVE:  					apparent_size = 0.01f;  					pointed = true;  					break;    				case State.DEAD:  					apparent_size = 0.01f;  					pointed = false;  					break;    			}
Magic Number,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updateRenderProperties,The following statement contains a magic number: orbitRenderer.driver.orbitColor = color * 0.5f;
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: pos = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: dir = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: vel = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: o_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: s_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: w_pos = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: rot = new float[4];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: pos = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: dir = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: vel = new float[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: o_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: s_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: w_pos = new double[3];
Magic Number,KMP,KMPVesselUpdate,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: rot = new float[4];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The following statement contains a magic number: string[] splitline = new string[2];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Lost connection with server. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: int split_message_length = KMPCommon.intFromBytes (data' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: splitMessageData = new byte[8 + split_message_length];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The following statement contains a magic number: long receiveMaxTimer = stopwatch.ElapsedMilliseconds + 100;
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,processPluginInterop,The following statement contains a magic number: int data_length = KMPCommon.intFromBytes(bytes' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,enqueueClientInteropMessage,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: byte[] bytes = new byte[9 + username_bytes.Length];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: KMPCommon.intToBytes(updateInterval).CopyTo(bytes' 5);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: username_bytes.CopyTo(bytes' 9);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The following statement contains a magic number: xEl.SetAttribute(USERNAME_LABEL' sArr[2]);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The following statement contains a magic number: currentBytesToReceive = BitConverter.ToInt32(currentMessage' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] message_data = new byte[4 + username_bytes.Length + 4 + guid_bytes.Length + version_bytes.Length];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] message_data = new byte[4 + username_bytes.Length + 4 + guid_bytes.Length + version_bytes.Length];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: username_bytes.CopyTo(message_data' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(guid_bytes.Length).CopyTo(message_data' 4 + username_bytes.Length);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: guid_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: guid_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4 + guid_bytes.Length);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4 + guid_bytes.Length);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendPluginUpdate,The following statement contains a magic number: udpConnected && data.Length < 100
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendScenarioUpdate,The following statement contains a magic number: udpConnected && data.Length < 100
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: byte[] bytes = new byte[8 + name_bytes.Length + data.Length];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: name_bytes.CopyTo(bytes' 8);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: data.CopyTo(bytes' 8 + name_bytes.Length);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,syncTimeRewrite,The following statement contains a magic number: byte[] time_sync_rewrite = new byte[8];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendUDPProbeMessage,The following statement contains a magic number: byte[] timeData = new byte[12];
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendUDPProbeMessage,The following statement contains a magic number: BitConverter.GetBytes(gameManager.listClientTimeWarpAverage).CopyTo(timeData' 8);
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: index += 4;
Missing Default,KMP,Log,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\Logger.cs,WriteLog,The following switch statement is missing a default case: switch (level)              {                  case LogLevels.Debug:                  case LogLevels.Activity:                  case LogLevels.Info:                  case LogLevels.Notice:                      if (useDelayedLogging)                      {                          delayedDebugQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.Log(output);                      }                      break;                  case LogLevels.Warning:                      if (useDelayedLogging)                      {                          delayedWarningQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.LogWarning(output);                      }                      break;                  case LogLevels.Error:                      if (useDelayedLogging)                      {                          delayedErrorQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.LogError(output);                      }                      break;              }
Missing Default,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following switch statement is missing a default case: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Missing Default,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following switch statement is missing a default case: switch (status.info.detail.activity)  					{  						case Activity.AEROBRAKING:  							sb.Append("Aerobraking at ");  							situation_determined = true;  							break;    						case Activity.DOCKING:  							if (KMPVessel.situationIsGrounded(status.info.situation))  								sb.Append("Docking on ");  							else  								sb.Append("Docking above ");  							situation_determined = true;  							break;    						case Activity.PARACHUTING:  							sb.Append("Parachuting to ");  							situation_determined = true;  							break;  					}
Missing Default,KMP,KMPManager,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following switch statement is missing a default case: switch (status.info.situation)  						{  							case Situation.DOCKED:  								sb.Append("Docked at ");  								break;    							case Situation.ENCOUNTERING:  								sb.Append("Encountering ");  								break;    							case Situation.ESCAPING:  								sb.Append("Escaping ");  								break;    							case Situation.FLYING:  								sb.Append("Flying at ");  								break;    							case Situation.LANDED:  								sb.Append("Landed at ");  								break;    							case Situation.ORBITING:  								sb.Append("Orbiting ");  								break;    							case Situation.PRELAUNCH:  								sb.Append("Prelaunch at ");  								break;    							case Situation.SPLASHED:  								sb.Append("Splashed at ");  								break;    							case Situation.ASCENDING:  								sb.Append("Ascending from ");  								break;    							case Situation.DESCENDING:  								sb.Append("Descending to ");  								break;  						}
Missing Default,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following switch statement is missing a default case: switch (info.state)  			{  				case State.ACTIVE:  					apparent_size = 0.015f;  					pointed = true;  					break;    				case State.INACTIVE:  					apparent_size = 0.01f;  					pointed = true;  					break;    				case State.DEAD:  					apparent_size = 0.01f;  					pointed = false;  					break;    			}
Missing Default,KMP,KMPVessel,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updateRenderProperties,The following switch statement is missing a default case: switch (info.state)  				{  					case State.ACTIVE:  						color = activeColor;  						break;    					case State.INACTIVE:  						color = activeColor * 0.75f;  						color.a = 1;  						break;    					case State.DEAD:  						color = activeColor * 0.5f;  						break;  				}
Missing Default,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The following switch statement is missing a default case: switch (trimmedLine)                                  {                                      case "partslist":                                      case "required-files":                                      case "optional-files":                                          readmode = trimmedLine;                                          break;                                      case "resource-blacklist": //allow all resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "blacklist";                                          break;                                      case "resource-whitelist": //allow NO resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "whitelist";                                          break;                                  }
Missing Default,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following switch statement is missing a default case: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Missing Default,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following switch statement is missing a default case: switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }
Missing Default,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following switch statement is missing a default case: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Missing Default,KMP,KMPClientMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,getCraftFilename,The following switch statement is missing a default case: switch (craft_type)              {                  case KMPCommon.CraftType.VAB:                      return "saves/" + currentGameTitle + "/Ships/VAB/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                    case KMPCommon.CraftType.SPH:                      return "saves/" + currentGameTitle + "/Ships/SPH/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                                        case KMPCommon.CraftType.SUBASSEMBLY:                      return "saves/" + currentGameTitle + "/Subassemblies/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                                                        }
