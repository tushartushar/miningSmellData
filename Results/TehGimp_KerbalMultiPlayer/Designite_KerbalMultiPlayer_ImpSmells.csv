Implementation smell,Namespace,Class,File,Method,Description
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has 296 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The method has 128 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The method has 204 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The method has 133 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The method has 567 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,The method has 101 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The method has 113 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The method has 111 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The method has 142 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The method has 208 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The method has 198 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The method has 303 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The method has 110 lines of code.
Long Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The method has 173 lines of code.
Long Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The method has 101 lines of code.
Long Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,The method has 168 lines of code.
Long Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The method has 262 lines of code.
Long Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The method has 230 lines of code.
Complex Method,KMP,KMPChatDX,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,enqueueChatLine,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,Cyclomatic complexity of the method is 50
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkVesselPrivacy,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,Cyclomatic complexity of the method is 15
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,Cyclomatic complexity of the method is 18
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,Cyclomatic complexity of the method is 28
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,Cyclomatic complexity of the method is 35
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,Cyclomatic complexity of the method is 15
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,Cyclomatic complexity of the method is 21
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,Cyclomatic complexity of the method is 13
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadGlobalSettings,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,Cyclomatic complexity of the method is 20
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,Cyclomatic complexity of the method is 34
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,Cyclomatic complexity of the method is 22
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,Cyclomatic complexity of the method is 16
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,Cyclomatic complexity of the method is 26
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,Cyclomatic complexity of the method is 17
Complex Method,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,Cyclomatic complexity of the method is 9
Complex Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,Cyclomatic complexity of the method is 13
Complex Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,Cyclomatic complexity of the method is 8
Complex Method,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,Cyclomatic complexity of the method is 8
Long Parameter List,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The method has 5 parameters. Parameters: protovessel' vessel_id' kvessel' update' distance
Long Parameter List,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The method has 11 parameters. Parameters: oldVessel' newWorldPos' newOrbitVel' wasLoaded' wasActive' setTarget' protovessel' vessel_id' kvessel' update' distance
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The length of the parameter timeFromLastSyncSecondsAdjusted is 31.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the parameter playerNameInScreenshotsWaiting is 30.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter MAX_INACTIVE_VESSELS_PER_UPDATE is 31.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter FULL_PROTOVESSEL_UPDATE_TIMEOUT is 31.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter PRIVATE_VESSEL_MIN_TARGET_DISTANCE is 34.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE is 54.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE is 54.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter SMOOTH_RENDEZ_UPDATE_MIN_DELAY is 30.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG is 35.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG is 35.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter RENDEZ_OBT_UPDATE_SCALE_FACTOR is 30.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_LastUpdateDistanceTime is 36.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_RendezvousSmoothPos is 33.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_RendezvousSmoothVel is 33.
Long Identifier,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,,The length of the parameter serverVessels_SkippedRendezvousUpdates is 38.
Long Identifier,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter screenshotSharePlayerNameIndex is 30.
Long Identifier,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the parameter listPlayerNameInScreenshotsWaiting is 34.
Long Identifier,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The length of the parameter joined_message_data_decompressed is 32.
Long Identifier,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,,The length of the parameter CLIENT_DATA_FORCE_WRITE_INTERVAL is 32.
Long Statement,KMP,LoadedFileInfo,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleHash,The length of the statement  "				using (System.IO.Stream hashStream = new System.IO.FileStream(FullPath' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 155.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                                    vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 234.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                                vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronized new universe!"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                            vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + FlightGlobals.Vessels.Count' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 148.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                        vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing to server clock: " + listClientTimeSyncOffset.Count + "/" + SYNC_TIME_VALID_COUNT + " (" + (listClientTimeSyncOffset.Count * 100 / SYNC_TIME_VALID_COUNT) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT); " is 268.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (st.mainCamera.target.vessel != null && (serverVessels_IsMine[st.mainCamera.target.vessel.id] || !serverVessels_IsPrivate[st.mainCamera.target.vessel.id])) " is 158.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "							if (st.mainCamera.target.vessel.mainBody.bodyName == "Kerbin" && (st.mainCamera.target.vessel.situation == Vessel.Situations.LANDED || st.mainCamera.target.vessel.situation == Vessel.Situations.SPLASHED)) " is 204.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                foreach (Vessel vessel in FlightGlobals.Vessels.Where(v => v.vesselType == VesselType.SpaceObject && !serverVessels_RemoteID.ContainsKey(v.id))) " is 144.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						vessel.vesselName = (((serverVessels_InUse.ContainsKey(vessel.id) ? serverVessels_InUse[vessel.id] : false) || ((serverVessels_IsPrivate.ContainsKey(vessel.id) ? serverVessels_IsPrivate[vessel.id]: false) && (serverVessels_IsMine.ContainsKey(vessel.id) ? !serverVessels_IsMine[vessel.id] : false))) ? "* " : "") + baseName; " is 323.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						try { if (!vessel.isEVA) killVessel(vessel); } catch (Exception e) { Log.Debug("Exception thrown in updateStep()' catch 1' Exception: {0}"' e.ToString()); } " is 156.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (InputLockManager.GetControlLock("KMP_Occupied") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Occupied"); " is 128.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "				if (isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)) " is 164.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (InputLockManager.GetControlLock("KMP_Private") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Private"); " is 126.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (distanceToTarget < PRIVATE_VESSEL_MIN_TARGET_DISTANCE && serverVessels_IsPrivate.ContainsKey(vesselTarget.id) && serverVessels_IsMine.ContainsKey(vesselTarget.id)) " is 167.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						if (vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)) vrb.ssuiButton.Unlock(); " is 241.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "                if (HighLogic.CurrentGame.flightState.universalTime < Planetarium.GetUniversalTime()) HighLogic.CurrentGame.flightState.universalTime = Planetarium.GetUniversalTime(); " is 167.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "						entry.vessel.updateRenderProperties(!KMPGlobalSettings.instance.showInactiveShips && entry.vessel.info.state != State.ACTIVE); " is 126.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The length of the statement  "			} catch (Exception ex) { Log.Debug("Exception thrown in updateStep()' catch 4' Exception: {0}"' ex.ToString()); Log.Debug("uS err: " + ex.Message + " " + ex.StackTrace); } " is 171.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,kickToTrackingStation,The length of the statement  "				ScreenMessages.PostScreenMessage("Selected vessel is controlled from past or destroyed!"' 5f'ScreenMessageStyle.UPPER_RIGHT); " is 125.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The length of the statement  "				foreach (Vessel vessel in FlightGlobals.Vessels.FindAll(v => v.loaded && v.id != FlightGlobals.ActiveVessel.id && serverVessels_PartCounts.ContainsKey(v.id) && serverVessels_ProtoVessels.ContainsKey(v.id))) " is 206.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The length of the statement  "							try { if (!part.vessel.isEVA && part.vessel.id != FlightGlobals.ActiveVessel.id) killVessel(part.vessel); } catch (Exception e) { Log.Debug("Exception thrown in checkRemoteVesselIntegrity()' catch 1' Exception: {0}"' e.ToString()); } " is 233.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The length of the statement  "				ScreenMessages.PostScreenMessage("You have been disconnected. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 146.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,disconnect,The length of the statement  "				ScreenMessages.PostScreenMessage("You have been disconnected. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 146.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The length of the statement  "                activeVesselIsInBubble = isInSafetyBubble(FlightGlobals.ship_position' FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.altitude); " is 145.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The length of the statement  "                activeVesselIsMine = (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true); " is 148.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "                activeVesselIsInBubble = isInSafetyBubble(FlightGlobals.ship_position' FlightGlobals.ActiveVessel.mainBody' FlightGlobals.ActiveVessel.altitude); " is 145.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "            if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate) " is 173.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <")); " is 143.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown"; " is 122.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update)); " is 126.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); } " is 151.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The length of the statement  "                                if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true) " is 129.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "					if (vessel != FlightGlobals.ActiveVessel && vessel.loaded && !vessel.name.Contains(" [Past]") && !vessel.name.Contains(" [Future]") && vessel.id.ToString() != SYNC_PLATE_ID) " is 173.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "						   ((update.situation == Situation.DESCENDING || update.situation == Situation.FLYING) //If other vessel is flying/descending " is 122.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "							    && (serverVessels_InUse.ContainsKey(enumerator.Current.Value.id) ? serverVessels_InUse[enumerator.Current.Value.id] : false) " is 124.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "							    //&& (serverVessels_LoadDelay.ContainsKey(enumerator.Current.Value.id) ? (serverVessels_LoadDelay[enumerator.Current.Value.id] < UnityEngine.Time.realtimeSinceStartup) : true) " is 175.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									Log.Debug ("sending docking-mode update' distance: " + enumerator.Current.Key + " id: " + FlightGlobals.ActiveVessel.id); " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.findWorldCenterOfMass() - FlightGlobals.ship_CoM); " is 155.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The length of the statement  "									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity()); " is 178.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,sendVesselMessage,The length of the statement  "                        update.state = isInFlight ? (FlightGlobals.ActiveVessel.id == vessel.id ? State.ACTIVE : State.INACTIVE) : State.INACTIVE; " is 122.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "            //Log.Debug("TimeDelta: " + ((UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT)); " is 133.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "			    	((isInFlight ? vessel.id != FlightGlobals.ActiveVessel.id : true) || (UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT) //not active vessel' or full protovessel timeout hasn't passed " is 234.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "				if ((serverVessels_PartCounts.ContainsKey(vessel.id) ? serverVessels_PartCounts[vessel.id] == vessel.Parts.Count : false) //Part count is the same " is 146.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "					&& (sentVessels_Situations.ContainsKey(vessel.id) ? (sentVessels_Situations[vessel.id] == vessel.situation) : false)) //Situation hasn't changed " is 144.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "					else if ((UnityEngine.Time.realtimeSinceStartup - newFlags[vessel.id]) < 65f) //Is a flag' but plaque timeout hasn't expired " is 124.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The length of the statement  "			if ((vessel.loaded && vessel.GetTotalMass() <= 0.0) || (vessel.vesselType == VesselType.Debris && vessel.situation == Vessel.Situations.SUB_ORBITAL)) " is 149.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "						if (vessel.situation == Vessel.Situations.ESCAPING || (float)vessel.orbit.ApA > vessel.orbit.referenceBody.maxAtmosphereAltitude) " is 129.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "			if (detail.activity == Activity.NONE && FlightGlobals.fetch.VesselTarget != null && FlightGlobals.fetch.VesselTarget is ModuleDockingNode " is 137.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The length of the statement  "				&& Vector3.Distance(vessel.GetWorldPos3D()' FlightGlobals.fetch.VesselTarget.GetTransform().position) < DOCKING_TARGET_RANGE) " is 125.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,returnToSpaceCenter,The length of the statement  "            if (FlightGlobals.ClearToSave() == ClearToSaveStatus.CLEAR || !isInFlight || (FlightGlobals.ActiveVessel != null ? FlightGlobals.ActiveVessel.state == Vessel.State.DEAD : true)) " is 177.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "			Log.Debug("Game status=" + g.Status + " modes=" + g.Mode + " IsResumable=" + g.IsResumable() + " startScene=" + g.startScene+" NumScenarios="+g.scenarios.Count); " is 161.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "						Log.Debug("g.scenarios[" + i + "].moduleName=" + g.scenarios[i].moduleName + "' and moduleRef=" + (g.scenarios[i].moduleRef != null ? g.scenarios[i].moduleRef.ClassName : "null")); " is 180.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "								//This was happening later on when there were four "scenarios" and the ones with null moduleRefs had somehow been replaced by actual moduleRefs. " is 144.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "								Log.Error("More than one ResearchAndDevelopment scenario module in the game! Science was already " + science + "' now we've found another which says it is " + rd.Science + "!"); " is 177.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,LogScience,The length of the statement  "							Log.Error("ProtoScenarioModule claims to be a ResearchAndDevelopment but contains no such thing! moduleRef is " + (proto.moduleRef != null ? proto.moduleRef.ClassName : "null")); " is 178.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The length of the statement  "                    } catch (Exception e) { KMPClientMain.sendConnectionEndMessage("Error in handling scenario data. Please restart your client. "); Log.Debug(e.ToString());  } " is 156.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The length of the statement  "                //var proto = HighLogic.CurrentGame.AddProtoScenarioModule(newScenario.GetType()' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 150.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "            if (!vesselUpdatesLoaded.Contains(vessel_update.id)) //This can be moved elsewhere in addRemoteVessel (or applyVesselUpdate) to help track issues with loading a specific vessel " is 176.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			Log.Debug("vessel state: " + vessel_update.state.ToString() + "' tick=" + vessel_update.tick + "' realTick=" + Planetarium.GetUniversalTime()); " is 143.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			if (vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate && vessel_update.relTime != RelativeTime.FUTURE && !vessel_update.isDockUpdate) " is 154.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				serverVessels_InUse[vessel_update.id] = vessel_update.state == State.ACTIVE && !vessel_update.isMine && !vessel_update.isSyncOnlyUpdate; " is 136.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				Log.Debug("status flags updated: " + (vessel_update.state == State.ACTIVE) + " " + vessel_update.isSyncOnlyUpdate + " " + vessel_update.isPrivate + " " + vessel_update.isMine); " is 176.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				if (vessel_update.situation == Situation.DESTROYED && (isInFlight ? vessel_update.id != FlightGlobals.ActiveVessel.id : true)) " is 126.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						try { killVessel(extant_vessel); } catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 1' Exception: {0}"' e.ToString()); } " is 151.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "			if (vessel_update.getProtoVesselNode() != null) serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode(); " is 130.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id])))) " is 245.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "//						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true) " is 159.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by " is 128.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true))) " is 264.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f); " is 153.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "    												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position); " is 129.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count; " is 200.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count; " is 149.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch) " is 184.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f) " is 224.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f; " is 129.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup; " is 164.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id)) " is 159.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection); " is 229.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f) " is 170.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED)) " is 123.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d); " is 131.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f); " is 159.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1 " is 122.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f); " is 159.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false )) " is 200.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity; " is 131.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG) " is 126.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false) " is 167.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection); " is 229.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag) " is 124.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); } " is 185.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer"); " is 120.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER); " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true) " is 151.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition); " is 148.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity()); " is 164.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass(); " is 120.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2])); " is 157.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])); " is 157.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0; " is 130.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case " is 249.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false); " is 358.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck) " is 193.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false) " is 338.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id)) " is 149.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id)) " is 124.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude); " is 127.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The length of the statement  "						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d)); " is 229.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkOrbitForCollision,The length of the statement  "			//else Log.Debug("Orbit does not collide with body: {0} {1} {2} {3} {4}"'orbit.PeA'body.maxAtmosphereAltitude'orbit.timeToPe'tick'fromTick); " is 140.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			if (vessel_id == FlightGlobals.ActiveVessel.id && (serverVessels_InUse.ContainsKey(vessel_id) ? !serverVessels_InUse.ContainsKey(vessel_id) : false)) return; " is 157.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			if (serverVessels_LoadDelay.ContainsKey(vessel_id) ? serverVessels_LoadDelay[vessel_id] >= UnityEngine.Time.realtimeSinceStartup : false) return; " is 145.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "			Log.Debug("addRemoteVessel: " + vessel_id.ToString() + "' name: " + protovessel.vesselName.ToString() + "' type: " + protovessel.vesselType.ToString()); " is 152.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "							try { if (part.vessel != null && part.vessel.id != oldVessel.id) killVessel(part.vessel); } catch (Exception e) {  Log.Debug("Exception thrown in addRemoteVessel()' catch 1' Exception: {0}"' e.ToString()); } " is 207.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "				if ((protovessel.vesselType != VesselType.Debris && protovessel.vesselType != VesselType.Unknown) && protovessel.situation == Vessel.Situations.SUB_ORBITAL && protovessel.altitude < 25d) " is 186.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The length of the statement  "					StartCoroutine(loadProtovessel(oldVessel' newWorldPos' newOrbitVel' wasLoaded' wasActive' setTarget' protovessel' vessel_id' kvessel' update' distance)); " is 153.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "            Log.Debug("Loading protovessel: {0}"' vessel_id.ToString() + "' name: " + protovessel.vesselName + "' type: " + protovessel.vesselType); " is 136.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "                Log.Debug(created_vessel.id.ToString() + " initializing: ProtoParts=" + protovessel.protoPartSnapshots.Count + "'Parts=" + created_vessel.Parts.Count + "'Sit=" + created_vessel.situation.ToString() + "'type=" + created_vessel.vesselType + "'alt=" + protovessel.altitude); " is 271.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,loadProtovessel,The length of the statement  "                                created_vessel.ChangeWorldVelocity((-1 * created_vessel.GetObtVelocity()) + (new Vector3(newOrbitVel.x' newOrbitVel.z' newOrbitVel.y))); //xzy? " is 143.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,acceptClientInterop,The length of the statement  "				} catch (Exception e) { Log.Debug("Exception thrown in acceptClientInterop()' catch 1' Exception: {0}"' e.ToString()); } " is 120.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The length of the statement  "			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); } " is 143.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,Awake,The length of the statement  "                List<string> filenames = System.IO.Directory.GetFiles(KSPUtil.ApplicationRootPath + "GameData"' "*.dll"' System.IO.SearchOption.AllDirectories).ToList(); // add files that weren't immediately loaded (e.g. files that plugins use later) " is 234.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselLoaded,The length of the statement  "                //data.distancePackThreshold = Vector3.Distance(data.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position) + 100f; " is 144.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The length of the statement  "                Log.Debug("Vessel termination: " + data.vesselID + " " + serverVessels_RemoteID.ContainsKey(data.vesselID) + " " + (HighLogic.LoadedScene == GameScenes.TRACKSTATION) + " " + (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))); " is 312.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The length of the statement  "                    && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))) //and is debris or owned vessel " is 172.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The length of the statement  "                    //Mark vessel to stay unloaded for a bit' to help prevent any performance impact from vessels that are still in-universe' but that can't load under current conditions " is 166.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The length of the statement  "                        && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.id) ? serverVessels_IsMine[data.id] : true))))) //and target is debris or owned vessel " is 169.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFlightReady,The length of the statement  "                if (!FlightGlobals.ActiveVessel.isEVA && !FlightGlobals.ActiveVessel.protoVessel.protoPartSnapshots.TrueForAll(pps => KMPClientMain.partList.Contains(pps.partName))) " is 165.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnFlightReady,The length of the statement  "                    ScreenMessages.PostScreenMessage("Can't start flight - Vessel has prohibited parts! Sorry!"' 10f' ScreenMessageStyle.UPPER_CENTER); " is 131.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                    var proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ScenarioDiscoverableObjects)' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 162.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                if (HighLogic.CurrentGame.scenarios.Where(psm => psm.moduleName == "ResearchAndDevelopment").Count() < 1 && gameMode == 1) " is 122.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                    var proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ResearchAndDevelopment)' GameScenes.SPACECENTER' GameScenes.EDITOR' GameScenes.FLIGHT' GameScenes.TRACKSTATION' GameScenes.SPH); " is 192.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,finishSync,The length of the statement  "                        proto = HighLogic.CurrentGame.AddProtoScenarioModule(typeof(ProgressTracking)' GameScenes.SPACECENTER' GameScenes.FLIGHT' GameScenes.TRACKSTATION); " is 147.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "							if (FlightGlobals.ActiveVessel.orbit.referenceBody == null) FlightGlobals.ActiveVessel.orbit.referenceBody = FlightGlobals.Bodies.Find(b => b.name == "Sun"); " is 157.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "					    && !(FlightGlobals.ActiveVessel.orbit.referenceBody.atmosphere && FlightGlobals.ActiveVessel.orbit.altitude < FlightGlobals.ActiveVessel.orbit.referenceBody.maxAtmosphereAltitude)) //and not in atmo " is 198.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "						foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && (v.id != FlightGlobals.ActiveVessel.id) && (v.loaded && Vector3d.Distance(FlightGlobals.ship_position'v.GetWorldPos3D()) < INACTIVE_VESSEL_RANGE))) " is 232.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The length of the statement  "						FlightGlobals.ActiveVessel.ChangeWorldVelocity((-1 * oldObtVel) + FlightGlobals.ActiveVessel.orbitDriver.orbit.getOrbitalVelocityAtUT(krakensTick).xzy); " is 152.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The length of the statement  "				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds. " is 180.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The length of the statement  "				Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset"); " is 151.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The length of the statement  "                    //if (KMPGlobalSettings.instance.chatDXWindowEnabled) KMPChatDX.enqueueChatLine("Press Chat key (" + (KMPGlobalSettings.instance.chatTalkKey == KeyCode.BackQuote ? "~" : KMPGlobalSettings.instance.chatTalkKey.ToString()) + ") to send a message"); " is 246.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,Update,The length of the statement  "			} catch (Exception ex) { Log.Debug("Exception thrown in Update()' catch 2' Exception: {0}"' ex.ToString()); Log.Debug ("u err: " + ex.Message + " " + ex.StackTrace); } " is 167.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The length of the statement  "						KMPInfoDisplay.infoDisplayMinimized ? "KMP" : "KerbalMP v"+KMPCommon.PROGRAM_VERSION+" ("+KMPGlobalSettings.instance.guiToggleKey+")"' " is 134.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The length of the statement  "					if (!serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) || !serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)) " is 140.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The length of the statement  "					if (!wasLocked && (serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id) ? !serverVessels_InUse[FlightGlobals.ActiveVessel.id] : true)) " is 144.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The length of the statement  "				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle); " is 184.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The length of the statement  "				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle); " is 176.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//This is done because scenarios is not cleared properly even when a new game is started' and it was causing bugs in KMP. " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//Instead of clearing scenarios' KSP appears to set the moduleRefs of each module to null' which is what was causing KMP bugs #578'  " is 131.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					//and could be the cause of #579 (but closing KSP after disconnecting from a server' before connecting again' prevented it from happening'  " is 138.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "					KMPChatDX.enqueueChatLine("Press Chat key (" + (KMPGlobalSettings.instance.chatTalkKey == KeyCode.BackQuote ? "~" : KMPGlobalSettings.instance.chatTalkKey.ToString()) + ") to send a message"); " is 192.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "                        KMPClientMain.SetFavorites(favorites); // I would love to have this as a seperate object in the manager' no more getting and setting.  " is 133.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The length of the statement  "                    if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar)) " is 125.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindow,The length of the statement  "			KMPGlobalSettings.instance.chatWindowWide = GUILayout.Toggle(KMPGlobalSettings.instance.chatWindowWide' "Wide"' GUI.skin.button); " is 129.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The length of the statement  "                    if (InputLockManager.GetControlLock("KMP_ChatActive") == (ControlTypes.All)) InputLockManager.RemoveControlLock("KMP_ChatActive"); " is 130.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The length of the statement  "			if (showSync && FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f && !isObserving) syncRequest |= GUILayout.Button("Sync"'syncButtonStyle); " is 145.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWatchButton,The length of the statement  "			bool player_selected = GUILayout.Toggle(KMPScreenshotDisplay.watchPlayerName == name' name' playerScreenshotButtonStyle); " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The length of the statement  "            //Cylindrical safety bubble -- project vessel position to a plane positioned at KSC with normal pointed away from surface " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The length of the statement  "            return Vector3d.Distance(kscPosition' projectedPos) < safetyBubbleRadius || runwayDistance < MIN_SAFETY_BUBBLE_DISTANCE || landingPadDistance < MIN_SAFETY_BUBBLE_DISTANCE; " is 171.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isProtoVesselInSafetyBubble,The length of the statement  "            Vector3d protoVesselPosition = kerbinBody.GetWorldSurfacePosition(protovessel.latitude' protovessel.longitude' protovessel.altitude); " is 133.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The length of the statement  "			//Cylindrical safety bubble -- project vessel position to a plane positioned at KSC with normal pointed away from surface " is 121.
Long Statement,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,CheckEditorLock,The length of the statement  "				bool should_lock = (KMPInfoDisplay.infoWindowPos.Contains(mousePos)	|| (KMPScreenshotDisplay.windowEnabled && KMPScreenshotDisplay.windowPos.Contains(mousePos))); " is 162.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,InitMPClient,The length of the statement  "            else if (Environment.GetCommandLineArgs().Count(s => s.Contains("-kmpLogLevel:")) == 1)//if a -kmpLogLevel:[loglevel] is in the arguments " is 137.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                        if (KMPManager.LoadedModfiles.Where(x => x.ModPath == entry.Key && x.SHA256 == entry.Value.sha.ToUpperInvariant()).Count() == 0 && entry.Value.sha != "") " is 153.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            modMismatchError = "SHA Checksum Mismatch: " + entry.Key + " " + debugTest.SHA256 + "/" + entry.Value.sha.ToUpperInvariant(); " is 125.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                                using (System.IO.Stream hashStream = new System.IO.FileStream(fileToCheck' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 158.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            if (KMPManager.LoadedModfiles.Where(x => x.ModPath == entry.Key && x.SHA256 == entry.Value.sha.ToUpperInvariant()) == null && entry.Value.sha != "") " is 148.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,FileCheck,The length of the statement  "                            using (System.IO.Stream hashStream = new System.IO.FileStream(fileToCheck' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite)) " is 158.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,resourceCheck,The length of the statement  "                        if (!resourceList.Contains(file.ModPath) && !modFileList.ContainsKey(file.ModPath) && !allowList.Contains(file.ModPath)) // check if the resource is a) whitelisted' or b) listed in the optional or required SHA sections. If not' the file is not allowed to be loaded. " is 265.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,modCheck,The length of the statement  "				string modFilePath = System.IO.Path.Combine(GAMEDATAPATH' "KMP/Plugins/PluginData/KerbalMultiPlayer/" + MOD_CONTROL_FILENAME); " is 126.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,connectionLoop,The length of the statement  "                        ScreenMessages.PostScreenMessage("Lost connection with server. Please return to the Main Menu to reconnect."'300f'ScreenMessageStyle.UPPER_CENTER); " is 147.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the statement  "            //LogAndShare("Message ID: " + id.ToString() + " data: " + (data == null ? "0" : System.Text.Encoding.ASCII.GetString(data))); " is 126.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The length of the statement  "						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x."); " is 176.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                            sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US"))); " is 121.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled")); " is 129.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                        enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY)); " is 166.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The length of the statement  "                                        enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number."); " is 124.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The length of the statement  "                    if (stopwatch.ElapsedMilliseconds - lastTCPMessageSendTime >= KEEPALIVE_DELAY && stopwatch.ElapsedMilliseconds - lastKeepAliveSendTime >= KEEPALIVE_DELAY) { " is 156.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The length of the statement  "                Log.Debug("Exception thrown in handleConnection()' catch 2' last message type: " + handlingMessageType.ToString() +"' Exception: {0}"' e.ToString()); " is 149.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildNewXML,The length of the statement  "            return String.Format("<?xml version=\"1.0\"?><settings><global {0}=\"\" {1}=\"\" {2}=\"\"/><favourites></favourites></settings>"' USERNAME_LABEL' IP_LABEL' AUTO_RECONNECT_LABEL); " is 178.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,readConfigFile,The length of the statement  "                    sPath = KSP.IO.IOUtils.GetFilePathFor(typeof(KMPClientMain)' CLIENT_CONFIG_FILENAME);  // Get the Client config file path " is 121.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,readConfigFile,The length of the statement  "						String[] sArr = {xmlNode.Attributes[IP_LABEL].Value'  xmlNode.Attributes[PORT_LABEL].Value' xmlNode.Attributes[USERNAME_LABEL].Value}; " is 134.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "            String sPath = KSP.IO.IOUtils.GetFilePathFor(typeof(KMPClientMain)' CLIENT_CONFIG_FILENAME); // Get the path to the config file " is 127.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "                xmlDoc.LoadXml(String.Format("<?xml version=\"1.0\"?><settings><global {0}=\"\" {1}=\"\" {2}=\"\"/><favourites></favourites></settings>"' USERNAME_LABEL' IP_LABEL' AUTO_RECONNECT_LABEL)); " is 187.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The length of the statement  "            xmlDoc.SelectSingleNode("/settings/global/@" + AUTO_RECONNECT_LABEL).Value = autoReconnect.ToString(); // Set the reconnect attribute " is 133.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The length of the statement  "					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now."); " is 143.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The length of the statement  "					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(ReceiveCallback)' state); " is 158.
Long Statement,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendOutgoingMessages,The length of the statement  "					if ((queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isClientSendingData) " is 137.
Complex Conditional,KMP,ChatLine,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,ChatLine,The conditional expression  "line.Length > 3 && (line.First() == '<' || (line.StartsWith("[" + KMPCommon.ADMIN_MARKER + "]") && line.Contains('<')))"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The conditional expression  "isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The conditional expression  "vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,checkRemoteVesselIntegrity,The conditional expression  "!isInFlight || syncing || warping || docking"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginUpdate,The conditional expression  "isInFlight && !syncing && !warping && activeVesselOk && !activeVesselIsInBubble && activeVesselIsMine"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The conditional expression  "!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The conditional expression  "vessel != FlightGlobals.ActiveVessel && vessel.loaded && !vessel.name.Contains(" [Past]") && !vessel.name.Contains(" [Future]") && vessel.id.ToString() != SYNC_PLATE_ID"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The conditional expression  "! //Don't keep sending a secondary vessel that will stay destroyed for any other client:  						   ((update.situation == Situation.DESCENDING || update.situation == Situation.FLYING) //If other vessel is flying/descending  						    && enumerator.Current.Value.mainBody.atmosphere //and is near a body with atmo  						    && enumerator.Current.Value.altitude < enumerator.Current.Value.mainBody.maxAtmosphereAltitude //and is in atmo  						    && !newVessel)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The conditional expression  "!forceFullUpdate //not a forced update  			    && !docking //not in the middle of a docking event  			    && (serverVessels_PartCounts.ContainsKey(vessel.id) ?   			    	((isInFlight ? vessel.id != FlightGlobals.ActiveVessel.id : true) || (UnityEngine.Time.realtimeSinceStartup - lastFullProtovesselUpdate) < FULL_PROTOVESSEL_UPDATE_TIMEOUT) //not active vessel' or full protovessel timeout hasn't passed  			    	: false)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The conditional expression  "(vessel.loaded && vessel.GetTotalMass() <= 0.0) || (vessel.vesselType == VesselType.Debris && vessel.situation == Vessel.Situations.SUB_ORBITAL)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The conditional expression  "vessel.orbit != null && vessel.orbit.referenceBody != null  				&& vessel.orbit.referenceBody.atmosphere && vessel.orbit.altitude < vessel.orbit.referenceBody.maxAtmosphereAltitude"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The conditional expression  "detail.activity == Activity.NONE && FlightGlobals.fetch.VesselTarget != null && FlightGlobals.fetch.VesselTarget is ModuleDockingNode  				&& Vector3.Distance(vessel.GetWorldPos3D()' FlightGlobals.fetch.VesselTarget.GetTransform().position) < DOCKING_TARGET_RANGE"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScenarioUpdate,The conditional expression  "proto != null && proto.moduleName == update.name && proto.moduleRef != null && update.getScenarioNode() != null"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleVesselUpdate,The conditional expression  "vessel == null || vessel.gameObj == null || (vessel.vesselRef != null && vessel.vesselRef.id != vessel_update.id)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate && vessel_update.relTime != RelativeTime.FUTURE && !vessel_update.isDockUpdate"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id])))"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true))"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "(vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The conditional expression  "extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id)"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncOrbit,The conditional expression  "newOrbit.EndUT > 0 && newOrbit.EndUT < tick && newOrbit.EndUT > lastEndUT && newOrbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,syncExtantVesselOrbit,The conditional expression  "newOrbit.EndUT > 0 && newOrbit.EndUT < tick && newOrbit.EndUT > lastEndUT && newOrbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,addRemoteVessel,The conditional expression  "(protovessel.vesselType != VesselType.Debris && protovessel.vesselType != VesselType.Unknown) && protovessel.situation == Vessel.Situations.SUB_ORBITAL && protovessel.altitude < 25d"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselTerminated,The conditional expression  "serverVessels_RemoteID.ContainsKey(data.vesselID) //"activeTermination" only if this is remote vessel                      && HighLogic.LoadedScene == GameScenes.TRACKSTATION //and at TrackStation                      && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.vesselID) ? serverVessels_IsMine[data.vesselID] : true))"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnVesselDestroy,The conditional expression  "serverVessels_RemoteID.ContainsKey(data.id) //Send destroy message to server if  is a remote vessel                          && ((isInFlight && data.id == FlightGlobals.ActiveVessel.id) //and is in-flight/ours OR                          || (HighLogic.LoadedScene == GameScenes.TRACKSTATION //still at trackstation                          && activeTermination //and activeTermination is set                          && (data.vesselType == VesselType.Debris || (serverVessels_IsMine.ContainsKey(data.id) ? serverVessels_IsMine[data.id] : true))))"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,krakensBaneWarp,The conditional expression  "FlightGlobals.ActiveVessel.orbit.EndUT > 0  						       && FlightGlobals.ActiveVessel.orbit.EndUT < krakensTick  						       && FlightGlobals.ActiveVessel.orbit.EndUT > lastEndUT  						       && FlightGlobals.ActiveVessel.orbit.nextPatch != null"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The conditional expression  "KMPClientMain.handshakeCompleted && KMPClientMain.tcpClient != null && !gameRunning && gameStart"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The conditional expression  "show_mass || show_fuel || show_rcs || show_crew"  is complex.
Complex Conditional,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The conditional expression  "name_pressed  				&& HighLogic.LoadedSceneHasPlanetarium && planetariumCam != null  					&& status.info != null  					&& status.info.bodyName.Length > 0"  is complex.
Complex Conditional,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The conditional expression  "!situationIsGrounded(info.situation)  					&& ((localPosition.x == 0.0f && localPosition.y == 0.0f && localPosition.z == 0.0f)  						|| (localVelocity.x == 0.0f && localVelocity.y == 0.0f && localVelocity.z == 0.0f)  						|| localPosition.magnitude > mainBody.sphereOfInfluence)"  is complex.
Complex Conditional,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The conditional expression  "data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username"  is complex.
Complex Conditional,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The conditional expression  "command == "width" || command == "height" || command == "top" || command == "left""  is complex.
Complex Conditional,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendOutgoingMessages,The conditional expression  "(queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isClientSendingData"  is complex.
Empty Catch Block,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has an empty catch block.
Empty Catch Block,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The method has an empty catch block.
Empty Catch Block,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,sendVesselMessage,The method has an empty catch block.
Magic Number,KMP,KMPChatDX,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,enqueueChatLine,The following statement contains a magic number: foreach (String singleLine in line.Split('\n'))  			{  				string choppedLine = "";  				foreach (String word in singleLine.Split(' '))  				{  					//if (GUI.skin.GetStyle("Box").CalcSize(new GUIContent(choppedLine + word)).x > chatboxWidth)  					if (choppedLine.Length + word.Length > chatboxWidth / 7) //Kludgy but works relatively reliably  					{  			            ChatLine chat_line = new ChatLine(choppedLine.Substring(0'choppedLine.Length-1));  						if (!colorSet)  						{  							lineColor = chat_line.color;  							colorSet = true;  						}  						else  						{  							chat_line.color = lineColor;	  						}  			            chatLineQueue.Enqueue(chat_line);  						choppedLine = word + " ";  					}  					else  					{  						choppedLine += word + " ";  					}  				}  				if (choppedLine.Length > 0)  				{  					ChatLine chat_line = new ChatLine(choppedLine.Substring(0'choppedLine.Length-1));  					if (colorSet)  					{  						chat_line.color = lineColor;  					}  		            chatLineQueue.Enqueue(chat_line);  				}  			}
Magic Number,KMP,KMPChatDX,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,setStyle,The following statement contains a magic number: chatStyle.padding.left = 5;
Magic Number,KMP,ChatLine,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDX.cs,ChatLine,The following statement contains a magic number: if (line.Length > 3 && (line.First() == '<' || (line.StartsWith("[" + KMPCommon.ADMIN_MARKER + "]") && line.Contains('<'))))                  {                      int name_start = line.IndexOf('<');                      int name_end = line.IndexOf('>');                      int name_length = name_end - name_start - 1;                      if (name_length > 0)                      {                          this.name = line.Substring(name_start + 1' name_length);                          this.message = line.Substring(name_end + 1);                            if (this.name == "Server")                              this.color = Color.magenta;                          else if (line.StartsWith("[" + KMPCommon.ADMIN_MARKER + "]"))                          {                              this.color = Color.red;                              this.isAdmin = true;                          }                          else this.color = KMPVessel.generateActiveColor(name) * NAME_COLOR_SATURATION_FACTOR                            + Color.white * (1.0f - NAME_COLOR_SATURATION_FACTOR);                      }                  }
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3.transform.position = new Vector3(18' 0' 4);
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3.transform.position = new Vector3(18' 0' 4);
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3camstart.transform.position = new Vector3(19' 0' 5);
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: stage3camstart.transform.position = new Vector3(19' 0' 5);
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Awake,The following statement contains a magic number: if (stages.Count < 3)              {                  stages.Add(stage);              }
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,Start,The following statement contains a magic number: if (KMPManager.showConnectionWindow)              {                  mainMenu.envLogic.GoToStage(2);              }
Magic Number,KMP,KMPMenuItem,C:\repos\TehGimp_KerbalMultiPlayer\KMPMenuItem.cs,KMPButtonPressed,The following statement contains a magic number: mainMenu.envLogic.GoToStage(2);
Magic Number,KMP,KMPChatDisplay,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDisplay.cs,enqueueChatLine,The following statement contains a magic number: if (line.Length > 3 && line.First() == '[')              {                  int name_length = line.IndexOf(']');                  if (name_length > 0)                  {                      name_length = name_length - 1;                      String name = line.Substring(1' name_length);                      if (name == "Server")                          chat_line.color = new Color(0.65f' 1.0f' 1.0f);                      else chat_line.color = KMPVessel.generateActiveColor(name) * NAME_COLOR_SATURATION_FACTOR                          + Color.white * (1.0f - NAME_COLOR_SATURATION_FACTOR);                  }              }
Magic Number,KMP,KMPChatDisplay,C:\repos\TehGimp_KerbalMultiPlayer\KMPChatDisplay.cs,enqueueChatLine,The following statement contains a magic number: scrollPos.y += 100;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: try  			{  				if (HighLogic.LoadedScene == GameScenes.LOADING || !gameRunning)  					return; //Don't do anything while the game is loading or not in KMP game  				                  //Queue a time sync if needed                   if (isTimeSyncronized && (UnityEngine.Time.realtimeSinceStartup > lastTimeSyncTime + SYNC_TIME_INTERVAL)) {                       SyncTime();                   }                         //Do the Phys-warp NTP time sync dance.                   SkewTime();                                    if (syncing)                  {                      if (vesselLoadedMessage != null)                      {                          vesselLoadedMessage.duration = 0f;                      }                      if (isTimeSyncronized)                      {                          if (!inGameSyncing)                          {                              if (numberOfShips != 0)                              {                                  if (!vesselsLoaded) {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                                  } else {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Universe synchronized!"'1f'ScreenMessageStyle.UPPER_RIGHT);                                  }                              }                              else                              {                                  vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronized new universe!"' 1f' ScreenMessageStyle.UPPER_RIGHT);                              }                          }                          else                          {                              vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + FlightGlobals.Vessels.Count' 1f' ScreenMessageStyle.UPPER_RIGHT);                          }                      }                      else                      {                          vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing to server clock: " + listClientTimeSyncOffset.Count + "/" + SYNC_TIME_VALID_COUNT + " (" + (listClientTimeSyncOffset.Count * 100 / SYNC_TIME_VALID_COUNT) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                      }                  }  				  				if (!isInFlight && HighLogic.LoadedScene == GameScenes.TRACKSTATION)  				{  					try {  						SpaceTracking st = (SpaceTracking) GameObject.FindObjectOfType(typeof(SpaceTracking));  						  						if (st.mainCamera.target.vessel != null && (serverVessels_IsMine[st.mainCamera.target.vessel.id] || !serverVessels_IsPrivate[st.mainCamera.target.vessel.id]))  						{  							//Public/owned vessel  							st.FlyButton.Unlock();  							st.DeleteButton.Unlock();  							if (st.mainCamera.target.vessel.mainBody.bodyName == "Kerbin" && (st.mainCamera.target.vessel.situation == Vessel.Situations.LANDED || st.mainCamera.target.vessel.situation == Vessel.Situations.SPLASHED))  								st.RecoverButton.Unlock();  							else st.RecoverButton.Lock();  						}  						else  						{  							//Private unowned vessel  							st.FlyButton.Lock();  							st.DeleteButton.Lock();  							st.RecoverButton.Lock();  						}  					} catch {}  				}  				  				if (lastWarpRate != TimeWarp.CurrentRate)  				{  					lastWarpRate = TimeWarp.CurrentRate;  					OnTimeWarpRateChanged();	  				}  				  				if (warping) {  					writeUpdates();  					return;  				}                                    foreach (Vessel vessel in FlightGlobals.Vessels.Where(v => v.vesselType == VesselType.SpaceObject && !serverVessels_RemoteID.ContainsKey(v.id)))                  {                      Log.Debug("New space object!");                      sendVesselMessage(vessel' false);                  }  				  				if (EditorPartList.Instance != null && clearEditorPartList)  				{  					clearEditorPartList = false;  					EditorPartList.Instance.Refresh();  				}  				                  while (scenarioUpdateQueue.Count > 0 && vesselsLoaded)                  {                      applyScenarioUpdate(scenarioUpdateQueue.Dequeue());                  }    				if (syncing) lastScenarioUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				else if ((UnityEngine.Time.realtimeSinceStartup-lastScenarioUpdateTime) >= SCENARIO_UPDATE_INTERVAL)  				{  					sendScenarios();  				}  				  				//Update Tracking Station names for unavailable vessels  				if (!isInFlight)  				{  					foreach (Vessel vessel in FlightGlobals.Vessels)  					{  						string baseName = vessel.vesselName;  						if (baseName.StartsWith("* ")) baseName = baseName.Substring(2);  						vessel.vesselName = (((serverVessels_InUse.ContainsKey(vessel.id) ? serverVessels_InUse[vessel.id] : false) || ((serverVessels_IsPrivate.ContainsKey(vessel.id) ? serverVessels_IsPrivate[vessel.id]: false) && (serverVessels_IsMine.ContainsKey(vessel.id) ? !serverVessels_IsMine[vessel.id] : false))) ? "* " : "") + baseName;  					}  				}  				else //Kill Kraken-debris' clean names  				{  					foreach (Vessel vessel in FlightGlobals.Vessels.FindAll(v => v.vesselName.Contains("> Debris")))  					{  						try { if (!vessel.isEVA) killVessel(vessel); } catch (Exception e) { Log.Debug("Exception thrown in updateStep()' catch 1' Exception: {0}"' e.ToString()); }  					}  				}  				  				//Ensure player never touches something under another player's control  				bool controlsLocked = false;  				if (isInFlight && !docking && serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (serverVessels_InUse[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Occupied");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Occupied") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Occupied");  					}  				}  				  				//Ensure player never touches a private vessel they don't own  				if (isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is private..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Private");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Private") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Private");  					}  				}  				if (isInFlight && !docking && FlightGlobals.fetch.VesselTarget != null)  				{  					//Get targeted vessel  					Vessel vesselTarget = null;  					if (FlightGlobals.fetch.VesselTarget is ModuleDockingNode)  					{  						ModuleDockingNode moduleTarget = (ModuleDockingNode) FlightGlobals.fetch.VesselTarget;  						if (moduleTarget.part.vessel != null) vesselTarget = moduleTarget.part.vessel;  					}  					if (FlightGlobals.fetch.VesselTarget is Vessel)  					{  						vesselTarget = (Vessel) FlightGlobals.fetch.VesselTarget;  					}    					if (vesselTarget != null) {    						double distanceToTarget = Vector3d.Distance(vesselTarget.GetWorldPos3D()' FlightGlobals.ship_position);    						//Check if target is private and too close  						if (distanceToTarget < PRIVATE_VESSEL_MIN_TARGET_DISTANCE && serverVessels_IsPrivate.ContainsKey(vesselTarget.id) && serverVessels_IsMine.ContainsKey(vesselTarget.id))  						{  							if (!serverVessels_IsMine[vesselTarget.id] && serverVessels_IsPrivate[vesselTarget.id])  							{  								Log.Debug("Tried to target private vessel");  								ScreenMessages.PostScreenMessage("Can't dock - Target vessel is Private"' 4f' ScreenMessageStyle.UPPER_CENTER);  								FlightGlobals.fetch.SetVesselTarget(null);  							}  						}  					}  				}  				if (isInFlight && !docking && !gameArrr)  				{  					foreach (Vessel possible_target in FlightGlobals.Vessels.ToList())  					{  						checkVesselPrivacy(possible_target);  					}  				}                    //Reset the safety bubble transparency setting so it works when we go back into flight.                  if (!isInFlight)                  {                      safetyTransparency = false;                  }                    //Let's let the user know they are actually inside the bubble.                  if (FlightGlobals.fetch.activeVessel != null)                  {                      Vessel activeVessel = FlightGlobals.fetch.activeVessel;                      if (isInSafetyBubble(activeVessel.GetWorldPos3D()' activeVessel.mainBody' activeVessel.altitude) != safetyTransparency)                      {                          safetyTransparency = !safetyTransparency;                          foreach (Part part in FlightGlobals.fetch.activeVessel.parts)                          {                              if (safetyTransparency)                              {                                  setPartOpacity(part' 0.75f);                              }                              else                              {                                  setPartOpacity(part' 1f);                              }                          }                      }                  }    				writeUpdates();  				  				//Once all updates are processed' update the vesselUpdateQueue with new entries  				vesselUpdateQueue = newVesselUpdateQueue;  				  				//If in flight' check remote vessels' set position variable for docking-mode position updates  				if (isInFlight)  				{  					VesselRecoveryButton vrb = null;  					try { vrb = (VesselRecoveryButton) GameObject.FindObjectOfType(typeof(VesselRecoveryButton)); } catch {}  					if (controlsLocked)  					{  						//Prevent EVA'ing crew or vessel recovery  						lockCrewGUI();  						if (vrb != null) vrb.ssuiButton.Lock();  					}  					else   					{  						//Clear locks  						if (!KMPChatDX.showInput)  						{  							InputLockManager.RemoveControlLock("KMP_ChatActive");  						}  						unlockCrewGUI();  						if (vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)) vrb.ssuiButton.Unlock();  						else if (vrb != null) vrb.ssuiButton.Lock();  					}  					checkRemoteVesselIntegrity();  					activeVesselPosition = FlightGlobals.ship_CoM;  					dockingRelVel.Clear();  				}  				  				//Handle all queued vessel updates  				while (vesselUpdateQueue.Count > 0)  				{  					handleVesselUpdate(vesselUpdateQueue.Dequeue());  				}                        if (HighLogic.CurrentGame.flightState.universalTime < Planetarium.GetUniversalTime()) HighLogic.CurrentGame.flightState.universalTime = Planetarium.GetUniversalTime();                    				processClientInterop();  				  				//Update the displayed player orbit positions  				List<String> delete_list = new List<String>();  	  				foreach (KeyValuePair<String' VesselEntry> pair in vessels) {  	  					VesselEntry entry = pair.Value;  	  					if ((UnityEngine.Time.realtimeSinceStartup-entry.lastUpdateTime) <= VESSEL_TIMEOUT_DELAY  						&& entry.vessel != null && entry.vessel.gameObj != null)  					{  						entry.vessel.updateRenderProperties(!KMPGlobalSettings.instance.showInactiveShips && entry.vessel.info.state != State.ACTIVE);  						entry.vessel.updatePosition();  					}  					else  					{  						delete_list.Add(pair.Key); //Mark the vessel for deletion  	  						if (entry.vessel != null && entry.vessel.gameObj != null)  							GameObject.Destroy(entry.vessel.gameObj);  					}  				}  	  				//Delete what needs deletin'  				foreach (String key in delete_list)  					vessels.Remove(key);  	  				delete_list.Clear();  	  				//Delete outdated player status entries  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  				{  					if ((UnityEngine.Time.realtimeSinceStartup - pair.Value.lastUpdateTime) > VESSEL_TIMEOUT_DELAY)  					{  						Log.Debug("deleted player status for timeout: " + pair.Key + " " + pair.Value.vesselName);  						delete_list.Add(pair.Key);  					}  				}  				  				foreach (String key in delete_list)  					playerStatus.Remove(key);    			} catch (Exception ex) { Log.Debug("Exception thrown in updateStep()' catch 4' Exception: {0}"' ex.ToString()); Log.Debug("uS err: " + ex.Message + " " + ex.StackTrace); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: try  			{  				if (HighLogic.LoadedScene == GameScenes.LOADING || !gameRunning)  					return; //Don't do anything while the game is loading or not in KMP game  				                  //Queue a time sync if needed                   if (isTimeSyncronized && (UnityEngine.Time.realtimeSinceStartup > lastTimeSyncTime + SYNC_TIME_INTERVAL)) {                       SyncTime();                   }                         //Do the Phys-warp NTP time sync dance.                   SkewTime();                                    if (syncing)                  {                      if (vesselLoadedMessage != null)                      {                          vesselLoadedMessage.duration = 0f;                      }                      if (isTimeSyncronized)                      {                          if (!inGameSyncing)                          {                              if (numberOfShips != 0)                              {                                  if (!vesselsLoaded) {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                                  } else {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Universe synchronized!"'1f'ScreenMessageStyle.UPPER_RIGHT);                                  }                              }                              else                              {                                  vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronized new universe!"' 1f' ScreenMessageStyle.UPPER_RIGHT);                              }                          }                          else                          {                              vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + FlightGlobals.Vessels.Count' 1f' ScreenMessageStyle.UPPER_RIGHT);                          }                      }                      else                      {                          vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing to server clock: " + listClientTimeSyncOffset.Count + "/" + SYNC_TIME_VALID_COUNT + " (" + (listClientTimeSyncOffset.Count * 100 / SYNC_TIME_VALID_COUNT) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                      }                  }  				  				if (!isInFlight && HighLogic.LoadedScene == GameScenes.TRACKSTATION)  				{  					try {  						SpaceTracking st = (SpaceTracking) GameObject.FindObjectOfType(typeof(SpaceTracking));  						  						if (st.mainCamera.target.vessel != null && (serverVessels_IsMine[st.mainCamera.target.vessel.id] || !serverVessels_IsPrivate[st.mainCamera.target.vessel.id]))  						{  							//Public/owned vessel  							st.FlyButton.Unlock();  							st.DeleteButton.Unlock();  							if (st.mainCamera.target.vessel.mainBody.bodyName == "Kerbin" && (st.mainCamera.target.vessel.situation == Vessel.Situations.LANDED || st.mainCamera.target.vessel.situation == Vessel.Situations.SPLASHED))  								st.RecoverButton.Unlock();  							else st.RecoverButton.Lock();  						}  						else  						{  							//Private unowned vessel  							st.FlyButton.Lock();  							st.DeleteButton.Lock();  							st.RecoverButton.Lock();  						}  					} catch {}  				}  				  				if (lastWarpRate != TimeWarp.CurrentRate)  				{  					lastWarpRate = TimeWarp.CurrentRate;  					OnTimeWarpRateChanged();	  				}  				  				if (warping) {  					writeUpdates();  					return;  				}                                    foreach (Vessel vessel in FlightGlobals.Vessels.Where(v => v.vesselType == VesselType.SpaceObject && !serverVessels_RemoteID.ContainsKey(v.id)))                  {                      Log.Debug("New space object!");                      sendVesselMessage(vessel' false);                  }  				  				if (EditorPartList.Instance != null && clearEditorPartList)  				{  					clearEditorPartList = false;  					EditorPartList.Instance.Refresh();  				}  				                  while (scenarioUpdateQueue.Count > 0 && vesselsLoaded)                  {                      applyScenarioUpdate(scenarioUpdateQueue.Dequeue());                  }    				if (syncing) lastScenarioUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				else if ((UnityEngine.Time.realtimeSinceStartup-lastScenarioUpdateTime) >= SCENARIO_UPDATE_INTERVAL)  				{  					sendScenarios();  				}  				  				//Update Tracking Station names for unavailable vessels  				if (!isInFlight)  				{  					foreach (Vessel vessel in FlightGlobals.Vessels)  					{  						string baseName = vessel.vesselName;  						if (baseName.StartsWith("* ")) baseName = baseName.Substring(2);  						vessel.vesselName = (((serverVessels_InUse.ContainsKey(vessel.id) ? serverVessels_InUse[vessel.id] : false) || ((serverVessels_IsPrivate.ContainsKey(vessel.id) ? serverVessels_IsPrivate[vessel.id]: false) && (serverVessels_IsMine.ContainsKey(vessel.id) ? !serverVessels_IsMine[vessel.id] : false))) ? "* " : "") + baseName;  					}  				}  				else //Kill Kraken-debris' clean names  				{  					foreach (Vessel vessel in FlightGlobals.Vessels.FindAll(v => v.vesselName.Contains("> Debris")))  					{  						try { if (!vessel.isEVA) killVessel(vessel); } catch (Exception e) { Log.Debug("Exception thrown in updateStep()' catch 1' Exception: {0}"' e.ToString()); }  					}  				}  				  				//Ensure player never touches something under another player's control  				bool controlsLocked = false;  				if (isInFlight && !docking && serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (serverVessels_InUse[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Occupied");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Occupied") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Occupied");  					}  				}  				  				//Ensure player never touches a private vessel they don't own  				if (isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is private..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Private");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Private") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Private");  					}  				}  				if (isInFlight && !docking && FlightGlobals.fetch.VesselTarget != null)  				{  					//Get targeted vessel  					Vessel vesselTarget = null;  					if (FlightGlobals.fetch.VesselTarget is ModuleDockingNode)  					{  						ModuleDockingNode moduleTarget = (ModuleDockingNode) FlightGlobals.fetch.VesselTarget;  						if (moduleTarget.part.vessel != null) vesselTarget = moduleTarget.part.vessel;  					}  					if (FlightGlobals.fetch.VesselTarget is Vessel)  					{  						vesselTarget = (Vessel) FlightGlobals.fetch.VesselTarget;  					}    					if (vesselTarget != null) {    						double distanceToTarget = Vector3d.Distance(vesselTarget.GetWorldPos3D()' FlightGlobals.ship_position);    						//Check if target is private and too close  						if (distanceToTarget < PRIVATE_VESSEL_MIN_TARGET_DISTANCE && serverVessels_IsPrivate.ContainsKey(vesselTarget.id) && serverVessels_IsMine.ContainsKey(vesselTarget.id))  						{  							if (!serverVessels_IsMine[vesselTarget.id] && serverVessels_IsPrivate[vesselTarget.id])  							{  								Log.Debug("Tried to target private vessel");  								ScreenMessages.PostScreenMessage("Can't dock - Target vessel is Private"' 4f' ScreenMessageStyle.UPPER_CENTER);  								FlightGlobals.fetch.SetVesselTarget(null);  							}  						}  					}  				}  				if (isInFlight && !docking && !gameArrr)  				{  					foreach (Vessel possible_target in FlightGlobals.Vessels.ToList())  					{  						checkVesselPrivacy(possible_target);  					}  				}                    //Reset the safety bubble transparency setting so it works when we go back into flight.                  if (!isInFlight)                  {                      safetyTransparency = false;                  }                    //Let's let the user know they are actually inside the bubble.                  if (FlightGlobals.fetch.activeVessel != null)                  {                      Vessel activeVessel = FlightGlobals.fetch.activeVessel;                      if (isInSafetyBubble(activeVessel.GetWorldPos3D()' activeVessel.mainBody' activeVessel.altitude) != safetyTransparency)                      {                          safetyTransparency = !safetyTransparency;                          foreach (Part part in FlightGlobals.fetch.activeVessel.parts)                          {                              if (safetyTransparency)                              {                                  setPartOpacity(part' 0.75f);                              }                              else                              {                                  setPartOpacity(part' 1f);                              }                          }                      }                  }    				writeUpdates();  				  				//Once all updates are processed' update the vesselUpdateQueue with new entries  				vesselUpdateQueue = newVesselUpdateQueue;  				  				//If in flight' check remote vessels' set position variable for docking-mode position updates  				if (isInFlight)  				{  					VesselRecoveryButton vrb = null;  					try { vrb = (VesselRecoveryButton) GameObject.FindObjectOfType(typeof(VesselRecoveryButton)); } catch {}  					if (controlsLocked)  					{  						//Prevent EVA'ing crew or vessel recovery  						lockCrewGUI();  						if (vrb != null) vrb.ssuiButton.Lock();  					}  					else   					{  						//Clear locks  						if (!KMPChatDX.showInput)  						{  							InputLockManager.RemoveControlLock("KMP_ChatActive");  						}  						unlockCrewGUI();  						if (vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)) vrb.ssuiButton.Unlock();  						else if (vrb != null) vrb.ssuiButton.Lock();  					}  					checkRemoteVesselIntegrity();  					activeVesselPosition = FlightGlobals.ship_CoM;  					dockingRelVel.Clear();  				}  				  				//Handle all queued vessel updates  				while (vesselUpdateQueue.Count > 0)  				{  					handleVesselUpdate(vesselUpdateQueue.Dequeue());  				}                        if (HighLogic.CurrentGame.flightState.universalTime < Planetarium.GetUniversalTime()) HighLogic.CurrentGame.flightState.universalTime = Planetarium.GetUniversalTime();                    				processClientInterop();  				  				//Update the displayed player orbit positions  				List<String> delete_list = new List<String>();  	  				foreach (KeyValuePair<String' VesselEntry> pair in vessels) {  	  					VesselEntry entry = pair.Value;  	  					if ((UnityEngine.Time.realtimeSinceStartup-entry.lastUpdateTime) <= VESSEL_TIMEOUT_DELAY  						&& entry.vessel != null && entry.vessel.gameObj != null)  					{  						entry.vessel.updateRenderProperties(!KMPGlobalSettings.instance.showInactiveShips && entry.vessel.info.state != State.ACTIVE);  						entry.vessel.updatePosition();  					}  					else  					{  						delete_list.Add(pair.Key); //Mark the vessel for deletion  	  						if (entry.vessel != null && entry.vessel.gameObj != null)  							GameObject.Destroy(entry.vessel.gameObj);  					}  				}  	  				//Delete what needs deletin'  				foreach (String key in delete_list)  					vessels.Remove(key);  	  				delete_list.Clear();  	  				//Delete outdated player status entries  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  				{  					if ((UnityEngine.Time.realtimeSinceStartup - pair.Value.lastUpdateTime) > VESSEL_TIMEOUT_DELAY)  					{  						Log.Debug("deleted player status for timeout: " + pair.Key + " " + pair.Value.vesselName);  						delete_list.Add(pair.Key);  					}  				}  				  				foreach (String key in delete_list)  					playerStatus.Remove(key);    			} catch (Exception ex) { Log.Debug("Exception thrown in updateStep()' catch 4' Exception: {0}"' ex.ToString()); Log.Debug("uS err: " + ex.Message + " " + ex.StackTrace); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,updateStep,The following statement contains a magic number: try  			{  				if (HighLogic.LoadedScene == GameScenes.LOADING || !gameRunning)  					return; //Don't do anything while the game is loading or not in KMP game  				                  //Queue a time sync if needed                   if (isTimeSyncronized && (UnityEngine.Time.realtimeSinceStartup > lastTimeSyncTime + SYNC_TIME_INTERVAL)) {                       SyncTime();                   }                         //Do the Phys-warp NTP time sync dance.                   SkewTime();                                    if (syncing)                  {                      if (vesselLoadedMessage != null)                      {                          vesselLoadedMessage.duration = 0f;                      }                      if (isTimeSyncronized)                      {                          if (!inGameSyncing)                          {                              if (numberOfShips != 0)                              {                                  if (!vesselsLoaded) {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + vesselUpdatesLoaded.Count + "/" + numberOfShips + " (" + (vesselUpdatesLoaded.Count * 100 / numberOfShips) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                                  } else {                                      vesselLoadedMessage = ScreenMessages.PostScreenMessage("Universe synchronized!"'1f'ScreenMessageStyle.UPPER_RIGHT);                                  }                              }                              else                              {                                  vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronized new universe!"' 1f' ScreenMessageStyle.UPPER_RIGHT);                              }                          }                          else                          {                              vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing vessels: " + FlightGlobals.Vessels.Count' 1f' ScreenMessageStyle.UPPER_RIGHT);                          }                      }                      else                      {                          vesselLoadedMessage = ScreenMessages.PostScreenMessage("Synchronizing to server clock: " + listClientTimeSyncOffset.Count + "/" + SYNC_TIME_VALID_COUNT + " (" + (listClientTimeSyncOffset.Count * 100 / SYNC_TIME_VALID_COUNT) + "%)"' 1f' ScreenMessageStyle.UPPER_RIGHT);                      }                  }  				  				if (!isInFlight && HighLogic.LoadedScene == GameScenes.TRACKSTATION)  				{  					try {  						SpaceTracking st = (SpaceTracking) GameObject.FindObjectOfType(typeof(SpaceTracking));  						  						if (st.mainCamera.target.vessel != null && (serverVessels_IsMine[st.mainCamera.target.vessel.id] || !serverVessels_IsPrivate[st.mainCamera.target.vessel.id]))  						{  							//Public/owned vessel  							st.FlyButton.Unlock();  							st.DeleteButton.Unlock();  							if (st.mainCamera.target.vessel.mainBody.bodyName == "Kerbin" && (st.mainCamera.target.vessel.situation == Vessel.Situations.LANDED || st.mainCamera.target.vessel.situation == Vessel.Situations.SPLASHED))  								st.RecoverButton.Unlock();  							else st.RecoverButton.Lock();  						}  						else  						{  							//Private unowned vessel  							st.FlyButton.Lock();  							st.DeleteButton.Lock();  							st.RecoverButton.Lock();  						}  					} catch {}  				}  				  				if (lastWarpRate != TimeWarp.CurrentRate)  				{  					lastWarpRate = TimeWarp.CurrentRate;  					OnTimeWarpRateChanged();	  				}  				  				if (warping) {  					writeUpdates();  					return;  				}                                    foreach (Vessel vessel in FlightGlobals.Vessels.Where(v => v.vesselType == VesselType.SpaceObject && !serverVessels_RemoteID.ContainsKey(v.id)))                  {                      Log.Debug("New space object!");                      sendVesselMessage(vessel' false);                  }  				  				if (EditorPartList.Instance != null && clearEditorPartList)  				{  					clearEditorPartList = false;  					EditorPartList.Instance.Refresh();  				}  				                  while (scenarioUpdateQueue.Count > 0 && vesselsLoaded)                  {                      applyScenarioUpdate(scenarioUpdateQueue.Dequeue());                  }    				if (syncing) lastScenarioUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				else if ((UnityEngine.Time.realtimeSinceStartup-lastScenarioUpdateTime) >= SCENARIO_UPDATE_INTERVAL)  				{  					sendScenarios();  				}  				  				//Update Tracking Station names for unavailable vessels  				if (!isInFlight)  				{  					foreach (Vessel vessel in FlightGlobals.Vessels)  					{  						string baseName = vessel.vesselName;  						if (baseName.StartsWith("* ")) baseName = baseName.Substring(2);  						vessel.vesselName = (((serverVessels_InUse.ContainsKey(vessel.id) ? serverVessels_InUse[vessel.id] : false) || ((serverVessels_IsPrivate.ContainsKey(vessel.id) ? serverVessels_IsPrivate[vessel.id]: false) && (serverVessels_IsMine.ContainsKey(vessel.id) ? !serverVessels_IsMine[vessel.id] : false))) ? "* " : "") + baseName;  					}  				}  				else //Kill Kraken-debris' clean names  				{  					foreach (Vessel vessel in FlightGlobals.Vessels.FindAll(v => v.vesselName.Contains("> Debris")))  					{  						try { if (!vessel.isEVA) killVessel(vessel); } catch (Exception e) { Log.Debug("Exception thrown in updateStep()' catch 1' Exception: {0}"' e.ToString()); }  					}  				}  				  				//Ensure player never touches something under another player's control  				bool controlsLocked = false;  				if (isInFlight && !docking && serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (serverVessels_InUse[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is currently controlled by another player..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Occupied");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Occupied") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Occupied");  					}  				}  				  				//Ensure player never touches a private vessel they don't own  				if (isInFlight && !docking && serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) && serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  				{  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id])  					{  						ScreenMessages.PostScreenMessage("This vessel is private..."' 2.5f'ScreenMessageStyle.UPPER_CENTER);  						InputLockManager.SetControlLock(BLOCK_ALL_CONTROLS'"KMP_Private");  						controlsLocked = true;  					}  					else  					{  						if (InputLockManager.GetControlLock("KMP_Private") == (BLOCK_ALL_CONTROLS)) InputLockManager.RemoveControlLock("KMP_Private");  					}  				}  				if (isInFlight && !docking && FlightGlobals.fetch.VesselTarget != null)  				{  					//Get targeted vessel  					Vessel vesselTarget = null;  					if (FlightGlobals.fetch.VesselTarget is ModuleDockingNode)  					{  						ModuleDockingNode moduleTarget = (ModuleDockingNode) FlightGlobals.fetch.VesselTarget;  						if (moduleTarget.part.vessel != null) vesselTarget = moduleTarget.part.vessel;  					}  					if (FlightGlobals.fetch.VesselTarget is Vessel)  					{  						vesselTarget = (Vessel) FlightGlobals.fetch.VesselTarget;  					}    					if (vesselTarget != null) {    						double distanceToTarget = Vector3d.Distance(vesselTarget.GetWorldPos3D()' FlightGlobals.ship_position);    						//Check if target is private and too close  						if (distanceToTarget < PRIVATE_VESSEL_MIN_TARGET_DISTANCE && serverVessels_IsPrivate.ContainsKey(vesselTarget.id) && serverVessels_IsMine.ContainsKey(vesselTarget.id))  						{  							if (!serverVessels_IsMine[vesselTarget.id] && serverVessels_IsPrivate[vesselTarget.id])  							{  								Log.Debug("Tried to target private vessel");  								ScreenMessages.PostScreenMessage("Can't dock - Target vessel is Private"' 4f' ScreenMessageStyle.UPPER_CENTER);  								FlightGlobals.fetch.SetVesselTarget(null);  							}  						}  					}  				}  				if (isInFlight && !docking && !gameArrr)  				{  					foreach (Vessel possible_target in FlightGlobals.Vessels.ToList())  					{  						checkVesselPrivacy(possible_target);  					}  				}                    //Reset the safety bubble transparency setting so it works when we go back into flight.                  if (!isInFlight)                  {                      safetyTransparency = false;                  }                    //Let's let the user know they are actually inside the bubble.                  if (FlightGlobals.fetch.activeVessel != null)                  {                      Vessel activeVessel = FlightGlobals.fetch.activeVessel;                      if (isInSafetyBubble(activeVessel.GetWorldPos3D()' activeVessel.mainBody' activeVessel.altitude) != safetyTransparency)                      {                          safetyTransparency = !safetyTransparency;                          foreach (Part part in FlightGlobals.fetch.activeVessel.parts)                          {                              if (safetyTransparency)                              {                                  setPartOpacity(part' 0.75f);                              }                              else                              {                                  setPartOpacity(part' 1f);                              }                          }                      }                  }    				writeUpdates();  				  				//Once all updates are processed' update the vesselUpdateQueue with new entries  				vesselUpdateQueue = newVesselUpdateQueue;  				  				//If in flight' check remote vessels' set position variable for docking-mode position updates  				if (isInFlight)  				{  					VesselRecoveryButton vrb = null;  					try { vrb = (VesselRecoveryButton) GameObject.FindObjectOfType(typeof(VesselRecoveryButton)); } catch {}  					if (controlsLocked)  					{  						//Prevent EVA'ing crew or vessel recovery  						lockCrewGUI();  						if (vrb != null) vrb.ssuiButton.Lock();  					}  					else   					{  						//Clear locks  						if (!KMPChatDX.showInput)  						{  							InputLockManager.RemoveControlLock("KMP_ChatActive");  						}  						unlockCrewGUI();  						if (vrb != null && FlightGlobals.ActiveVessel.mainBody.bodyName == "Kerbin" && (FlightGlobals.ActiveVessel.situation == Vessel.Situations.LANDED || FlightGlobals.ActiveVessel.situation == Vessel.Situations.SPLASHED)) vrb.ssuiButton.Unlock();  						else if (vrb != null) vrb.ssuiButton.Lock();  					}  					checkRemoteVesselIntegrity();  					activeVesselPosition = FlightGlobals.ship_CoM;  					dockingRelVel.Clear();  				}  				  				//Handle all queued vessel updates  				while (vesselUpdateQueue.Count > 0)  				{  					handleVesselUpdate(vesselUpdateQueue.Dequeue());  				}                        if (HighLogic.CurrentGame.flightState.universalTime < Planetarium.GetUniversalTime()) HighLogic.CurrentGame.flightState.universalTime = Planetarium.GetUniversalTime();                    				processClientInterop();  				  				//Update the displayed player orbit positions  				List<String> delete_list = new List<String>();  	  				foreach (KeyValuePair<String' VesselEntry> pair in vessels) {  	  					VesselEntry entry = pair.Value;  	  					if ((UnityEngine.Time.realtimeSinceStartup-entry.lastUpdateTime) <= VESSEL_TIMEOUT_DELAY  						&& entry.vessel != null && entry.vessel.gameObj != null)  					{  						entry.vessel.updateRenderProperties(!KMPGlobalSettings.instance.showInactiveShips && entry.vessel.info.state != State.ACTIVE);  						entry.vessel.updatePosition();  					}  					else  					{  						delete_list.Add(pair.Key); //Mark the vessel for deletion  	  						if (entry.vessel != null && entry.vessel.gameObj != null)  							GameObject.Destroy(entry.vessel.gameObj);  					}  				}  	  				//Delete what needs deletin'  				foreach (String key in delete_list)  					vessels.Remove(key);  	  				delete_list.Clear();  	  				//Delete outdated player status entries  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  				{  					if ((UnityEngine.Time.realtimeSinceStartup - pair.Value.lastUpdateTime) > VESSEL_TIMEOUT_DELAY)  					{  						Log.Debug("deleted player status for timeout: " + pair.Key + " " + pair.Value.vesselName);  						delete_list.Add(pair.Key);  					}  				}  				  				foreach (String key in delete_list)  					playerStatus.Remove(key);    			} catch (Exception ex) { Log.Debug("Exception thrown in updateStep()' catch 4' Exception: {0}"' ex.ToString()); Log.Debug("uS err: " + ex.Message + " " + ex.StackTrace); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The following statement contains a magic number: if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate)  			{  				lastTick = Planetarium.GetUniversalTime();  				//Write vessel status  				KMPVesselUpdate update = getVesselUpdate(FlightGlobals.ActiveVessel);   				if (FlightGlobals.ActiveVessel.vesselType == VesselType.EVA) lastEVAVessel = FlightGlobals.ActiveVessel;  				  				//Update the player vessel info  				VesselStatusInfo my_status = new VesselStatusInfo();  				my_status.info = update;  				my_status.orbit = FlightGlobals.ActiveVessel.orbit;  				my_status.color = KMPVessel.generateActiveColor(playerName);  				my_status.ownerName = playerName;  				if (FlightGlobals.ActiveVessel.vesselName.Contains(" <") && FlightGlobals.ActiveVessel.vesselName.Contains(">"))  					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <"));  				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown";  				my_status.vesselName = FlightGlobals.ActiveVessel.vesselName;  				my_status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;    				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  				  				Log.Debug("sending primary update");  				try{  					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update));  				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); }  			}  			else  			{  				lastTick = 0d;  				//Check if the player is building a ship  				bool building_ship = HighLogic.LoadedSceneIsEditor  					&& EditorLogic.fetch != null  					&& EditorLogic.fetch.ship != null && EditorLogic.fetch.ship.Count > 0  					&& EditorLogic.fetch.shipNameField != null  					&& EditorLogic.fetch.shipNameField.Text != null && EditorLogic.fetch.shipNameField.Text.Length > 0;    				String[] status_array = null;  				  				if (building_ship)  				{  					status_array = new String[3];  					//Vessel name  					String shipname = EditorLogic.fetch.shipNameField.Text;    					if (shipname.Length > MAX_VESSEL_NAME_LENGTH)  						shipname = shipname.Substring(0' MAX_VESSEL_NAME_LENGTH); //Limit vessel name length    					status_array[1] = "Building " + shipname;    					//Vessel details  					status_array[2] = "Parts: " + EditorLogic.fetch.ship.Count;  				}  				else if (warping)  				{  					status_array = new String[2];  					status_array[1] = "Warping";  				}  				else if (syncing)  				{  					status_array = new String[2];  					status_array[1] = "Synchronizing";  				}  				else  				{  					status_array = new String[2];    					switch (HighLogic.LoadedScene)  					{                          case GameScenes.FLIGHT:                              if (FlightGlobals.ActiveVessel != null)                              {                                  if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true)                                  {                                      status_array[1] = "Preparing/launching from KSC";                                  }                                  else                                  {                                      status_array[1] = "Spectating " + FlightGlobals.ActiveVessel.vesselName;                                  }                              }                              else                              {                                  status_array[1] = "Preparing/launching from KSC";                              }  							break;  						case GameScenes.SPACECENTER:  							status_array[1] = "At Space Center";  							break;  						case GameScenes.EDITOR:  							status_array[1] = "In Vehicle Assembly Building";  							break;  						case GameScenes.SPH:  							status_array[1] = "In Space Plane Hangar";  							break;  						case GameScenes.TRACKSTATION:  							status_array[1] = "At Tracking Station";  							break;  						default:  							status_array[1] = String.Empty;  							break;  					}  				}    				//Check if player is idle  				if (isIdle)  					status_array[1] = "(Idle) " + status_array[1];    				status_array[0] = playerName;    				//Serialize the update  				byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(status_array);  				  				enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);    				VesselStatusInfo my_status = statusArrayToInfo(status_array);  				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The following statement contains a magic number: if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate)  			{  				lastTick = Planetarium.GetUniversalTime();  				//Write vessel status  				KMPVesselUpdate update = getVesselUpdate(FlightGlobals.ActiveVessel);   				if (FlightGlobals.ActiveVessel.vesselType == VesselType.EVA) lastEVAVessel = FlightGlobals.ActiveVessel;  				  				//Update the player vessel info  				VesselStatusInfo my_status = new VesselStatusInfo();  				my_status.info = update;  				my_status.orbit = FlightGlobals.ActiveVessel.orbit;  				my_status.color = KMPVessel.generateActiveColor(playerName);  				my_status.ownerName = playerName;  				if (FlightGlobals.ActiveVessel.vesselName.Contains(" <") && FlightGlobals.ActiveVessel.vesselName.Contains(">"))  					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <"));  				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown";  				my_status.vesselName = FlightGlobals.ActiveVessel.vesselName;  				my_status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;    				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  				  				Log.Debug("sending primary update");  				try{  					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update));  				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); }  			}  			else  			{  				lastTick = 0d;  				//Check if the player is building a ship  				bool building_ship = HighLogic.LoadedSceneIsEditor  					&& EditorLogic.fetch != null  					&& EditorLogic.fetch.ship != null && EditorLogic.fetch.ship.Count > 0  					&& EditorLogic.fetch.shipNameField != null  					&& EditorLogic.fetch.shipNameField.Text != null && EditorLogic.fetch.shipNameField.Text.Length > 0;    				String[] status_array = null;  				  				if (building_ship)  				{  					status_array = new String[3];  					//Vessel name  					String shipname = EditorLogic.fetch.shipNameField.Text;    					if (shipname.Length > MAX_VESSEL_NAME_LENGTH)  						shipname = shipname.Substring(0' MAX_VESSEL_NAME_LENGTH); //Limit vessel name length    					status_array[1] = "Building " + shipname;    					//Vessel details  					status_array[2] = "Parts: " + EditorLogic.fetch.ship.Count;  				}  				else if (warping)  				{  					status_array = new String[2];  					status_array[1] = "Warping";  				}  				else if (syncing)  				{  					status_array = new String[2];  					status_array[1] = "Synchronizing";  				}  				else  				{  					status_array = new String[2];    					switch (HighLogic.LoadedScene)  					{                          case GameScenes.FLIGHT:                              if (FlightGlobals.ActiveVessel != null)                              {                                  if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true)                                  {                                      status_array[1] = "Preparing/launching from KSC";                                  }                                  else                                  {                                      status_array[1] = "Spectating " + FlightGlobals.ActiveVessel.vesselName;                                  }                              }                              else                              {                                  status_array[1] = "Preparing/launching from KSC";                              }  							break;  						case GameScenes.SPACECENTER:  							status_array[1] = "At Space Center";  							break;  						case GameScenes.EDITOR:  							status_array[1] = "In Vehicle Assembly Building";  							break;  						case GameScenes.SPH:  							status_array[1] = "In Space Plane Hangar";  							break;  						case GameScenes.TRACKSTATION:  							status_array[1] = "At Tracking Station";  							break;  						default:  							status_array[1] = String.Empty;  							break;  					}  				}    				//Check if player is idle  				if (isIdle)  					status_array[1] = "(Idle) " + status_array[1];    				status_array[0] = playerName;    				//Serialize the update  				byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(status_array);  				  				enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);    				VesselStatusInfo my_status = statusArrayToInfo(status_array);  				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The following statement contains a magic number: if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate)  			{  				lastTick = Planetarium.GetUniversalTime();  				//Write vessel status  				KMPVesselUpdate update = getVesselUpdate(FlightGlobals.ActiveVessel);   				if (FlightGlobals.ActiveVessel.vesselType == VesselType.EVA) lastEVAVessel = FlightGlobals.ActiveVessel;  				  				//Update the player vessel info  				VesselStatusInfo my_status = new VesselStatusInfo();  				my_status.info = update;  				my_status.orbit = FlightGlobals.ActiveVessel.orbit;  				my_status.color = KMPVessel.generateActiveColor(playerName);  				my_status.ownerName = playerName;  				if (FlightGlobals.ActiveVessel.vesselName.Contains(" <") && FlightGlobals.ActiveVessel.vesselName.Contains(">"))  					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <"));  				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown";  				my_status.vesselName = FlightGlobals.ActiveVessel.vesselName;  				my_status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;    				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  				  				Log.Debug("sending primary update");  				try{  					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update));  				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); }  			}  			else  			{  				lastTick = 0d;  				//Check if the player is building a ship  				bool building_ship = HighLogic.LoadedSceneIsEditor  					&& EditorLogic.fetch != null  					&& EditorLogic.fetch.ship != null && EditorLogic.fetch.ship.Count > 0  					&& EditorLogic.fetch.shipNameField != null  					&& EditorLogic.fetch.shipNameField.Text != null && EditorLogic.fetch.shipNameField.Text.Length > 0;    				String[] status_array = null;  				  				if (building_ship)  				{  					status_array = new String[3];  					//Vessel name  					String shipname = EditorLogic.fetch.shipNameField.Text;    					if (shipname.Length > MAX_VESSEL_NAME_LENGTH)  						shipname = shipname.Substring(0' MAX_VESSEL_NAME_LENGTH); //Limit vessel name length    					status_array[1] = "Building " + shipname;    					//Vessel details  					status_array[2] = "Parts: " + EditorLogic.fetch.ship.Count;  				}  				else if (warping)  				{  					status_array = new String[2];  					status_array[1] = "Warping";  				}  				else if (syncing)  				{  					status_array = new String[2];  					status_array[1] = "Synchronizing";  				}  				else  				{  					status_array = new String[2];    					switch (HighLogic.LoadedScene)  					{                          case GameScenes.FLIGHT:                              if (FlightGlobals.ActiveVessel != null)                              {                                  if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true)                                  {                                      status_array[1] = "Preparing/launching from KSC";                                  }                                  else                                  {                                      status_array[1] = "Spectating " + FlightGlobals.ActiveVessel.vesselName;                                  }                              }                              else                              {                                  status_array[1] = "Preparing/launching from KSC";                              }  							break;  						case GameScenes.SPACECENTER:  							status_array[1] = "At Space Center";  							break;  						case GameScenes.EDITOR:  							status_array[1] = "In Vehicle Assembly Building";  							break;  						case GameScenes.SPH:  							status_array[1] = "In Space Plane Hangar";  							break;  						case GameScenes.TRACKSTATION:  							status_array[1] = "At Tracking Station";  							break;  						default:  							status_array[1] = String.Empty;  							break;  					}  				}    				//Check if player is idle  				if (isIdle)  					status_array[1] = "(Idle) " + status_array[1];    				status_array[0] = playerName;    				//Serialize the update  				byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(status_array);  				  				enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);    				VesselStatusInfo my_status = statusArrayToInfo(status_array);  				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The following statement contains a magic number: if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate)  			{  				lastTick = Planetarium.GetUniversalTime();  				//Write vessel status  				KMPVesselUpdate update = getVesselUpdate(FlightGlobals.ActiveVessel);   				if (FlightGlobals.ActiveVessel.vesselType == VesselType.EVA) lastEVAVessel = FlightGlobals.ActiveVessel;  				  				//Update the player vessel info  				VesselStatusInfo my_status = new VesselStatusInfo();  				my_status.info = update;  				my_status.orbit = FlightGlobals.ActiveVessel.orbit;  				my_status.color = KMPVessel.generateActiveColor(playerName);  				my_status.ownerName = playerName;  				if (FlightGlobals.ActiveVessel.vesselName.Contains(" <") && FlightGlobals.ActiveVessel.vesselName.Contains(">"))  					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <"));  				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown";  				my_status.vesselName = FlightGlobals.ActiveVessel.vesselName;  				my_status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;    				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  				  				Log.Debug("sending primary update");  				try{  					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update));  				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); }  			}  			else  			{  				lastTick = 0d;  				//Check if the player is building a ship  				bool building_ship = HighLogic.LoadedSceneIsEditor  					&& EditorLogic.fetch != null  					&& EditorLogic.fetch.ship != null && EditorLogic.fetch.ship.Count > 0  					&& EditorLogic.fetch.shipNameField != null  					&& EditorLogic.fetch.shipNameField.Text != null && EditorLogic.fetch.shipNameField.Text.Length > 0;    				String[] status_array = null;  				  				if (building_ship)  				{  					status_array = new String[3];  					//Vessel name  					String shipname = EditorLogic.fetch.shipNameField.Text;    					if (shipname.Length > MAX_VESSEL_NAME_LENGTH)  						shipname = shipname.Substring(0' MAX_VESSEL_NAME_LENGTH); //Limit vessel name length    					status_array[1] = "Building " + shipname;    					//Vessel details  					status_array[2] = "Parts: " + EditorLogic.fetch.ship.Count;  				}  				else if (warping)  				{  					status_array = new String[2];  					status_array[1] = "Warping";  				}  				else if (syncing)  				{  					status_array = new String[2];  					status_array[1] = "Synchronizing";  				}  				else  				{  					status_array = new String[2];    					switch (HighLogic.LoadedScene)  					{                          case GameScenes.FLIGHT:                              if (FlightGlobals.ActiveVessel != null)                              {                                  if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true)                                  {                                      status_array[1] = "Preparing/launching from KSC";                                  }                                  else                                  {                                      status_array[1] = "Spectating " + FlightGlobals.ActiveVessel.vesselName;                                  }                              }                              else                              {                                  status_array[1] = "Preparing/launching from KSC";                              }  							break;  						case GameScenes.SPACECENTER:  							status_array[1] = "At Space Center";  							break;  						case GameScenes.EDITOR:  							status_array[1] = "In Vehicle Assembly Building";  							break;  						case GameScenes.SPH:  							status_array[1] = "In Space Plane Hangar";  							break;  						case GameScenes.TRACKSTATION:  							status_array[1] = "At Tracking Station";  							break;  						default:  							status_array[1] = String.Empty;  							break;  					}  				}    				//Check if player is idle  				if (isIdle)  					status_array[1] = "(Idle) " + status_array[1];    				status_array[0] = playerName;    				//Serialize the update  				byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(status_array);  				  				enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);    				VesselStatusInfo my_status = statusArrayToInfo(status_array);  				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePrimaryUpdate,The following statement contains a magic number: if (!syncing && isInFlight && !warping && !isObserving && activeVesselOk && !activeVesselIsInBubble && activeVesselLoaded && !activeVesselPacked && !activeVesselIsSyncPlate)  			{  				lastTick = Planetarium.GetUniversalTime();  				//Write vessel status  				KMPVesselUpdate update = getVesselUpdate(FlightGlobals.ActiveVessel);   				if (FlightGlobals.ActiveVessel.vesselType == VesselType.EVA) lastEVAVessel = FlightGlobals.ActiveVessel;  				  				//Update the player vessel info  				VesselStatusInfo my_status = new VesselStatusInfo();  				my_status.info = update;  				my_status.orbit = FlightGlobals.ActiveVessel.orbit;  				my_status.color = KMPVessel.generateActiveColor(playerName);  				my_status.ownerName = playerName;  				if (FlightGlobals.ActiveVessel.vesselName.Contains(" <") && FlightGlobals.ActiveVessel.vesselName.Contains(">"))  					FlightGlobals.ActiveVessel.vesselName = FlightGlobals.ActiveVessel.vesselName.Substring(0'FlightGlobals.ActiveVessel.vesselName.IndexOf(" <"));  				if (String.IsNullOrEmpty(FlightGlobals.ActiveVessel.vesselName.Trim())) FlightGlobals.ActiveVessel.vesselName = "Unknown";  				my_status.vesselName = FlightGlobals.ActiveVessel.vesselName;  				my_status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;    				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  				  				Log.Debug("sending primary update");  				try{  					enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' KSP.IO.IOUtils.SerializeToBinary(update));  				} catch (Exception e) { Log.Debug("Exception thrown in writePrimaryUpdate()' catch 1' Exception: {0}"' e.ToString()); Log.Debug("err: " + e.Message); }  			}  			else  			{  				lastTick = 0d;  				//Check if the player is building a ship  				bool building_ship = HighLogic.LoadedSceneIsEditor  					&& EditorLogic.fetch != null  					&& EditorLogic.fetch.ship != null && EditorLogic.fetch.ship.Count > 0  					&& EditorLogic.fetch.shipNameField != null  					&& EditorLogic.fetch.shipNameField.Text != null && EditorLogic.fetch.shipNameField.Text.Length > 0;    				String[] status_array = null;  				  				if (building_ship)  				{  					status_array = new String[3];  					//Vessel name  					String shipname = EditorLogic.fetch.shipNameField.Text;    					if (shipname.Length > MAX_VESSEL_NAME_LENGTH)  						shipname = shipname.Substring(0' MAX_VESSEL_NAME_LENGTH); //Limit vessel name length    					status_array[1] = "Building " + shipname;    					//Vessel details  					status_array[2] = "Parts: " + EditorLogic.fetch.ship.Count;  				}  				else if (warping)  				{  					status_array = new String[2];  					status_array[1] = "Warping";  				}  				else if (syncing)  				{  					status_array = new String[2];  					status_array[1] = "Synchronizing";  				}  				else  				{  					status_array = new String[2];    					switch (HighLogic.LoadedScene)  					{                          case GameScenes.FLIGHT:                              if (FlightGlobals.ActiveVessel != null)                              {                                  if (serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id) ? serverVessels_IsMine[FlightGlobals.ActiveVessel.id] : true)                                  {                                      status_array[1] = "Preparing/launching from KSC";                                  }                                  else                                  {                                      status_array[1] = "Spectating " + FlightGlobals.ActiveVessel.vesselName;                                  }                              }                              else                              {                                  status_array[1] = "Preparing/launching from KSC";                              }  							break;  						case GameScenes.SPACECENTER:  							status_array[1] = "At Space Center";  							break;  						case GameScenes.EDITOR:  							status_array[1] = "In Vehicle Assembly Building";  							break;  						case GameScenes.SPH:  							status_array[1] = "In Space Plane Hangar";  							break;  						case GameScenes.TRACKSTATION:  							status_array[1] = "At Tracking Station";  							break;  						default:  							status_array[1] = String.Empty;  							break;  					}  				}    				//Check if player is idle  				if (isIdle)  					status_array[1] = "(Idle) " + status_array[1];    				status_array[0] = playerName;    				//Serialize the update  				byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(status_array);  				  				enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);    				VesselStatusInfo my_status = statusArrayToInfo(status_array);  				if (playerStatus.ContainsKey(playerName))  					playerStatus[playerName] = my_status;  				else  					playerStatus.Add(playerName' my_status);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeSecondaryUpdates,The following statement contains a magic number: if (inactiveVesselsPerUpdate > 0)  			{  				//Write the inactive vessels nearest the active vessel  				SortedList<float' Vessel> nearest_vessels = new SortedList<float' Vessel>();    				foreach (Vessel vessel in FlightGlobals.Vessels)  				{  					if (vessel != FlightGlobals.ActiveVessel && vessel.loaded && !vessel.name.Contains(" [Past]") && !vessel.name.Contains(" [Future]") && vessel.id.ToString() != SYNC_PLATE_ID)  					{  						float distance = (float)Vector3d.Distance(vessel.GetWorldPos3D()' FlightGlobals.ship_position);  						if (distance < INACTIVE_VESSEL_RANGE)  						{  							try  							{  								Part root = vessel.rootPart;  								bool include = true;  								if (serverVessels_InUse.ContainsKey(vessel.id) ? !serverVessels_InUse[vessel.id]: false)  								{  									foreach (Guid vesselID in serverVessels_Parts.Keys)  									{  										if (serverVessels_Parts[vesselID].Contains(root))  										{  											include=false;  											break;  										}  									}  								}  								if (include) nearest_vessels.Add(distance' vessel);  							}  							catch (ArgumentException e)  							{                                  Log.Debug("Exception thrown in writeSecondaryUpdates()' catch 1' Exception: {0}"' e.ToString());  							}  						}  					}  				}    				int num_written_vessels = 0;    				//Write inactive vessels to file in order of distance from active vessel  				IEnumerator<KeyValuePair<float' Vessel>> enumerator = nearest_vessels.GetEnumerator();  				while (num_written_vessels < inactiveVesselsPerUpdate  					&& num_written_vessels < MAX_INACTIVE_VESSELS_PER_UPDATE && enumerator.MoveNext())  				{  					bool newVessel = !serverVessels_RemoteID.ContainsKey(enumerator.Current.Value.id);  					KMPVesselUpdate update = getVesselUpdate(enumerator.Current.Value);  					if (update != null)  					{  						if (! //Don't keep sending a secondary vessel that will stay destroyed for any other client:  						   ((update.situation == Situation.DESCENDING || update.situation == Situation.FLYING) //If other vessel is flying/descending  						    && enumerator.Current.Value.mainBody.atmosphere //and is near a body with atmo  						    && enumerator.Current.Value.altitude < enumerator.Current.Value.mainBody.maxAtmosphereAltitude //and is in atmo  						    && !newVessel)) //and isn't news to the server' then it shouldn't be sent  						{  							update.distance = enumerator.Current.Key;  							update.state = State.INACTIVE;  							if (enumerator.Current.Value.loaded  							    && (serverVessels_InUse.ContainsKey(enumerator.Current.Value.id) ? serverVessels_InUse[enumerator.Current.Value.id] : false)  							    && FlightGlobals.ActiveVessel.altitude > 10000d  							    //&& (serverVessels_LoadDelay.ContainsKey(enumerator.Current.Value.id) ? (serverVessels_LoadDelay[enumerator.Current.Value.id] < UnityEngine.Time.realtimeSinceStartup) : true)  							    )  							{  								KMPVesselUpdate original_update = update;  								try  								{  									//Rendezvous relative position data  									Log.Debug ("sending docking-mode update' distance: " + enumerator.Current.Key + " id: " + FlightGlobals.ActiveVessel.id);  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = Vector3d.zero;  									w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.findWorldCenterOfMass() - FlightGlobals.ship_CoM);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(enumerator.Current.Value.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									update.clearProtoVessel();  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  								}  								catch (Exception e)  								{  									Log.Debug("Exception thrown in writeSecondaryUpdates()' catch 2' Exception: {0}"' e.ToString());  									update = original_update;  								}  							}  							byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  							Log.Debug ("sending secondary update for: " + enumerator.Current.Value.id);  							if (newVessel)  								enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE' update_bytes);  							else  								enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  							num_written_vessels++;  						}  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				update.pos[i] = pos[i];  				update.dir[i] = dir[i];  				update.vel[i] = vel[i];  				update.o_vel[i] = o_vel[i];  				update.s_vel[i] = s_vel[i];  				update.rot[i] = forw[i];  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The following statement contains a magic number: if (vessel.situation == Vessel.Situations.LANDED || vessel.situation == Vessel.Situations.SPLASHED)  			{  				update.w_pos[1] = vessel.latitude;  				update.w_pos[2] = vessel.longitude;  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselUpdate,The following statement contains a magic number: if ((vessel.loaded && vessel.GetTotalMass() <= 0.0) || (vessel.vesselType == VesselType.Debris && vessel.situation == Vessel.Situations.SUB_ORBITAL))  				update.situation = Situation.DESTROYED;  			else  			{  				switch (vessel.situation)  				{    					case Vessel.Situations.LANDED:  						update.situation = Situation.LANDED;  						break;    					case Vessel.Situations.SPLASHED:  						update.situation = Situation.SPLASHED;  						break;    					case Vessel.Situations.PRELAUNCH:  						update.situation = Situation.PRELAUNCH;  						break;    					case Vessel.Situations.SUB_ORBITAL:  						if (vessel.orbit.timeToAp < vessel.orbit.period / 2.0)  							update.situation = Situation.ASCENDING;  						else  							update.situation = Situation.DESCENDING;  						break;    					case Vessel.Situations.ORBITING:  						update.situation = Situation.ORBITING;  						break;    					case Vessel.Situations.ESCAPING:  						if (vessel.orbit.timeToPe > 0.0)  							update.situation = Situation.ENCOUNTERING;  						else  							update.situation = Situation.ESCAPING;  						break;    					case Vessel.Situations.DOCKED:  						update.situation = Situation.DOCKED;  						break;    					case Vessel.Situations.FLYING:  						update.situation = Situation.FLYING;  						break;    					default:  						update.situation = Situation.UNKNOWN;  						break;    				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: if (vessel.isEVA && vessel.parts.Count > 0 && vessel.parts.First().Modules.Count > 0)  			{  				foreach (PartModule module in vessel.parts.First().Modules)  				{  					if (module is KerbalEVA)  					{  						KerbalEVA kerbal = (KerbalEVA) module;    						detail.percentFuel = (byte)Math.Round(kerbal.Fuel / kerbal.FuelCapacity * 100);  						detail.percentRCS = byte.MaxValue;  						detail.numCrew = byte.MaxValue;    						is_eva = true;  						break;  					}    				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: if (!is_eva)  			{    				if (vessel.GetCrewCapacity() > 0)  					detail.numCrew = (byte)vessel.GetCrewCount();  				else  					detail.numCrew = byte.MaxValue;    				Dictionary<string' float> fuel_densities = new Dictionary<string' float>();  				Dictionary<string' float> rcs_fuel_densities = new Dictionary<string' float>();    				bool has_engines = false;  				bool has_rcs = false;    				foreach (Part part in vessel.parts)  				{    					foreach (PartModule module in part.Modules)  					{    						if (module is ModuleEngines)  						{  							//Determine what kinds of fuel this vessel can use and their densities  							ModuleEngines engine = (ModuleEngines)module;  							has_engines = true;    							foreach (Propellant propellant in engine.propellants)  							{  								if (propellant.name == "ElectricCharge" || propellant.name == "IntakeAir")  								{  									continue;  								}    								if (!fuel_densities.ContainsKey(propellant.name))  									fuel_densities.Add(propellant.name' PartResourceLibrary.Instance.GetDefinition(propellant.id).density);  							}  						}    						if (module is ModuleRCS)  						{  							ModuleRCS rcs = (ModuleRCS)module;  							if (rcs.requiresFuel)  							{  								has_rcs = true;  								if (!rcs_fuel_densities.ContainsKey(rcs.resourceName))  									rcs_fuel_densities.Add(rcs.resourceName' PartResourceLibrary.Instance.GetDefinition(rcs.resourceName).density);  							}  						}    						if (module is ModuleParachute)  						{  							ModuleParachute parachute = (ModuleParachute)module;  							if (parachute.deploymentState == ModuleParachute.deploymentStates.DEPLOYED)  								parachutes_open = true;  						}  					}      				}    				//Determine how much fuel this vessel has and can hold  				float fuel_capacity = 0.0f;  				float fuel_amount = 0.0f;  				float rcs_capacity = 0.0f;  				float rcs_amount = 0.0f;    				foreach (Part part in vessel.parts)  				{  					if (part != null && part.Resources != null)  					{  						foreach (PartResource resource in part.Resources)  						{  							float density = 0.0f;    							//Check that this vessel can use this type of resource as fuel  							if (has_engines && fuel_densities.TryGetValue(resource.resourceName' out density))  							{  								fuel_capacity += ((float)resource.maxAmount) * density;  								fuel_amount += ((float)resource.amount) * density;  							}    							if (has_rcs && rcs_fuel_densities.TryGetValue(resource.resourceName' out density))  							{  								rcs_capacity += ((float)resource.maxAmount) * density;  								rcs_amount += ((float)resource.amount) * density;  							}  						}  					}  				}    				if (has_engines && fuel_capacity > 0.0f)  					detail.percentFuel = (byte)Math.Round(fuel_amount / fuel_capacity * 100);  				else  					detail.percentFuel = byte.MaxValue;    				if (has_rcs && rcs_capacity > 0.0f)  					detail.percentRCS = (byte)Math.Round(rcs_amount / rcs_capacity * 100);  				else  					detail.percentRCS = byte.MaxValue;    			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,getVesselDetail,The following statement contains a magic number: if (!is_eva)  			{    				if (vessel.GetCrewCapacity() > 0)  					detail.numCrew = (byte)vessel.GetCrewCount();  				else  					detail.numCrew = byte.MaxValue;    				Dictionary<string' float> fuel_densities = new Dictionary<string' float>();  				Dictionary<string' float> rcs_fuel_densities = new Dictionary<string' float>();    				bool has_engines = false;  				bool has_rcs = false;    				foreach (Part part in vessel.parts)  				{    					foreach (PartModule module in part.Modules)  					{    						if (module is ModuleEngines)  						{  							//Determine what kinds of fuel this vessel can use and their densities  							ModuleEngines engine = (ModuleEngines)module;  							has_engines = true;    							foreach (Propellant propellant in engine.propellants)  							{  								if (propellant.name == "ElectricCharge" || propellant.name == "IntakeAir")  								{  									continue;  								}    								if (!fuel_densities.ContainsKey(propellant.name))  									fuel_densities.Add(propellant.name' PartResourceLibrary.Instance.GetDefinition(propellant.id).density);  							}  						}    						if (module is ModuleRCS)  						{  							ModuleRCS rcs = (ModuleRCS)module;  							if (rcs.requiresFuel)  							{  								has_rcs = true;  								if (!rcs_fuel_densities.ContainsKey(rcs.resourceName))  									rcs_fuel_densities.Add(rcs.resourceName' PartResourceLibrary.Instance.GetDefinition(rcs.resourceName).density);  							}  						}    						if (module is ModuleParachute)  						{  							ModuleParachute parachute = (ModuleParachute)module;  							if (parachute.deploymentState == ModuleParachute.deploymentStates.DEPLOYED)  								parachutes_open = true;  						}  					}      				}    				//Determine how much fuel this vessel has and can hold  				float fuel_capacity = 0.0f;  				float fuel_amount = 0.0f;  				float rcs_capacity = 0.0f;  				float rcs_amount = 0.0f;    				foreach (Part part in vessel.parts)  				{  					if (part != null && part.Resources != null)  					{  						foreach (PartResource resource in part.Resources)  						{  							float density = 0.0f;    							//Check that this vessel can use this type of resource as fuel  							if (has_engines && fuel_densities.TryGetValue(resource.resourceName' out density))  							{  								fuel_capacity += ((float)resource.maxAmount) * density;  								fuel_amount += ((float)resource.amount) * density;  							}    							if (has_rcs && rcs_fuel_densities.TryGetValue(resource.resourceName' out density))  							{  								rcs_capacity += ((float)resource.maxAmount) * density;  								rcs_amount += ((float)resource.amount) * density;  							}  						}  					}  				}    				if (has_engines && fuel_capacity > 0.0f)  					detail.percentFuel = (byte)Math.Round(fuel_amount / fuel_capacity * 100);  				else  					detail.percentFuel = byte.MaxValue;    				if (has_rcs && rcs_capacity > 0.0f)  					detail.percentRCS = (byte)Math.Round(rcs_amount / rcs_capacity * 100);  				else  					detail.percentRCS = byte.MaxValue;    			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: byte[] update_bytes = new byte[1 + 4 + title_bytes.Length + 4 + watch_bytes.Length];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: byte[] update_bytes = new byte[1 + 4 + title_bytes.Length + 4 + watch_bytes.Length];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writePluginData,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,statusArrayToInfo,The following statement contains a magic number: if (status_array != null && status_array.Length >= STATUS_ARRAY_MIN_SIZE)  			{  				//Read status array  				VesselStatusInfo status = new VesselStatusInfo();  				status.info = null;  				status.ownerName = status_array[0];  				status.vesselName = status_array[1];    				if (status_array.Length >= 3)  					status.detailText = status_array[2];  				  				if (status_array.Length >= 4 && !String.IsNullOrEmpty(status_array[3]))  					status.currentSubspaceID = Int32.Parse(status_array[3]);  				else  					status.currentSubspaceID = -1;  				  				if (status_array.Length >= 5) {  					status.vesselID = new Guid(status_array[4]);  				}  				  				status.orbit = null;  				status.lastUpdateTime = UnityEngine.Time.realtimeSinceStartup;  				status.color = KMPVessel.generateActiveColor(status.ownerName);    				return status;  			}  			else  				return new VesselStatusInfo();
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: RenderTexture render_tex = new RenderTexture(w' h' 24);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: if (KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2))  			{  				//Blit the full texture to a double-sized texture to improve final quality  				RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);  				Graphics.Blit(full_screen_tex' resize_tex);    				//Blit the double-sized texture to normal-sized texture  				Graphics.Blit(resize_tex' render_tex);  			}  			else  				Graphics.Blit(full_screen_tex' render_tex);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: if (KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2))  			{  				//Blit the full texture to a double-sized texture to improve final quality  				RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);  				Graphics.Blit(full_screen_tex' resize_tex);    				//Blit the double-sized texture to normal-sized texture  				Graphics.Blit(resize_tex' render_tex);  			}  			else  				Graphics.Blit(full_screen_tex' render_tex);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: if (KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2))  			{  				//Blit the full texture to a double-sized texture to improve final quality  				RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);  				Graphics.Blit(full_screen_tex' resize_tex);    				//Blit the double-sized texture to normal-sized texture  				Graphics.Blit(resize_tex' render_tex);  			}  			else  				Graphics.Blit(full_screen_tex' render_tex);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: if (KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2))  			{  				//Blit the full texture to a double-sized texture to improve final quality  				RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);  				Graphics.Blit(full_screen_tex' resize_tex);    				//Blit the double-sized texture to normal-sized texture  				Graphics.Blit(resize_tex' render_tex);  			}  			else  				Graphics.Blit(full_screen_tex' render_tex);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: if (KMPGlobalSettings.instance.smoothScreens && (Screen.width > w * 2 || Screen.height > h * 2))  			{  				//Blit the full texture to a double-sized texture to improve final quality  				RenderTexture resize_tex = new RenderTexture(w * 2' h * 2' 24);  				Graphics.Blit(full_screen_tex' resize_tex);    				//Blit the double-sized texture to normal-sized texture  				Graphics.Blit(resize_tex' render_tex);  			}  			else  				Graphics.Blit(full_screen_tex' render_tex);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: byte[] bytes = new byte[4 + description.Length + data.Length];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: description.CopyTo(bytes' 4);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,shareScreenshot,The following statement contains a magic number: data.CopyTo(bytes' 4 + description.Length);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (update_body != null)  			{  				//Convert float arrays to Vector3s  				Vector3 pos = new Vector3(vessel_update.pos[0]' vessel_update.pos[1]' vessel_update.pos[2]);  				Vector3 dir = new Vector3(vessel_update.dir[0]' vessel_update.dir[1]' vessel_update.dir[2]);  				Vector3 vel = new Vector3(vessel_update.vel[0]' vessel_update.vel[1]' vessel_update.vel[2]);  				vessel.info = vessel_update;  				vessel.setOrbitalData(update_body' pos' vel' dir);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (update_body != null)  			{  				//Convert float arrays to Vector3s  				Vector3 pos = new Vector3(vessel_update.pos[0]' vessel_update.pos[1]' vessel_update.pos[2]);  				Vector3 dir = new Vector3(vessel_update.dir[0]' vessel_update.dir[1]' vessel_update.dir[2]);  				Vector3 vel = new Vector3(vessel_update.vel[0]' vessel_update.vel[1]' vessel_update.vel[2]);  				vessel.info = vessel_update;  				vessel.setOrbitalData(update_body' pos' vel' dir);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (update_body != null)  			{  				//Convert float arrays to Vector3s  				Vector3 pos = new Vector3(vessel_update.pos[0]' vessel_update.pos[1]' vessel_update.pos[2]);  				Vector3 dir = new Vector3(vessel_update.dir[0]' vessel_update.dir[1]' vessel_update.dir[2]);  				Vector3 vel = new Vector3(vessel_update.vel[0]' vessel_update.vel[1]' vessel_update.vel[2]);  				vessel.info = vessel_update;  				vessel.setOrbitalData(update_body' pos' vel' dir);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyVesselUpdate,The following statement contains a magic number: if (isInFlightOrTracking || syncing)  			{  				if (vessel_update.relativeTo == Guid.Empty && (isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id || (serverVessels_InUse[vessel_update.id] || (serverVessels_IsPrivate[vessel_update.id] && !serverVessels_IsMine[vessel_update.id]))))  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id && vessel_update.relTime == RelativeTime.PAST) {  						kickToTrackingStation();  						return;  					}  					Log.Debug("retrieving vessel: " + vessel_update.id.ToString());  					if (!vessel_update.id.Equals(Guid.Empty))  					{  						Vessel extant_vessel = vessel.vesselRef;  						if (extant_vessel == null) extant_vessel = FlightGlobals.Vessels.Find(v => v.id == vessel_update.id);  						if (isInFlight)  						{  							if (extant_vessel != null && vessel_update.state == State.ACTIVE && !vessel_update.isSyncOnlyUpdate)   							{  								 extant_vessel.name = vessel_update.name + " <" + vessel_update.player + ">";  								 extant_vessel.vesselName = vessel_update.name + " <" + vessel_update.player + ">";  							}  							else if (extant_vessel != null)  							{  								extant_vessel.name = vessel_update.name;  								extant_vessel.vesselName = vessel_update.name;  							}  						}  //						if (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? (serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup) : true)  //						{  							float incomingDistance = 2500f;  							if (!syncing && vessel.worldPosition != Vector3.zero && vessel_update.relTime == RelativeTime.PRESENT)  								incomingDistance = Vector3.Distance(vessel.worldPosition'FlightGlobals.ship_position);  							if (vessel_update.relTime != RelativeTime.PRESENT) incomingDistance = 3000f; //Never treat vessels from another time as close by  						 	if (vessel_update.state == State.ACTIVE  							    	|| vessel_update.isDockUpdate  							    	|| (incomingDistance > vessel_update.distance  							    		&& (serverVessels_LastUpdateDistanceTime.ContainsKey(vessel_update.id) ? (serverVessels_LastUpdateDistanceTime[vessel_update.id].Key > vessel_update.distance || serverVessels_LastUpdateDistanceTime[vessel_update.id].Value < Planetarium.GetUniversalTime()): true)))  							{  								serverVessels_LastUpdateDistanceTime[vessel_update.id] = new KeyValuePair<double' double>(vessel_update.distance'Planetarium.GetUniversalTime() + 0.75f);  								if (extant_vessel != null)  								{  									//Log.Debug("vessel found: " + extant_vessel.id);  									if (extant_vessel.vesselType != VesselType.Flag) //Special treatment for flags  									{  										//vessel.vesselRef = extant_vessel;  										float ourDistance = 3000f;                                          if (isInFlight)                                          {      										if (!extant_vessel.loaded)      										{      											if (KMPVessel.situationIsOrbital(vessel_update.situation))      												ourDistance = Vector3.Distance(extant_vessel.orbit.getPositionAtUT(Planetarium.GetUniversalTime())' FlightGlobals.ship_position);      											else ourDistance = Vector3.Distance(oldPosition' FlightGlobals.ship_position);      										}  										else ourDistance = Vector3.Distance(extant_vessel.GetWorldPos3D()' FlightGlobals.ship_position);                                          }  										bool countMismatch = false;  										ProtoVessel protovessel = null;  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  										}  										if (serverVessels_PartCounts.ContainsKey(vessel_update.id))  										{  											//countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && extant_vessel.loaded && !extant_vessel.packed && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  											countMismatch = serverVessels_PartCounts[vessel_update.id] > 0 && serverVessels_PartCounts[vessel_update.id] != protovessel.protoPartSnapshots.Count;  										}  										if ((vessel_update.getProtoVesselNode() != null && (!KMPVessel.situationIsOrbital(vessel_update.situation) || ourDistance > 2500f || extant_vessel.altitude < 10000d)) || countMismatch)  										{  											Log.Debug("updating from protovessel");  											serverVessels_PartCounts[vessel_update.id] = 0;  											if (protovessel != null)  											{  												if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.altitude > 10000f && protovessel.vesselType != VesselType.Flag && protovessel.vesselType != VesselType.EVA && ourDistance > 2500f)  												{  													protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  					                            }  												if (protovessel == null)  												{  													Log.Debug("vessel collided with surface");  													killVessel(extant_vessel);  													return;  												}  												addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  												if (vessel_update.situation == Situation.FLYING) serverVessels_LoadDelay[vessel.id] = UnityEngine.Time.realtimeSinceStartup + 5f;  											} else { Log.Debug("Protovessel missing!"); }  										}  										else  										{  											Log.Debug("no protovessel");  											if (vessel.orbitValid)  											{  												Log.Debug("updating from flight data' distance: " + ourDistance);  												//Update orbit to our game's time if necessary  												//bool throttled = serverVessels_ObtSyncDelay.ContainsKey(vessel_update.id) && serverVessels_ObtSyncDelay[vessel_update.id] > UnityEngine.Time.realtimeSinceStartup;  												bool throttled = false;  												if (KMPVessel.situationIsOrbital(vessel_update.situation) && extant_vessel.altitude > 10000f)  												{  													double tick = Planetarium.GetUniversalTime();  													//Update orbit whenever out of sync or other vessel in past/future' or not in docking range  						  							if (!throttled && !extant_vessel.loaded ||  												    	(vessel_update.relTime == RelativeTime.PRESENT && (ourDistance > (INACTIVE_VESSEL_RANGE+500f))) ||   						  								(vessel_update.relTime != RelativeTime.PRESENT && Math.Abs(tick-vessel_update.tick) > 1.5d && isInFlight && vessel_update.id != FlightGlobals.ActiveVessel.id))  													{  														if (!syncExtantVesselOrbit(vessel'vessel_update.tick'extant_vessel'vessel_update.w_pos[0]))  														{  															//Collision!  															Log.Debug("vessel collided with surface");  															killVessel(extant_vessel);  															return;  														}  														serverVessels_ObtSyncDelay[vessel_update.id] = UnityEngine.Time.realtimeSinceStartup + 1f;  													}  												}  												  												if (isInFlight && FlightGlobals.ActiveVessel.mainBody == update_body && vessel_update.relTime == RelativeTime.PRESENT)  												{  													if (!extant_vessel.loaded)  													{  														Log.Debug("Skipped full update' vessel not loaded");  														return;  													}  													Log.Debug("full update");  													if (serverVessels_InPresent.ContainsKey(vessel_update.id) ? !serverVessels_InPresent[vessel_update.id] : true)  													{  														serverVessels_InPresent[vessel_update.id] = true;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'1f);  														}  													}  													  													//Update rotation  													if (extant_vessel.loaded)  													{  														Log.Debug("rotation set");  														  														extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  														//Quaternion rot = extant_vessel.transform.rotation;  //														if (extant_vessel.altitude > 10000f)  //														{  //															extant_vessel.transform.up = vessel.worldDirection;  //															extant_vessel.transform.Rotate(rot.eulerAngles);  															extant_vessel.SetRotation(extant_vessel.transform.rotation);  //														}  														extant_vessel.angularMomentum = Vector3.zero;  //														extant_vessel.VesselSAS.LockHeading(extant_vessel.transform.rotation);  //														extant_vessel.VesselSAS.currentRotation = rot;  														extant_vessel.VesselSAS.SetDampingMode(false);  													}  													  													if (!KMPVessel.situationIsOrbital(vessel_update.situation) || extant_vessel.altitude < 10000f || vessel_update.id == FlightGlobals.ActiveVessel.id || ourDistance > 2500f)  													{  														Log.Debug ("velocity update");  														//Update velocity  														if (extant_vessel.loaded)  														{  															if (update_body.GetAltitude(vessel.worldPosition)<10000d)  															{  																//Set velocity by surface velocity  																Vector3d new_srf_vel = new Vector3d(vessel_update.s_vel[0]'vessel_update.s_vel[1]'vessel_update.s_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.srf_velocity) + new_srf_vel);  															}  															else  															{  																//Set velocity by orbit velocity  																Vector3d new_obt_vel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]);  																extant_vessel.ChangeWorldVelocity((-1 * extant_vessel.obt_velocity) + new_obt_vel);  															}  														}  														  														//Update position  														if (extant_vessel.altitude < 10000f || !extant_vessel.loaded || vessel_update.id == FlightGlobals.ActiveVessel.id)  														{  															if (extant_vessel.loaded && (vessel_update.situation == Situation.LANDED || vessel_update.situation == Situation.SPLASHED))  															{  																//Update surface position  																Log.Debug("surface position update");  																Vector3d newPos = update_body.GetWorldSurfacePosition(vessel_update.w_pos[1]'vessel_update.w_pos[2]'extant_vessel.altitude+0.001d);  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																if ((newPos - extant_vessel.GetWorldPos3D()).sqrMagnitude > 1d)   																	extant_vessel.SetPosition(newPos);  																else if (Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 25f)  																{  																	serverVessels_PartCounts[vessel_update.id] = 0;  																	addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  																}  															}  															else if (extant_vessel.loaded && ((!throttled && Vector3.Distance(vessel.worldPosition' extant_vessel.GetWorldPos3D()) > 1  															         && (extant_vessel.altitude < 10000f || ourDistance > 2500f)) || vessel_update.id == FlightGlobals.ActiveVessel.id))  															{  																//Update 3D position  																Log.Debug("position update");  																if (extant_vessel.packed) extant_vessel.GoOffRails();  																extant_vessel.distancePackThreshold = Math.Max(extant_vessel.distancePackThreshold'Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) + 250f);  																extant_vessel.SetPosition(vessel.worldPosition);  															}  															else if (!extant_vessel.loaded && Vector3.Distance(vessel.worldPosition' FlightGlobals.ship_position) < 2500f)  															{  																//Stretch packing thresholds to prevent excessive load/unloads during rendezvous initiation  																extant_vessel.distancePackThreshold += 250f;  																extant_vessel.distanceUnpackThreshold += 100f;  															}  															else  															{  																//Reset packing thresholds  																extant_vessel.distancePackThreshold = 7500f;  																extant_vessel.distanceUnpackThreshold = 1000f;  															}  														}  														  														//Update FlightCtrlState    														if (extant_vessel.id == FlightGlobals.ActiveVessel.id) {  															FlightInputHandler.state.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														} else {  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.75f));  														}  													}  													else   													{  														if (ourDistance <= 2500f)  														{  															//Orbital rendezvous  															Log.Debug("orbital rendezvous");  															  															//Keep body-relative orbit intact  															if (!extant_vessel.packed && (serverVessels_SkippedRendezvousUpdates.ContainsKey(extant_vessel.id) ? serverVessels_SkippedRendezvousUpdates[extant_vessel.id] > ALLOW_RENDEZ_OBT_UPDATE_LIMIT : false ))  															{  																serverVessels_SkippedRendezvousUpdates[extant_vessel.id] = -1;  																Vector3d relPos = vessel.worldPosition - extant_vessel.GetWorldPos3D();  																Vector3d relObtVel = new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2])-extant_vessel.obt_velocity;  																if (relPos.sqrMagnitude > RENDEZ_OBT_UPDATE_RELPOS_MIN_SQRMAG || relObtVel.sqrMagnitude > RENDEZ_OBT_UPDATE_RELVEL_MIN_SQRMAG)  																{  																	Log.Debug("syncing relative orbit for mismatch");	  																	relPos *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																	relObtVel *= RENDEZ_OBT_UPDATE_SCALE_FACTOR;  																  																	extant_vessel.SetPosition(extant_vessel.GetWorldPos3D() + relPos);	  																	FlightGlobals.ActiveVessel.SetPosition(FlightGlobals.ship_position + relPos);  																  																	FlightGlobals.ActiveVessel.ChangeWorldVelocity(relObtVel);  																	extant_vessel.ChangeWorldVelocity(relObtVel);  																}  															}  														  															//Update FlightCtrlState  															extant_vessel.ctrlState.CopyFrom(vessel_update.flightCtrlState.getAsFlightCtrlState(0.85f));  														}  													}  												}  												else if (isInFlight && FlightGlobals.ActiveVessel.mainBody == vessel.mainBody)  												{  													Log.Debug("update from past/future");  													  													if (!serverVessels_InPresent.ContainsKey(vessel_update.id) || serverVessels_InPresent.ContainsKey(vessel_update.id) ? serverVessels_InPresent[vessel_update.id]: false)  													{  														serverVessels_InPresent[vessel_update.id] = false;  														foreach (Part part in extant_vessel.Parts)  														{  															setPartOpacity(part'0.3f);  														}  													}  													  													//Update rotation only  													extant_vessel.transform.LookAt(extant_vessel.transform.position + extant_vessel.mainBody.transform.TransformDirection(new Vector3(vessel_update.rot[0]'vessel_update.rot[1]'vessel_update.rot[2])).normalized'vessel.worldDirection);  												}  											}  										}  										Log.Debug("updated");  									}  									else  									{  										//Update flag if needed  										if (vessel_update.getProtoVesselNode() != null)  										{  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update);  										}  									}  								}  								else  								{  									try  									{  										if (serverVessels_ProtoVessels.ContainsKey(vessel_update.id))  										{  											Log.Debug("Adding new vessel: " + vessel_update.id);  											ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  											checkProtoNodeCrew(protoNode);  											ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  											if (vessel.orbitValid && KMPVessel.situationIsOrbital(vessel_update.situation) && protovessel.vesselType != VesselType.Flag)  											{  												protovessel = syncOrbit(vessel' vessel_update.tick' protovessel' vessel_update.w_pos[0]);  				                            }  											if (protovessel == null)  											{  												Log.Debug("Did not load vessel' has collided with surface");  												return;  											}  											serverVessels_PartCounts[vessel_update.id] = 0;  											addRemoteVessel(protovessel' vessel_update.id' vessel' vessel_update' incomingDistance);  											HighLogic.CurrentGame.CrewRoster.ValidateAssignments(HighLogic.CurrentGame);  										}  										else   										{  											Log.Debug("New vessel' but no matching protovessel available");  										}  									} catch (Exception e) { Log.Debug("Exception thrown in applyVesselUpdate()' catch 2' Exception: {0}"' e.ToString()); Log.Debug("Vessel add error: " + e.Message + "\n" + e.StackTrace); }  								}  							}  							else  							{  								Log.Debug("Vessel update ignored: we are closer to target vessel or have recently updated from someone who was closer");  							}  //						}  //						else  //						{  //							Log.Debug("Vessel update ignored: target vessel on load delay list");  //						}  					}  				}  				else  				{  					if (isInFlight && vessel_update.id == FlightGlobals.ActiveVessel.id)  					{  						Log.Debug("Relative update: " + vessel_update.relativeTo);  						//This is our vessel!  						if (vessel_update.getProtoVesselNode() != null)  						{  							Log.Debug("Received updated protovessel for active vessel");  							serverVessels_ProtoVessels[vessel_update.id] = vessel_update.getProtoVesselNode();  							ConfigNode protoNode = serverVessels_ProtoVessels[vessel_update.id];  							checkProtoNodeCrew(protoNode);  							ProtoVessel protovessel = new ProtoVessel(protoNode' HighLogic.CurrentGame);  							addRemoteVessel(protovessel'vessel_update.id'vessel'vessel_update'0);  						}  						  						if (vessel_update.isDockUpdate && vessel_update.relTime == RelativeTime.PRESENT && !vessel_update.isSyncOnlyUpdate)  						{  							//Someone docked with us and has control  							docking = true;  							syncing = true;  							ScreenMessages.PostScreenMessage("Other player has control of newly docked vessel"'2.5f'ScreenMessageStyle.UPPER_CENTER);  							Log.Debug("Received docking update");  							serverVessels_PartCounts[FlightGlobals.ActiveVessel.id] = 0;  							serverVessels_InUse[vessel_update.id] = true;  							return;  						}  						//Try to negotiate our relative position with whatever sent this update  						if (FlightGlobals.ActiveVessel.altitude > 10000d  						    && vessel_update.relativeTo != Guid.Empty  						    && Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 4d  						    //&& (serverVessels_LoadDelay.ContainsKey(vessel_update.id) ? serverVessels_LoadDelay[vessel_update.id] < UnityEngine.Time.realtimeSinceStartup : true)  						    )  						{  							Vessel updateFrom = FlightGlobals.Vessels.Find (v => v.id == vessel_update.relativeTo);  							if (updateFrom != null && !updateFrom.loaded)  							{  								Log.Debug("Rendezvous update from unloaded vessel");  								if (vessel_update.distance < INACTIVE_VESSEL_RANGE)  								{  									//We're not in normal secondary vessel range but other vessel is' send negotiating reply  									KMPVesselUpdate update = getVesselUpdate(updateFrom);  									update.distance = INACTIVE_VESSEL_RANGE;  									update.state = State.INACTIVE;  									//Rendezvous relative position data  									update.relativeTo = FlightGlobals.ActiveVessel.id;  									Vector3d w_pos = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.findWorldCenterOfMass() - activeVesselPosition);  									Vector3d o_vel = FlightGlobals.ActiveVessel.mainBody.transform.InverseTransformDirection(updateFrom.GetObtVelocity() - FlightGlobals.ActiveVessel.GetObtVelocity());  									for (int i = 0; i < 3; i++)  									{  										update.w_pos[i] = w_pos[i];  										update.o_vel[i] = o_vel[i];  									}  									  									byte[] update_bytes = KSP.IO.IOUtils.SerializeToBinary(update);  									enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE' update_bytes);  									  									//updateFrom.distancePackThreshold += INACTIVE_VESSEL_RANGE/2;  								}  							}  							else if (updateFrom != null && updateFrom.loaded)  							{  								Log.Debug("rendezvous positioning: " + updateFrom.id);  								  								Vector3d updateFromPos = updateFrom.packed ? updateFrom.GetWorldPos3D() : (Vector3d) updateFrom.findWorldCenterOfMass();  								Vector3d relPos = activeVesselPosition-updateFromPos;  								Vector3d updateRelPos = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.w_pos[0]'vessel_update.w_pos[1]'vessel_update.w_pos[2]));  								  								if (!dockingRelVel.ContainsKey(updateFrom.id))  									dockingRelVel[updateFrom.id] = updateFrom.GetObtVelocity();  	  								Vector3d relVel = FlightGlobals.ActiveVessel.GetObtVelocity()-dockingRelVel[updateFrom.id];  								Vector3d updateRelVel = updateFrom.mainBody.transform.TransformDirection(new Vector3d(vessel_update.o_vel[0]'vessel_update.o_vel[1]'vessel_update.o_vel[2]));  								Vector3d diffPos = updateRelPos - relPos;  								Vector3d diffVel = updateRelVel - relVel;  								diffPos *= 0.49d;  								diffVel *= 0.49d;  								Vector3d newPos = updateFromPos-diffPos;  								  								if (!serverVessels_SkippedRendezvousUpdates.ContainsKey(updateFrom.id)) serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  								  								bool applyUpdate = true;  								double curTick = Planetarium.GetUniversalTime();  								if (vessel_update.distance <= INACTIVE_VESSEL_RANGE && serverVessels_SkippedRendezvousUpdates[updateFrom.id] != -1) //If distance >= INACTIVE_VESSEL_RANGE then the other player didn't have us loaded--don't ignore even a large correction in this case  								{  									bool smoothPosCheck = (serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? (diffPos.sqrMagnitude > (serverVessels_RendezvousSmoothPos[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFPOS_SQRMAG_INCREASE_SCALE) && diffPos.sqrMagnitude > 1d && serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false);  									if ((serverVessels_RendezvousSmoothPos.ContainsKey(updateFrom.id) ? serverVessels_RendezvousSmoothPos[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_MIN_DELAY) : false) || smoothPosCheck)  									{  										applyUpdate = false;  										if (smoothPosCheck)  											serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  									}  									if (serverVessels_RendezvousSmoothVel.ContainsKey(updateFrom.id) ? (diffVel.sqrMagnitude > (serverVessels_RendezvousSmoothVel[updateFrom.id].Key * SMOOTH_RENDEZ_UPDATE_MAX_DIFFVEL_SQRMAG_INCREASE_SCALE) && diffVel.sqrMagnitude > 1d && serverVessels_RendezvousSmoothVel[updateFrom.id].Value > (curTick-SMOOTH_RENDEZ_UPDATE_EXPIRE)): false)  									{  										serverVessels_SkippedRendezvousUpdates[updateFrom.id]++;  										applyUpdate = false;  									}  								}    								double expectedDist = Vector3d.Distance(newPos' activeVesselPosition);  								if (applyUpdate)  								{  									serverVessels_RendezvousSmoothPos[updateFrom.id] = new KeyValuePair<double' double>(diffPos.sqrMagnitude'curTick);  									serverVessels_RendezvousSmoothVel[updateFrom.id] = new KeyValuePair<double' double>(diffVel.sqrMagnitude'curTick);  									serverVessels_SkippedRendezvousUpdates[updateFrom.id] = 0;  									try  						            {  						                OrbitPhysicsManager.HoldVesselUnpack(1);  						            }  						            catch (NullReferenceException e)  						            {  										Log.Debug("Exception thrown in applyVesselUpdate()' catch 3' Exception: {0}"' e.ToString());  						            }  		  									if (diffPos.sqrMagnitude < 1000000d && diffPos.sqrMagnitude > 0.05d)  									{  										Log.Debug("Docking Krakensbane shift");  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id && v.id == updateFrom.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									else if (diffPos.sqrMagnitude >= 1000000d)  									{  										Log.Debug("Clamped docking Krakensbane shift");  										diffPos.Normalize();  										diffPos *= 1000d;  										foreach (Vessel otherVessel in FlightGlobals.Vessels.Where(v => v.packed == false && v.id != FlightGlobals.ActiveVessel.id))  				                			otherVessel.GoOnRails();  										getKrakensbane().setOffset(diffPos);  									}  									  									activeVesselPosition += diffPos;  									  									if (diffVel.sqrMagnitude > 0.0025d && diffVel.sqrMagnitude < 2500d)  									{  										Log.Debug("Docking velocity update");  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									else if (diffVel.sqrMagnitude >= 2500d)  									{  										Log.Debug("Damping large velocity differential");  										diffVel = diffVel.normalized;  										diffVel *= 50d;  										if (updateFrom.packed) updateFrom.GoOffRails();  										updateFrom.ChangeWorldVelocity(-diffVel);  									}  									  									dockingRelVel[updateFrom.id] -= diffVel;  								}  								else Log.Debug("Ignored docking position update: unexpected large pos/vel shift");  								  								Log.Debug("had dist:" + relPos.magnitude + " got dist:" + updateRelPos.magnitude);  								Log.Debug("expected dist:" + expectedDist + " diffPos mag: " + diffPos.sqrMagnitude);  								Log.Debug("had relVel:" + relVel.magnitude + " got relVel:" + updateRelVel.magnitude + " diffVel mag:" + diffVel.sqrMagnitude);  							}  						} else Log.Debug("Ignored docking position update: " + (FlightGlobals.ActiveVessel.altitude > 10000d) + " " + (vessel_update.relativeTo != Guid.Empty) + " " + (Math.Abs(Planetarium.GetUniversalTime() - vessel_update.tick) < 1d));  					}  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,writeIntToStream,The following statement contains a magic number: stream.Write(KMPCommon.intToBytes(val)' 0' 4);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,readIntFromStream,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,readIntFromStream,The following statement contains a magic number: stream.Read(bytes' 0' 4);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,processClientInterop,The following statement contains a magic number: if (interopInQueue.Count > 0 )  			{  				try  				{  					while (interopInQueue.Count > 0)  					{  						byte[] bytes;  						bytes = interopInQueue.Dequeue();    						//Read the message id  						int id_int = KMPCommon.intFromBytes(bytes' 0);  		  						KMPCommon.ClientInteropMessageID id = KMPCommon.ClientInteropMessageID.NULL;  						if (id_int >= 0 && id_int < Enum.GetValues(typeof(KMPCommon.ClientInteropMessageID)).Length)  							id = (KMPCommon.ClientInteropMessageID)id_int;  		  						//Read the length of the message data  						int data_length = KMPCommon.intFromBytes(bytes' 4);  		  						if (data_length <= 0)  							handleInteropMessage(id' null);  						else  						{  							//Copy the message data  							byte[] data = new byte[data_length];  							Array.Copy(bytes' 8' data' 0' data.Length);  							handleInteropMessage(id' data);  						}  					}  				}  				catch (Exception e) { Log.Debug("Exception thrown in processClientInterop()' catch 1' Exception: {0}"' e.ToString()); }  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,processClientInterop,The following statement contains a magic number: if (interopInQueue.Count > 0 )  			{  				try  				{  					while (interopInQueue.Count > 0)  					{  						byte[] bytes;  						bytes = interopInQueue.Dequeue();    						//Read the message id  						int id_int = KMPCommon.intFromBytes(bytes' 0);  		  						KMPCommon.ClientInteropMessageID id = KMPCommon.ClientInteropMessageID.NULL;  						if (id_int >= 0 && id_int < Enum.GetValues(typeof(KMPCommon.ClientInteropMessageID)).Length)  							id = (KMPCommon.ClientInteropMessageID)id_int;  		  						//Read the length of the message data  						int data_length = KMPCommon.intFromBytes(bytes' 4);  		  						if (data_length <= 0)  							handleInteropMessage(id' null);  						else  						{  							//Copy the message data  							byte[] data = new byte[data_length];  							Array.Copy(bytes' 8' data' 0' data.Length);  							handleInteropMessage(id' data);  						}  					}  				}  				catch (Exception e) { Log.Debug("Exception thrown in processClientInterop()' catch 1' Exception: {0}"' e.ToString()); }  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following statement contains a magic number: try  			{  				switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}  			} catch (Exception e) { Log.Debug("Exception thrown in handleInteropMessage()' catch 1' Exception: {0}"' e.ToString()); Log.Debug(e.Message); }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScreenshotTexture,The following statement contains a magic number: KMPScreenshotDisplay.texture = new Texture2D(4' 4' TextureFormat.RGB24' false' true);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,applyScreenshotTexture,The following statement contains a magic number: KMPScreenshotDisplay.texture = new Texture2D(4' 4' TextureFormat.RGB24' false' true);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,enqueuePluginInteropMessage,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnTimeWarpRateChanged,The following statement contains a magic number: try              {                  Log.Debug("OnTimeWarpRateChanged");                  if (TimeWarp.WarpMode == TimeWarp.Modes.LOW)                      TimeWarp.SetRate(0' true);                  else                  {                      if (TimeWarp.CurrentRate <= 1)                      {                          syncing = true;                          inGameSyncing = true;                          Invoke("setNotWarping"' 1f);                          Log.Debug("done warping");                      }                      else                      {                          if (!warping)                          {                              skewServerTime = 0;                              skewTargetTick = 0;                              writePrimaryUpdate(); //Ensure server catches any vessel switch before warp                              Log.Debug("warping");                          }                          warping = true;                      }                      //Log.Debug("sending: " + TimeWarp.CurrentRate + "' " + Planetarium.GetUniversalTime());                      byte[] update_bytes = new byte[12]; //warp rate float (4) + current tick double (8)                      BitConverter.GetBytes(TimeWarp.CurrentRate).CopyTo(update_bytes' 0);                      BitConverter.GetBytes(Planetarium.GetUniversalTime()).CopyTo(update_bytes' 4);                      enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.WARPING' update_bytes);                  }              }              catch (Exception e)              {                  Log.Debug("OnTimeWarpRateChanged threw exception: " + e);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,OnTimeWarpRateChanged,The following statement contains a magic number: try              {                  Log.Debug("OnTimeWarpRateChanged");                  if (TimeWarp.WarpMode == TimeWarp.Modes.LOW)                      TimeWarp.SetRate(0' true);                  else                  {                      if (TimeWarp.CurrentRate <= 1)                      {                          syncing = true;                          inGameSyncing = true;                          Invoke("setNotWarping"' 1f);                          Log.Debug("done warping");                      }                      else                      {                          if (!warping)                          {                              skewServerTime = 0;                              skewTargetTick = 0;                              writePrimaryUpdate(); //Ensure server catches any vessel switch before warp                              Log.Debug("warping");                          }                          warping = true;                      }                      //Log.Debug("sending: " + TimeWarp.CurrentRate + "' " + Planetarium.GetUniversalTime());                      byte[] update_bytes = new byte[12]; //warp rate float (4) + current tick double (8)                      BitConverter.GetBytes(TimeWarp.CurrentRate).CopyTo(update_bytes' 0);                      BitConverter.GetBytes(Planetarium.GetUniversalTime()).CopyTo(update_bytes' 4);                      enqueuePluginInteropMessage(KMPCommon.PluginInteropMessageID.WARPING' update_bytes);                  }              }              catch (Exception e)              {                  Log.Debug("OnTimeWarpRateChanged threw exception: " + e);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,SkewTime,The following statement contains a magic number: if (isTimeSyncronized && skewServerTime != 0 && skewTargetTick != 0) {  				long timeFromLastSync = (DateTime.UtcNow.Ticks + offsetSyncTick) - skewServerTime;  				double timeFromLastSyncSeconds = (double)timeFromLastSync / 10000000;  				double timeFromLastSyncSecondsAdjusted = timeFromLastSyncSeconds * skewSubspaceSpeed;  				double currentError = Planetarium.GetUniversalTime () - (skewTargetTick + timeFromLastSyncSecondsAdjusted); //Ticks are integers of 100ns' Planetarium camera is a float in seconds.  				double currentErrorMs = Math.Round (currentError * 1000' 2);    				if (Math.Abs (currentError) > 5) {  					if (skewMessage != null) {  						skewMessage.duration = 0f;  					}  					if (isInFlight && FlightGlobals.ActiveVessel != null) {  						krakensBaneWarp(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					} else {  						Planetarium.SetUniversalTime(skewTargetTick + timeFromLastSyncSecondsAdjusted);  					}  					return;  				}    				//Dynamic warp.  				float timeWarpRate = (float) Math.Pow(2' -currentError);  				if ( timeWarpRate > 1.5f ) timeWarpRate = 1.5f;  				if ( timeWarpRate < 0.5f ) timeWarpRate = 0.5f;    				if (Math.Abs(currentError) > 0.2) {  					isSkewingTime = true;  					Time.timeScale = timeWarpRate;  				}    				if (Math.Abs(currentError) < 0.05 && isSkewingTime) {  					isSkewingTime = false;  					Time.timeScale = 1;  				}    				//Let's give the client a little bit of time to settle before being able to request a different rate.  				if (UnityEngine.Time.realtimeSinceStartup > lastSubspaceLockChange + 10f) {  					float requestedRate = (1 / timeWarpRate) * skewSubspaceSpeed;  					listClientTimeWarp.Add(requestedRate);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				} else {  					listClientTimeWarp.Add(skewSubspaceSpeed);  					listClientTimeWarpAverage = listClientTimeWarp.Average();  				}    				//Keeps the last 10 seconds (300 update steps) of clock speed history to report to the server  				if (listClientTimeWarp.Count > 300) {  					listClientTimeWarp.RemoveAt(0);  				}      				if (displayNTP) {  					if (skewMessage != null) {  						//Hide the old message.  						skewMessage.duration = 0;  					}  					//Current clock error in milliseconds  					String skewMessageText;  					skewMessageText = "\n\nClock error: " + currentErrorMs + "ms.\n";  					skewMessageText += "Game speed: " + Math.Round(Time.timeScale' 3) + "x.\n";  					//Current client latency detected by NTP (latency - server processing time)  					long latencySyncTickMs = latencySyncTick / 10000;  					skewMessageText += "Network latency: " + latencySyncTickMs + "ms.\n";  					//Current system clock offset  					skewMessageText += "Clock offset: ";  					long tempOffsetSyncTick = offsetSyncTick;  					long offsetSyncTickHours = tempOffsetSyncTick / 36000000000;  					tempOffsetSyncTick -= offsetSyncTickHours * 36000000000;  					if (offsetSyncTickHours > 0) {  						skewMessageText += offsetSyncTickHours + "h' ";  					}  					long offsetSyncTickMinutes = tempOffsetSyncTick / 600000000;  					tempOffsetSyncTick -= offsetSyncTickMinutes * 600000000;  					if (offsetSyncTickMinutes > 0) {  						skewMessageText += offsetSyncTickMinutes + "m' ";  					}  					long offsetSyncTickSeconds = tempOffsetSyncTick / 10000000;  					tempOffsetSyncTick -= offsetSyncTickSeconds * 10000000;  					if (offsetSyncTickSeconds > 0) {  						skewMessageText += offsetSyncTickSeconds + "s' ";  					}  					long offsetSyncTickMilliseconds = tempOffsetSyncTick / 10000;  					skewMessageText += offsetSyncTickMilliseconds + "ms.\n";  					//Current subspace speed  					skewMessageText += "Subspace Speed: " + Math.Round(skewSubspaceSpeed' 3) + "x.\n";  					//Estimated server lag  					skewMessageText += "Server lag: ";  					long tempServerLag = estimatedServerLag;  					long serverLagSeconds = tempServerLag / 10000000;  					tempServerLag -= serverLagSeconds * 10000000;  					if (serverLagSeconds > 0) {  						skewMessageText += serverLagSeconds + "s' ";  					}  					long serverLagMilliseconds = tempServerLag / 10000;  					skewMessageText += serverLagMilliseconds + "ms.\n";                      skewMessageText += "Universe Time: " + Planetarium.GetUniversalTime() + "\n";                        					skewMessage = ScreenMessages.PostScreenMessage(skewMessageText' 1f' ScreenMessageStyle.UPPER_RIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 serverReceive = BitConverter.ToInt64 (data' 8);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 serverSend = BitConverter.ToInt64 (data' 16);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: Int64 clientOffset = ((serverReceive - clientSend) + (serverSend - clientReceive))/2;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: if (listClientTimeSyncOffset.Count >= SYNC_TIME_VALID_COUNT && !isTimeSyncronized) {  				offsetSyncTick = (Int64)listClientTimeSyncOffset.Average();  				latencySyncTick = (Int64)listClientTimeSyncLatency.Average();  				isTimeSyncronized = true;                  forceNTP = true;  				Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset");                  Log.Debug("Requesting initial vessel sync");                  //Start the initial sync after the time is synced.                  Invoke("sendInitialSyncRequest"'0.5f);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,HandleSyncTimeCompleted,The following statement contains a magic number: if (listClientTimeSyncOffset.Count >= SYNC_TIME_VALID_COUNT && !isTimeSyncronized) {  				offsetSyncTick = (Int64)listClientTimeSyncOffset.Average();  				latencySyncTick = (Int64)listClientTimeSyncLatency.Average();  				isTimeSyncronized = true;                  forceNTP = true;  				Log.Debug("Initial client time syncronized: " + (latencySyncTick/10000).ToString() + "ms latency' " + (offsetSyncTick/10000).ToString() + "ms offset");                  Log.Debug("Requesting initial vessel sync");                  //Start the initial sync after the time is synced.                  Invoke("sendInitialSyncRequest"'0.5f);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.layoutOptions == null)  				KMPInfoDisplay.layoutOptions = new GUILayoutOption[6];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPInfoDisplay.infoDisplayMinimized)  			{  				KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);  				KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_MINIMIZED);    				KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  				KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_MINIMIZED);  			}  			else  			{    				if (KMPGlobalSettings.instance.infoDisplayBig)  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_BIG);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT_BIG);  				}  				else  				{  					KMPInfoDisplay.layoutOptions[4] = GUILayout.MinWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);  					KMPInfoDisplay.layoutOptions[5] = GUILayout.MaxWidth(KMPInfoDisplay.WINDOW_WIDTH_DEFAULT);    					KMPInfoDisplay.layoutOptions[2] = GUILayout.MinHeight(KMPInfoDisplay.WINDOW_HEIGHT);  					KMPInfoDisplay.layoutOptions[3] = GUILayout.MaxHeight(KMPInfoDisplay.WINDOW_HEIGHT);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPChatDX.layoutOptions == null)                  KMPChatDX.layoutOptions = new GUILayoutOption[4];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.layoutOptions[2] = GUILayout.MinHeight(KMPChatDX.chatboxHeight);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: KMPChatDX.layoutOptions[3] = GUILayout.MaxHeight(KMPChatDX.chatboxHeight);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPScreenshotDisplay.layoutOptions == null)  				KMPScreenshotDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPConnectionDisplay.layoutOptions == null)  				KMPConnectionDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPVesselLockDisplay.layoutOptions == null)  				KMPVesselLockDisplay.layoutOptions = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPGlobalSettings.instance.chatDXWindowEnabled && !isGameHUDHidden && KMPToggleButtonState)              {                  KMPChatDX.windowPos = GUILayout.Window(                      GUIUtility.GetControlID(999994' FocusType.Passive)'                      KMPChatDX.getWindowPos()'                      chatWindowDX'                      ""'                      KMPChatDX.windowStyle'                      KMPChatDX.layoutOptions                      );              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPConnectionDisplay.windowEnabled)  			{  				gameRunning = false;  				try  				{  					GameEvents.onGameSceneLoadRequested.Remove(this.OnGameSceneLoadRequested);  					GameEvents.onFlightReady.Remove(this.OnFlightReady);  					GameEvents.onPartCouple.Remove(this.OnPartCouple);  					GameEvents.onPartUndock.Remove(this.OnPartUndock);  					GameEvents.onCrewOnEva.Remove(this.OnCrewOnEva);  					GameEvents.onCrewBoardVessel.Remove(this.OnCrewBoardVessel);  					GameEvents.onVesselLoaded.Remove(this.OnVesselLoaded);  					GameEvents.onVesselTerminated.Remove(this.OnVesselTerminated);  					GameEvents.onVesselDestroy.Remove(this.OnVesselDestroy);  					GameEvents.OnProgressComplete.Remove(this.OnProgressComplete);  					GameEvents.OnProgressReached.Remove(this.OnProgressReached);  					GameEvents.onGUIRnDComplexDespawn.Remove(this.OnGUIRnDComplexDespawn);  					GameEvents.OnTechnologyResearched.Remove(this.OnTechnologyResearched);  					GameEvents.onVesselRecovered.Remove(this.OnVesselRecovered);                      GameEvents.onKnowledgeChanged.Remove(this.OnKnowledgeChanged);                      GameEvents.onNewVesselCreated.Remove(this.OnNewVesselCreated);  				}          catch (Exception e) {                Log.Debug("Exception thrown in drawGUI()' catch 1' Exception: {0}"' e.ToString());          }  				if (showConnectionWindow)  				{  					GUILayout.Window(  						GUIUtility.GetControlID(999996' FocusType.Passive)'  						KMPConnectionDisplay.windowPos'  						connectionWindow'  						"Connection Settings"'  						KMPConnectionDisplay.layoutOptions  						);  				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (!KMPConnectionDisplay.windowEnabled && KMPClientMain.handshakeCompleted && KMPClientMain.tcpClient != null)  			{  				if(KMPInfoDisplay.infoDisplayActive && !isGameHUDHidden && KMPToggleButtonState)  				{  					KMPInfoDisplay.infoWindowPos = GUILayout.Window(  						GUIUtility.GetControlID(999999' FocusType.Passive)'  						KMPInfoDisplay.infoWindowPos'  						infoDisplayWindow'  						KMPInfoDisplay.infoDisplayMinimized ? "KMP" : "KerbalMP v"+KMPCommon.PROGRAM_VERSION+" ("+KMPGlobalSettings.instance.guiToggleKey+")"'  						KMPInfoDisplay.layoutOptions  						);  					  					if (isInFlight && !KMPInfoDisplay.infoDisplayMinimized)  					{  						GUILayout.Window(  							GUIUtility.GetControlID(999995' FocusType.Passive)'  							KMPVesselLockDisplay.windowPos'  							lockWindow'  							syncing ? "Bailout" : "Lock"'  							KMPVesselLockDisplay.layoutOptions  							);  					}  				}	  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (!KMPConnectionDisplay.windowEnabled && KMPClientMain.handshakeCompleted && KMPClientMain.tcpClient != null)  			{  				if(KMPInfoDisplay.infoDisplayActive && !isGameHUDHidden && KMPToggleButtonState)  				{  					KMPInfoDisplay.infoWindowPos = GUILayout.Window(  						GUIUtility.GetControlID(999999' FocusType.Passive)'  						KMPInfoDisplay.infoWindowPos'  						infoDisplayWindow'  						KMPInfoDisplay.infoDisplayMinimized ? "KMP" : "KerbalMP v"+KMPCommon.PROGRAM_VERSION+" ("+KMPGlobalSettings.instance.guiToggleKey+")"'  						KMPInfoDisplay.layoutOptions  						);  					  					if (isInFlight && !KMPInfoDisplay.infoDisplayMinimized)  					{  						GUILayout.Window(  							GUIUtility.GetControlID(999995' FocusType.Passive)'  							KMPVesselLockDisplay.windowPos'  							lockWindow'  							syncing ? "Bailout" : "Lock"'  							KMPVesselLockDisplay.layoutOptions  							);  					}  				}	  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,drawGUI,The following statement contains a magic number: if (KMPScreenshotDisplay.windowEnabled && !isGameHUDHidden && KMPToggleButtonState)  			{  				KMPScreenshotDisplay.windowPos = GUILayout.Window(  					GUIUtility.GetControlID(999998' FocusType.Passive)'  					KMPScreenshotDisplay.windowPos'  					screenshotWindow'  					"KerbalMP Viewer (" + KMPGlobalSettings.instance.screenshotToggleKey + ")"'  					KMPScreenshotDisplay.layoutOptions  					);  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The following statement contains a magic number: try  			{  				GUILayout.BeginVertical();  				GUIStyle lockButtonStyle = new GUIStyle(GUI.skin.button);  				lockButtonStyle.fontSize = 10;  				  				if (!syncing)  				{  					bool wasLocked;  					if (!serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) || !serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  					{  						//Must be ours  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = false;  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  						sendVesselMessage(FlightGlobals.ActiveVessel);  						wasLocked = false;  					}  					else  					{  						//Get locked status  						wasLocked = serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id];  					}  					if (!wasLocked && (serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id) ? !serverVessels_InUse[FlightGlobals.ActiveVessel.id] : true))  					{  						//Unlocked unoccupied vessel is now ours  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  					}  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = false;  					bool locked =  						GUILayout.Toggle(wasLocked'  						wasLocked ? "Private" : "Public"'  						lockButtonStyle);  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = true;  					if (serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && wasLocked != locked)  					{  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = locked;  						if (locked) ScreenMessages.PostScreenMessage("Your vessel is now marked Private"'5'ScreenMessageStyle.UPPER_CENTER);  						else ScreenMessages.PostScreenMessage("Your vessel is now marked Public"'5'ScreenMessageStyle.UPPER_CENTER);  						sendVesselMessage(FlightGlobals.ActiveVessel);  					}  				}  				else  				{  					//Offer bailout  					bool quit = GUILayout.Button("Quit"'lockButtonStyle);  					if (quit)  					{  						if (KMPClientMain.tcpClient != null) {  							KMPClientMain.sendConnectionEndMessage("Requested quit during sync");  						}  						KMPClientMain.endSession = true;  						forceQuit = true;  					}  				}  				GUILayout.EndVertical();  			}  			  			catch (Exception e)  			{  				Log.Debug("Exception thrown in lockWindow()' catch 1' Exception: {0}"' e.ToString());  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The following statement contains a magic number: try  			{  				GUILayout.BeginVertical();  				GUIStyle lockButtonStyle = new GUIStyle(GUI.skin.button);  				lockButtonStyle.fontSize = 10;  				  				if (!syncing)  				{  					bool wasLocked;  					if (!serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) || !serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  					{  						//Must be ours  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = false;  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  						sendVesselMessage(FlightGlobals.ActiveVessel);  						wasLocked = false;  					}  					else  					{  						//Get locked status  						wasLocked = serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id];  					}  					if (!wasLocked && (serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id) ? !serverVessels_InUse[FlightGlobals.ActiveVessel.id] : true))  					{  						//Unlocked unoccupied vessel is now ours  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  					}  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = false;  					bool locked =  						GUILayout.Toggle(wasLocked'  						wasLocked ? "Private" : "Public"'  						lockButtonStyle);  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = true;  					if (serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && wasLocked != locked)  					{  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = locked;  						if (locked) ScreenMessages.PostScreenMessage("Your vessel is now marked Private"'5'ScreenMessageStyle.UPPER_CENTER);  						else ScreenMessages.PostScreenMessage("Your vessel is now marked Public"'5'ScreenMessageStyle.UPPER_CENTER);  						sendVesselMessage(FlightGlobals.ActiveVessel);  					}  				}  				else  				{  					//Offer bailout  					bool quit = GUILayout.Button("Quit"'lockButtonStyle);  					if (quit)  					{  						if (KMPClientMain.tcpClient != null) {  							KMPClientMain.sendConnectionEndMessage("Requested quit during sync");  						}  						KMPClientMain.endSession = true;  						forceQuit = true;  					}  				}  				GUILayout.EndVertical();  			}  			  			catch (Exception e)  			{  				Log.Debug("Exception thrown in lockWindow()' catch 1' Exception: {0}"' e.ToString());  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,lockWindow,The following statement contains a magic number: try  			{  				GUILayout.BeginVertical();  				GUIStyle lockButtonStyle = new GUIStyle(GUI.skin.button);  				lockButtonStyle.fontSize = 10;  				  				if (!syncing)  				{  					bool wasLocked;  					if (!serverVessels_IsPrivate.ContainsKey(FlightGlobals.ActiveVessel.id) || !serverVessels_IsMine.ContainsKey(FlightGlobals.ActiveVessel.id))  					{  						//Must be ours  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = false;  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  						sendVesselMessage(FlightGlobals.ActiveVessel);  						wasLocked = false;  					}  					else  					{  						//Get locked status  						wasLocked = serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id];  					}  					if (!wasLocked && (serverVessels_InUse.ContainsKey(FlightGlobals.ActiveVessel.id) ? !serverVessels_InUse[FlightGlobals.ActiveVessel.id] : true))  					{  						//Unlocked unoccupied vessel is now ours  						serverVessels_IsMine[FlightGlobals.ActiveVessel.id] = true;  					}  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = false;  					bool locked =  						GUILayout.Toggle(wasLocked'  						wasLocked ? "Private" : "Public"'  						lockButtonStyle);  					if (!serverVessels_IsMine[FlightGlobals.ActiveVessel.id]) GUI.enabled = true;  					if (serverVessels_IsMine[FlightGlobals.ActiveVessel.id] && wasLocked != locked)  					{  						serverVessels_IsPrivate[FlightGlobals.ActiveVessel.id] = locked;  						if (locked) ScreenMessages.PostScreenMessage("Your vessel is now marked Private"'5'ScreenMessageStyle.UPPER_CENTER);  						else ScreenMessages.PostScreenMessage("Your vessel is now marked Public"'5'ScreenMessageStyle.UPPER_CENTER);  						sendVesselMessage(FlightGlobals.ActiveVessel);  					}  				}  				else  				{  					//Offer bailout  					bool quit = GUILayout.Button("Quit"'lockButtonStyle);  					if (quit)  					{  						if (KMPClientMain.tcpClient != null) {  							KMPClientMain.sendConnectionEndMessage("Requested quit during sync");  						}  						KMPClientMain.endSession = true;  						forceQuit = true;  					}  				}  				GUILayout.EndVertical();  			}  			  			catch (Exception e)  			{  				Log.Debug("Exception thrown in lockWindow()' catch 1' Exception: {0}"' e.ToString());  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,infoDisplayWindow,The following statement contains a magic number: if (!minimized)  			{  				KMPGlobalSettings.instance.infoDisplayBig = GUILayout.Toggle(  					KMPGlobalSettings.instance.infoDisplayBig'  					KMPGlobalSettings.instance.infoDisplayBig ? "- " : "+ "'  					GUI.skin.button);  				KMPInfoDisplay.infoDisplayDetailed = GUILayout.Toggle(KMPInfoDisplay.infoDisplayDetailed' "Detail"' GUI.skin.button);  				KMPInfoDisplay.infoDisplayOptions = GUILayout.Toggle(KMPInfoDisplay.infoDisplayOptions' "Options"' GUI.skin.button);  				GUILayout.EndHorizontal();    				KMPInfoDisplay.infoScrollPos = GUILayout.BeginScrollView(KMPInfoDisplay.infoScrollPos);  				GUILayout.BeginVertical();    				//Init label styles  				playerNameStyle = new GUIStyle(GUI.skin.label);  				playerNameStyle.normal.textColor = Color.white;  				playerNameStyle.hover.textColor = Color.white;  				playerNameStyle.active.textColor = Color.white;  				playerNameStyle.alignment = TextAnchor.MiddleLeft;  				playerNameStyle.margin = new RectOffset(0' 0' 2' 0);  				playerNameStyle.padding = new RectOffset(0' 0' 0' 0);  				playerNameStyle.stretchWidth = true;  				playerNameStyle.fontStyle = FontStyle.Bold;    				vesselNameStyle = new GUIStyle(GUI.skin.label);  				vesselNameStyle.normal.textColor = Color.white;  				vesselNameStyle.stretchWidth = true;  				vesselNameStyle.fontStyle = FontStyle.Bold;  				if (big)  				{  					vesselNameStyle.margin = new RectOffset(0' 4' 2' 0);  					vesselNameStyle.alignment = TextAnchor.LowerRight;  				}  				else  				{  					vesselNameStyle.margin = new RectOffset(4' 0' 0' 0);  					vesselNameStyle.alignment = TextAnchor.LowerLeft;  				}    				vesselNameStyle.padding = new RectOffset(0' 0' 0' 0);    				stateTextStyle = new GUIStyle(GUI.skin.label);  				stateTextStyle.normal.textColor = new Color(0.75f' 0.75f' 0.75f);  				stateTextStyle.margin = new RectOffset(4' 0' 0' 0);  				stateTextStyle.padding = new RectOffset(0' 0' 0' 0);  				stateTextStyle.stretchWidth = true;  				stateTextStyle.fontStyle = FontStyle.Normal;  				stateTextStyle.fontSize = 12;    				//Write vessel's statuses  				foreach (KeyValuePair<String' VesselStatusInfo> pair in playerStatus)  					vesselStatusLabels(pair.Value' big);    				GUILayout.EndVertical();  				GUILayout.EndScrollView();    				GUILayout.BeginHorizontal();  				GUIStyle chatButtonStyle = new GUIStyle(GUI.skin.button);  				if (chatMessagesWaiting > 5)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (chatMessagesWaiting > 2)  				{  					chatButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (chatMessagesWaiting > 0)  				{  					chatButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				GUIStyle screenshotButtonStyle = new GUIStyle(GUI.skin.button);  				int numScreenshotsWaiting = KMPClientMain.screenshotsWaiting.Count();  				if (numScreenshotsWaiting > 3)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.09f' 0.09f);  				}  				else if (numScreenshotsWaiting > 1)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.92f' 0.60f' 0.09f);  				}  				else if (numScreenshotsWaiting > 0)  				{  					screenshotButtonStyle.normal.textColor = new Color(0.27f' 0.92f' 0.09f);  				}  				KMPGlobalSettings.instance.chatDXWindowEnabled = GUILayout.Toggle(KMPGlobalSettings.instance.chatDXWindowEnabled' "Chat ("+KMPGlobalSettings.instance.chatHideKey+")"' chatButtonStyle);  				KMPScreenshotDisplay.windowEnabled = GUILayout.Toggle(KMPScreenshotDisplay.windowEnabled' "Viewer ("+KMPGlobalSettings.instance.screenshotToggleKey+")"' screenshotButtonStyle);  				if (GUILayout.Button("Share Screen ("+KMPGlobalSettings.instance.screenshotKey+")"))  					StartCoroutine(shareScreenshot());  				  				GUIStyle syncButtonStyle = new GUIStyle(GUI.skin.button);  				string tooltip = "";                  if (!syncing)                  {                      if (showServerSync)                       {                          if (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true)                              tooltip = "Sync to the future";                          else                              tooltip = "Can't sync - throttle";                      }                       else                      {                          tooltip = "Already fully synced";                         }                  }  				if (showServerSync && (isInFlight ? FlightGlobals.ActiveVessel.ctrlState.mainThrottle == 0f : true) && !isObserving)  				{  					syncButtonStyle.normal.textColor = new Color(0.28f' 0.86f' 0.94f);  					syncButtonStyle.hover.textColor = new Color(0.48f' 0.96f' 0.96f);  					if (GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle))  						StartCoroutine(sendSubspaceSyncRequest());  				}  				else  				{  					syncButtonStyle.normal.textColor = new Color(0.5f'0.5f'0.5f);  					GUI.enabled = false;  					GUILayout.Button(new GUIContent("Sync"' tooltip)'syncButtonStyle);  					GUI.enabled = true;  				}  				GUI.Label(new Rect(showServerSync ? 205 : 190'298'200'10)'GUI.tooltip);  				GUILayout.EndHorizontal();    				if (KMPInfoDisplay.infoDisplayOptions)  				{  					//Connection  					GUILayout.Label("Connection");    					GUILayout.BeginHorizontal();  					  					if (GUILayout.Button("Disconnect & Exit"))  					{                          disconnect();  						KMPClientMain.sendConnectionEndMessage("Quit");  						KMPClientMain.intentionalConnectionEnd = true;  						KMPClientMain.endSession = true;  						gameRunning = false;  						forceQuit = true;  					}    					GUILayout.EndHorizontal();  					  					//Settings  					GUILayout.Label("Settings");    					GUILayout.BeginHorizontal();    					KMPGlobalSettings.instance.smoothScreens = GUILayout.Toggle(  						KMPGlobalSettings.instance.smoothScreens'  						"Smooth Screenshots"'  						GUI.skin.button);    					KMPGlobalSettings.instance.chatColors  						= GUILayout.Toggle(KMPGlobalSettings.instance.chatColors' "Chat Colors"' GUI.skin.button);  					  					GUILayout.EndHorizontal();    					KMPGlobalSettings.instance.useNewUiSkin  						= GUILayout.Toggle(KMPGlobalSettings.instance.useNewUiSkin' "New GUI Skin"' GUI.skin.toggle);    					//Key mapping  					GUILayout.Label("Key-Bindings");      					GUILayout.BeginHorizontal();    					mappingGUIToggleKey = GUILayout.Toggle(  						mappingGUIToggleKey'  						mappingGUIToggleKey ? "Press key" : "Menu Toggle: " + KMPGlobalSettings.instance.guiToggleKey'  						GUI.skin.button);    					mappingScreenshotKey = GUILayout.Toggle(  						mappingScreenshotKey'  						mappingScreenshotKey ? "Press key" : "Screenshot: " + KMPGlobalSettings.instance.screenshotKey'  						GUI.skin.button);    					GUILayout.EndHorizontal();                                                GUILayout.BeginHorizontal();                        mappingChatKey = GUILayout.Toggle(                          mappingChatKey'                          mappingChatKey ? "Press key" : "Send Chat: " + KMPGlobalSettings.instance.chatTalkKey'                          GUI.skin.button);                        mappingChatDXToggleKey = GUILayout.Toggle(                          mappingChatDXToggleKey'                          mappingChatDXToggleKey ? "Press key" : "Chat Toggle: " + KMPGlobalSettings.instance.chatHideKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                                            GUILayout.BeginHorizontal();                        mappingScreenshotToggleKey = GUILayout.Toggle(                          mappingScreenshotToggleKey'                          mappingScreenshotToggleKey ? "Press key" : "Screenshot Toggle: " + KMPGlobalSettings.instance.screenshotToggleKey'                          GUI.skin.button);                        GUILayout.EndHorizontal();                      // Chat map & reset                      GUILayout.Label("Reset Chat Window");                      if (GUILayout.Button("Reset Chat"))                      {                          KMPChatDX.windowPos.x = 0;                          KMPChatDX.windowPos.y = 0;                      }                            				}  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (KMPClientMain.handshakeCompleted && KMPClientMain.tcpClient != null && !gameRunning && gameStart)  			{  					gameStart = false;  					gameRunning = true;    					Console.WriteLine("Game started.");  					//Clear dictionaries  					sentVessels_Situations.Clear();  		  					serverVessels_RemoteID.Clear();  					serverVessels_PartCounts.Clear();  					serverVessels_Parts.Clear();  					serverVessels_ProtoVessels.Clear();                  serverKerbals_AssignedKerbals.Clear();  					  					serverVessels_InUse.Clear();  					serverVessels_IsPrivate.Clear();  					serverVessels_IsMine.Clear();  					  					serverVessels_LastUpdateDistanceTime.Clear();  					serverVessels_LoadDelay.Clear();  					serverVessels_InPresent.Clear();  					serverVessels_ObtSyncDelay.Clear();  					  					serverVessels_RendezvousSmoothPos.Clear();  					serverVessels_RendezvousSmoothVel.Clear();    					isTimeSyncronized = false;  					listClientTimeSyncLatency.Clear ();  					listClientTimeSyncOffset.Clear ();  					listClientTimeWarp.Clear ();  					//Request rate 1x subspace rate straight away.  					listClientTimeWarp.Add(1);  					listClientTimeWarpAverage = 1;  	  					newFlags.Clear();  					  					//Start MP game  					KMPConnectionDisplay.windowEnabled = false;  					KMPInfoDisplay.infoDisplayOptions = false;  					//This is to revert manually setting it to 1. Users won't know about this setting.  					//Let's remove this somewhere around July 2014.  					if (GameSettings.PHYSICS_FRAME_DT_LIMIT == 1.0f) {  						GameSettings.PHYSICS_FRAME_DT_LIMIT = 0.04f;  					}  					HighLogic.SaveFolder = "KMP";  					HighLogic.CurrentGame = GamePersistence.LoadGame("start"'HighLogic.SaveFolder'false'true);  					HighLogic.CurrentGame.Parameters.Flight.CanAutoSave = false;  					HighLogic.CurrentGame.Parameters.Flight.CanLeaveToEditor = false;  					HighLogic.CurrentGame.Parameters.Flight.CanLeaveToMainMenu = false;  					HighLogic.CurrentGame.Parameters.Flight.CanQuickLoad = false;  					HighLogic.CurrentGame.Parameters.Flight.CanRestart = false;  					HighLogic.CurrentGame.Parameters.Flight.CanTimeWarpLow = false;  					HighLogic.CurrentGame.Title = "KMP";  					HighLogic.CurrentGame.Description = "Kerbal Multi Player session";  					HighLogic.CurrentGame.flagURL = "KMP/Flags/default";  					vesselUpdatesLoaded.Clear();    					if (gameMode == 1) //Career mode  						HighLogic.CurrentGame.Mode = Game.Modes.CAREER;  					  					GamePersistence.SaveGame("persistent"'HighLogic.SaveFolder'SaveMode.OVERWRITE);  					GameEvents.onFlightReady.Add(this.OnFirstFlightReady);                      vesselsLoaded = false;                      sdoReceived = false;  					syncing = true;  					HighLogic.CurrentGame.Start();    					HighLogic.CurrentGame.scenarios.Clear();  					//This is done because scenarios is not cleared properly even when a new game is started' and it was causing bugs in KMP.  					//Instead of clearing scenarios' KSP appears to set the moduleRefs of each module to null' which is what was causing KMP bugs #578'   					//and could be the cause of #579 (but closing KSP after disconnecting from a server' before connecting again' prevented it from happening'   					//at least for #578).  					  					for (int i=0; i<50;)  					{  						ProtoCrewMember protoCrew = CrewGenerator.RandomCrewMemberPrototype();  						if (!HighLogic.CurrentGame.CrewRoster.ExistsInRoster(protoCrew.name))  						{  							HighLogic.CurrentGame.CrewRoster.AddCrewMember(protoCrew);  							i++;  						}  					}  					GameEvents.onGameSceneLoadRequested.Add(this.OnGameSceneLoadRequested);  					GameEvents.onPartCouple.Add(this.OnPartCouple);  					GameEvents.onPartUndock.Add(this.OnPartUndock);  					GameEvents.onCrewOnEva.Add(this.OnCrewOnEva);  					GameEvents.onCrewBoardVessel.Add(this.OnCrewBoardVessel);  					GameEvents.onVesselLoaded.Add(this.OnVesselLoaded);  					GameEvents.onVesselTerminated.Add(this.OnVesselTerminated);  					GameEvents.onVesselDestroy.Add(this.OnVesselDestroy);  					GameEvents.OnProgressComplete.Add(this.OnProgressComplete);  					GameEvents.OnProgressReached.Add(this.OnProgressReached);  					GameEvents.onGUIRnDComplexDespawn.Add(this.OnGUIRnDComplexDespawn);  					GameEvents.OnTechnologyResearched.Add(this.OnTechnologyResearched);  					GameEvents.onVesselRecovered.Add(this.OnVesselRecovered);                      GameEvents.onKnowledgeChanged.Add(this.OnKnowledgeChanged);                      GameEvents.onNewVesselCreated.Add(this.OnNewVesselCreated);  					writePluginData();  					//Make sure user knows how to use new chat  					KMPChatDX.enqueueChatLine("Press Chat key (" + (KMPGlobalSettings.instance.chatTalkKey == KeyCode.BackQuote ? "~" : KMPGlobalSettings.instance.chatTalkKey.ToString()) + ") to send a message");  					KMPGlobalSettings.instance.chatDXWindowEnabled = true;  					  					return;  			}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (addPressed)  				{  					GUILayout.BeginVertical();  					GUILayout.BeginHorizontal();  					GUILayoutOption[] name_options = new GUILayoutOption[1];  					name_options[0] = GUILayout.MaxWidth(300);  					GUILayout.Label("Server Name:");  					newFamiliar = GUILayout.TextField(newFamiliar' name_options).Trim();  						  						  					GUILayout.EndHorizontal();    					GUILayout.BeginHorizontal();  					GUILayoutOption[] field_options = new GUILayoutOption[1];  					field_options[0] = GUILayout.MaxWidth(60);  					GUILayout.Label("Address:");  					newHost = GUILayout.TextField(newHost);  					GUILayout.Label("Port:");  					newPort = GUILayout.TextField(newPort' field_options);                        GUILayout.EndHorizontal();                      GUILayout.BeginHorizontal();                      // Fetch favourites                      Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                            GUILayoutOption[] btn_options = new GUILayoutOption[1];                      btn_options[0] = GUILayout.MaxWidth(126);                                        bool favoriteItemExists = favorites.ContainsKey(newFamiliar);                      GUI.enabled = !favoriteItemExists;  					bool addHostPressed = GUILayout.Button("New"'btn_options);                      GUI.enabled = favoriteItemExists;                      bool editHostPressed = GUILayout.Button("Save"' btn_options);                      GUI.enabled = true;                      bool cancelEdit = GUILayout.Button("Cancel"' btn_options);                      if (cancelEdit)                      {                          addPressed = false; /* Return to previous screen */                       }else if (addHostPressed && !favoriteItemExists) // Probably don't need these extra checks' but there is no harm                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                            if (favorites.ContainsKey(newFamiliar))                          {                              ScreenMessages.PostScreenMessage("Server name taken"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else if (favorites.ContainsValue(sArr))                          {                              // Is this ever true? Arrays are compared by reference are they not ? - NC                              ScreenMessages.PostScreenMessage("This server already exists"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else                          {                              favorites.Add(newFamiliar' sArr);                                //Close the add server bar after a server has been added and select the new server                              addPressed = false;                              // Personal preference' change back if you don't like' Gimp. - NC                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPClientMain.SetFavorites(favorites);                          }                      }                      else if(editHostPressed && favoriteItemExists)                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                          favorites[newFamiliar] = sArr;                          addPressed = false;                          // Disable the active familar after this stage' because otherwise the controls feel sticky and confusing                          KMPConnectionDisplay.activeFamiliar = String.Empty;                          KMPClientMain.SetFavorites(favorites); // I would love to have this as a seperate object in the manager' no more getting and setting.                       }                      GUILayout.EndHorizontal();  					GUILayout.EndVertical();  				}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (addPressed)  				{  					GUILayout.BeginVertical();  					GUILayout.BeginHorizontal();  					GUILayoutOption[] name_options = new GUILayoutOption[1];  					name_options[0] = GUILayout.MaxWidth(300);  					GUILayout.Label("Server Name:");  					newFamiliar = GUILayout.TextField(newFamiliar' name_options).Trim();  						  						  					GUILayout.EndHorizontal();    					GUILayout.BeginHorizontal();  					GUILayoutOption[] field_options = new GUILayoutOption[1];  					field_options[0] = GUILayout.MaxWidth(60);  					GUILayout.Label("Address:");  					newHost = GUILayout.TextField(newHost);  					GUILayout.Label("Port:");  					newPort = GUILayout.TextField(newPort' field_options);                        GUILayout.EndHorizontal();                      GUILayout.BeginHorizontal();                      // Fetch favourites                      Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                            GUILayoutOption[] btn_options = new GUILayoutOption[1];                      btn_options[0] = GUILayout.MaxWidth(126);                                        bool favoriteItemExists = favorites.ContainsKey(newFamiliar);                      GUI.enabled = !favoriteItemExists;  					bool addHostPressed = GUILayout.Button("New"'btn_options);                      GUI.enabled = favoriteItemExists;                      bool editHostPressed = GUILayout.Button("Save"' btn_options);                      GUI.enabled = true;                      bool cancelEdit = GUILayout.Button("Cancel"' btn_options);                      if (cancelEdit)                      {                          addPressed = false; /* Return to previous screen */                       }else if (addHostPressed && !favoriteItemExists) // Probably don't need these extra checks' but there is no harm                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                            if (favorites.ContainsKey(newFamiliar))                          {                              ScreenMessages.PostScreenMessage("Server name taken"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else if (favorites.ContainsValue(sArr))                          {                              // Is this ever true? Arrays are compared by reference are they not ? - NC                              ScreenMessages.PostScreenMessage("This server already exists"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else                          {                              favorites.Add(newFamiliar' sArr);                                //Close the add server bar after a server has been added and select the new server                              addPressed = false;                              // Personal preference' change back if you don't like' Gimp. - NC                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPClientMain.SetFavorites(favorites);                          }                      }                      else if(editHostPressed && favoriteItemExists)                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                          favorites[newFamiliar] = sArr;                          addPressed = false;                          // Disable the active familar after this stage' because otherwise the controls feel sticky and confusing                          KMPConnectionDisplay.activeFamiliar = String.Empty;                          KMPClientMain.SetFavorites(favorites); // I would love to have this as a seperate object in the manager' no more getting and setting.                       }                      GUILayout.EndHorizontal();  					GUILayout.EndVertical();  				}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (addPressed)  				{  					GUILayout.BeginVertical();  					GUILayout.BeginHorizontal();  					GUILayoutOption[] name_options = new GUILayoutOption[1];  					name_options[0] = GUILayout.MaxWidth(300);  					GUILayout.Label("Server Name:");  					newFamiliar = GUILayout.TextField(newFamiliar' name_options).Trim();  						  						  					GUILayout.EndHorizontal();    					GUILayout.BeginHorizontal();  					GUILayoutOption[] field_options = new GUILayoutOption[1];  					field_options[0] = GUILayout.MaxWidth(60);  					GUILayout.Label("Address:");  					newHost = GUILayout.TextField(newHost);  					GUILayout.Label("Port:");  					newPort = GUILayout.TextField(newPort' field_options);                        GUILayout.EndHorizontal();                      GUILayout.BeginHorizontal();                      // Fetch favourites                      Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                            GUILayoutOption[] btn_options = new GUILayoutOption[1];                      btn_options[0] = GUILayout.MaxWidth(126);                                        bool favoriteItemExists = favorites.ContainsKey(newFamiliar);                      GUI.enabled = !favoriteItemExists;  					bool addHostPressed = GUILayout.Button("New"'btn_options);                      GUI.enabled = favoriteItemExists;                      bool editHostPressed = GUILayout.Button("Save"' btn_options);                      GUI.enabled = true;                      bool cancelEdit = GUILayout.Button("Cancel"' btn_options);                      if (cancelEdit)                      {                          addPressed = false; /* Return to previous screen */                       }else if (addHostPressed && !favoriteItemExists) // Probably don't need these extra checks' but there is no harm                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                            if (favorites.ContainsKey(newFamiliar))                          {                              ScreenMessages.PostScreenMessage("Server name taken"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else if (favorites.ContainsValue(sArr))                          {                              // Is this ever true? Arrays are compared by reference are they not ? - NC                              ScreenMessages.PostScreenMessage("This server already exists"' 300f' ScreenMessageStyle.UPPER_CENTER);                          }                          else                          {                              favorites.Add(newFamiliar' sArr);                                //Close the add server bar after a server has been added and select the new server                              addPressed = false;                              // Personal preference' change back if you don't like' Gimp. - NC                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPConnectionDisplay.activeFamiliar = String.Empty;                              KMPClientMain.SetFavorites(favorites);                          }                      }                      else if(editHostPressed && favoriteItemExists)                      {                          KMPClientMain.SetServer(newHost.Trim());                          String[] sArr = { newHost.Trim()' newPort.Trim()' KMPClientMain.GetUsername() };                          favorites[newFamiliar] = sArr;                          addPressed = false;                          // Disable the active familar after this stage' because otherwise the controls feel sticky and confusing                          KMPConnectionDisplay.activeFamiliar = String.Empty;                          KMPClientMain.SetFavorites(favorites); // I would love to have this as a seperate object in the manager' no more getting and setting.                       }                      GUILayout.EndHorizontal();  					GUILayout.EndVertical();  				}
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: if (!addPressed)              {                  GUILayout.BeginHorizontal();                    GUILayoutOption[] connection_list_options = new GUILayoutOption[2];                  connection_list_options[0] = GUILayout.MinWidth(290);                  connection_list_options[1] = GUILayout.MinHeight(140);                    GUILayout.BeginVertical(connection_list_options);                    GUILayout.BeginHorizontal();                  GUILayoutOption[] label_options = new GUILayoutOption[1];                  label_options[0] = GUILayout.MinWidth(75);                  GUILayout.Label("Username:"' label_options);                  KMPClientMain.SetUsername(GUILayout.TextField(KMPClientMain.GetUsername()));                  GUILayout.EndHorizontal();                    KMPConnectionDisplay.scrollPos = GUILayout.BeginScrollView(KMPConnectionDisplay.scrollPos' connection_list_options);                  foreach (String familiar in KMPClientMain.GetFavorites().Keys)                  {                      if (!String.IsNullOrEmpty(familiar))                          connectionButton(familiar);                  }                  GUILayout.EndScrollView();                    GUILayout.EndVertical();                    GUILayoutOption[] pane_options = new GUILayoutOption[1];                  pane_options[0] = GUILayout.MaxWidth(50);                                    GUILayoutOption[] pane_btn_options = new GUILayoutOption[1];                  pane_btn_options[0] = GUILayout.Width(80);                    GUILayout.BeginVertical(pane_options);                    bool allowConnect = true;                  if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) || String.IsNullOrEmpty(KMPClientMain.GetUsername()))                      allowConnect = false;                    if (!allowConnect)                      GUI.enabled = false;                    bool connectPressed = GUILayout.Button("Connect"'pane_btn_options);                  GUI.enabled = true;                    if (connectPressed && allowConnect)                  {                      KMPClientMain.SetMessage("");                      KMPClientMain.SetServer(KMPConnectionDisplay.activeHostname);                      KMPClientMain.Connect();                  }                    if (KMPClientMain.GetFavorites().Count < 1) addPressed = true;                    addPressed = GUILayout.Toggle(                      addPressed'                      (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) ?                      "Add Server" : "Edit"'                      GUI.skin.button'pane_btn_options);                                    Dictionary<String' String[]> favorites = KMPClientMain.GetFavorites();                      if (String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar)) GUI.enabled = false;                  bool deletePressed = GUILayout.Button("Remove"'pane_btn_options);                  if (deletePressed)                  {                      if (favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          favorites.Remove(KMPConnectionDisplay.activeFamiliar);                          KMPConnectionDisplay.activeHostname = "";                          KMPConnectionDisplay.activeFamiliar = "";                          KMPClientMain.SetFavorites(favorites);                      }                  }                  GUI.enabled = true;                    /* Add is a toggle after all */                  if (addPressed && !deletePressed)                  {                      /* If add is pressed and a server is selected' apply it's values to the edit controls */                      if (!String.IsNullOrEmpty(KMPConnectionDisplay.activeFamiliar) && favorites.ContainsKey(KMPConnectionDisplay.activeFamiliar))                      {                          newFamiliar = KMPConnectionDisplay.activeFamiliar;                          if (KMPConnectionDisplay.activeHostname.Contains(":"))                          {                              var tokens = KMPConnectionDisplay.activeHostname.Split(':');                              newHost = tokens[0];                              newPort = tokens[1];                          }                      }                      else //Defaults                      {                          newHost = "localhost";                          newPort = "2076";                          newFamiliar = "Server";                      }                  }                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,connectionWindow,The following statement contains a magic number: status_options[0] = GUILayout.MaxWidth(310);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: GUILayoutOption[] screenshot_box_options = new GUILayoutOption[4];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshot_box_options[2] = GUILayout.MinHeight(KMPScreenshotDisplay.screenshotSettings.maxHeight);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshot_box_options[3] = GUILayout.MaxHeight(KMPScreenshotDisplay.screenshotSettings.maxHeight);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: screenshotDescriptionStyle.padding.top = 4;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,screenshotWindow,The following statement contains a magic number: user_list_options[0] = GUILayout.MinWidth(150);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindow,The following statement contains a magic number: entry_field_options[0] = GUILayout.MaxWidth(KMPChatDisplay.windowWidth-58);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: GUILayoutOption[] entry_field_options = new GUILayoutOption[2];
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: if (platform == PlatformID.Unix)              {                  entry_field_options[0] = GUILayout.MaxWidth(KMPChatDX.chatboxWidth - 75);                  entry_field_options[1] = GUILayout.MinWidth(KMPChatDX.chatboxWidth - 75);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: if (platform == PlatformID.Unix)              {                  entry_field_options[0] = GUILayout.MaxWidth(KMPChatDX.chatboxWidth - 75);                  entry_field_options[1] = GUILayout.MinWidth(KMPChatDX.chatboxWidth - 75);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: foreach (KMPChatDX.ChatLine line in KMPChatDX.chatLineQueue)              {                  GUILayout.BeginHorizontal();                  KMPChatDX.chatStyle.normal.textColor = line.color;                  if (line.name == "")                  {                      GUILayout.Label(line.message' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' line.message' style);                      position.x += 2;                      GUI.Label(position' line.message' style);                      position.x--;                      position.y--;                      GUI.Label(position' line.message' style);                      position.y += 2;                      GUI.Label(position' line.message' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' line.message' style);                  }                  else                  {  					var text = line.name + ": " + line.message;  					if(line.isAdmin) {  						text = "[" + KMPCommon.ADMIN_MARKER + "] " + text;  					}                      GUILayout.Label(text' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' text' style);                      position.x += 2;                      GUI.Label(position' text' style);                      position.x--;                      position.y--;                      GUI.Label(position' text' style);                      position.y += 2;                      GUI.Label(position' text' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' text' style);                    }                    GUILayout.EndHorizontal();                  GUILayout.Space(1);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: foreach (KMPChatDX.ChatLine line in KMPChatDX.chatLineQueue)              {                  GUILayout.BeginHorizontal();                  KMPChatDX.chatStyle.normal.textColor = line.color;                  if (line.name == "")                  {                      GUILayout.Label(line.message' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' line.message' style);                      position.x += 2;                      GUI.Label(position' line.message' style);                      position.x--;                      position.y--;                      GUI.Label(position' line.message' style);                      position.y += 2;                      GUI.Label(position' line.message' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' line.message' style);                  }                  else                  {  					var text = line.name + ": " + line.message;  					if(line.isAdmin) {  						text = "[" + KMPCommon.ADMIN_MARKER + "] " + text;  					}                      GUILayout.Label(text' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' text' style);                      position.x += 2;                      GUI.Label(position' text' style);                      position.x--;                      position.y--;                      GUI.Label(position' text' style);                      position.y += 2;                      GUI.Label(position' text' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' text' style);                    }                    GUILayout.EndHorizontal();                  GUILayout.Space(1);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: foreach (KMPChatDX.ChatLine line in KMPChatDX.chatLineQueue)              {                  GUILayout.BeginHorizontal();                  KMPChatDX.chatStyle.normal.textColor = line.color;                  if (line.name == "")                  {                      GUILayout.Label(line.message' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' line.message' style);                      position.x += 2;                      GUI.Label(position' line.message' style);                      position.x--;                      position.y--;                      GUI.Label(position' line.message' style);                      position.y += 2;                      GUI.Label(position' line.message' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' line.message' style);                  }                  else                  {  					var text = line.name + ": " + line.message;  					if(line.isAdmin) {  						text = "[" + KMPCommon.ADMIN_MARKER + "] " + text;  					}                      GUILayout.Label(text' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' text' style);                      position.x += 2;                      GUI.Label(position' text' style);                      position.x--;                      position.y--;                      GUI.Label(position' text' style);                      position.y += 2;                      GUI.Label(position' text' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' text' style);                    }                    GUILayout.EndHorizontal();                  GUILayout.Space(1);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: foreach (KMPChatDX.ChatLine line in KMPChatDX.chatLineQueue)              {                  GUILayout.BeginHorizontal();                  KMPChatDX.chatStyle.normal.textColor = line.color;                  if (line.name == "")                  {                      GUILayout.Label(line.message' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' line.message' style);                      position.x += 2;                      GUI.Label(position' line.message' style);                      position.x--;                      position.y--;                      GUI.Label(position' line.message' style);                      position.y += 2;                      GUI.Label(position' line.message' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' line.message' style);                  }                  else                  {  					var text = line.name + ": " + line.message;  					if(line.isAdmin) {  						text = "[" + KMPCommon.ADMIN_MARKER + "] " + text;  					}                      GUILayout.Label(text' KMPChatDX.chatStyle);                        var position = GUILayoutUtility.GetLastRect();                        var style = KMPChatDX.chatStyle;                      style.normal.textColor = new Color(0' 0' 0);                        position.x--;                      GUI.Label(position' text' style);                      position.x += 2;                      GUI.Label(position' text' style);                      position.x--;                      position.y--;                      GUI.Label(position' text' style);                      position.y += 2;                      GUI.Label(position' text' style);                        KMPChatDX.chatStyle.normal.textColor = line.color;                      position.y--;                      GUI.Label(position' text' style);                    }                    GUILayout.EndHorizontal();                  GUILayout.Space(1);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,chatWindowDX,The following statement contains a magic number: if (KMPChatDX.draggable)              {                  GUI.depth = 0;                  GUI.BringWindowToFront(windowID);                  GUI.DragWindow();              }              else              {                  GUI.depth = 2;                  GUI.BringWindowToBack(windowID);              }
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.margin = new RectOffset(150'10'0'0);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following statement contains a magic number: syncButtonStyle.margin = new RectOffset(150'10'0'0);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,enforceWindowBoundaries,The following statement contains a magic number: const int padding = 20;
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654' -74.5753856554);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654' -74.5753856554);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654' -74.5753856554' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d landingPadPosition = body.GetWorldSurfacePosition(-0.0971978130377757' 285.44237039111' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,isInSafetyBubble,The following statement contains a magic number: Vector3d runwayPosition = body.GetWorldSurfacePosition(-0.0486001121594686' 285.275552559723' 60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654'-74.5753856554);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscNormal = body.GetSurfaceNVector(-0.102668048654'-74.5753856554);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,horizontalDistanceToSafetyBubbleEdge,The following statement contains a magic number: Vector3d kscPosition = body.GetWorldSurfacePosition(-0.102668048654'-74.5753856554'60);
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,KMPVessel,The following statement contains a magic number: gameObj.layer = 9;
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,KMPVessel,The following statement contains a magic number: line.SetVertexCount(2);
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: int val = 5381;
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: foreach (char c in str)  			{  				val = ((val << 5) + val) + c;  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,generateActiveColor,The following statement contains a magic number: switch (val % 17)  			{  				case 0:  					return Color.red;    				case 1:  					return new Color(1' 0' 0.5f' 1); //Rosy pink  					  				case 2:  					return new Color(0.6f' 0' 0.5f' 1); //OU Crimson  					  				case 3:  					return new Color(1' 0.5f' 0' 1); //Orange  					  				case 4:  					return Color.yellow;  					  				case 5:  					return new Color(1' 0.84f' 0' 1); //Gold  					  				case 6:  					return Color.green;  					  				case 7:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 8:  					return new Color(0' 0.651f' 0.576f' 1); //Persian Green  					  				case 9:  					return new Color(0' 0.659f' 0.420f' 1); //Jade  					  				case 10:  					return new Color(0.043f' 0.855f' 0.318f' 1); //Malachite  					  				case 11:  					return Color.cyan;					    				case 12:  					return new Color(0.537f' 0.812f' 0.883f' 1); //Baby blue;    				case 13:  					return new Color(0' 0.529f' 0.741f' 1); //NCS blue  					  				case 14:  					return new Color(0.255f' 0.412f' 0.882f' 1); //Royal Blue  					  				case 15:  					return new Color(0.5f' 0' 1' 1); //Violet  					  				default:  					return Color.magenta;  					  			}
Magic Number,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,setOrbitalData,The following statement contains a magic number: if (mainBody != null)              {                  localPosition = local_pos;                  translationFromBody = mainBody.transform.TransformPoint(localPosition) - mainBody.transform.position;                  localDirection = local_dir;                  localVelocity = local_vel;    				orbitValid = true;    				//Check for invalid values in the physics data  				if (!situationIsGrounded(info.situation)  					&& ((localPosition.x == 0.0f && localPosition.y == 0.0f && localPosition.z == 0.0f)  						|| (localVelocity.x == 0.0f && localVelocity.y == 0.0f && localVelocity.z == 0.0f)  						|| localPosition.magnitude > mainBody.sphereOfInfluence)  					)  				{  					orbitValid = false;  				}    				for (int i = 0; i < 3; i++)  				{  					if (float.IsNaN(localPosition[i]) || float.IsInfinity(localPosition[i]))  					{  						orbitValid = false;  						break;  					}    					if (float.IsNaN(localDirection[i]) || float.IsInfinity(localDirection[i]))  					{  						orbitValid = false;  						break;  					}    					if (float.IsNaN(localVelocity[i]) || float.IsInfinity(localVelocity[i]))  					{  						orbitValid = false;  						break;  					}  				}    				if (!orbitValid)  				{                      //Log.Debug("Orbit invalid: " + vesselName);  					//Spoof some values so the game doesn't freak out  					localPosition = new Vector3(1000.0f' 1000.0f' 1000.0f);  					translationFromBody = localPosition;  					localDirection = new Vector3(1.0f' 0.0f' 0.0f);  					localVelocity = new Vector3(1.0f' 0.0f' 0.0f);  				}    				//Calculate world-space properties  				worldDirection = mainBody.transform.TransformDirection(localDirection);  				worldVelocity = mainBody.transform.TransformDirection(localVelocity);    				//Update game object transform  				updateOrbitProperties();  				updatePosition();                }
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: pos = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: dir = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: vel = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: o_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: s_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: w_pos = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,KMPVesselUpdate,The following statement contains a magic number: rot = new float[4];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: pos = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: dir = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: vel = new float[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: o_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: s_vel = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: w_pos = new double[3];
Magic Number,KMP,KMPVesselUpdate,C:\repos\TehGimp_KerbalMultiPlayer\KMPVesselUpdate.cs,InitKMPVesselUpdate,The following statement contains a magic number: rot = new float[4];
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The following statement contains a magic number: using (System.IO.StringReader reader = new System.IO.StringReader(ModFileContent))              {                  string resourcemode = "whitelist";                  List<string> allowedParts = new List<string>();                  Dictionary<string' SHAMod> hashes = new Dictionary<string' SHAMod>();                  List<string> resources = new List<string>();                  List<string> modList = new List<string>();                  string line;                  string[] splitline = new string[2];                  string readmode = "";                  while (true)                  {                      line = reader.ReadLine(); //Trim off any whitespace from the start or end. This would allow indenting of the mod file.                      if (line == null)                      {                          break;                      }                      line = line.Trim();                      try                      {                          if (!String.IsNullOrEmpty(line) && line[0] != '#') //Skip empty or commented lines.                          {                               if (line[0] == '!') //changing readmode                              {                                   string trimmedLine = line.Substring(1); //Returns 'partslist' from ' !partslist'                                  switch (trimmedLine)                                  {                                      case "partslist":                                      case "required-files":                                      case "optional-files":                                          readmode = trimmedLine;                                          break;                                      case "resource-blacklist": //allow all resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "blacklist";                                          break;                                      case "resource-whitelist": //allow NO resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "whitelist";                                          break;                                  }                              }                              else                              {                                  if (readmode == "partslist")                                  {                                      allowedParts.Add(line);                                  }                                  if (readmode == "required-files")                                  {                                      string hash = "";                                      splitline[0] = line;                                      if (line.Contains('=')) //Let's make the = on the end of the lines optional                                      {                                          splitline = line.Split('=');                                          if (splitline.Length > 1)                                          {                                              hash = splitline[1];                                          }                                      }                                      hashes.Add(splitline[0]' new SHAMod { sha = hash' required = true });                                  }                                  if (readmode == "optional-files")                                  {                                      splitline = line.Split('=');                                      string hash = "";                                      splitline[0] = line;                                      if (line.Contains('=')) //Let's make the = on the end of the lines optional                                      {                                          splitline = line.Split('=');                                          if (splitline.Length > 1)                                          {                                              hash = splitline[1];                                          }                                      }                                      hashes.Add(splitline[0]' new SHAMod { sha = hash' required = false });                                  }                                  if (readmode == "resource")                                  {                                      resources.Add(line);                                  }                                  if (readmode == "required")                                  {                                      modList.Add(line);                                  }                              }                          }                      }                      catch (Exception e)                      {                          Log.Info(e.ToString());                      }                    }                  partList = allowedParts; //make all the vars global once we're done parsing                  modFileList = hashes;                  resourceControlMode = resourcemode;                  resourceList = resources;                  requiredModList = modList;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following statement contains a magic number: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: if (splitMessageReceiveIndex == 0) {  				//New split message  				int split_message_length = KMPCommon.intFromBytes (data' 4);  				splitMessageData = new byte[8 + split_message_length];  				data.CopyTo (splitMessageData' 0);  				splitMessageReceiveIndex = data.Length;  			} else {  				//Continued split message  				data.CopyTo (splitMessageData' splitMessageReceiveIndex);  				splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: if (splitMessageReceiveIndex == 0) {  				//New split message  				int split_message_length = KMPCommon.intFromBytes (data' 4);  				splitMessageData = new byte[8 + split_message_length];  				data.CopyTo (splitMessageData' 0);  				splitMessageReceiveIndex = data.Length;  			} else {  				//Continued split message  				data.CopyTo (splitMessageData' splitMessageReceiveIndex);  				splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: if (splitMessageReceiveIndex == splitMessageData.Length) {  				//Parse the message and feed it into handleMessage  				int joined_message_id = KMPCommon.intFromBytes (splitMessageData' 0);  				int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  				byte[] joined_message_data = new byte[joined_message_length];  				Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  				byte[] joined_message_data_decompressed = KMPCommon.Decompress(joined_message_data);  				handleMessage ((KMPCommon.ServerMessageID)joined_message_id' joined_message_data_decompressed);  				splitMessageReceiveIndex = 0;  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleSplitMessage,The following statement contains a magic number: if (splitMessageReceiveIndex == splitMessageData.Length) {  				//Parse the message and feed it into handleMessage  				int joined_message_id = KMPCommon.intFromBytes (splitMessageData' 0);  				int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  				byte[] joined_message_data = new byte[joined_message_length];  				Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  				byte[] joined_message_data_decompressed = KMPCommon.Decompress(joined_message_data);  				handleMessage ((KMPCommon.ServerMessageID)joined_message_id' joined_message_data_decompressed);  				splitMessageReceiveIndex = 0;  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following statement contains a magic number: if (line.Length > 0)              {                  if (quitHelperMessageShow && (line == "q" || line == "Q"))                  {                      enqueuePluginChatMessage("If you are trying to quit' use the !quit command."' true);                      quitHelperMessageShow = false;                  }                  bool handled = false;                  if (line.ElementAt(0) == '!')                  {                      String line_lower = line.ToLower();                        // There's atleast one character (!)' so we can be sure that line_part will have length 1 at minimum.                      String[] line_part = line_lower.Split(' ');                        if (line_lower == "!quit")                      {                          handled = true;                          intentionalConnectionEnd = true;                          endSession = true;                          sendConnectionEndMessage("Quit");                      }                      else if (line_lower == "!ping")                      {                          handled = true;                          queueOutgoingMessage(KMPCommon.ClientMessageID.PING' BitConverter.GetBytes(DateTime.UtcNow.Ticks));                      }                      else if (line_lower == "!ntp")                      {                          handled = true;                          gameManager.displayNTP = !gameManager.displayNTP;                      }                      else if (line_lower == "!debug")                      {                          handled = true;                          debugging = !debugging;  						if (debugging) Log.MinLogLevel = Log.LogLevels.Debug;  						else Log.MinLogLevel = Log.LogLevels.Info;                          enqueuePluginChatMessage("debug " + debugging);                      }  					else if(line_lower == "!clear")  					{  						KMPChatDX.chatLineQueue.Clear();  						handled = true;  					}                      else if (line_lower == "!whereami")                      {                          handled = true;                            sb.Append("You are connected to: ");                          sb.Append(hostname);                            enqueuePluginChatMessage(sb.ToString());                      }                      else if (line_lower == "!bubble")                      {                          if (gameManager.horizontalDistanceToSafetyBubbleEdge() < 1 || gameManager.verticalDistanceToSafetyBubbleEdge() < 1)                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are outside of the bubble!");                          }                          else                          {                              sb.Append("The bubble radius is: ");                              sb.Append(gameManager.safetyBubbleRadius.ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m\n");                              sb.Append("You are ");                              sb.Append(gameManager.verticalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the bubble top.\n");                              sb.Append("You are ");                              sb.Append(gameManager.horizontalDistanceToSafetyBubbleEdge().ToString("N1"' CultureInfo.CreateSpecificCulture("en-US")));                              sb.Append("m away from the nearest bubble side.");                          }                          enqueuePluginChatMessage(sb.ToString());                          handled = true;                      }                      else if (line_part[0] == "!chat")                      {                          handled = true;                          int length = line_part.Length;                          if (length > 1)                          {                              string command = line_part[1];                              if (command == "dragwindow")                              {                                  bool state = false;                                  if (length >= 3)                                  {                                      // Set they requested value                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      // Or toggle.                                      state = !KMPChatDX.draggable;                                  }                                      if (!state)                                  {                                      KMPChatDX.chatboxX = KMPChatDX.windowPos.x;                                      KMPChatDX.chatboxY = KMPChatDX.windowPos.y;                                  }                                    KMPChatDX.draggable = state;                                  enqueueTextMessage(String.Format("The chat window is now {0}"' (KMPChatDX.draggable) ? "draggable" : "not draggable"));                              }                              else if (command == "offsetting")                              {                                  bool state = true;                                    if (length >= 3)                                  {                                      state = line_part[2] == "true";                                  }                                  else                                  {                                      state = !KMPChatDX.offsettingEnabled;                                  }                                    KMPChatDX.offsettingEnabled = state;                                  enqueueTextMessage(String.Format("Chat window offsetting has been {0}"' (KMPChatDX.offsettingEnabled) ? "enabled" : "disabled"));                              }                              else if (command == "offset")                              {                                  if (length >= 5)                                  {                                      try                                      {                                          // 0 = tracking station' 1 = editor/sph                                          int target = (line_part[2] == "tracking") ? 0 : 1;                                          float offsetX = Convert.ToSingle(line_part[3]);                                          float offsetY = Convert.ToSingle(line_part[4]);                                            if (target == 0)                                          {                                              KMPChatDX.trackerOffsetX = offsetX;                                              KMPChatDX.trackerOffsetY = offsetY;                                          }                                          else if (target == 1)                                          {                                              KMPChatDX.editorOffsetX = offsetX;                                              KMPChatDX.editorOffsetY = offsetY;                                          }                                            enqueueTextMessage(String.Format("The {0} offsets has been set to X: {1} Y: {2}"' (target == 0) ? "tracking station" : "rocket/spaceplane editor"' offsetX' offsetY));                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 1' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat offset [tracking|editor] [offsetX] [offsetY]");                                      }                                  }                                }                              else if (command == "width" || command == "height" || command == "top" || command == "left")                              {                                  if (length >= 3)                                  {                                      try                                      {                                          float size = Convert.ToSingle(line_part[2]);                                          bool percent = true;                                            if (length >= 4)                                          {                                              percent = line_part[3] == "percent";                                          }                                            switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }                                            KMPChatDX.windowPos.x = KMPChatDX.chatboxX;                                          KMPChatDX.windowPos.y = KMPChatDX.chatboxY;                                            KMPChatDX.windowPos.height = KMPChatDX.chatboxHeight;                                          KMPChatDX.windowPos.width = KMPChatDX.chatboxWidth;                                            enqueueTextMessage(sb.ToString());                                      }                                      catch (Exception e)                                      {                                          Log.Debug("Exception thrown in handleChatInput()' catch 2' Exception: {0}"' e.ToString());                                          enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>\nWhere value is a number.");                                      }                                  }                                  else                                  {                                      enqueueTextMessage("Syntax error. Usage: !chat [width|height|top|left] [value] <percent|pixels>");                                  }                              }                          }                      }                      else if (line_lower.Length > (KMPCommon.SHARE_CRAFT_COMMAND.Length + 1)                          && line_lower.Substring(0' KMPCommon.SHARE_CRAFT_COMMAND.Length) == KMPCommon.SHARE_CRAFT_COMMAND)                      {                          handled = true;                          //Share a craft file                          String craft_name = line.Substring(KMPCommon.SHARE_CRAFT_COMMAND.Length + 1);                          KMPCommon.CraftType craft_type = KMPCommon.CraftType.VAB;                          String filename = findCraftFilename(craft_name' ref craft_type);                            if (filename != null && filename.Length > 0)                          {                              try                              {                                  //byte[] craft_bytes = KSP.IO.File.ReadAllBytes<KMPClientMain>(filename);                                  byte[] craft_bytes = System.IO.File.ReadAllBytes(filename);                                  sendShareCraftMessage(craft_name' craft_bytes' craft_type);                              }                              catch (Exception e)                              {                                  Log.Debug("Exception thrown in handleChatInput()' catch 3' Exception: {0}"' e.ToString());                                  enqueueTextMessage("Error reading craft file: " + filename);                              }                          }                          else                              enqueueTextMessage("Craft file not found: " + craft_name);                      }                    }                  if (!handled)                  {                      sendTextMessage(line);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleConnection,The following statement contains a magic number: try              {                  while (true)                  {                      //Send a keep-alive message to prevent timeout                      if (stopwatch.ElapsedMilliseconds - lastTCPMessageSendTime >= KEEPALIVE_DELAY && stopwatch.ElapsedMilliseconds - lastKeepAliveSendTime >= KEEPALIVE_DELAY) {                          lastKeepAliveSendTime = stopwatch.ElapsedMilliseconds;                          queueOutgoingMessage(KMPCommon.ClientMessageID.KEEPALIVE' null);                      }                        //Handle received messages. Break every 100ms to avoid severe FPS lag.                      long receiveMaxTimer = stopwatch.ElapsedMilliseconds + 100;                      while (receivedMessageQueue.Count > 0 && stopwatch.ElapsedMilliseconds < receiveMaxTimer)                      {                          ServerMessage message;                          message = receivedMessageQueue.Dequeue();                          handleMessage(message.id' message.data);                      }                      if (receivedMessageQueue.Count > 0) {                          Log.Debug("Exited received queue early' messages left: " + receivedMessageQueue.Count);                      }                        if (udpClient != null && handshakeCompleted)                      {                            //Update the status of the udp connection                          long last_udp_ack = 0;                          long last_udp_send = 0;                          lock (udpTimestampLock)                          {                              last_udp_ack = lastUDPAckReceiveTime;                              last_udp_send = lastUDPMessageSendTime;                          }                            udpConnected = last_udp_ack > 0 && (stopwatch.ElapsedMilliseconds - last_udp_ack) < UDP_TIMEOUT_DELAY;                            //Send a probe message to try to establish a udp connection                          if ((stopwatch.ElapsedMilliseconds - lastUDPProbeTime) > UDP_PROBE_DELAY) {                              if ((stopwatch.ElapsedMilliseconds - last_udp_send) > UDP_TIMEOUT_DELAY)                              {                                  sendUDPProbeMessage(true);                              }                              else                              {                                  sendUDPProbeMessage(false);                              }                          }                      }  					sendOutgoingMessages();  					sendOutgoingUDPMessages();                      Thread.Sleep(SLEEP_TIME);                  }              }              catch (ThreadAbortException e)              {                  Log.Debug("Exception thrown in handleConnection()' catch 1' Exception: {0}"' e.ToString());              }              catch (Exception e)              {                  Log.Debug("Exception thrown in handleConnection()' catch 2' last message type: " + handlingMessageType.ToString() +"' Exception: {0}"' e.ToString());                  passExceptionToMain(e);              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,processPluginInterop,The following statement contains a magic number: if (interopInQueue.Count > 0 && tcpClient != null )  			{  				try  				{  				while (interopInQueue.Count > 0 && tcpClient != null)  					{  						byte[] bytes;  						bytes = interopInQueue.Dequeue();    						//Read the message id  						int id_int = KMPCommon.intFromBytes(bytes' 0);    						KMPCommon.PluginInteropMessageID id = KMPCommon.PluginInteropMessageID.NULL;  						if (id_int >= 0 && id_int < Enum.GetValues(typeof(KMPCommon.PluginInteropMessageID)).Length)  							id = (KMPCommon.PluginInteropMessageID)id_int;    						//Read the length of the message data  						int data_length = KMPCommon.intFromBytes(bytes' 4);    						if (data_length <= 0)  							handleInteropMessage(id' null);  						else  						{  							//Copy the message data  							byte[] data = new byte[data_length];  							Array.Copy(bytes' 8' data' 0' data.Length);  							handleInteropMessage(id' data);  						}  					}  				}  				catch (Exception e) { Log.Debug("Exception thrown in processPluginInterop()' catch 1' Exception: {0}"' e.ToString()); }  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,processPluginInterop,The following statement contains a magic number: if (interopInQueue.Count > 0 && tcpClient != null )  			{  				try  				{  				while (interopInQueue.Count > 0 && tcpClient != null)  					{  						byte[] bytes;  						bytes = interopInQueue.Dequeue();    						//Read the message id  						int id_int = KMPCommon.intFromBytes(bytes' 0);    						KMPCommon.PluginInteropMessageID id = KMPCommon.PluginInteropMessageID.NULL;  						if (id_int >= 0 && id_int < Enum.GetValues(typeof(KMPCommon.PluginInteropMessageID)).Length)  							id = (KMPCommon.PluginInteropMessageID)id_int;    						//Read the length of the message data  						int data_length = KMPCommon.intFromBytes(bytes' 4);    						if (data_length <= 0)  							handleInteropMessage(id' null);  						else  						{  							//Copy the message data  							byte[] data = new byte[data_length];  							Array.Copy(bytes' 8' data' 0' data.Length);  							handleInteropMessage(id' data);  						}  					}  				}  				catch (Exception e) { Log.Debug("Exception thrown in processPluginInterop()' catch 1' Exception: {0}"' e.ToString()); }  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following statement contains a magic number: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,enqueueClientInteropMessage,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: lock (clientDataLock)              {                    if (lastClientDataChangeTime > lastClientDataWriteTime                      || (stopwatch.ElapsedMilliseconds - lastClientDataWriteTime) > CLIENT_DATA_FORCE_WRITE_INTERVAL)                  {                      byte[] username_bytes = encoder.GetBytes(username);                        //Build client data array                      byte[] bytes = new byte[9 + username_bytes.Length];                        bytes[0] = inactiveShipsPerUpdate;                      KMPCommon.intToBytes(screenshotSettings.maxHeight).CopyTo(bytes' 1);                      KMPCommon.intToBytes(updateInterval).CopyTo(bytes' 5);                      username_bytes.CopyTo(bytes' 9);                        enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.CLIENT_DATA' bytes);                        lastClientDataWriteTime = stopwatch.ElapsedMilliseconds;                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: lock (clientDataLock)              {                    if (lastClientDataChangeTime > lastClientDataWriteTime                      || (stopwatch.ElapsedMilliseconds - lastClientDataWriteTime) > CLIENT_DATA_FORCE_WRITE_INTERVAL)                  {                      byte[] username_bytes = encoder.GetBytes(username);                        //Build client data array                      byte[] bytes = new byte[9 + username_bytes.Length];                        bytes[0] = inactiveShipsPerUpdate;                      KMPCommon.intToBytes(screenshotSettings.maxHeight).CopyTo(bytes' 1);                      KMPCommon.intToBytes(updateInterval).CopyTo(bytes' 5);                      username_bytes.CopyTo(bytes' 9);                        enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.CLIENT_DATA' bytes);                        lastClientDataWriteTime = stopwatch.ElapsedMilliseconds;                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeClientData,The following statement contains a magic number: lock (clientDataLock)              {                    if (lastClientDataChangeTime > lastClientDataWriteTime                      || (stopwatch.ElapsedMilliseconds - lastClientDataWriteTime) > CLIENT_DATA_FORCE_WRITE_INTERVAL)                  {                      byte[] username_bytes = encoder.GetBytes(username);                        //Build client data array                      byte[] bytes = new byte[9 + username_bytes.Length];                        bytes[0] = inactiveShipsPerUpdate;                      KMPCommon.intToBytes(screenshotSettings.maxHeight).CopyTo(bytes' 1);                      KMPCommon.intToBytes(updateInterval).CopyTo(bytes' 5);                      username_bytes.CopyTo(bytes' 9);                        enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.CLIENT_DATA' bytes);                        lastClientDataWriteTime = stopwatch.ElapsedMilliseconds;                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,writeConfigFile,The following statement contains a magic number: foreach (String sIP in favorites.Keys) // Rebuild the favourites from memory              {  				String[] sArr = new String[favorites.Count];  				favorites.TryGetValue(sIP' out sArr);                    XmlElement xEl = xmlDoc.CreateElement("favourite");                  xEl.SetAttribute(FAVORITE_LABEL' "" + count);  				xEl.SetAttribute(NAME_LABEL' sIP);                  xEl.SetAttribute(IP_LABEL' sArr[0]);  				xEl.SetAttribute(PORT_LABEL' sArr[1]);  				xEl.SetAttribute(USERNAME_LABEL' sArr[2]);                  xFav.AppendChild(xEl);                  count++;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,ReceiveCallback,The following statement contains a magic number: try {  				// Retrieve the state object and the client socket   				// from the asynchronous state object.  				StateObject state = (StateObject)ar.AsyncState;  				TcpClient client = state.workClient;  				int bytesRead = client.GetStream().EndRead(ar); // Read data from the remote device directly into the message buffer.  				currentBytesToReceive -= bytesRead; //Decrement how many bytes we have read.  				if (bytesRead > 0) { //This is just a shortcut really  					if (!currentMessageHeaderRecieved) {  						//We are receiving just the header  						if (currentBytesToReceive == 0) {  							//We have recieved the full message header' lets process it.  							currentMessageID = (KMPCommon.ServerMessageID)BitConverter.ToInt32(currentMessage' 0);  							currentBytesToReceive = BitConverter.ToInt32(currentMessage' 4);  							if (currentBytesToReceive > KMPCommon.MAX_MESSAGE_SIZE) {  								throw new InvalidOperationException("Incorrect message size");  							}  							if (currentBytesToReceive == 0) {  								//We received the header of a empty message' add it to the process queue' and reset the buffers.  								messageReceived(currentMessageID' null);  								currentMessageID = KMPCommon.ServerMessageID.NULL;  								currentBytesToReceive = KMPCommon.MSG_HEADER_LENGTH;  								currentMessage = new byte[currentBytesToReceive];  							} else {  								//We received the header of a non-empty message' Let's give it a buffer and read again.  								currentMessage = new byte[currentBytesToReceive];  								currentMessageHeaderRecieved = true;  							}  						}  					} else {  						if (currentBytesToReceive == 0) {  							//We have received all the message data' lets decompress and add it to the process queue' and reset the buffers.  							byte[] decompressedData = KMPCommon.Decompress(currentMessage);  							messageReceived(currentMessageID' decompressedData);  							currentMessageHeaderRecieved = false;  							currentMessageID = KMPCommon.ServerMessageID.NULL;  							currentBytesToReceive = KMPCommon.MSG_HEADER_LENGTH;  							currentMessage = new byte[currentBytesToReceive];  						}  					}    				}  				if (currentBytesToReceive < 0) {  					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now.");  				}  				if (client != null) {  					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(ReceiveCallback)' state);  				}  			}  			catch (Exception e) {  				//Basically' If anything goes wrong at all the stream is broken and there is no way to recover from it.  				Log.Debug("Exception thrown in ReceiveCallback()' catch 1' Exception: {0}"' e.ToString());  				if (gameManager.gameRunning) { //We have already been disconnected somewhere else.  					gameManager.disconnect("Connection error: " + e.Message.ToString());  				}  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] message_data = new byte[4 + username_bytes.Length + 4 + guid_bytes.Length + version_bytes.Length];
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] message_data = new byte[4 + username_bytes.Length + 4 + guid_bytes.Length + version_bytes.Length];
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: username_bytes.CopyTo(message_data' 4);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(guid_bytes.Length).CopyTo(message_data' 4 + username_bytes.Length);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: guid_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: guid_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4 + guid_bytes.Length);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(message_data' 4 + username_bytes.Length + 4 + guid_bytes.Length);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendPluginUpdate,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  KMPCommon.ClientMessageID id                      = primary ? KMPCommon.ClientMessageID.PRIMARY_PLUGIN_UPDATE : KMPCommon.ClientMessageID.SECONDARY_PLUGIN_UPDATE;                    if (udpConnected && data.Length < 100)  					queueOutgoingUDPMessage(id' data);                  else                      queueOutgoingMessage(id' data);              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendScenarioUpdate,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  if (udpConnected && data.Length < 100)  					queueOutgoingUDPMessage(KMPCommon.ClientMessageID.SCENARIO_UPDATE' data);                  else                      queueOutgoingMessage(KMPCommon.ClientMessageID.SCENARIO_UPDATE' data);              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: byte[] bytes = new byte[8 + name_bytes.Length + data.Length];
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: if ((name_bytes.Length + data.Length) <= KMPCommon.MAX_CRAFT_FILE_BYTES)              {                  //Copy data                  KMPCommon.intToBytes((int)type).CopyTo(bytes' 0);                  KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);                  name_bytes.CopyTo(bytes' 8);                  data.CopyTo(bytes' 8 + name_bytes.Length);                    queueOutgoingMessage(KMPCommon.ClientMessageID.SHARE_CRAFT_FILE' bytes);              }              else                  enqueueTextMessage("Craft file is too large to send."' false' true);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: if ((name_bytes.Length + data.Length) <= KMPCommon.MAX_CRAFT_FILE_BYTES)              {                  //Copy data                  KMPCommon.intToBytes((int)type).CopyTo(bytes' 0);                  KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);                  name_bytes.CopyTo(bytes' 8);                  data.CopyTo(bytes' 8 + name_bytes.Length);                    queueOutgoingMessage(KMPCommon.ClientMessageID.SHARE_CRAFT_FILE' bytes);              }              else                  enqueueTextMessage("Craft file is too large to send."' false' true);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendShareCraftMessage,The following statement contains a magic number: if ((name_bytes.Length + data.Length) <= KMPCommon.MAX_CRAFT_FILE_BYTES)              {                  //Copy data                  KMPCommon.intToBytes((int)type).CopyTo(bytes' 0);                  KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);                  name_bytes.CopyTo(bytes' 8);                  data.CopyTo(bytes' 8 + name_bytes.Length);                    queueOutgoingMessage(KMPCommon.ClientMessageID.SHARE_CRAFT_FILE' bytes);              }              else                  enqueueTextMessage("Craft file is too large to send."' false' true);
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ClientMessageID.SYNC_TIME) {  				byte[] time_sync_rewrite = new byte[8];  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 0);  				next_message = buildMessageByteArray(KMPCommon.ClientMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendUDPProbeMessage,The following statement contains a magic number: byte[] timeData = new byte[12];
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,sendUDPProbeMessage,The following statement contains a magic number: if (gameManager.lastTick > 0)              {                  BitConverter.GetBytes(gameManager.lastTick).CopyTo(timeData' 0);                  BitConverter.GetBytes(gameManager.listClientTimeWarpAverage).CopyTo(timeData' 8);                    if (udpConnected || forceUDP)//Always try UDP periodically                  {                      queueOutgoingUDPMessage(KMPCommon.ClientMessageID.UDP_PROBE' timeData);                  }                  else                  {                      queueOutgoingMessage(KMPCommon.ClientMessageID.UDP_PROBE' timeData);                  }              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: if (prefix != null)              {                  prefix.CopyTo(message_bytes' index);                  index += 4;              }
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: index += 4;
Magic Number,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,buildMessageByteArray,The following statement contains a magic number: index += 4;
Missing Default,KMP,Log,C:\repos\TehGimp_KerbalMultiPlayer\Logger.cs,WriteLog,The following switch statement is missing a default case: switch (level)              {                  case LogLevels.Debug:                  case LogLevels.Activity:                  case LogLevels.Info:                  case LogLevels.Notice:                      if (useDelayedLogging)                      {                          delayedDebugQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.Log(output);                      }                      break;                  case LogLevels.Warning:                      if (useDelayedLogging)                      {                          delayedWarningQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.LogWarning(output);                      }                      break;                  case LogLevels.Error:                      if (useDelayedLogging)                      {                          delayedErrorQueue.Enqueue(output);                      }                      else                      {                          UnityEngine.Debug.LogError(output);                      }                      break;              }
Missing Default,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,handleInteropMessage,The following switch statement is missing a default case: switch (id)  				{  					case KMPCommon.ClientInteropMessageID.CHAT_RECEIVE:  						if (data != null)  						{  							KMPChatDisplay.enqueueChatLine(encoder.GetString(data));                              KMPChatDX.enqueueChatLine(encoder.GetString(data));  							chatMessagesWaiting++;  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.CLIENT_DATA:  	  						if (data != null && data.Length > 9)  						{  							//Read inactive vessels per update count  							inactiveVesselsPerUpdate = data[0];  	  							//Read screenshot height  							KMPScreenshotDisplay.screenshotSettings.maxHeight = KMPCommon.intFromBytes(data' 1);  	  							updateInterval = ((float)KMPCommon.intFromBytes(data' 5))/1000.0f;  	  							//Read username  							playerName = encoder.GetString(data' 9' data.Length - 9);  						}  	  						break;  	  					case KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  	  					case KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE:  						if (data != null)  						{  							//De-serialize and handle the update  							handleScenarioUpdate(KSP.IO.IOUtils.DeserializeFromBinary(data));  						}  						break;  					  					case KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE:  						if (data != null)  						{  							//Read description length  							int description_length = KMPCommon.intFromBytes(data' 0);  	  							//Read description  							String description = encoder.GetString(data' 4' description_length);  							  							//Read data  							byte[] image_data = new byte[data.Length - 4 - description_length];  							Array.Copy(data' 4 + description_length' image_data' 0' image_data.Length);		  							if (image_data.Length <= KMPScreenshotDisplay.screenshotSettings.maxNumBytes)  							{  								KMPScreenshotDisplay.description = description;  								StartCoroutine(applyScreenshotTexture(image_data));  							}  						}  						break;  				}
Missing Default,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following switch statement is missing a default case: switch (status.info.detail.activity)  					{  						case Activity.AEROBRAKING:  							sb.Append("Aerobraking at ");  							situation_determined = true;  							break;    						case Activity.DOCKING:  							if (KMPVessel.situationIsGrounded(status.info.situation))  								sb.Append("Docking on ");  							else  								sb.Append("Docking above ");  							situation_determined = true;  							break;    						case Activity.PARACHUTING:  							sb.Append("Parachuting to ");  							situation_determined = true;  							break;  					}
Missing Default,KMP,KMPManager,C:\repos\TehGimp_KerbalMultiPlayer\KMPManager.cs,vesselStatusLabels,The following switch statement is missing a default case: switch (status.info.situation)  						{  							case Situation.DOCKED:  								sb.Append("Docked at ");  								break;    							case Situation.ENCOUNTERING:  								sb.Append("Encountering ");  								break;    							case Situation.ESCAPING:  								sb.Append("Escaping ");  								break;    							case Situation.FLYING:  								sb.Append("Flying at ");  								break;    							case Situation.LANDED:  								sb.Append("Landed at ");  								break;    							case Situation.ORBITING:  								sb.Append("Orbiting ");  								break;    							case Situation.PRELAUNCH:  								sb.Append("Prelaunch at ");  								break;    							case Situation.SPLASHED:  								sb.Append("Splashed at ");  								break;    							case Situation.ASCENDING:  								sb.Append("Ascending from ");  								break;    							case Situation.DESCENDING:  								sb.Append("Descending to ");  								break;  						}
Missing Default,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updatePosition,The following switch statement is missing a default case: switch (info.state)  			{  				case State.ACTIVE:  					apparent_size = 0.015f;  					pointed = true;  					break;    				case State.INACTIVE:  					apparent_size = 0.01f;  					pointed = true;  					break;    				case State.DEAD:  					apparent_size = 0.01f;  					pointed = false;  					break;    			}
Missing Default,KMP,KMPVessel,C:\repos\TehGimp_KerbalMultiPlayer\KMPVessel.cs,updateRenderProperties,The following switch statement is missing a default case: switch (info.state)  				{  					case State.ACTIVE:  						color = activeColor;  						break;    					case State.INACTIVE:  						color = activeColor * 0.75f;  						color.a = 1;  						break;    					case State.DEAD:  						color = activeColor * 0.5f;  						break;  				}
Missing Default,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,parseModFile,The following switch statement is missing a default case: switch (trimmedLine)                                  {                                      case "partslist":                                      case "required-files":                                      case "optional-files":                                          readmode = trimmedLine;                                          break;                                      case "resource-blacklist": //allow all resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "blacklist";                                          break;                                      case "resource-whitelist": //allow NO resources EXCEPT these in file                                          readmode = "resource";                                          resourcemode = "whitelist";                                          break;                                  }
Missing Default,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleMessage,The following switch statement is missing a default case: switch (id)              {                  case KMPCommon.ServerMessageID.HANDSHAKE:                      if (handshakeCompleted) {                          return;                      }                      if (data != null)                      {                          if (data.Length > 4)                          {                              //Check protocol version                              Int32 protocol_version = KMPCommon.intFromBytes(data);                              if (protocol_version != KMPCommon.NET_PROTOCOL_VERSION)                              {                                  //End the session if the protocol version doesn't match                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect("Your client is incompatible with this server");                                  return;                              }                              Int32 server_version_length = KMPCommon.intFromBytes(data' 4);                              String server_version = encoder.GetString(data' 8' server_version_length);                              clientID = KMPCommon.intFromBytes(data' 8 + server_version_length);                              gameManager.gameMode = KMPCommon.intFromBytes(data' 12 + server_version_length);                              gameManager.numberOfShips = KMPCommon.intFromBytes(data' 16 + server_version_length);                              int kmpModControl_length = KMPCommon.intFromBytes(data' 20 + server_version_length);                              kmpModControl_bytes = new byte[kmpModControl_length];                              Array.Copy(data' 24 + server_version_length' kmpModControl_bytes' 0' kmpModControl_length);                              SetMessage("Handshake received. Server version: " + server_version);                              if (!modCheck(kmpModControl_bytes))                              {                                  endSession = true;                                  intentionalConnectionEnd = true;                                  gameManager.disconnect(modMismatchError);                                  return;                              }                              sendHandshakeMessage(); //Reply to the handshake                              lock (udpTimestampLock)                              {                                  lastUDPMessageSendTime = stopwatch.ElapsedMilliseconds;                              }                              handshakeCompleted = true;                          }                          else                          {                              //End the session if we get a bad handshake. Protects against byte[0].                              endSession = true;                              intentionalConnectionEnd = true;                              gameManager.disconnect("Your client is incompatible with this server");                              return;                          }                      }                      else                      {                          //End the session if we get a bad handshake. Protects against null.                          endSession = true;                          intentionalConnectionEnd = true;                          gameManager.disconnect("Your client is incompatible with this server");                          return;                      }                      break;                    case KMPCommon.ServerMessageID.HANDSHAKE_REFUSAL:                        String refusal_message = encoder.GetString(data' 0' data.Length);                        endSession = true;                      intentionalConnectionEnd = true;                        enqueuePluginChatMessage("Server refused connection. Reason: " + refusal_message' true);                        break;                    case KMPCommon.ServerMessageID.SERVER_MESSAGE:                  case KMPCommon.ServerMessageID.TEXT_MESSAGE:                        if (data != null)                      {                            InTextMessage in_message = new InTextMessage();                            in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                          if (in_message.message.Contains(" has shared a screenshot.")) {                              int screenshotSharePlayerNameIndex = in_message.message.IndexOf(" has shared a screenshot.");                              string screenshotSharePlayerName = in_message.message.Substring(0' screenshotSharePlayerNameIndex);                              if (screenshotSharePlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == screenshotSharePlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting == false)                                  {                                      screenshotsWaiting.Add(screenshotSharePlayerName);                                  }                              }                          }                            if (in_message.message.Contains(" has disconnected : ")) {                              int quitPlayerNameIndex = in_message.message.IndexOf(" has disconnected : ");                              string quitPlayerName = in_message.message.Substring(0' quitPlayerNameIndex);                              if (quitPlayerName != username) {                                  bool listPlayerNameInScreenshotsWaiting = false;                                  foreach (string listPlayer in screenshotsWaiting)                                  {                                      if (listPlayer == quitPlayerName) {                                          listPlayerNameInScreenshotsWaiting = true;                                      }                                  }                                  if (listPlayerNameInScreenshotsWaiting)                                  {                                      screenshotsWaiting.Remove(quitPlayerName);                                  }                              }                          }                            //Queue the message                          enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.MOTD_MESSAGE:                      if (gameManager.gameRunning == false) {                          gameManager.gameStart = true;                      }                      if (data != null)                      {                          InTextMessage in_message = new InTextMessage();                          in_message.fromServer = (id == KMPCommon.ServerMessageID.SERVER_MESSAGE);                          in_message.isMOTD = (id == KMPCommon.ServerMessageID.MOTD_MESSAGE);                          in_message.message = encoder.GetString(data' 0' data.Length);                            enqueueTextMessage(in_message);                      }                        break;                    case KMPCommon.ServerMessageID.PLUGIN_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.PLUGIN_UPDATE' data);                        break;  				  				case KMPCommon.ServerMessageID.SCENARIO_UPDATE:                        if (data != null)                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCENARIO_UPDATE' data);                        break;                    case KMPCommon.ServerMessageID.SERVER_SETTINGS:                        lock (serverSettingsLock)                      {                          if (data != null && data.Length >= KMPCommon.SERVER_SETTINGS_LENGTH && handshakeCompleted)                          {                                updateInterval = KMPCommon.intFromBytes(data' 0);                              screenshotInterval = KMPCommon.intFromBytes(data' 4);                                lock (clientDataLock)                              {                                  int new_screenshot_height = KMPCommon.intFromBytes(data' 8);                                  if (screenshotSettings.maxHeight != new_screenshot_height)                                  {                                      screenshotSettings.maxHeight = new_screenshot_height;                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                      enqueueTextMessage("Screenshot Height has been set to " + screenshotSettings.maxHeight);                                  }                                    gameManager.safetyBubbleRadius = BitConverter.ToDouble(data' 12);                                    if (inactiveShipsPerUpdate != data[20])                                  {                                      inactiveShipsPerUpdate = data[20];                                      lastClientDataChangeTime = stopwatch.ElapsedMilliseconds;                                  }                                  gameManager.gameCheatsEnabled = Convert.ToBoolean(data[21]);  								gameManager.gameArrr = Convert.ToBoolean(data[22]);                                  //partList' requiredModList' shaList' resourceList and resourceControlMode                               }                                receivedSettings = true;                              /*                              Log.Debug("Update interval: " + updateInterval);                              Log.Debug("Screenshot interval: " + screenshotInterval);                              Log.Debug("Inactive ships per update: " + inactiveShipsPerUpdate);                               */                          }                      }                        break;                    case KMPCommon.ServerMessageID.SCREENSHOT_SHARE:                        if (data != null && data.Length > 0 && data.Length < screenshotSettings.maxNumBytes                          && watchPlayerName.Length > 0 && watchPlayerName != username)                      {                          enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' data);                      }                      break;                    case KMPCommon.ServerMessageID.CONNECTION_END:                      if (data != null)                      {                          String message = encoder.GetString(data' 0' data.Length);                            gameManager.disconnect(message);                            //If the reason is not a timeout' connection end is intentional                          intentionalConnectionEnd = message.ToLower() != "timeout";                          enqueuePluginChatMessage("Server closed the connection: " + message' true);                            SetMessage("Disconnected from server: " + message);                      }                      else                      {                          gameManager.disconnect();                          SetMessage("Disconnected from server");                      }                        break;                    case KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE:                      lock (udpTimestampLock)                      {                          lastUDPAckReceiveTime = stopwatch.ElapsedMilliseconds;                      }                      break;                    case KMPCommon.ServerMessageID.CRAFT_FILE:                        if (data != null && data.Length > 8)                      {                          //Read craft name length                          KMPCommon.CraftType craft_type = (KMPCommon.CraftType)KMPCommon.intFromBytes(data' 0);                          int craft_name_length = KMPCommon.intFromBytes(data' 4);                          if (craft_name_length < data.Length - 8)                          {                              //Read craft name                              String craft_name = encoder.GetString(data' 8' craft_name_length);                                //Read craft bytes                              byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                              Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                                //Write the craft to a file                              String filename = getCraftFilename(craft_name' craft_type);                              if (filename != null)                              {                                  try                                  {                                      //KSP.IO.File.WriteAllBytes<KMPClientMain>(craft_bytes' filename);                                      System.IO.File.WriteAllBytes(filename' craft_bytes);                                      enqueueTextMessage("Received craft file: " + craft_name);                                  }                                  catch (Exception e)                                  {                                      Log.Debug("Exception thrown in handleMessage()' catch 1' Exception: {0}"' e.ToString());                                      enqueueTextMessage("Error saving received craft file: " + craft_name);                                  }                              }                              else                                  enqueueTextMessage("Unable to save received craft file.");                          }                      }                        break;                    case KMPCommon.ServerMessageID.PING_REPLY:                          long pingSendTime = BitConverter.ToInt64(data' 0);                          long pingReceiveTime = DateTime.UtcNow.Ticks;                          long pingElapsedMilliseconds = (pingReceiveTime - pingSendTime) / 10000;                          enqueueTextMessage("Ping Reply: " + pingElapsedMilliseconds + "ms");                      break;    				case KMPCommon.ServerMessageID.SYNC:  					if (data != null) {  						gameManager.skewTargetTick = BitConverter.ToDouble (data' 0);  						gameManager.skewServerTime = BitConverter.ToInt64 (data' 8);  						gameManager.skewSubspaceSpeed = BitConverter.ToSingle (data' 16);  						gameManager.lastSubspaceLockChange = UnityEngine.Time.realtimeSinceStartup;  						Log.Debug ("Client time locked to server:" + gameManager.skewTargetTick + " server time: " + gameManager.skewServerTime + " frequency " + gameManager.skewSubspaceSpeed + "x.");  					}                      break;                  case KMPCommon.ServerMessageID.SYNC_COMPLETE:                      gameManager.HandleSyncCompleted();                      break;                  case KMPCommon.ServerMessageID.SPLIT_MESSAGE:  		    handleSplitMessage(data);                      break;                  case KMPCommon.ServerMessageID.SYNC_TIME:                      gameManager.HandleSyncTimeCompleted(data);                      break;              }
Missing Default,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleChatInput,The following switch statement is missing a default case: switch (command)                                          {                                              case "width":                                                  KMPChatDX.chatboxWidth = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox width has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "height":                                                  KMPChatDX.chatboxHeight = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox height has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "top":                                                  KMPChatDX.chatboxY = (percent) ? Screen.height * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox top offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                              case "left":                                                  KMPChatDX.chatboxX = (percent) ? Screen.width * (size / 100) : size;                                                  sb.Append(String.Format("Chatbox left offset has been set to {0} {1}"' size' (percent) ? "percent" : "pixels"));                                                  break;                                          }
Missing Default,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,handleInteropMessage,The following switch statement is missing a default case: switch (id)              {                    case KMPCommon.PluginInteropMessageID.CHAT_SEND:                      if (data != null)                      {                          String line = encoder.GetString(data);                            InTextMessage message = new InTextMessage();                          message.fromServer = false;                          message.isMOTD = false;                          message.message = "[" + username + "] " + line;                          enqueueTextMessage(message' false);                            handleChatInput(line);                      }                        break;                    case KMPCommon.PluginInteropMessageID.PLUGIN_DATA:                      String new_watch_player_name = String.Empty;                        if (data != null && data.Length >= 9)                      {                          UnicodeEncoding encoder = new UnicodeEncoding();                          int index = 0;                            //Read current activity status                          bool in_flight = data[index] != 0;                          index++;                            //Read current game title                          int current_game_title_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            currentGameTitle = encoder.GetString(data' index' current_game_title_length);                          index += current_game_title_length;                            //Read the watch player name                          int watch_player_name_length = KMPCommon.intFromBytes(data' index);                          index += 4;                            new_watch_player_name = encoder.GetString(data' index' watch_player_name_length);                          index += watch_player_name_length;                            //Send the activity status to the server                          if (in_flight)                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT' null);                          else                              queueOutgoingMessage(KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME' null);                      }                        if (watchPlayerName != new_watch_player_name)                      {                          watchPlayerName = new_watch_player_name;                            if (watchPlayerName == username && lastSharedScreenshot != null)                              enqueueClientInteropMessage(KMPCommon.ClientInteropMessageID.SCREENSHOT_RECEIVE' lastSharedScreenshot);                            sendScreenshotWatchPlayerMessage(watchPlayerName);                      }                      break;                    case KMPCommon.PluginInteropMessageID.PRIMARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' true);                      break;                    case KMPCommon.PluginInteropMessageID.SECONDARY_PLUGIN_UPDATE:                      sendPluginUpdate(data' false);                      break;  				  				case KMPCommon.PluginInteropMessageID.SCENARIO_UPDATE:                      sendScenarioUpdate(data);                      break;                    case KMPCommon.PluginInteropMessageID.SCREENSHOT_SHARE:                      if (data != null)                      {                          lock (screenshotOutLock)                          {                              queuedOutScreenshot = data;                          }                      }                        break;                  case KMPCommon.PluginInteropMessageID.WARPING:                      queueOutgoingMessage(KMPCommon.ClientMessageID.WARPING' data);                      break;                  case KMPCommon.PluginInteropMessageID.SSYNC:                      queueOutgoingMessage(KMPCommon.ClientMessageID.SSYNC' data);                      break;  				case KMPCommon.PluginInteropMessageID.SYNC_TIME:  					queueOutgoingMessage(KMPCommon.ClientMessageID.SYNC_TIME' null);  					break;              }
Missing Default,KMP,KMPClientMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPClientMain.cs,getCraftFilename,The following switch statement is missing a default case: switch (craft_type)              {                  case KMPCommon.CraftType.VAB:                      return "saves/" + currentGameTitle + "/Ships/VAB/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                    case KMPCommon.CraftType.SPH:                      return "saves/" + currentGameTitle + "/Ships/SPH/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                                        case KMPCommon.CraftType.SUBASSEMBLY:                      return "saves/" + currentGameTitle + "/Subassemblies/" + filtered_craft_name + CRAFT_FILE_EXTENSION;                                                        }
