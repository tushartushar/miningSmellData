Implementation smell,Namespace,Class,File,Method,Description
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The method has 117 lines of code.
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The method has 108 lines of code.
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The method has 120 lines of code.
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The method has 109 lines of code.
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has 234 lines of code.
Long Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The method has 199 lines of code.
Long Method,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has 272 lines of code.
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,Cyclomatic complexity of the method is 13
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,Cyclomatic complexity of the method is 8
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,Cyclomatic complexity of the method is 8
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,Cyclomatic complexity of the method is 15
Long Parameter List,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,storeVesselUpdate,The method has 5 parameters. Parameters: updateBlob' cl' kmpID' tick' isSecondary
Long Identifier,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The length of the parameter joined_message_data_decompressed is 32.
Long Identifier,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,,The length of the parameter CLIENT_HANDSHAKE_TIMEOUT_DELAY is 30.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForSQLite,The length of the statement  "            return new DatabaseHelper("Data Source=" + filePath + "; Pooling=true; Max Pool Size=100;"' DatabaseAttributes.SQLite | DatabaseAttributes.KeepRef); " is 148.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForMySQL,The length of the statement  "            // Not entirely sure of the right set of Attributes to apply to MySQL' but this should ensure that connections are being released to the pool " is 141.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForMySQL,The length of the statement  "            return new DatabaseHelper((connectionString + additionalParams)' DatabaseAttributes.MySQL | DatabaseAttributes.MyISAM | DatabaseAttributes.KeepRef); " is 148.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The length of the statement  "                if (parameters.Length % 2 != 0) throw new IOException("Cannot create command with parameters. Argument count isn't a factor of 2"); " is 131.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The length of the statement  "                    if (parameters[i] as String == null) throw new IOException(String.Format("Cannot convert {0} to Parameter key in CreateCommand"' parameters[i] ?? "<null>")); " is 157.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,ToString,The length of the statement  "            return String.Format("DatabaseHelper connected to {0}. Total Queries: {1}' Total Database Opens: {2}' Total Database Closes: {7}' Time Spent On Query: {3}' Time Spent On State: {4}' Avg. Query: {5}' Avg. State Change: {6}"' " is 223.
Long Statement,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,ToString,The length of the statement  "                 new TimeSpan(TimeSpentOnQuery.Ticks / TotalServicedQueries == 0 ? 1 : TotalServicedQueries)' new TimeSpan(TimeSpentChangingState.Ticks / TotalDatabaseOpens == 0 ? 1 : TotalDatabaseOpens)' " is 187.
Long Statement,KMPServer,Log,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,WriteLog,The length of the statement  "                string Line = string.Format("[{0}] [{1}] : {2}"' DateTime.Now.ToString("HH:mm:ss")' level.ToString()' string.Format(format' args)); " is 131.
Long Statement,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The length of the statement  "					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now."); " is 143.
Long Statement,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The length of the statement  "					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(asyncReceive)' state); " is 155.
Long Statement,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The length of the statement  "					if ((queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isServerSendingData) " is 137.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("StandardCtrlSrf"); partList.Add("CanardController"); partList.Add("noseCone"); partList.Add("AdvancedCanard"); partList.Add("airplaneTail"); " is 154.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("deltaWing"); partList.Add("noseConeAdapter"); partList.Add("rocketNoseCone"); partList.Add("smallCtrlSrf"); partList.Add("standardNoseCone"); " is 155.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sweptWing"); partList.Add("tailfin"); partList.Add("wingConnector"); partList.Add("winglet"); partList.Add("R8winglet"); " is 134.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("winglet3"); partList.Add("Mark1Cockpit"); partList.Add("Mark2Cockpit"); partList.Add("Mark1-2Pod"); partList.Add("advSasModule"); " is 143.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("asasmodule1-2"); partList.Add("avionicsNoseCone"); partList.Add("crewCabin"); partList.Add("cupola"); partList.Add("landerCabinSmall"); " is 149.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("mark3Cockpit"); partList.Add("mk1pod"); partList.Add("mk2LanderCabin"); partList.Add("probeCoreCube"); partList.Add("probeCoreHex"); " is 146.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("probeCoreOcto"); partList.Add("probeCoreOcto2"); partList.Add("probeCoreSphere"); partList.Add("probeStackLarge"); partList.Add("probeStackSmall"); " is 161.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sasModule"); partList.Add("seatExternalCmd"); partList.Add("rtg"); partList.Add("batteryBank"); partList.Add("batteryBankLarge"); " is 143.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("batteryBankMini"); partList.Add("batteryPack"); partList.Add("ksp.r.largeBatteryPack"); partList.Add("largeSolarPanel"); partList.Add("solarPanels1"); " is 164.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("solarPanels2"); partList.Add("solarPanels3"); partList.Add("solarPanels4"); partList.Add("solarPanels5"); partList.Add("JetEngine"); " is 146.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("engineLargeSkipper"); partList.Add("ionEngine"); partList.Add("liquidEngine"); partList.Add("liquidEngine1-2"); partList.Add("liquidEngine2"); " is 156.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("liquidEngine2-2"); partList.Add("liquidEngine3"); partList.Add("liquidEngineMini"); partList.Add("microEngine"); partList.Add("nuclearEngine"); " is 157.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("radialEngineMini"); partList.Add("radialLiquidEngine1-2"); partList.Add("sepMotor1"); partList.Add("smallRadialEngine"); partList.Add("solidBooster"); " is 164.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("solidBooster1-1"); partList.Add("toroidalAerospike"); partList.Add("turboFanEngine"); partList.Add("MK1Fuselage"); partList.Add("Mk1FuselageStructural"); " is 167.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("RCSFuelTank"); partList.Add("RCSTank1-2"); partList.Add("rcsTankMini"); partList.Add("rcsTankRadialLong"); partList.Add("fuelTank"); " is 146.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("fuelTank1-2"); partList.Add("fuelTank2-2"); partList.Add("fuelTank3-2"); partList.Add("fuelTank4-2"); partList.Add("fuelTankSmall"); " is 146.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("fuelTankSmallFlat"); partList.Add("fuelTank.long"); partList.Add("miniFuelTank"); partList.Add("mk2Fuselage"); partList.Add("mk2SpacePlaneAdapter"); " is 162.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("mk3Fuselage"); partList.Add("mk3spacePlaneAdapter"); partList.Add("radialRCSTank"); partList.Add("toroidalFuelTank"); partList.Add("xenonTank"); " is 158.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("xenonTankRadial"); partList.Add("adapterLargeSmallBi"); partList.Add("adapterLargeSmallQuad"); partList.Add("adapterLargeSmallTri"); partList.Add("adapterSmallMiniShort"); " is 185.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("adapterSmallMiniTall"); partList.Add("nacelleBody"); partList.Add("radialEngineBody"); partList.Add("smallHardpoint"); partList.Add("stationHub"); " is 160.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("structuralIBeam1"); partList.Add("structuralIBeam2"); partList.Add("structuralIBeam3"); partList.Add("structuralMiniNode"); partList.Add("structuralPanel1"); " is 171.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("structuralPanel2"); partList.Add("structuralPylon"); partList.Add("structuralWing"); partList.Add("strutConnector"); partList.Add("strutCube"); " is 157.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("strutOcto"); partList.Add("trussAdapter"); partList.Add("trussPiece1x"); partList.Add("trussPiece3x"); partList.Add("CircularIntake"); " is 148.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("landingLeg1"); partList.Add("landingLeg1-2"); partList.Add("RCSBlock"); partList.Add("stackDecoupler"); partList.Add("airScoop"); " is 143.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("commDish"); partList.Add("decoupler1-2"); partList.Add("dockingPort1"); partList.Add("dockingPort2"); partList.Add("dockingPort3"); " is 145.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("dockingPortLarge"); partList.Add("dockingPortLateral"); partList.Add("fuelLine"); partList.Add("ladder1"); partList.Add("largeAdapter"); " is 150.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("largeAdapter2"); partList.Add("launchClamp1"); partList.Add("linearRcs"); partList.Add("longAntenna"); partList.Add("miniLandingLeg"); " is 148.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("parachuteDrogue"); partList.Add("parachuteLarge"); partList.Add("parachuteRadial"); partList.Add("parachuteSingle"); partList.Add("radialDecoupler"); " is 163.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("radialDecoupler1-2"); partList.Add("radialDecoupler2"); partList.Add("ramAirIntake"); partList.Add("roverBody"); partList.Add("sensorAccelerometer"); " is 163.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sensorBarometer"); partList.Add("sensorGravimeter"); partList.Add("sensorThermometer"); partList.Add("spotLight1"); partList.Add("spotLight2"); " is 157.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("stackBiCoupler"); partList.Add("stackDecouplerMini"); partList.Add("stackPoint1"); partList.Add("stackQuadCoupler"); partList.Add("stackSeparator"); " is 162.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("stackSeparatorBig"); partList.Add("stackSeparatorMini"); partList.Add("stackTriCoupler"); partList.Add("telescopicLadder"); partList.Add("telescopicLadderBay"); " is 174.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("SmallGearBay"); partList.Add("roverWheel1"); partList.Add("roverWheel2"); partList.Add("roverWheel3"); partList.Add("wheelMed"); partList.Add("flag"); " is 164.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("GrapplingDevice"); partList.Add("LaunchEscapeSystem"); partList.Add("MassiveBooster"); partList.Add("PotatoRoid"); partList.Add("Size2LFB"); " is 154.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("Size3AdvancedEngine"); partList.Add("size3Decoupler"); partList.Add("Size3EngineCluster"); partList.Add("Size3LargeTank"); partList.Add("Size3MediumTank"); " is 169.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                        if (!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar")) " is 243.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                    if (!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar") && trimmedModFile.ToLowerInvariant().EndsWith(".dll")) " is 297.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                        result += modFile.Remove(0' MODS_PATH.Length + 1).Replace("\\"' "/") + "\n"; //Remove the starting parth and add it to the list. " is 128.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                Log.Info("To generate an automatic KMPModControl.txt file' Copy mods from the GameData directory to the '" + MODS_PATH + "' folder."); " is 134.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#The client will be required to have the files found in required-files' and they must match the SHA hash if specified (this is where part mod files and play-altering files should go' like KWRocketry or Ferram Aerospace Research" + " is 231.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#The client may have the files found in optional-files' but IF they do then they must match the SHA hash (this is where mods that do not affect other players should go' like EditorExtensions or part catalogue managers\n" + " is 223.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#resource-whitelist bans ALL resources except those specified in the resource-whitelist section OR in the SHA sections. A file listed in resource-whitelist will NOT be checked for SHA hash. This is useful if you want a mod that modifies files in its own directory as you play.\n" + " is 282.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#To generate the SHA256 of a file you can use a utility such as this one: http://hash.online-convert.com/sha256-generator (use the 'hex' string)' or use sha256sum on linux.\n" + " is 178.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#If there is no SHA256 hash listed here (i.e. blank after the equals sign or no equals sign)' SHA matching will not be enforced.\n" + " is 134.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#You may not specify multiple SHAs for the same file. Do not put spaces around equals sign. Follow the example carefully.\n" + " is 127.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                filestring += "#Alternatively' change 'blacklist' to 'whitelist' and clients will only be allowed to use dll's listed here or in the 'required-files' and 'optional-files' sections.\n"; " is 184.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                filestring += "#Alternatively' change 'whitelist' to 'blacklist' and clients will not be allowed to use dll's listed here.\n"; " is 126.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "            filestring += "#You can ban specific files in resource-blacklist mode' or only allow specific files in resource-whitelist mode.\n" + " is 132.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#To add a mod part' add the name from the part's .cfg file. The name is the name from the PART{} section' where underscores are replaced with periods.\n" + " is 156.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#Example: mumech.MJ2.Pod (NOTE: In the part.cfg this MechJeb2 pod is named mumech_MJ2_Pod. The _ have been replaced with .)\n" + " is 129.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#You can use this application to generate partlists from a KSP installation if you want to add mod parts: http://forum.kerbalspaceprogram.com/threads/57284 \n" + " is 162.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                    if (!file.ToLowerInvariant().StartsWith("squad") && !file.ToLowerInvariant().StartsWith("nasamission") && file.Substring(file.Length - 4).Equals(".cfg"' StringComparison.InvariantCultureIgnoreCase)) // check if config file (only place where parts are located) " is 259.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                                else if (word.Equals("name"' StringComparison.InvariantCultureIgnoreCase) && str_nextword(sr).Equals("="' StringComparison.InvariantCultureIgnoreCase) && newPart) " is 162.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                                    string[] temp = line.Split(toperiod' StringSplitOptions.RemoveEmptyEntries); // convert spaces and underscores to periods " is 121.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The length of the statement  "            String filename = string.Format("{0}/{1} {2}.png"' SCREENSHOT_DIR' KMPCommon.filteredFileName(player)' System.DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")); " is 156.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                        //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int. " is 133.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                    autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000); " is 153.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                    if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty)) " is 130.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The length of the statement  "                    Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @newGuid WHERE Guid = @guid;"' "newGuid"' Guid.NewGuid()' "guid"' guid); " is 126.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The length of the statement  "                    Log.Info("Player '{0}' and all known aliases banned from server for {1} days. Edit KMPBans.txt or /unregister to allow this user to reconnect."' ban_name' days); " is 161.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60); " is 138.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                        results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2))); " is 126.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount); " is 122.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,The length of the statement  "                    foreach (var client in clients.ToList().Where(c => !c.isValid || markedClients.Exists(mc => mc.clientIndex == c.clientIndex))) " is 126.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,The length of the statement  "                        disconnectClient(client' (String.IsNullOrEmpty(client.disconnectMessage)) ? "Connection lost" : client.disconnectMessage); " is 122.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,optimizeIncomingMessageQueue,The length of the statement  "                if (message.id == KMPCommon.ClientMessageID.PRIMARY_PLUGIN_UPDATE || message.id == KMPCommon.ClientMessageID.SECONDARY_PLUGIN_UPDATE) " is 133.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,optimizeIncomingMessageQueue,The length of the statement  "            //Log.Debug("Optimize took " + (stopwatch.ElapsedMilliseconds - optimizeTime) + "ms' old length: " + clientMessageQueue.Count + "' new length: " + newQueue.Count); " is 163.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,getClientByName,The length of the statement  "            return clients.Where(c => c.isReady && c.username.Equals(name' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault(); " is 126.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The length of the statement  "                    //Log.Info("Message id: " + id.ToString() + " from client: " + cl + " data: " + (data != null ? data.Length.ToString() : "0")); " is 127.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleSSync,The length of the statement  "                Database.ExecuteReader("SELECT ss1.ID FROM kmpSubspace ss1 LEFT JOIN kmpSubspace ss2 ON ss1.LastTick < ss2.LastTick WHERE ss2.ID IS NULL;"' " is 139.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleTimeSync,The length of the statement  "            //Message format: clientsendtick(8)' serverreceivetick(8)' serversendtick(8). The server send tick gets added during actual sending. " is 132.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleTimeSync,The length of the statement  "            byte[] message_bytes = buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' data); //This has already been rewritten in the queueClientMessage. " is 145.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleWarping,The length of the statement  "                    newSubspace = Convert.ToInt32(Database.ExecuteScalar("INSERT INTO kmpSubspace (LastTick) VALUES (@tick);" + (settings.useMySQL ? " is 128.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The length of the statement  "            int player_exists = Convert.ToInt32(Database.ExecuteScalar("SELECT COUNT(*) FROM kmpPlayer WHERE Guid = @guid AND Name LIKE @username"' " is 135.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The length of the statement  "            int playerID = Convert.ToInt32(Database.ExecuteScalar("SELECT ID FROM kmpPlayer WHERE Guid = @guid AND Name LIKE @username;"' " is 125.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHistoricalVesselUpdates,The length of the statement  "                    foreach (var client in clients.ToList().Where(c => c.currentSubspaceID == toSubspace && !c.warping && c.currentVessel != vessel_update.kmpID)) " is 142.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendServerSync,The length of the statement  "                Database.ExecuteReader("SELECT ss1.ID' ss1.LastTick FROM kmpSubspace ss1 LEFT JOIN kmpSubspace ss2 ON ss1.LastTick < ss2.LastTick WHERE ss2.ID IS NULL;"' " is 153.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The length of the statement  "                        sb.Append(KMPCommon.SHARE_CRAFT_COMMAND + " <craftname> - Shares the craft of name <craftname> with all other players\n"); " is 122.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The length of the statement  "                string full_message = string.Format("{2}<{0}> {1}"' cl.username' message_text' (isAdmin(cl.username) ? "[" + KMPCommon.ADMIN_MARKER + "] " : "")); " is 146.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                            object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" + " is 144.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                            object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" + " is 144.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" + " is 122.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"' " is 121.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                if (!recentlyDestroyed.ContainsKey(vessel_update.kmpID) || (recentlyDestroyed[vessel_update.kmpID] + 1500L) < currentMillisecond) " is 129.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = @ves_up_destroyed WHERE Guid = @kmpID AND (@ves_up_destroyed IS NULL OR Destroyed IS NULL OR Destroyed > @ves_up_destroyed);"' " is 185.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    if (!recentlyDestroyed.ContainsKey(vessel_update.kmpID) && vessel_update.situation == Situation.DESTROYED) //Only report first destruction event " is 144.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    else if (recentlyDestroyed.ContainsKey(vessel_update.kmpID)) recentlyDestroyed.Remove(vessel_update.kmpID); //Vessel was restored for whatever reason " is 149.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdateToAll,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c.isReady && c != cl && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendScreenshotToWatchers,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The length of the statement  "                double tickOffset = (double)(subspaceTime - subSpaceMasterTime[cl.currentSubspaceID]) / 10000000; //The magic number that converts 100ns to seconds. " is 148.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearEmptySubspace,The length of the statement  "                    minTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(s.LastTick) Tick FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 170.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "                if (currentMillisecond < subSpaceLastRateCheck[subspaceID] + 30000) return; //Only check once every 30 seconds per subspace. " is 124.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            if (!subSpaceMasterSpeed.ContainsKey(subspaceID) || !subSpaceMasterTick.ContainsKey(subspaceID) || !subSpaceMasterSpeed.ContainsKey(subspaceID)) return; //Only works for locked subspaces " is 186.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            float subspaceAverageWarpRate = subspaceWarpRateTotal / numberOfClientsInSubspace; //Aka: The average warp rate of the subspace. " is 128.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            float subspaceTargetRate = (subspaceAverageWarpRate + subspaceMinWarpRate) / 2; //Lets slow down to halfway between the average and slowest player. " is 147.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            if (subspaceTargetRate < 0.75f) subspaceTargetRate = 0.75f; //Let's set a lower bound to something still reasonable like 0.75f. " is 127.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "                double tickOffset = (double)(currenttime - subSpaceMasterTime[subspaceID]) / 10000000; //The magic number that converts 100ns to seconds. " is 137.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" + " is 169.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                            "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT")); " is 124.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway " is 156.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" + " is 162.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" + " is 132.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "             int vesselCount = Convert.ToInt32(Database.ExecuteScalar("SELECT COUNT(*) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 165.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                         earliestClearTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(LastTick) FROM kmpSubspace WHERE ID IN (@subspaceids);"' " is 128.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                     double earliestClearSubspaceTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(s.LastTick) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND (v.Destroyed IS NULL OR v.Destroyed > @minTick);"' " is 216.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                             Database.ExecuteScalar("SELECT MIN(s.LastTick) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 138.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,GetDataReaderBytes,The length of the statement  "            int length = (int)reader.GetBytes(column' 0' null' 0' 0); //MySQL is apparently fussy about requesting too many bytes' so use exact length " is 138.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/register [username] [token] - Add new roster entry for player <username> with authentication token <token> (BEWARE: will delete any matching roster entries)"); " is 170.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/update [username] [token] - Update existing roster entry for player <username>/token <token> (one param must match existing roster entry' other will be updated)"); " is 174.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/dekessler <mins> - Remove debris that has not been updated for at least <mins> minutes (in-game time) (If no <mins> value is specified' debris that is older than 30 minutes will be cleared)"); " is 203.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/reloadmodfile - Reloads the {0} file. Note that this will not recheck any currently logged in clients' only those joining"' MOD_CONTROL_FILE); " is 153.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "         Log.Info("/modgen [blacklist|whitelist] [sha] - Auto-generate a KMPModControl.txt file using what you have placed in the server's 'Mods' directory"); " is 149.
Long Statement,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkGhosts,The length of the statement  "                foreach (Client client in clients.ToList().Where(c => !c.isReady && currentMillisecond - c.connectionStartTime > CLIENT_HANDSHAKE_TIMEOUT_DELAY + CLIENT_TIMEOUT_DELAY)) " is 168.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one."); " is 131.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command."); " is 137.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe."); " is 154.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty)."); " is 178.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly."); " is 546.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                        	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");     " is 158.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running."); " is 133.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult)."); " is 142.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server)."); " is 183.
Long Statement,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,hostServer,The length of the statement  "						Log.Error("Your specified IP binding ({0}) is not valid. You must use an IP address belonging to a network interface on this system. Use 0.0.0.0 to use all available interfaces."' settings.ipBinding); " is 200.
Long Statement,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveBans,The length of the statement  "						configWriter.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}"' b.When.ToString()' b.Expires.ToString()' b.WhoBy' b.BannedIP.ToString()' b.BannedGUID.ToString()' b.BannedName' b.Why); " is 179.
Complex Conditional,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The conditional expression  "(queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isServerSendingData"  is complex.
Complex Conditional,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The conditional expression  "!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar")"  is complex.
Complex Conditional,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The conditional expression  "!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar") && trimmedModFile.ToLowerInvariant().EndsWith(".dll")"  is complex.
Complex Conditional,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The conditional expression  "(client.currentSubspaceID == cl.currentSubspaceID)                      && !client.warping && !cl.warping                      && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)"  is complex.
Complex Conditional,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The conditional expression  "!secondaryUpdate                          && !client.warping && !cl.warping                          && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)                          && firstSubspaceIsPresentOrFutureOfSecondSubspace(client.currentSubspaceID' cl.currentSubspaceID)"  is complex.
Empty Catch Block,KMPServer,Log,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,WriteLog,The method has an empty catch block.
Empty Catch Block,KMPServer,Log,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,SendToAdmin,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,safeAbort,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,safeAbort,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleCommands,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleCommands,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearClientsServerCommand,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendOutgoingMessages,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,disconnectClient,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncHTTPCallback,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleActivityUpdateInGame,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearEmptySubspace,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkGhosts,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveWhitelist,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadWhitelist,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveAdmins,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadAdmins,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,writeToFile,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,SetFieldValue,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The method has an empty catch block.
Magic Number,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The following statement contains a magic number: if (parameters != null && parameters.Length > 0 )              {                  if (parameters.Length % 2 != 0) throw new IOException("Cannot create command with parameters. Argument count isn't a factor of 2");                  for (int i = 0; i < parameters.Length; i += 2)                  {                      if (parameters[i] as String == null) throw new IOException(String.Format("Cannot convert {0} to Parameter key in CreateCommand"' parameters[i] ?? "<null>"));                      cmdObj.Parameters.AddWithValue(parameters[i] as String' parameters[i + 1]);                  }              }
Magic Number,KMPServer,DatabaseHelper,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The following statement contains a magic number: if (parameters != null && parameters.Length > 0 )              {                  if (parameters.Length % 2 != 0) throw new IOException("Cannot create command with parameters. Argument count isn't a factor of 2");                  for (int i = 0; i < parameters.Length; i += 2)                  {                      if (parameters[i] as String == null) throw new IOException(String.Format("Cannot convert {0} to Parameter key in CreateCommand"' parameters[i] ?? "<null>"));                      cmdObj.Parameters.AddWithValue(parameters[i] as String' parameters[i + 1]);                  }              }
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The following statement contains a magic number: try {  				// Retrieve the state object and the client socket   				// from the asynchronous state object.  				StateObject state = (StateObject)ar.AsyncState;  				TcpClient client = state.workClient;  				int bytesRead = client.GetStream().EndRead(ar); // Read data from the remote device directly into the message buffer.  				updateReceiveTimestamp();  				currentBytesToReceive -= bytesRead; //Decrement how many bytes we have read.  				if (bytesRead > 0) { //This is just a shortcut really  					if (!currentMessageHeaderRecieved) {  						//We are receiving just the header  						if (currentBytesToReceive == 0) {  							//We have recieved the full message header' lets process it.  							currentMessageID = (KMPCommon.ClientMessageID)BitConverter.ToInt32(currentMessage' 0);  							currentBytesToReceive = BitConverter.ToInt32(currentMessage' 4);  							if (currentBytesToReceive == 0) {  								//We received the header of a empty message' process it and reset the buffers.  								messageReceived(currentMessageID' null);  								currentMessageID = KMPCommon.ClientMessageID.NULL;  								currentBytesToReceive = KMPCommon.MSG_HEADER_LENGTH;  								currentMessage = new byte[currentBytesToReceive];  							} else {  								//We received the header of a non-empty message' Let's give it a buffer and read again.  								currentMessage = new byte[currentBytesToReceive];  								currentMessageHeaderRecieved = true;  							}  						}  					} else {  						if (currentBytesToReceive == 0) {  							//We have received all the message data' lets decompress and process it  							byte[] decompressedData = KMPCommon.Decompress(currentMessage);  							messageReceived(currentMessageID' decompressedData);  							currentMessageHeaderRecieved = false;  							currentMessageID = KMPCommon.ClientMessageID.NULL;  							currentBytesToReceive = KMPCommon.MSG_HEADER_LENGTH;  							currentMessage = new byte[currentBytesToReceive];  						}  					}    				}  				if (currentBytesToReceive < 0) {  					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now.");  				}  				if (client != null) {  					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(asyncReceive)' state);  				}  			}  			catch (Exception e) {  				//Basically' If anything goes wrong at all the stream is broken and there is no way to recover from it.  				Log.Debug("Exception thrown in ReceiveCallback()' catch 1' Exception: {0}"' e.ToString());  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: if (id == KMPCommon.ClientMessageID.SPLIT_MESSAGE) {  				if (splitMessageReceiveIndex == 0) {  					//New split message  					int split_message_length = KMPCommon.intFromBytes (data' 4);  					splitMessageData = new byte[8 + split_message_length];  					data.CopyTo (splitMessageData' 0);  					splitMessageReceiveIndex = data.Length;  				} else {  					//Continued split message  					data.CopyTo (splitMessageData' splitMessageReceiveIndex);  					splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  				}  				//Check if we have filled the byte array' if so' handle the message.  				if (splitMessageReceiveIndex == splitMessageData.Length) {  					//Parse the message and feed it into the client queue  					KMPCommon.ClientMessageID joined_message_id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes (splitMessageData' 0);  					int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  					byte[] joined_message_data = new byte[joined_message_length];  					Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  					byte[] joined_message_data_decompressed = KMPCommon.Decompress (joined_message_data);  					parent.queueClientMessage (this' joined_message_id' joined_message_data_decompressed);  					splitMessageReceiveIndex = 0;  				}  			} else {  				parent.queueClientMessage (this' id' data);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: if (id == KMPCommon.ClientMessageID.SPLIT_MESSAGE) {  				if (splitMessageReceiveIndex == 0) {  					//New split message  					int split_message_length = KMPCommon.intFromBytes (data' 4);  					splitMessageData = new byte[8 + split_message_length];  					data.CopyTo (splitMessageData' 0);  					splitMessageReceiveIndex = data.Length;  				} else {  					//Continued split message  					data.CopyTo (splitMessageData' splitMessageReceiveIndex);  					splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  				}  				//Check if we have filled the byte array' if so' handle the message.  				if (splitMessageReceiveIndex == splitMessageData.Length) {  					//Parse the message and feed it into the client queue  					KMPCommon.ClientMessageID joined_message_id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes (splitMessageData' 0);  					int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  					byte[] joined_message_data = new byte[joined_message_length];  					Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  					byte[] joined_message_data_decompressed = KMPCommon.Decompress (joined_message_data);  					parent.queueClientMessage (this' joined_message_id' joined_message_data_decompressed);  					splitMessageReceiveIndex = 0;  				}  			} else {  				parent.queueClientMessage (this' id' data);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: if (id == KMPCommon.ClientMessageID.SPLIT_MESSAGE) {  				if (splitMessageReceiveIndex == 0) {  					//New split message  					int split_message_length = KMPCommon.intFromBytes (data' 4);  					splitMessageData = new byte[8 + split_message_length];  					data.CopyTo (splitMessageData' 0);  					splitMessageReceiveIndex = data.Length;  				} else {  					//Continued split message  					data.CopyTo (splitMessageData' splitMessageReceiveIndex);  					splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  				}  				//Check if we have filled the byte array' if so' handle the message.  				if (splitMessageReceiveIndex == splitMessageData.Length) {  					//Parse the message and feed it into the client queue  					KMPCommon.ClientMessageID joined_message_id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes (splitMessageData' 0);  					int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  					byte[] joined_message_data = new byte[joined_message_length];  					Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  					byte[] joined_message_data_decompressed = KMPCommon.Decompress (joined_message_data);  					parent.queueClientMessage (this' joined_message_id' joined_message_data_decompressed);  					splitMessageReceiveIndex = 0;  				}  			} else {  				parent.queueClientMessage (this' id' data);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: if (id == KMPCommon.ClientMessageID.SPLIT_MESSAGE) {  				if (splitMessageReceiveIndex == 0) {  					//New split message  					int split_message_length = KMPCommon.intFromBytes (data' 4);  					splitMessageData = new byte[8 + split_message_length];  					data.CopyTo (splitMessageData' 0);  					splitMessageReceiveIndex = data.Length;  				} else {  					//Continued split message  					data.CopyTo (splitMessageData' splitMessageReceiveIndex);  					splitMessageReceiveIndex = splitMessageReceiveIndex + data.Length;  				}  				//Check if we have filled the byte array' if so' handle the message.  				if (splitMessageReceiveIndex == splitMessageData.Length) {  					//Parse the message and feed it into the client queue  					KMPCommon.ClientMessageID joined_message_id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes (splitMessageData' 0);  					int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);  					byte[] joined_message_data = new byte[joined_message_length];  					Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);  					byte[] joined_message_data_decompressed = KMPCommon.Decompress (joined_message_data);  					parent.queueClientMessage (this' joined_message_id' joined_message_data_decompressed);  					splitMessageReceiveIndex = 0;  				}  			} else {  				parent.queueClientMessage (this' id' data);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ServerMessageID.SYNC_TIME) {  				byte[] next_message_stripped = new byte[next_message.Length - 8];  				Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);  				byte[] next_message_decompressed = KMPCommon.Decompress(next_message_stripped);  				byte[] time_sync_rewrite = new byte[24];  				next_message_decompressed.CopyTo(time_sync_rewrite' 0);  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);  				next_message = Server.buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ServerMessageID.SYNC_TIME) {  				byte[] next_message_stripped = new byte[next_message.Length - 8];  				Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);  				byte[] next_message_decompressed = KMPCommon.Decompress(next_message_stripped);  				byte[] time_sync_rewrite = new byte[24];  				next_message_decompressed.CopyTo(time_sync_rewrite' 0);  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);  				next_message = Server.buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ServerMessageID.SYNC_TIME) {  				byte[] next_message_stripped = new byte[next_message.Length - 8];  				Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);  				byte[] next_message_decompressed = KMPCommon.Decompress(next_message_stripped);  				byte[] time_sync_rewrite = new byte[24];  				next_message_decompressed.CopyTo(time_sync_rewrite' 0);  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);  				next_message = Server.buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ServerMessageID.SYNC_TIME) {  				byte[] next_message_stripped = new byte[next_message.Length - 8];  				Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);  				byte[] next_message_decompressed = KMPCommon.Decompress(next_message_stripped);  				byte[] time_sync_rewrite = new byte[24];  				next_message_decompressed.CopyTo(time_sync_rewrite' 0);  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);  				next_message = Server.buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: if (next_message_id == (int)KMPCommon.ServerMessageID.SYNC_TIME) {  				byte[] next_message_stripped = new byte[next_message.Length - 8];  				Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);  				byte[] next_message_decompressed = KMPCommon.Decompress(next_message_stripped);  				byte[] time_sync_rewrite = new byte[24];  				next_message_decompressed.CopyTo(time_sync_rewrite' 0);  				BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);  				next_message = Server.buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' time_sync_rewrite);  			}
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControlCommand,The following statement contains a magic number: if (input.Length == 2)              {                  commandParts = input[1].Split(new char[] { ' ' });              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The following statement contains a magic number: if (autoAdd) // add a part list for all part in the Required and Optional folders              {                  string[] ls = Directory.GetFiles(MODS_PATH' "*"' SearchOption.AllDirectories);                  ls = ls.Distinct().ToArray();                  char[] toperiod = { '_' };                  foreach (string file in ls)                  {                      //We add Squad files manually in generatePartsList above.                      if (!file.ToLowerInvariant().StartsWith("squad") && !file.ToLowerInvariant().StartsWith("nasamission") && file.Substring(file.Length - 4).Equals(".cfg"' StringComparison.InvariantCultureIgnoreCase)) // check if config file (only place where parts are located)                      {                          using (StreamReader sr = new StreamReader(file))                          {                              bool newPart = false;                              while (!sr.EndOfStream)                              {                                  string word = str_nextword(sr);                                  if (word == "PART")                                  {                                      newPart = true;                                  }                                  else if (word.Equals("name"' StringComparison.InvariantCultureIgnoreCase) && str_nextword(sr).Equals("="' StringComparison.InvariantCultureIgnoreCase) && newPart)                                  {                                      string line = sr.ReadLine();                                      line.Trim(); // remove whitespace from part name                                      string[] temp = line.Split(toperiod' StringSplitOptions.RemoveEmptyEntries); // convert spaces and underscores to periods                                      line = String.Join("."' temp);                                      parts.Add(line);                                      newPart = false;                                  }                              }                          }                      }                  }                  parts = parts.Distinct().ToList();              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The following statement contains a magic number: if (!File.Exists(filename))              {                  try                  {                      //Read description length                      int description_length = KMPCommon.intFromBytes(bytes' 0);                        //Trim the description bytes from the image                      byte[] trimmed_bytes = new byte[bytes.Length - 4 - description_length];                      Array.Copy(bytes' 4 + description_length' trimmed_bytes' 0' trimmed_bytes.Length);                        File.WriteAllBytes(filename' trimmed_bytes);                  }                  catch (Exception)                  {                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The following statement contains a magic number: if (!File.Exists(filename))              {                  try                  {                      //Read description length                      int description_length = KMPCommon.intFromBytes(bytes' 0);                        //Trim the description bytes from the image                      byte[] trimmed_bytes = new byte[bytes.Length - 4 - description_length];                      Array.Copy(bytes' 4 + description_length' trimmed_bytes' 0' trimmed_bytes.Length);                        File.WriteAllBytes(filename' trimmed_bytes);                  }                  catch (Exception)                  {                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: try              {                  startDatabase();                    //Start hosting server                  stopwatch.Start();                    //read info for server sided mod support                  readModControl();                    Log.Info("Hosting server on port {0} ..."' settings.port);                    clients = new SynchronizedCollection<Client>(settings.maxClients);                  flight_clients = new SynchronizedCollection<Client>(settings.maxClients);                  cleanupClients = new SynchronizedCollection<Client>(settings.maxClients);                  clientMessageQueue = new ConcurrentQueue<ClientMessage>();                    listenThread = new Thread(new ThreadStart(listenForClients));                  commandThread = new Thread(new ThreadStart(handleCommands));                  connectionThread = new Thread(new ThreadStart(handleConnections));                  outgoingMessageThread = new Thread(new ThreadStart(sendOutgoingMessages));                  ghostCheckThread = new Thread(new ThreadStart(checkGhosts));                    threadException = null;                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  tcpListener = new TcpListener(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (settings.hostIPv6 == true)                  {                      try                      {                          //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int.                          tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          Log.Debug("Failed to unset IPv6Only. Linux and Mac have this option off by default.");                      }                  }                    listenThread.Start();                    try                  {                      udpClient = new UdpClient((IPEndPoint)tcpListener.LocalEndpoint);                      udpClient.BeginReceive(asyncUDPReceive' null);                      //udpClient.Client.AllowNatTraversal(1);                  }                  catch                  {                      udpClient = null;                  }                    displayCommands();                    commandThread.Start();                  connectionThread.Start();                  outgoingMessageThread.Start();                  ghostCheckThread.Start();                    if (settings.autoDekessler)                  {                      autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);                      Log.Debug("Starting AutoDekessler: Timer Set to " + settings.autoDekesslerTime + " Minutes");                  }                    if (settings.httpBroadcast)                      startHttpServer();                    long last_backup_time = 0;                    while (!stop)                  {                      //Check for exceptions that occur in threads                      lock (threadExceptionLock)                      {                          if (threadException != null)                          {                              Exception e = threadException;                              threadExceptionStackTrace = e.StackTrace;                              throw e;                          }                      }                        if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty))                      {                          if (activeClientCount() <= 0)                          {                              backedUpSinceEmpty = true;                           if (settings.freezeTimeWhenServerIsEmpty)                           {                               subSpaceMasterTick.Clear();                               subSpaceMasterTime.Clear();                               subSpaceMasterSpeed.Clear();                           }                              CleanDatabase();                          }                            last_backup_time = currentMillisecond;                          BackupDatabase();                      }                        Thread.Sleep(SLEEP_TIME);                  }                    clearState();                  stopwatch.Stop();                    Log.Info("Server session ended.");                  if (quit) { Log.Info("Quitting"); Thread.Sleep(1000); Environment.Exit(0); }              }              catch (MySqlException e)              {                  Log.Error("Fatal error accessing MySQL database' server session ended!");                  Log.Error(e.Message);               Log.Debug(e.StackTrace);              }              catch (Exception e)              {                  Log.Error("Fatal error' server session ended! Exception: {0}"' e.Message);               Log.Debug(e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: try              {                  startDatabase();                    //Start hosting server                  stopwatch.Start();                    //read info for server sided mod support                  readModControl();                    Log.Info("Hosting server on port {0} ..."' settings.port);                    clients = new SynchronizedCollection<Client>(settings.maxClients);                  flight_clients = new SynchronizedCollection<Client>(settings.maxClients);                  cleanupClients = new SynchronizedCollection<Client>(settings.maxClients);                  clientMessageQueue = new ConcurrentQueue<ClientMessage>();                    listenThread = new Thread(new ThreadStart(listenForClients));                  commandThread = new Thread(new ThreadStart(handleCommands));                  connectionThread = new Thread(new ThreadStart(handleConnections));                  outgoingMessageThread = new Thread(new ThreadStart(sendOutgoingMessages));                  ghostCheckThread = new Thread(new ThreadStart(checkGhosts));                    threadException = null;                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  tcpListener = new TcpListener(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (settings.hostIPv6 == true)                  {                      try                      {                          //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int.                          tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          Log.Debug("Failed to unset IPv6Only. Linux and Mac have this option off by default.");                      }                  }                    listenThread.Start();                    try                  {                      udpClient = new UdpClient((IPEndPoint)tcpListener.LocalEndpoint);                      udpClient.BeginReceive(asyncUDPReceive' null);                      //udpClient.Client.AllowNatTraversal(1);                  }                  catch                  {                      udpClient = null;                  }                    displayCommands();                    commandThread.Start();                  connectionThread.Start();                  outgoingMessageThread.Start();                  ghostCheckThread.Start();                    if (settings.autoDekessler)                  {                      autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);                      Log.Debug("Starting AutoDekessler: Timer Set to " + settings.autoDekesslerTime + " Minutes");                  }                    if (settings.httpBroadcast)                      startHttpServer();                    long last_backup_time = 0;                    while (!stop)                  {                      //Check for exceptions that occur in threads                      lock (threadExceptionLock)                      {                          if (threadException != null)                          {                              Exception e = threadException;                              threadExceptionStackTrace = e.StackTrace;                              throw e;                          }                      }                        if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty))                      {                          if (activeClientCount() <= 0)                          {                              backedUpSinceEmpty = true;                           if (settings.freezeTimeWhenServerIsEmpty)                           {                               subSpaceMasterTick.Clear();                               subSpaceMasterTime.Clear();                               subSpaceMasterSpeed.Clear();                           }                              CleanDatabase();                          }                            last_backup_time = currentMillisecond;                          BackupDatabase();                      }                        Thread.Sleep(SLEEP_TIME);                  }                    clearState();                  stopwatch.Stop();                    Log.Info("Server session ended.");                  if (quit) { Log.Info("Quitting"); Thread.Sleep(1000); Environment.Exit(0); }              }              catch (MySqlException e)              {                  Log.Error("Fatal error accessing MySQL database' server session ended!");                  Log.Error(e.Message);               Log.Debug(e.StackTrace);              }              catch (Exception e)              {                  Log.Error("Fatal error' server session ended! Exception: {0}"' e.Message);               Log.Debug(e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: try              {                  startDatabase();                    //Start hosting server                  stopwatch.Start();                    //read info for server sided mod support                  readModControl();                    Log.Info("Hosting server on port {0} ..."' settings.port);                    clients = new SynchronizedCollection<Client>(settings.maxClients);                  flight_clients = new SynchronizedCollection<Client>(settings.maxClients);                  cleanupClients = new SynchronizedCollection<Client>(settings.maxClients);                  clientMessageQueue = new ConcurrentQueue<ClientMessage>();                    listenThread = new Thread(new ThreadStart(listenForClients));                  commandThread = new Thread(new ThreadStart(handleCommands));                  connectionThread = new Thread(new ThreadStart(handleConnections));                  outgoingMessageThread = new Thread(new ThreadStart(sendOutgoingMessages));                  ghostCheckThread = new Thread(new ThreadStart(checkGhosts));                    threadException = null;                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  tcpListener = new TcpListener(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (settings.hostIPv6 == true)                  {                      try                      {                          //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int.                          tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          Log.Debug("Failed to unset IPv6Only. Linux and Mac have this option off by default.");                      }                  }                    listenThread.Start();                    try                  {                      udpClient = new UdpClient((IPEndPoint)tcpListener.LocalEndpoint);                      udpClient.BeginReceive(asyncUDPReceive' null);                      //udpClient.Client.AllowNatTraversal(1);                  }                  catch                  {                      udpClient = null;                  }                    displayCommands();                    commandThread.Start();                  connectionThread.Start();                  outgoingMessageThread.Start();                  ghostCheckThread.Start();                    if (settings.autoDekessler)                  {                      autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);                      Log.Debug("Starting AutoDekessler: Timer Set to " + settings.autoDekesslerTime + " Minutes");                  }                    if (settings.httpBroadcast)                      startHttpServer();                    long last_backup_time = 0;                    while (!stop)                  {                      //Check for exceptions that occur in threads                      lock (threadExceptionLock)                      {                          if (threadException != null)                          {                              Exception e = threadException;                              threadExceptionStackTrace = e.StackTrace;                              throw e;                          }                      }                        if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty))                      {                          if (activeClientCount() <= 0)                          {                              backedUpSinceEmpty = true;                           if (settings.freezeTimeWhenServerIsEmpty)                           {                               subSpaceMasterTick.Clear();                               subSpaceMasterTime.Clear();                               subSpaceMasterSpeed.Clear();                           }                              CleanDatabase();                          }                            last_backup_time = currentMillisecond;                          BackupDatabase();                      }                        Thread.Sleep(SLEEP_TIME);                  }                    clearState();                  stopwatch.Stop();                    Log.Info("Server session ended.");                  if (quit) { Log.Info("Quitting"); Thread.Sleep(1000); Environment.Exit(0); }              }              catch (MySqlException e)              {                  Log.Error("Fatal error accessing MySQL database' server session ended!");                  Log.Error(e.Message);               Log.Debug(e.StackTrace);              }              catch (Exception e)              {                  Log.Error("Fatal error' server session ended! Exception: {0}"' e.Message);               Log.Debug(e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: try              {                  startDatabase();                    //Start hosting server                  stopwatch.Start();                    //read info for server sided mod support                  readModControl();                    Log.Info("Hosting server on port {0} ..."' settings.port);                    clients = new SynchronizedCollection<Client>(settings.maxClients);                  flight_clients = new SynchronizedCollection<Client>(settings.maxClients);                  cleanupClients = new SynchronizedCollection<Client>(settings.maxClients);                  clientMessageQueue = new ConcurrentQueue<ClientMessage>();                    listenThread = new Thread(new ThreadStart(listenForClients));                  commandThread = new Thread(new ThreadStart(handleCommands));                  connectionThread = new Thread(new ThreadStart(handleConnections));                  outgoingMessageThread = new Thread(new ThreadStart(sendOutgoingMessages));                  ghostCheckThread = new Thread(new ThreadStart(checkGhosts));                    threadException = null;                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  tcpListener = new TcpListener(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (settings.hostIPv6 == true)                  {                      try                      {                          //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int.                          tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          Log.Debug("Failed to unset IPv6Only. Linux and Mac have this option off by default.");                      }                  }                    listenThread.Start();                    try                  {                      udpClient = new UdpClient((IPEndPoint)tcpListener.LocalEndpoint);                      udpClient.BeginReceive(asyncUDPReceive' null);                      //udpClient.Client.AllowNatTraversal(1);                  }                  catch                  {                      udpClient = null;                  }                    displayCommands();                    commandThread.Start();                  connectionThread.Start();                  outgoingMessageThread.Start();                  ghostCheckThread.Start();                    if (settings.autoDekessler)                  {                      autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);                      Log.Debug("Starting AutoDekessler: Timer Set to " + settings.autoDekesslerTime + " Minutes");                  }                    if (settings.httpBroadcast)                      startHttpServer();                    long last_backup_time = 0;                    while (!stop)                  {                      //Check for exceptions that occur in threads                      lock (threadExceptionLock)                      {                          if (threadException != null)                          {                              Exception e = threadException;                              threadExceptionStackTrace = e.StackTrace;                              throw e;                          }                      }                        if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty))                      {                          if (activeClientCount() <= 0)                          {                              backedUpSinceEmpty = true;                           if (settings.freezeTimeWhenServerIsEmpty)                           {                               subSpaceMasterTick.Clear();                               subSpaceMasterTime.Clear();                               subSpaceMasterSpeed.Clear();                           }                              CleanDatabase();                          }                            last_backup_time = currentMillisecond;                          BackupDatabase();                      }                        Thread.Sleep(SLEEP_TIME);                  }                    clearState();                  stopwatch.Stop();                    Log.Info("Server session ended.");                  if (quit) { Log.Info("Quitting"); Thread.Sleep(1000); Environment.Exit(0); }              }              catch (MySqlException e)              {                  Log.Error("Fatal error accessing MySQL database' server session ended!");                  Log.Error(e.Message);               Log.Debug(e.StackTrace);              }              catch (Exception e)              {                  Log.Error("Fatal error' server session ended! Exception: {0}"' e.Message);               Log.Debug(e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: try              {                  startDatabase();                    //Start hosting server                  stopwatch.Start();                    //read info for server sided mod support                  readModControl();                    Log.Info("Hosting server on port {0} ..."' settings.port);                    clients = new SynchronizedCollection<Client>(settings.maxClients);                  flight_clients = new SynchronizedCollection<Client>(settings.maxClients);                  cleanupClients = new SynchronizedCollection<Client>(settings.maxClients);                  clientMessageQueue = new ConcurrentQueue<ClientMessage>();                    listenThread = new Thread(new ThreadStart(listenForClients));                  commandThread = new Thread(new ThreadStart(handleCommands));                  connectionThread = new Thread(new ThreadStart(handleConnections));                  outgoingMessageThread = new Thread(new ThreadStart(sendOutgoingMessages));                  ghostCheckThread = new Thread(new ThreadStart(checkGhosts));                    threadException = null;                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  tcpListener = new TcpListener(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (settings.hostIPv6 == true)                  {                      try                      {                          //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int.                          tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          Log.Debug("Failed to unset IPv6Only. Linux and Mac have this option off by default.");                      }                  }                    listenThread.Start();                    try                  {                      udpClient = new UdpClient((IPEndPoint)tcpListener.LocalEndpoint);                      udpClient.BeginReceive(asyncUDPReceive' null);                      //udpClient.Client.AllowNatTraversal(1);                  }                  catch                  {                      udpClient = null;                  }                    displayCommands();                    commandThread.Start();                  connectionThread.Start();                  outgoingMessageThread.Start();                  ghostCheckThread.Start();                    if (settings.autoDekessler)                  {                      autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);                      Log.Debug("Starting AutoDekessler: Timer Set to " + settings.autoDekesslerTime + " Minutes");                  }                    if (settings.httpBroadcast)                      startHttpServer();                    long last_backup_time = 0;                    while (!stop)                  {                      //Check for exceptions that occur in threads                      lock (threadExceptionLock)                      {                          if (threadException != null)                          {                              Exception e = threadException;                              threadExceptionStackTrace = e.StackTrace;                              throw e;                          }                      }                        if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty))                      {                          if (activeClientCount() <= 0)                          {                              backedUpSinceEmpty = true;                           if (settings.freezeTimeWhenServerIsEmpty)                           {                               subSpaceMasterTick.Clear();                               subSpaceMasterTime.Clear();                               subSpaceMasterSpeed.Clear();                           }                              CleanDatabase();                          }                            last_backup_time = currentMillisecond;                          BackupDatabase();                      }                        Thread.Sleep(SLEEP_TIME);                  }                    clearState();                  stopwatch.Stop();                    Log.Info("Server session ended.");                  if (quit) { Log.Info("Quitting"); Thread.Sleep(1000); Environment.Exit(0); }              }              catch (MySqlException e)              {                  Log.Error("Fatal error accessing MySQL database' server session ended!");                  Log.Error(e.Message);               Log.Debug(e.StackTrace);              }              catch (Exception e)              {                  Log.Error("Fatal error' server session ended! Exception: {0}"' e.Message);               Log.Debug(e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processCommand,The following statement contains a magic number: try              {                  String cleanInput = input.ToLower().Trim();                  var rawParts = input.Split(new char[] { ' ' }' 2);                  var parts = cleanInput.Split(new char[] { ' ' }' 2);                  //if (!parts[0].StartsWith("/")) { return; } //Allow server to send chat messages                  switch (parts[0])                  {                      case "/ban": banServerCommand(parts); break;                      case "/clearclients": clearClientsServerCommand(); break;                      case "/countclients": countServerCommand(); break;                      case "/help": displayCommands(); break;                      case "/kick": kickServerCommand(parts); break;                      case "/listclients": listServerCommand(); break;                      case "/quit":                      case "/stop": quitServerCommand(parts); bHandleCommandsRunning = false; break;                      case "/save": saveServerCommand(); break;                      case "/register": registerServerCommand(parts); break;                      case "/update": updateServerCommand(parts); break;                      case "/unregister": unregisterServerCommand(parts); break;                      case "/dekessler": dekesslerServerCommand(parts); break;                      case "/countships": countShipsServerCommand(); break;                      case "/listships": listShipsServerCommand(); break;                      case "/lockship": lockShipServerCommand(parts); break;                      case "/deleteship": deleteShipServerCommand(parts); break;                      case "/reloadmodfile": reloadModFileServerCommand(); break;                      case "/say": sayServerCommand(rawParts); break;                      case "/motd": motdServerCommand(rawParts); break;                      case "/rules": rulesServerCommand(rawParts); break;                      case "/setinfo": serverInfoServerCommand(rawParts); break;                      case "/modgen": writeModControlCommand(parts); break;                      case "/dbdiag": Log.Info("[DBDIAG] {0}"' Database); break;                      default: Log.Info("Unknown Command: " + cleanInput); break;                  }              }              catch (FormatException e)              {                  Log.Error("Error handling server command. Maybe a typo? {0} {1}"' e.Message' e.StackTrace);              }              catch (IndexOutOfRangeException)              {                  Log.Error("Command found but missing elements.");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processCommand,The following statement contains a magic number: try              {                  String cleanInput = input.ToLower().Trim();                  var rawParts = input.Split(new char[] { ' ' }' 2);                  var parts = cleanInput.Split(new char[] { ' ' }' 2);                  //if (!parts[0].StartsWith("/")) { return; } //Allow server to send chat messages                  switch (parts[0])                  {                      case "/ban": banServerCommand(parts); break;                      case "/clearclients": clearClientsServerCommand(); break;                      case "/countclients": countServerCommand(); break;                      case "/help": displayCommands(); break;                      case "/kick": kickServerCommand(parts); break;                      case "/listclients": listServerCommand(); break;                      case "/quit":                      case "/stop": quitServerCommand(parts); bHandleCommandsRunning = false; break;                      case "/save": saveServerCommand(); break;                      case "/register": registerServerCommand(parts); break;                      case "/update": updateServerCommand(parts); break;                      case "/unregister": unregisterServerCommand(parts); break;                      case "/dekessler": dekesslerServerCommand(parts); break;                      case "/countships": countShipsServerCommand(); break;                      case "/listships": listShipsServerCommand(); break;                      case "/lockship": lockShipServerCommand(parts); break;                      case "/deleteship": deleteShipServerCommand(parts); break;                      case "/reloadmodfile": reloadModFileServerCommand(); break;                      case "/say": sayServerCommand(rawParts); break;                      case "/motd": motdServerCommand(rawParts); break;                      case "/rules": rulesServerCommand(rawParts); break;                      case "/setinfo": serverInfoServerCommand(rawParts); break;                      case "/modgen": writeModControlCommand(parts); break;                      case "/dbdiag": Log.Info("[DBDIAG] {0}"' Database); break;                      default: Log.Info("Unknown Command: " + cleanInput); break;                  }              }              catch (FormatException e)              {                  Log.Error("Error handling server command. Maybe a typo? {0} {1}"' e.Message' e.StackTrace);              }              catch (IndexOutOfRangeException)              {                  Log.Error("Command found but missing elements.");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: if (parts.Length > 1)              {                  if (parts[1].IndexOf("-u") == 0)                  {                      parts = parts[1].Split(new char[] { ' ' }' 3);                      if (parts.Length > 2)                      {                          String sName = parts[1];                          var clientToMessage = clients.Where(cl => cl.username.ToLower() == sName && cl.isReady).FirstOrDefault();                            if (clientToMessage != null)                          {                              string message = parts[2];                              sendServerMessage(clientToMessage' message);                          }                          else                              Log.Info("Username " + sName + " not found.");                      }                      else                          Log.Info("Error: -u flag found but missing message.");                  }                  else if (parts[1].IndexOf("-u") != -1)                  {                      Log.Info("Error: -u flag found but in wrong location.");                  }                  else                      sendServerMessageToAll(parts[1]);              }              else                  Log.Info("Error: /say command improperly formatted.  Missing message.  /say <-u username> [message]");
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: if (parts.Length > 1)              {                  if (parts[1].IndexOf("-u") == 0)                  {                      parts = parts[1].Split(new char[] { ' ' }' 3);                      if (parts.Length > 2)                      {                          String sName = parts[1];                          var clientToMessage = clients.Where(cl => cl.username.ToLower() == sName && cl.isReady).FirstOrDefault();                            if (clientToMessage != null)                          {                              string message = parts[2];                              sendServerMessage(clientToMessage' message);                          }                          else                              Log.Info("Username " + sName + " not found.");                      }                      else                          Log.Info("Error: -u flag found but missing message.");                  }                  else if (parts[1].IndexOf("-u") != -1)                  {                      Log.Info("Error: -u flag found but in wrong location.");                  }                  else                      sendServerMessageToAll(parts[1]);              }              else                  Log.Info("Error: /say command improperly formatted.  Missing message.  /say <-u username> [message]");
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: if (parts.Length > 1)              {                  if (parts[1].IndexOf("-u") == 0)                  {                      parts = parts[1].Split(new char[] { ' ' }' 3);                      if (parts.Length > 2)                      {                          String sName = parts[1];                          var clientToMessage = clients.Where(cl => cl.username.ToLower() == sName && cl.isReady).FirstOrDefault();                            if (clientToMessage != null)                          {                              string message = parts[2];                              sendServerMessage(clientToMessage' message);                          }                          else                              Log.Info("Username " + sName + " not found.");                      }                      else                          Log.Info("Error: -u flag found but missing message.");                  }                  else if (parts[1].IndexOf("-u") != -1)                  {                      Log.Info("Error: -u flag found but in wrong location.");                  }                  else                      sendServerMessageToAll(parts[1]);              }              else                  Log.Info("Error: /say command improperly formatted.  Missing message.  /say <-u username> [message]");
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,lockShipServerCommand,The following statement contains a magic number: if (args.Length == 2)              {                  try                  {                      Guid vesselGuid = new Guid(args[0]);                      bool lockShip = Boolean.Parse(args[1].ToLower());                            int rows = Database.ExecuteNonQuery("UPDATE kmpVessel" +                                  " SET Private = @private" +                                  " WHERE Guid = @guid"'                                  "private"' lockShip'                                  "guid"' vesselGuid.ToByteArray());                        if (rows != -1 && rows <= 1)                      {                          if (lockShip)                              Log.Info("Vessel {0} is now private."' args[0]);                          else                              Log.Info("Vessel {0} is now public."' args[0]);                      }                      else                          Log.Info("Vessel {0} not found."' args[0]);                  }                  catch (FormatException)                  {                      Log.Error("Supplied tokens are invalid. Use /listships to double check your ID.");                  }              }              else              {                  Log.Info("Could not parse lock ship command. Format is \"/lockship <vesselID> <true/false>\"");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The following statement contains a magic number: int days = 365;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The following statement contains a magic number: if (parts.Length > 1)              {                  String[] args = parts[1].Split(' ');                  String ban_name = args[0];                  Guid guid = Guid.Empty;                  if (args.Length == 2)                  {                      days = Convert.ToInt32(args[1]);                  }                    var userToBan = clients.Where(c => c.username.ToLower() == ban_name && c.isReady).FirstOrDefault();                    if (userToBan != null)                  {                      markClientForDisconnect(userToBan' "You were banned from the server!");                      guid = userToBan.guid;                        var rec = new ServerSettings.BanRecord()                      {                          BannedGUID = guid'                          BannedIP = userToBan.IPAddress'                          BannedName = ban_name'                          Expires = DateTime.Now.AddDays(days)'                          Why = "Ban by console"'                          WhoBy = "Console"'                          When = DateTime.Now'                      };                        settings.bans.Add(rec);                      ServerSettings.saveBans(settings);                      Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @newGuid WHERE Guid = @guid;"' "newGuid"' Guid.NewGuid()' "guid"' guid);                      Log.Info("Player '{0}' and all known aliases banned from server for {1} days. Edit KMPBans.txt or /unregister to allow this user to reconnect."' ban_name' days);                  }                  else                  {                      Log.Info("Failed to locate player {0}."' ban_name);                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,kickServerCommand,The following statement contains a magic number: if (parts.Length == 2)              {                  try                  {                      String kick_name = parts[1].ToLower();                      var clientToDisconnect = clients.Where(cl => cl.username.ToLower() == kick_name && cl.isReady).FirstOrDefault();                      if (clientToDisconnect != null)                      {                          markClientForDisconnect(clientToDisconnect' "You were kicked from the server.");                          Log.Info("{0} was kicked from the server."' clientToDisconnect.username);                      }                      else                      {                          Log.Info("Username {0} not found."' kick_name);                      }                  }                  catch (Exception e)                  {                      Log.Error("Could not kick user.");                      Log.Debug(e.Message);                  }              }              else                  Log.Info("Could not parse /kick command.  Format is \"/kick <username>\"");
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,registerServerCommand,The following statement contains a magic number: if (args.Length == 2)              {                  try                  {                      Guid guid = new Guid(args[1]);                      String username_lower = args[0].ToLower();                      Database.ExecuteNonQuery(@"DELETE FROM kmpPlayer WHERE Name LIKE @username;" +                          " INSERT INTO kmpPlayer (Name' Guid) VALUES (@username'@guid);"'                           "username"' username_lower'                           "guid"' guid);                      Log.Info("Player {0} added to player roster with token {1}."' args[0]' args[1]);                  }                  catch (FormatException)                  {                      Log.Error("Supplied token is invalid.");                  }                  catch (Exception)                  {                      Log.Error("Registration failed' possibly due to a malformed /register command.");                  }              }              else              {                  Log.Info("Could not parse register command. Format is \"/register <username> <token>\"");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,updateServerCommand,The following statement contains a magic number: if (args.Length == 2)              {                  try                  {                      Guid guid = new Guid(args[1]);                      String username_lower = args[0].ToLower();                      Database.ExecuteNonQuery("UPDATE kmpPlayer SET Name=@username' Guid=@guid WHERE Name LIKE @username OR Guid = @guid;"'                          "username"' username_lower'                          "guid"' guid);                      Log.Info("Updated roster with player {0} and token {1}."' args[0]' args[1]);                  }                  catch (FormatException)                  {                      Log.Error("Supplied token is invalid.");                  }                  catch (Exception)                  {                      Log.Error("Update failed' possibly due to a malformed /update command.");                  }              }              else              {                  Log.Info("Could not parse update command. Format is \"/update <username> <token>\"");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,unregisterServerCommand,The following statement contains a magic number: if (parts.Length == 2)              {                  try                  {                      String dereg = parts[1];                      Database.ExecuteNonQuery("DELETE FROM kmpPlayer WHERE Guid = @dereg OR Name LIKE @dereg;"'                          "dereg"' dereg);                      Log.Info("Players with name/token {0} removed from player roster."' dereg);                  }                  catch (Exception e)                  {                      Log.Error("Unregister failed.");                      Log.Debug(e.Message);                  }              }              else                  Log.Info("Could not parse unregister command.  Format is \"/unregister <username OR GUID>\"");
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: int minsToKeep = 30;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: if (parts.Length == 2)              {                  String[] args = parts[1].Split(' ');                  if (args.Length == 1)                      minsToKeep = Convert.ToInt32(args[0]);                  else                      Log.Info("Could not parse dekessler command. Format is \"/dekessler <mins>\"");              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: try              {                  //Get latest tick & calculate cut-off                                  double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60);                  //Get all vessels' remove Debris that is too old                  int clearedCount = 0;                  List<Tuple<byte[]' byte[]' Guid>> results = new List<Tuple<byte[]' byte[]' Guid>>();                    Database.ExecuteReader("SELECT  vu.UpdateMessage' v.ProtoVessel' v.Guid" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND v.Destroyed IS NULL" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick;"'                      record =>                      {                          results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2)));                      });                    foreach (Tuple<byte[]' byte[]' Guid> result in results)                  {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(result.Item1);                      if (vessel_update.tick < cutOffTick)                      {                          byte[] configNodeBytes = result.Item2;                          string s = Encoding.UTF8.GetString(configNodeBytes' 0' configNodeBytes.Length);                          if (s.IndexOf("type") > 0 && s.Length > s.IndexOf("type") + 20)                          {                              if (s.Substring(s.IndexOf("type")' 20).Contains("Debris"))                              {                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = 1 WHERE Guid = @guid"'                                      "guid"' result.Item3);                                  clearedCount++;                              }                          }                      }                  }                  Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount);              }              catch (Exception e)              {                  Log.Info("Universe cleanup failed! {0} {1}"' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: try              {                  //Get latest tick & calculate cut-off                                  double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60);                  //Get all vessels' remove Debris that is too old                  int clearedCount = 0;                  List<Tuple<byte[]' byte[]' Guid>> results = new List<Tuple<byte[]' byte[]' Guid>>();                    Database.ExecuteReader("SELECT  vu.UpdateMessage' v.ProtoVessel' v.Guid" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND v.Destroyed IS NULL" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick;"'                      record =>                      {                          results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2)));                      });                    foreach (Tuple<byte[]' byte[]' Guid> result in results)                  {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(result.Item1);                      if (vessel_update.tick < cutOffTick)                      {                          byte[] configNodeBytes = result.Item2;                          string s = Encoding.UTF8.GetString(configNodeBytes' 0' configNodeBytes.Length);                          if (s.IndexOf("type") > 0 && s.Length > s.IndexOf("type") + 20)                          {                              if (s.Substring(s.IndexOf("type")' 20).Contains("Debris"))                              {                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = 1 WHERE Guid = @guid"'                                      "guid"' result.Item3);                                  clearedCount++;                              }                          }                      }                  }                  Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount);              }              catch (Exception e)              {                  Log.Info("Universe cleanup failed! {0} {1}"' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: try              {                  //Get latest tick & calculate cut-off                                  double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60);                  //Get all vessels' remove Debris that is too old                  int clearedCount = 0;                  List<Tuple<byte[]' byte[]' Guid>> results = new List<Tuple<byte[]' byte[]' Guid>>();                    Database.ExecuteReader("SELECT  vu.UpdateMessage' v.ProtoVessel' v.Guid" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND v.Destroyed IS NULL" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick;"'                      record =>                      {                          results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2)));                      });                    foreach (Tuple<byte[]' byte[]' Guid> result in results)                  {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(result.Item1);                      if (vessel_update.tick < cutOffTick)                      {                          byte[] configNodeBytes = result.Item2;                          string s = Encoding.UTF8.GetString(configNodeBytes' 0' configNodeBytes.Length);                          if (s.IndexOf("type") > 0 && s.Length > s.IndexOf("type") + 20)                          {                              if (s.Substring(s.IndexOf("type")' 20).Contains("Debris"))                              {                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = 1 WHERE Guid = @guid"'                                      "guid"' result.Item3);                                  clearedCount++;                              }                          }                      }                  }                  Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount);              }              catch (Exception e)              {                  Log.Info("Universe cleanup failed! {0} {1}"' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: try              {                  //Get latest tick & calculate cut-off                                  double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60);                  //Get all vessels' remove Debris that is too old                  int clearedCount = 0;                  List<Tuple<byte[]' byte[]' Guid>> results = new List<Tuple<byte[]' byte[]' Guid>>();                    Database.ExecuteReader("SELECT  vu.UpdateMessage' v.ProtoVessel' v.Guid" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND v.Destroyed IS NULL" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick;"'                      record =>                      {                          results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2)));                      });                    foreach (Tuple<byte[]' byte[]' Guid> result in results)                  {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(result.Item1);                      if (vessel_update.tick < cutOffTick)                      {                          byte[] configNodeBytes = result.Item2;                          string s = Encoding.UTF8.GetString(configNodeBytes' 0' configNodeBytes.Length);                          if (s.IndexOf("type") > 0 && s.Length > s.IndexOf("type") + 20)                          {                              if (s.Substring(s.IndexOf("type")' 20).Contains("Debris"))                              {                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = 1 WHERE Guid = @guid"'                                      "guid"' result.Item3);                                  clearedCount++;                              }                          }                      }                  }                  Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount);              }              catch (Exception e)              {                  Log.Info("Universe cleanup failed! {0} {1}"' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,The following statement contains a magic number: try              {                  Log.Info("Listening for clients...");                  tcpListener.Start(4);                    while (true)                  {                      TcpClient client = null;                      String error_message = String.Empty;                        try                      {                          if (tcpListener.Pending())                          {                              client = tcpListener.AcceptTcpClient(); //Accept a TCP client                              client.NoDelay = true;                              Log.Info("New client...");                          }                      }                      catch (System.Net.Sockets.SocketException e)                      {                          if (client != null)                              client.Close();                          client = null;                          error_message = e.ToString();                      }                        if (client != null && client.Connected)                      {                          Log.Info("Client TCP connection established...");                          //Try to add the client                          Client cl = addClient(client);                          if (cl != null)                          {                              if (cl.isValid)                              {                                  //Send a handshake to the client                                  Log.Info("Accepted client from {0}. Handshaking..."' client.Client.RemoteEndPoint.ToString());                                  sendHandshakeMessage(cl);                                    sendMessageDirect(client' KMPCommon.ServerMessageID.NULL' null);                                    //Send the join message to the client                                  if (settings.joinMessage.Length > 0)                                      sendServerMessage(cl' settings.joinMessage);                              }                              else                              {                                  Log.Info("Client attempted to connect' but connection was lost.");                              }                                //Send a server setting update to all clients                              sendServerSettingsToAll();                          }                          else                          {                              //Client array is full                              Log.Info("Client attempted to connect' but server is full.");                              sendHandshakeRefusalMessageDirect(client' "Server is currently full");                              client.Close();                          }                      }                      else                      {                          if (client != null)                              client.Close();                          client = null;                      }                        if (client == null && error_message.Length > 0)                      {                          //There was an error accepting the client                          Log.Error("Error accepting client: ");                          Log.Error(error_message);                      }                        Thread.Sleep(SLEEP_TIME);                  }              }              catch (ThreadAbortException)              {              }              catch (Exception e)              {                  passExceptionToMain(e);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: try              {                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  IPEndPoint endpoint = new IPEndPoint(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (udpClient == null) { return; }                  byte[] received = udpClient.EndReceive(result' ref endpoint);                  if (received.Length >= KMPCommon.MSG_HEADER_LENGTH + 4)                  {                      int index = 0;                        //Get the sender index                      int sender_index = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the message header data                      KMPCommon.ClientMessageID id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes(received' index);                      index += 4;                        int data_length = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the data                      byte[] data = null;                        if (data_length > 0 && data_length <= received.Length - index)                      {                          data = new byte[data_length];                          Array.Copy(received' index' data' 0' data.Length);                      }                        Client client = clients.ToList().Where(c => c.isReady && c.clientIndex == sender_index).FirstOrDefault();                      if (client != null)                      {                          if ((currentMillisecond - client.lastUDPACKTime) > UDP_ACK_THROTTLE)                          {                              //Acknowledge the client's message with a TCP message                              client.queueOutgoingMessage(KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE' null);                              client.lastUDPACKTime = currentMillisecond;                              client.updateReceiveTimestamp();                          }                            //Handle the message                          if (data == null)                          {                              handleMessage(client' id' data);                          }                          else                          {                              byte[] messageData = KMPCommon.Decompress(data);                              if (messageData != null) handleMessage(client' id' messageData);                              //Consider adding re-request here                          }                      }                  }                    udpClient.BeginReceive(asyncUDPReceive' null); //Begin receiving the next message              }              catch (ThreadAbortException)              {              }              catch (Exception e)              {                  passExceptionToMain(e);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: try              {                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  IPEndPoint endpoint = new IPEndPoint(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (udpClient == null) { return; }                  byte[] received = udpClient.EndReceive(result' ref endpoint);                  if (received.Length >= KMPCommon.MSG_HEADER_LENGTH + 4)                  {                      int index = 0;                        //Get the sender index                      int sender_index = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the message header data                      KMPCommon.ClientMessageID id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes(received' index);                      index += 4;                        int data_length = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the data                      byte[] data = null;                        if (data_length > 0 && data_length <= received.Length - index)                      {                          data = new byte[data_length];                          Array.Copy(received' index' data' 0' data.Length);                      }                        Client client = clients.ToList().Where(c => c.isReady && c.clientIndex == sender_index).FirstOrDefault();                      if (client != null)                      {                          if ((currentMillisecond - client.lastUDPACKTime) > UDP_ACK_THROTTLE)                          {                              //Acknowledge the client's message with a TCP message                              client.queueOutgoingMessage(KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE' null);                              client.lastUDPACKTime = currentMillisecond;                              client.updateReceiveTimestamp();                          }                            //Handle the message                          if (data == null)                          {                              handleMessage(client' id' data);                          }                          else                          {                              byte[] messageData = KMPCommon.Decompress(data);                              if (messageData != null) handleMessage(client' id' messageData);                              //Consider adding re-request here                          }                      }                  }                    udpClient.BeginReceive(asyncUDPReceive' null); //Begin receiving the next message              }              catch (ThreadAbortException)              {              }              catch (Exception e)              {                  passExceptionToMain(e);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: try              {                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  IPEndPoint endpoint = new IPEndPoint(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (udpClient == null) { return; }                  byte[] received = udpClient.EndReceive(result' ref endpoint);                  if (received.Length >= KMPCommon.MSG_HEADER_LENGTH + 4)                  {                      int index = 0;                        //Get the sender index                      int sender_index = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the message header data                      KMPCommon.ClientMessageID id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes(received' index);                      index += 4;                        int data_length = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the data                      byte[] data = null;                        if (data_length > 0 && data_length <= received.Length - index)                      {                          data = new byte[data_length];                          Array.Copy(received' index' data' 0' data.Length);                      }                        Client client = clients.ToList().Where(c => c.isReady && c.clientIndex == sender_index).FirstOrDefault();                      if (client != null)                      {                          if ((currentMillisecond - client.lastUDPACKTime) > UDP_ACK_THROTTLE)                          {                              //Acknowledge the client's message with a TCP message                              client.queueOutgoingMessage(KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE' null);                              client.lastUDPACKTime = currentMillisecond;                              client.updateReceiveTimestamp();                          }                            //Handle the message                          if (data == null)                          {                              handleMessage(client' id' data);                          }                          else                          {                              byte[] messageData = KMPCommon.Decompress(data);                              if (messageData != null) handleMessage(client' id' messageData);                              //Consider adding re-request here                          }                      }                  }                    udpClient.BeginReceive(asyncUDPReceive' null); //Begin receiving the next message              }              catch (ThreadAbortException)              {              }              catch (Exception e)              {                  passExceptionToMain(e);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: try              {                  if (settings.ipBinding == "0.0.0.0" && settings.hostIPv6 == true)                  {                      settings.ipBinding = "::";                  }                  IPEndPoint endpoint = new IPEndPoint(IPAddress.Parse(settings.ipBinding)' settings.port);                  if (udpClient == null) { return; }                  byte[] received = udpClient.EndReceive(result' ref endpoint);                  if (received.Length >= KMPCommon.MSG_HEADER_LENGTH + 4)                  {                      int index = 0;                        //Get the sender index                      int sender_index = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the message header data                      KMPCommon.ClientMessageID id = (KMPCommon.ClientMessageID)KMPCommon.intFromBytes(received' index);                      index += 4;                        int data_length = KMPCommon.intFromBytes(received' index);                      index += 4;                        //Get the data                      byte[] data = null;                        if (data_length > 0 && data_length <= received.Length - index)                      {                          data = new byte[data_length];                          Array.Copy(received' index' data' 0' data.Length);                      }                        Client client = clients.ToList().Where(c => c.isReady && c.clientIndex == sender_index).FirstOrDefault();                      if (client != null)                      {                          if ((currentMillisecond - client.lastUDPACKTime) > UDP_ACK_THROTTLE)                          {                              //Acknowledge the client's message with a TCP message                              client.queueOutgoingMessage(KMPCommon.ServerMessageID.UDP_ACKNOWLEDGE' null);                              client.lastUDPACKTime = currentMillisecond;                              client.updateReceiveTimestamp();                          }                            //Handle the message                          if (data == null)                          {                              handleMessage(client' id' data);                          }                          else                          {                              byte[] messageData = KMPCommon.Decompress(data);                              if (messageData != null) handleMessage(client' id' messageData);                              //Consider adding re-request here                          }                      }                  }                    udpClient.BeginReceive(asyncUDPReceive' null); //Begin receiving the next message              }              catch (ThreadAbortException)              {              }              catch (Exception e)              {                  passExceptionToMain(e);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,queueClientMessage,The following statement contains a magic number: if (message.id == KMPCommon.ClientMessageID.SYNC_TIME)              {                  byte[] rewriteMessage = new byte[16]; //Holds the client send time and the server receive time.                  message.data.CopyTo(rewriteMessage' 0);                  BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(rewriteMessage' 8);                  message.data = rewriteMessage;              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,queueClientMessage,The following statement contains a magic number: if (message.id == KMPCommon.ClientMessageID.SYNC_TIME)              {                  byte[] rewriteMessage = new byte[16]; //Holds the client send time and the server receive time.                  message.data.CopyTo(rewriteMessage' 0);                  BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(rewriteMessage' 8);                  message.data = rewriteMessage;              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleWarping,The following statement contains a magic number: double newsubspacetick = BitConverter.ToDouble(data' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleUDPProbe,The following statement contains a magic number: if (!cl.warping)              {                  Database.ExecuteReader("SELECT LastTick FROM kmpSubspace WHERE ID = @id;"'                      record => lastSubspaceTick = record.GetDouble(0)'                      "id"' cl.currentSubspaceID.ToString("D"));                    Database.ExecuteNonQuery("UPDATE kmpSubspace SET LastTick = @tick WHERE ID = @subspaceID AND LastTick < @tick;"'                      "tick"' incomingTick.ToString("0.0").Replace("'"' ".")'                      "subspaceID"' cl.currentSubspaceID.ToString("D"));                    if (lastSubspaceTick > 100d) sendHistoricalVesselUpdates(cl.currentSubspaceID' incomingTick' lastSubspaceTick);                  cl.averageWarpRate = BitConverter.ToSingle(data' 8);                  processClientAverageWarpRates(cl.currentSubspaceID);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (!(data.Length > 8 && (data.Length - 8) <= KMPCommon.MAX_CRAFT_FILE_BYTES)) { return; }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (!(data.Length > 8 && (data.Length - 8) <= KMPCommon.MAX_CRAFT_FILE_BYTES)) { return; }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: int craft_name_length = KMPCommon.intFromBytes(data' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (craft_name_length < data.Length - 8)              {                  //Read craft name                  String craft_name = encoder.GetString(data' 8' craft_name_length);                    //Read craft bytes                  byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                  Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                    lock (cl.sharedCraftLock)                  {                      cl.sharedCraftName = craft_name;                      cl.sharedCraftFile = craft_bytes;                      cl.sharedCraftType = craft_type;                  }                    //Send a message to players informing them that a craft has been shared                  StringBuilder sb = new StringBuilder();                  sb.Append(cl.username);                  sb.Append(" shared ");                  sb.Append(craft_name);                    switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }                    Log.Info(sb.ToString());                    sb.Append(" . Enter !getcraft ");                  sb.Append(cl.username);                  sb.Append(" to get it.");                  sendTextMessageToAll(sb.ToString());              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (craft_name_length < data.Length - 8)              {                  //Read craft name                  String craft_name = encoder.GetString(data' 8' craft_name_length);                    //Read craft bytes                  byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                  Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                    lock (cl.sharedCraftLock)                  {                      cl.sharedCraftName = craft_name;                      cl.sharedCraftFile = craft_bytes;                      cl.sharedCraftType = craft_type;                  }                    //Send a message to players informing them that a craft has been shared                  StringBuilder sb = new StringBuilder();                  sb.Append(cl.username);                  sb.Append(" shared ");                  sb.Append(craft_name);                    switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }                    Log.Info(sb.ToString());                    sb.Append(" . Enter !getcraft ");                  sb.Append(cl.username);                  sb.Append(" to get it.");                  sendTextMessageToAll(sb.ToString());              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (craft_name_length < data.Length - 8)              {                  //Read craft name                  String craft_name = encoder.GetString(data' 8' craft_name_length);                    //Read craft bytes                  byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                  Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                    lock (cl.sharedCraftLock)                  {                      cl.sharedCraftName = craft_name;                      cl.sharedCraftFile = craft_bytes;                      cl.sharedCraftType = craft_type;                  }                    //Send a message to players informing them that a craft has been shared                  StringBuilder sb = new StringBuilder();                  sb.Append(cl.username);                  sb.Append(" shared ");                  sb.Append(craft_name);                    switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }                    Log.Info(sb.ToString());                    sb.Append(" . Enter !getcraft ");                  sb.Append(cl.username);                  sb.Append(" to get it.");                  sendTextMessageToAll(sb.ToString());              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: if (craft_name_length < data.Length - 8)              {                  //Read craft name                  String craft_name = encoder.GetString(data' 8' craft_name_length);                    //Read craft bytes                  byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];                  Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);                    lock (cl.sharedCraftLock)                  {                      cl.sharedCraftName = craft_name;                      cl.sharedCraftFile = craft_bytes;                      cl.sharedCraftType = craft_type;                  }                    //Send a message to players informing them that a craft has been shared                  StringBuilder sb = new StringBuilder();                  sb.Append(cl.username);                  sb.Append(" shared ");                  sb.Append(craft_name);                    switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }                    Log.Info(sb.ToString());                    sb.Append(" . Enter !getcraft ");                  sb.Append(cl.username);                  sb.Append(" to get it.");                  sendTextMessageToAll(sb.ToString());              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: String username = encoder.GetString(data' 4' username_length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: Int32 guid_length = KMPCommon.intFromBytes(data' 4 + username_length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: int offset = 4 + username_length + 4;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: int offset = 4 + username_length + 4;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: offset = 4 + username_length + 4 + guid_length;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: offset = 4 + username_length + 4 + guid_length;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSubspace,The following statement contains a magic number: if (!cl.warping)              {                  if (sendTimeSync) sendSubspaceSync(cl);                  Log.Activity("Sending all vessels in current subspace for " + cl.username);                    double subTick = Convert.ToDouble(Database.ExecuteScalar("SELECT LastTick FROM kmpSubspace WHERE ID = @curSubspaceID;"'                      "curSubspaceID"' cl.currentSubspaceID.ToString("D")));                    Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND (v.Destroyed IS NULL OR v.Destroyed > @subTick)" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace AND s.LastTick <= @subTick" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick" +                      (excludeOwnActive ? " AND NOT v.Guid = @curVessel;" : ";")'                      record => {                          KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                          ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                          vessel_update.state = State.INACTIVE;                          vessel_update.isPrivate = record.GetBoolean(2);                          vessel_update.isMine = record.GetInt32(3) == cl.playerID;                          vessel_update.setProtoVessel(protoVessel);                          vessel_update.isSyncOnlyUpdate = true;                          vessel_update.distance = 0;                          byte[] update = ObjectToByteArray(vessel_update);                          sendVesselMessage(cl' update);                      }'                      "subTick"' subTick.ToString("0.0").Replace("'"' ".")'                      "curVessel"' cl.currentVessel); // NOTE: Extra parameters shouldn't break functionality' but it might.                                    if (sendTimeSync) sendScenarios(cl);                  sendSyncCompleteMessage(cl);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSubspace,The following statement contains a magic number: if (!cl.warping)              {                  if (sendTimeSync) sendSubspaceSync(cl);                  Log.Activity("Sending all vessels in current subspace for " + cl.username);                    double subTick = Convert.ToDouble(Database.ExecuteScalar("SELECT LastTick FROM kmpSubspace WHERE ID = @curSubspaceID;"'                      "curSubspaceID"' cl.currentSubspaceID.ToString("D")));                    Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND (v.Destroyed IS NULL OR v.Destroyed > @subTick)" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace AND s.LastTick <= @subTick" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick" +                      (excludeOwnActive ? " AND NOT v.Guid = @curVessel;" : ";")'                      record => {                          KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                          ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                          vessel_update.state = State.INACTIVE;                          vessel_update.isPrivate = record.GetBoolean(2);                          vessel_update.isMine = record.GetInt32(3) == cl.playerID;                          vessel_update.setProtoVessel(protoVessel);                          vessel_update.isSyncOnlyUpdate = true;                          vessel_update.distance = 0;                          byte[] update = ObjectToByteArray(vessel_update);                          sendVesselMessage(cl' update);                      }'                      "subTick"' subTick.ToString("0.0").Replace("'"' ".")'                      "curVessel"' cl.currentVessel); // NOTE: Extra parameters shouldn't break functionality' but it might.                                    if (sendTimeSync) sendScenarios(cl);                  sendSyncCompleteMessage(cl);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,buildMessageArray,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] data_bytes = new byte[version_bytes.Length + 24 + kmpModControl.Length + 1];
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(version_bytes.Length).CopyTo(data_bytes' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(data_bytes' 8);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(cl.clientIndex).CopyTo(data_bytes' 8 + version_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(settings.gameMode).CopyTo(data_bytes' 12 + version_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(countShipsInDatabase()).CopyTo(data_bytes' 16 + version_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(kmpModControl.Length).CopyTo(data_bytes' 20 + version_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: kmpModControl.CopyTo(data_bytes' 24 + version_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: try              {                  if (!secondaryUpdate && cl != null)                  {                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          OwnerID = cl.playerID;                          vessel_info = new String[5];                          vessel_info[0] = vessel_update.player;                          vessel_info[2] = "Using vessel: " + vessel_update.name;                          vessel_info[3] = "";                          vessel_info[4] = vessel_update.id.ToString();                            //Log.Info("Unpacked update from tick=" + vessel_update.tick + " @ client tick=" + cl.lastTick);                          ConfigNode node = vessel_update.getProtoVesselNode();                          if (node != null)                          {                              byte[] protoVesselBlob = ObjectToByteArray(node);                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                                if (result == null)                              {                                  Log.Info("New vessel {0} from {1} added to universe"' vessel_update.kmpID' cl.username);                                    Database.ExecuteNonQuery("INSERT INTO kmpVessel (Guid' GameGuid' OwnerID' Private' Active' ProtoVessel' Subspace)" +                                      " VALUES (@kmpID'@ves_up_ID' @playerID' @ves_up_isPrivate' @ves_up_state' @protoVessel' @curSubspaceID);"'                                      "protoVessel"' protoVesselBlob'                                      "kmpID"' vessel_update.kmpID'                                      "ves_up_ID"' vessel_update.id'                                      "playerID"' cl.playerID'                                      "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                      "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                      "curSubspaceID"' cl.currentSubspaceID.ToString("D"));                              }                              else                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel;"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                          else                          {                              //No protovessel                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                              if (result != null)                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" +                                          " WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                            //Store update                          storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick);                            //Update vessel destroyed status                          if (checkVesselDestruction(vessel_update' cl))                              vessel_update.situation = Situation.DESTROYED;                            //Repackage the update for distribution                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                          vessel_update.relTime = RelativeTime.PAST;                          vessel_update.name = vessel_update.name + " [Past]";                          past_data = ObjectToByteArray(vessel_update);                      }                  }                  else if (cl != null)                  {                      //Secondary update                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          try                          {                              bool active = false;                              Database.ExecuteReader("SELECT kmpVessel.OwnerID' kmpVessel.Active FROM kmpVessel LEFT JOIN kmpSubspace" +                                  " ON kmpSubspace.ID = kmpVessel.Subspace WHERE Guid = @kmpID" +                                  " ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  record => {                                      OwnerID = record.GetInt32(0);                                      active = record.GetBoolean(1);                                  }'                                  "kmpID"' vessel_update.kmpID);                                                           if (!active || OwnerID == cl.playerID) //Inactive vessel or this player was last in control of it                              {                                  if (vessel_update.getProtoVesselNode() != null)                                  {                                      //Store included protovessel' update subspace                                      byte[] protoVesselBlob = ObjectToByteArray(vessel_update.getProtoVesselNode());                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                  }                                  if (OwnerID == cl.playerID)                                  {                                      //Update Active status                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @kmpID;"'                                          "kmpID"' vessel_update.kmpID);                                        sendVesselStatusUpdateToAll(cl' vessel_update.kmpID);                                  }                                  //No one else is controlling it' so store the update                                  storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick' true);                                  //Update vessel destroyed status                                  if (checkVesselDestruction(vessel_update' cl))                                      vessel_update.situation = Situation.DESTROYED;                              }                          }                          catch { }                            //Repackage the update for distribution (secondary updates are not delivered to players in the future)                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                      }                  }              }              catch (Exception e)              {                  Log.Info("Vessel update error: {0} {1} "' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: try              {                  if (!secondaryUpdate && cl != null)                  {                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          OwnerID = cl.playerID;                          vessel_info = new String[5];                          vessel_info[0] = vessel_update.player;                          vessel_info[2] = "Using vessel: " + vessel_update.name;                          vessel_info[3] = "";                          vessel_info[4] = vessel_update.id.ToString();                            //Log.Info("Unpacked update from tick=" + vessel_update.tick + " @ client tick=" + cl.lastTick);                          ConfigNode node = vessel_update.getProtoVesselNode();                          if (node != null)                          {                              byte[] protoVesselBlob = ObjectToByteArray(node);                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                                if (result == null)                              {                                  Log.Info("New vessel {0} from {1} added to universe"' vessel_update.kmpID' cl.username);                                    Database.ExecuteNonQuery("INSERT INTO kmpVessel (Guid' GameGuid' OwnerID' Private' Active' ProtoVessel' Subspace)" +                                      " VALUES (@kmpID'@ves_up_ID' @playerID' @ves_up_isPrivate' @ves_up_state' @protoVessel' @curSubspaceID);"'                                      "protoVessel"' protoVesselBlob'                                      "kmpID"' vessel_update.kmpID'                                      "ves_up_ID"' vessel_update.id'                                      "playerID"' cl.playerID'                                      "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                      "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                      "curSubspaceID"' cl.currentSubspaceID.ToString("D"));                              }                              else                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel;"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                          else                          {                              //No protovessel                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                              if (result != null)                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" +                                          " WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                            //Store update                          storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick);                            //Update vessel destroyed status                          if (checkVesselDestruction(vessel_update' cl))                              vessel_update.situation = Situation.DESTROYED;                            //Repackage the update for distribution                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                          vessel_update.relTime = RelativeTime.PAST;                          vessel_update.name = vessel_update.name + " [Past]";                          past_data = ObjectToByteArray(vessel_update);                      }                  }                  else if (cl != null)                  {                      //Secondary update                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          try                          {                              bool active = false;                              Database.ExecuteReader("SELECT kmpVessel.OwnerID' kmpVessel.Active FROM kmpVessel LEFT JOIN kmpSubspace" +                                  " ON kmpSubspace.ID = kmpVessel.Subspace WHERE Guid = @kmpID" +                                  " ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  record => {                                      OwnerID = record.GetInt32(0);                                      active = record.GetBoolean(1);                                  }'                                  "kmpID"' vessel_update.kmpID);                                                           if (!active || OwnerID == cl.playerID) //Inactive vessel or this player was last in control of it                              {                                  if (vessel_update.getProtoVesselNode() != null)                                  {                                      //Store included protovessel' update subspace                                      byte[] protoVesselBlob = ObjectToByteArray(vessel_update.getProtoVesselNode());                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                  }                                  if (OwnerID == cl.playerID)                                  {                                      //Update Active status                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @kmpID;"'                                          "kmpID"' vessel_update.kmpID);                                        sendVesselStatusUpdateToAll(cl' vessel_update.kmpID);                                  }                                  //No one else is controlling it' so store the update                                  storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick' true);                                  //Update vessel destroyed status                                  if (checkVesselDestruction(vessel_update' cl))                                      vessel_update.situation = Situation.DESTROYED;                              }                          }                          catch { }                            //Repackage the update for distribution (secondary updates are not delivered to players in the future)                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                      }                  }              }              catch (Exception e)              {                  Log.Info("Vessel update error: {0} {1} "' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: try              {                  if (!secondaryUpdate && cl != null)                  {                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          OwnerID = cl.playerID;                          vessel_info = new String[5];                          vessel_info[0] = vessel_update.player;                          vessel_info[2] = "Using vessel: " + vessel_update.name;                          vessel_info[3] = "";                          vessel_info[4] = vessel_update.id.ToString();                            //Log.Info("Unpacked update from tick=" + vessel_update.tick + " @ client tick=" + cl.lastTick);                          ConfigNode node = vessel_update.getProtoVesselNode();                          if (node != null)                          {                              byte[] protoVesselBlob = ObjectToByteArray(node);                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                                if (result == null)                              {                                  Log.Info("New vessel {0} from {1} added to universe"' vessel_update.kmpID' cl.username);                                    Database.ExecuteNonQuery("INSERT INTO kmpVessel (Guid' GameGuid' OwnerID' Private' Active' ProtoVessel' Subspace)" +                                      " VALUES (@kmpID'@ves_up_ID' @playerID' @ves_up_isPrivate' @ves_up_state' @protoVessel' @curSubspaceID);"'                                      "protoVessel"' protoVesselBlob'                                      "kmpID"' vessel_update.kmpID'                                      "ves_up_ID"' vessel_update.id'                                      "playerID"' cl.playerID'                                      "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                      "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                      "curSubspaceID"' cl.currentSubspaceID.ToString("D"));                              }                              else                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel;"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                          else                          {                              //No protovessel                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                              if (result != null)                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" +                                          " WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                            //Store update                          storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick);                            //Update vessel destroyed status                          if (checkVesselDestruction(vessel_update' cl))                              vessel_update.situation = Situation.DESTROYED;                            //Repackage the update for distribution                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                          vessel_update.relTime = RelativeTime.PAST;                          vessel_update.name = vessel_update.name + " [Past]";                          past_data = ObjectToByteArray(vessel_update);                      }                  }                  else if (cl != null)                  {                      //Secondary update                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          try                          {                              bool active = false;                              Database.ExecuteReader("SELECT kmpVessel.OwnerID' kmpVessel.Active FROM kmpVessel LEFT JOIN kmpSubspace" +                                  " ON kmpSubspace.ID = kmpVessel.Subspace WHERE Guid = @kmpID" +                                  " ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  record => {                                      OwnerID = record.GetInt32(0);                                      active = record.GetBoolean(1);                                  }'                                  "kmpID"' vessel_update.kmpID);                                                           if (!active || OwnerID == cl.playerID) //Inactive vessel or this player was last in control of it                              {                                  if (vessel_update.getProtoVesselNode() != null)                                  {                                      //Store included protovessel' update subspace                                      byte[] protoVesselBlob = ObjectToByteArray(vessel_update.getProtoVesselNode());                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                  }                                  if (OwnerID == cl.playerID)                                  {                                      //Update Active status                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @kmpID;"'                                          "kmpID"' vessel_update.kmpID);                                        sendVesselStatusUpdateToAll(cl' vessel_update.kmpID);                                  }                                  //No one else is controlling it' so store the update                                  storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick' true);                                  //Update vessel destroyed status                                  if (checkVesselDestruction(vessel_update' cl))                                      vessel_update.situation = Situation.DESTROYED;                              }                          }                          catch { }                            //Repackage the update for distribution (secondary updates are not delivered to players in the future)                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                      }                  }              }              catch (Exception e)              {                  Log.Info("Vessel update error: {0} {1} "' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: try              {                  if (!secondaryUpdate && cl != null)                  {                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          OwnerID = cl.playerID;                          vessel_info = new String[5];                          vessel_info[0] = vessel_update.player;                          vessel_info[2] = "Using vessel: " + vessel_update.name;                          vessel_info[3] = "";                          vessel_info[4] = vessel_update.id.ToString();                            //Log.Info("Unpacked update from tick=" + vessel_update.tick + " @ client tick=" + cl.lastTick);                          ConfigNode node = vessel_update.getProtoVesselNode();                          if (node != null)                          {                              byte[] protoVesselBlob = ObjectToByteArray(node);                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                                if (result == null)                              {                                  Log.Info("New vessel {0} from {1} added to universe"' vessel_update.kmpID' cl.username);                                    Database.ExecuteNonQuery("INSERT INTO kmpVessel (Guid' GameGuid' OwnerID' Private' Active' ProtoVessel' Subspace)" +                                      " VALUES (@kmpID'@ves_up_ID' @playerID' @ves_up_isPrivate' @ves_up_state' @protoVessel' @curSubspaceID);"'                                      "protoVessel"' protoVesselBlob'                                      "kmpID"' vessel_update.kmpID'                                      "ves_up_ID"' vessel_update.id'                                      "playerID"' cl.playerID'                                      "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                      "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                      "curSubspaceID"' cl.currentSubspaceID.ToString("D"));                              }                              else                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel;"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                          else                          {                              //No protovessel                              object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" +                                  " WHERE Guid = @kmpID ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  "kmpID"' vessel_update.kmpID);                              if (result != null)                              {                                  int current_subspace = Convert.ToInt32(result);                                  if (current_subspace == cl.currentSubspaceID)                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" +                                          " WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "kmpID"' vessel_update.kmpID);                                  }                                  else                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" +                                          " Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "ves_up_isPrivate"' Convert.ToInt32(vessel_update.isPrivate)'                                          "ves_up_state"' Convert.ToInt32(vessel_update.state == State.ACTIVE)'                                          "playerID"' cl.playerID'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                        clearEmptySubspace(cl.currentSubspaceID);                                  }                              }                                if (cl != null && cl.currentVessel != vessel_update.kmpID && cl.currentVessel != Guid.Empty)                              {                                  try                                  {                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @curVessel"'                                          "curVessel"' cl.currentVessel);                                  }                                  catch { }                                    sendVesselStatusUpdateToAll(cl' cl.currentVessel);                              }                                cl.currentVessel = vessel_update.kmpID;                          }                            //Store update                          storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick);                            //Update vessel destroyed status                          if (checkVesselDestruction(vessel_update' cl))                              vessel_update.situation = Situation.DESTROYED;                            //Repackage the update for distribution                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                          vessel_update.relTime = RelativeTime.PAST;                          vessel_update.name = vessel_update.name + " [Past]";                          past_data = ObjectToByteArray(vessel_update);                      }                  }                  else if (cl != null)                  {                      //Secondary update                      var vessel_update = ByteArrayToObject<KMPVesselUpdate>(data);                        if (vessel_update != null)                      {                          try                          {                              bool active = false;                              Database.ExecuteReader("SELECT kmpVessel.OwnerID' kmpVessel.Active FROM kmpVessel LEFT JOIN kmpSubspace" +                                  " ON kmpSubspace.ID = kmpVessel.Subspace WHERE Guid = @kmpID" +                                  " ORDER BY kmpSubspace.LastTick DESC LIMIT 1;"'                                  record => {                                      OwnerID = record.GetInt32(0);                                      active = record.GetBoolean(1);                                  }'                                  "kmpID"' vessel_update.kmpID);                                                           if (!active || OwnerID == cl.playerID) //Inactive vessel or this player was last in control of it                              {                                  if (vessel_update.getProtoVesselNode() != null)                                  {                                      //Store included protovessel' update subspace                                      byte[] protoVesselBlob = ObjectToByteArray(vessel_update.getProtoVesselNode());                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"'                                          "protoVessel"' protoVesselBlob'                                          "curSubspace"' cl.currentSubspaceID.ToString("D")'                                          "kmpID"' vessel_update.kmpID);                                  }                                  if (OwnerID == cl.playerID)                                  {                                      //Update Active status                                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Active = 0 WHERE Guid = @kmpID;"'                                          "kmpID"' vessel_update.kmpID);                                        sendVesselStatusUpdateToAll(cl' vessel_update.kmpID);                                  }                                  //No one else is controlling it' so store the update                                  storeVesselUpdate(data' cl' vessel_update.kmpID' vessel_update.tick' true);                                  //Update vessel destroyed status                                  if (checkVesselDestruction(vessel_update' cl))                                      vessel_update.situation = Situation.DESTROYED;                              }                          }                          catch { }                            //Repackage the update for distribution (secondary updates are not delivered to players in the future)                          vessel_update.isMine = true;                          owned_data = ObjectToByteArray(vessel_update);                          vessel_update.isMine = false;                          data = ObjectToByteArray(vessel_update);                      }                  }              }              catch (Exception e)              {                  Log.Info("Vessel update error: {0} {1} "' e.Message' e.StackTrace);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE))              {                  if ((client.currentSubspaceID == cl.currentSubspaceID)                      && !client.warping && !cl.warping                      && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (OwnerID == client.playerID)                          client.queueOutgoingMessage(owned_message_bytes);                      else                          client.queueOutgoingMessage(message_bytes);                  }                  else if (!secondaryUpdate                          && !client.warping && !cl.warping                          && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)                          && firstSubspaceIsPresentOrFutureOfSecondSubspace(client.currentSubspaceID' cl.currentSubspaceID))                  {                      client.queueOutgoingMessage(past_message_bytes);                  }                  else if (!secondaryUpdate && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (vessel_info != null)                      {                          if (client.warping || cl.warping) vessel_info[1] = "Unknown due to warp";                          else                          {                              vessel_info[1] = "In the future";                              vessel_info[2] = vessel_info[2] + " [Future]";                              vessel_info[3] = cl.currentSubspaceID.ToString();                          }                          infoOnly_data = ObjectToByteArray(vessel_info);                      }                      byte[] infoOnly_message_bytes = buildMessageArray(KMPCommon.ServerMessageID.PLUGIN_UPDATE' infoOnly_data);                      client.queueOutgoingMessage(infoOnly_message_bytes);                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE))              {                  if ((client.currentSubspaceID == cl.currentSubspaceID)                      && !client.warping && !cl.warping                      && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (OwnerID == client.playerID)                          client.queueOutgoingMessage(owned_message_bytes);                      else                          client.queueOutgoingMessage(message_bytes);                  }                  else if (!secondaryUpdate                          && !client.warping && !cl.warping                          && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)                          && firstSubspaceIsPresentOrFutureOfSecondSubspace(client.currentSubspaceID' cl.currentSubspaceID))                  {                      client.queueOutgoingMessage(past_message_bytes);                  }                  else if (!secondaryUpdate && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (vessel_info != null)                      {                          if (client.warping || cl.warping) vessel_info[1] = "Unknown due to warp";                          else                          {                              vessel_info[1] = "In the future";                              vessel_info[2] = vessel_info[2] + " [Future]";                              vessel_info[3] = cl.currentSubspaceID.ToString();                          }                          infoOnly_data = ObjectToByteArray(vessel_info);                      }                      byte[] infoOnly_message_bytes = buildMessageArray(KMPCommon.ServerMessageID.PLUGIN_UPDATE' infoOnly_data);                      client.queueOutgoingMessage(infoOnly_message_bytes);                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE))              {                  if ((client.currentSubspaceID == cl.currentSubspaceID)                      && !client.warping && !cl.warping                      && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (OwnerID == client.playerID)                          client.queueOutgoingMessage(owned_message_bytes);                      else                          client.queueOutgoingMessage(message_bytes);                  }                  else if (!secondaryUpdate                          && !client.warping && !cl.warping                          && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)                          && firstSubspaceIsPresentOrFutureOfSecondSubspace(client.currentSubspaceID' cl.currentSubspaceID))                  {                      client.queueOutgoingMessage(past_message_bytes);                  }                  else if (!secondaryUpdate && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d))                  {                      if (vessel_info != null)                      {                          if (client.warping || cl.warping) vessel_info[1] = "Unknown due to warp";                          else                          {                              vessel_info[1] = "In the future";                              vessel_info[2] = vessel_info[2] + " [Future]";                              vessel_info[3] = cl.currentSubspaceID.ToString();                          }                          infoOnly_data = ObjectToByteArray(vessel_info);                      }                      byte[] infoOnly_message_bytes = buildMessageArray(KMPCommon.ServerMessageID.PLUGIN_UPDATE' infoOnly_data);                      client.queueOutgoingMessage(infoOnly_message_bytes);                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: byte[] bytes = new byte[8 + name_bytes.Length + data.Length];
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: name_bytes.CopyTo(bytes' 8);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: data.CopyTo(bytes' 8 + name_bytes.Length);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: if (subSpaceMasterTick.ContainsKey(cl.currentSubspaceID))              {                  double tickOffset = (double)(subspaceTime - subSpaceMasterTime[cl.currentSubspaceID]) / 10000000; //The magic number that converts 100ns to seconds.                  subspaceTick = subSpaceMasterTick[cl.currentSubspaceID] + tickOffset;                  subspaceSpeed = subSpaceMasterSpeed[cl.currentSubspaceID];                  Log.Debug("Found entry: " + tickOffset + " offset for subspace " + cl.currentSubspaceID);              }              else              {                  subSpaceMasterTick.Add(cl.currentSubspaceID' subspaceTick);                  subSpaceMasterTime.Add(cl.currentSubspaceID' subspaceTime);                  subSpaceMasterSpeed.Add(cl.currentSubspaceID' 1f);                  Log.Debug("Added entry for subspace " + cl.currentSubspaceID);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: byte[] timesyncdata = new byte[20];
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: BitConverter.GetBytes(subspaceTime).CopyTo(timesyncdata' 8);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: BitConverter.GetBytes(subspaceSpeed).CopyTo(timesyncdata' 16);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: if (subSpaceLastRateCheck.ContainsKey(subspaceID))              {                  if (currentMillisecond < subSpaceLastRateCheck[subspaceID] + 30000) return; //Only check once every 30 seconds per subspace.              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: float subspaceTargetRate = (subspaceAverageWarpRate + subspaceMinWarpRate) / 2;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: if (subspaceDiffRate > 0.03f)              { //Allow 3% tolerance                  Log.Debug("Subspace " + subspaceID + " relocked to " + subspaceTargetRate + "x speed.");                  long currenttime = DateTime.UtcNow.Ticks;                  double tickOffset = (double)(currenttime - subSpaceMasterTime[subspaceID]) / 10000000; //The magic number that converts 100ns to seconds.                  subSpaceMasterTick[subspaceID] = subSpaceMasterTick[subspaceID] + (tickOffset * subSpaceMasterSpeed[subspaceID]);                  subSpaceMasterTime[subspaceID] = currenttime;                  subSpaceMasterSpeed[subspaceID] = subspaceTargetRate;                  sendSyncMessageToSubspace(subspaceID);              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: KMPCommon.intToBytes(settings.screenshotInterval).CopyTo(bytes' 4);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: KMPCommon.intToBytes(settings.screenshotSettings.maxHeight).CopyTo(bytes' 8);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: BitConverter.GetBytes(settings.safetyBubbleRadius).CopyTo(bytes' 12);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[20] = inactiveShipsPerClient;
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[21] = Convert.ToByte(settings.cheatsEnabled);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[22] = Convert.ToByte(settings.allowPiracy);
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The following statement contains a magic number: try              {                  version = Convert.ToInt32(Database.ExecuteScalar("SELECT version FROM kmpInfo"));              }              catch { Log.Info("Missing (or bad) universe database file."); }              finally              {                  if (version > 0 && version < UNIVERSE_VERSION)                  {                      Log.Info("Database version {0}' current version is {1}."' version' UNIVERSE_VERSION);                      if (version == 1)                      {                          //Upgrade old universe to version 2                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(                          "CREATE INDEX IF NOT EXISTS kmpVesselIdxGuid on kmpVessel(Guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                              "CREATE INDEX IF NOT EXISTS kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);");                          version = 2;                      }                        if (version == 2)                      {                          //Upgrade old universe to version 3                          Log.Info("Upgrading universe database...");                            Database.ExecuteReader("SELECT Guid FROM kmpPlayer;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                              Database.ExecuteReader("SELECT Guid' GameGuid FROM kmpVessel;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  string old_guid2 = record.GetString(1);                                  Guid guid = Guid.Empty;                                  Guid guid2 = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  try                                  {                                      guid2 = new Guid(old_guid2);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid2.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVessel SET Guid = @guid' GameGuid = @guid2 WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "guid2"' guid2'                                      "old_guid"' old_guid);                              });                          Database.ExecuteReader("SELECT Guid FROM kmpVesselUpdate;"'                              record =>                              {                                  string old_guid = record.GetString(0);                                  Guid guid = Guid.Empty;                                  try                                  {                                      guid = new Guid(old_guid);                                  }                                  catch                                  {                                      //Already converted?                                      try                                      {                                          guid = new Guid(System.Text.Encoding.ASCII.GetBytes(old_guid.Substring(0' 16)));                                      }                                      catch                                      {                                          guid = Guid.Empty;                                      }                                  }                                  Database.ExecuteNonQuery("UPDATE kmpVesselUpdate SET Guid = @guid WHERE Guid = @old_guid;"'                                      "guid"' guid'                                      "old_guid"' old_guid);                              });                          version = 3;                      }                        if (version == 3)                      {                          //Upgrade old universe to version 4                          Log.Info("Upgrading universe database...");                          Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" +                              "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"));                          version = 4;                      }                        //NOTE: MySQL supported only as of UNIVERSE_VERSION 4+                        if (version == 4)                      {                          //Upgrade old universe to version 5                          Log.Info("Upgrading universe database...");                          if (settings.useMySQL)                          {                              //v5 updates target MySQL databases only                              Database.ExecuteNonQuery("ALTER TABLE kmpInfo ENGINE=MyISAM;" +                                  "ALTER TABLE kmpSubspace ENGINE=MyISAM;" +                                  "ALTER TABLE kmpPlayer ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVessel ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdate ENGINE=MyISAM;" +                                  "ALTER TABLE kmpVesselUpdateHistory ENGINE=MyISAM;" +                                  "ALTER TABLE kmpScenarios ENGINE=MyISAM;");                          }                      }                        Log.Info("Upgrading universe database to current version...");                      if (settings.useMySQL)                      {                          //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway                                                    Database.ExecuteNonQuery("ALTER TABLE kmpVessel MODIFY Destroyed DOUBLE");                      }                      //Ensure old vessels get cleaned out                      Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = NULL WHERE Destroyed != 1");                      CleanDatabase();                        Database.ExecuteNonQuery("UPDATE kmpInfo SET Version = @uni_version;"'                          "uni_version"' UNIVERSE_VERSION);                        Log.Info("Loading universe...");                  }                  else if (version != UNIVERSE_VERSION)                  {                      Log.Info("Creating new universe...");                      Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpInfo (Version INTEGER){3};" +                          "CREATE TABLE kmpSubspace (ID INTEGER PRIMARY KEY {0}' LastTick DOUBLE){3};" +                          "CREATE TABLE kmpPlayer (ID INTEGER PRIMARY KEY {0}' Name NVARCHAR(100)' Guid CHAR({1})){3};" +                          "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" +                          "CREATE TABLE kmpVesselUpdate (ID INTEGER PRIMARY KEY {0}' Guid CHAR({1})' Subspace INTEGER' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpVesselUpdateHistory (Guid CHAR({1})' Subspace INTEGER' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" +                          "CREATE INDEX kmpVesselIdxGuid on kmpVessel(Guid);" +                          "CREATE INDEX kmpVesselUpdateIdxGuid on kmpVesselUpdate(guid);" +                          "CREATE INDEX kmpVesselUpdateHistoryIdxTick on kmpVesselUpdateHistory(Tick);" +                          "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"'                                          settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT"'                                          settings.useMySQL ? 36 : 16'                                          settings.useMySQL ? "LONGBLOB" : "BLOB"'                                          settings.useMySQL ? " ENGINE=MyISAM" : ""                      ));                        Database.ExecuteNonQuery("INSERT INTO kmpInfo (Version) VALUES (@uni_version);" +                          "INSERT INTO kmpSubspace (LastTick) VALUES (100);"'                          "uni_version"' UNIVERSE_VERSION);                  }                  else                  {                      Log.Info("Loading universe...");                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: foreach (var kvp in ServerSettings.GetCurrentValues(settings))              {                  var tabs = (kvp.Key.Length > 11) ? "\t" : "\t\t";                  if (kvp.Key == "gameMode")                  {                      Log.Info("");                      Log.Info("Game Mode\t\t: {0}"' kvp.Value == "0" ? "Sandbox" : "Career");                  }                  else Log.Info("{0}{2}: {1}"' kvp.Key' kvp.Value' tabs);              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: while (running)              {  				String input = getCommandInput();                    var parts = input.Split(' ');                    switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }              }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: try  			{  				if (File.Exists(FileName))  				{  					Store.bans.Clear();    					foreach (var l in File.ReadAllLines(FileName))  					{  						var Now = DateTime.Now;    						try  						{  							if (l.StartsWith("#")) { continue; }  							var parts = l.Split('\t');  							var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};    							if (newBan.Expires > Now)  							{  								Store.bans.Add(newBan);  							}  						}  						catch  						{  							//Bad ban line. Don't care?  						}  					}  				}  			}  			catch { }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: try  			{  				if (File.Exists(FileName))  				{  					Store.bans.Clear();    					foreach (var l in File.ReadAllLines(FileName))  					{  						var Now = DateTime.Now;    						try  						{  							if (l.StartsWith("#")) { continue; }  							var parts = l.Split('\t');  							var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};    							if (newBan.Expires > Now)  							{  								Store.bans.Add(newBan);  							}  						}  						catch  						{  							//Bad ban line. Don't care?  						}  					}  				}  			}  			catch { }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: try  			{  				if (File.Exists(FileName))  				{  					Store.bans.Clear();    					foreach (var l in File.ReadAllLines(FileName))  					{  						var Now = DateTime.Now;    						try  						{  							if (l.StartsWith("#")) { continue; }  							var parts = l.Split('\t');  							var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};    							if (newBan.Expires > Now)  							{  								Store.bans.Add(newBan);  							}  						}  						catch  						{  							//Bad ban line. Don't care?  						}  					}  				}  			}  			catch { }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: try  			{  				if (File.Exists(FileName))  				{  					Store.bans.Clear();    					foreach (var l in File.ReadAllLines(FileName))  					{  						var Now = DateTime.Now;    						try  						{  							if (l.StartsWith("#")) { continue; }  							var parts = l.Split('\t');  							var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};    							if (newBan.Expires > Now)  							{  								Store.bans.Add(newBan);  							}  						}  						catch  						{  							//Bad ban line. Don't care?  						}  					}  				}  			}  			catch { }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: try  			{  				if (File.Exists(FileName))  				{  					Store.bans.Clear();    					foreach (var l in File.ReadAllLines(FileName))  					{  						var Now = DateTime.Now;    						try  						{  							if (l.StartsWith("#")) { continue; }  							var parts = l.Split('\t');  							var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};    							if (newBan.Expires > Now)  							{  								Store.bans.Add(newBan);  							}  						}  						catch  						{  							//Bad ban line. Don't care?  						}  					}  				}  			}  			catch { }
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The following statement contains a magic number: try  			{                  if (!File.Exists(FileName)) { writeToFile(Store);  return; }  				using (StreamReader configReader = new StreamReader(FileName))  				{  					string CurrentLine;  					string[] LineParts;    					while (configReader.EndOfStream == false)  					{  						CurrentLine = configReader.ReadLine();    						if (CurrentLine.StartsWith("#") || String.IsNullOrEmpty(CurrentLine)) { continue; }    						LineParts = CurrentLine.Split(new char[] { '=' }' 2);  						if (LineParts.Length < 2) { continue; }    						LineParts[0] = LineParts[0].ToLowerInvariant();    						ConfigStore.Add(LineParts[0].Trim()' LineParts[1].Trim());  					}    					configReader.Close();  				}  			}  			catch (Exception)  			{    			}
Magic Number,KMPServer,ServerSettings,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The following statement contains a magic number: try  			{                  if (!File.Exists(FileName)) { writeToFile(Store);  return; }  				using (StreamReader configReader = new StreamReader(FileName))  				{  					string CurrentLine;  					string[] LineParts;    					while (configReader.EndOfStream == false)  					{  						CurrentLine = configReader.ReadLine();    						if (CurrentLine.StartsWith("#") || String.IsNullOrEmpty(CurrentLine)) { continue; }    						LineParts = CurrentLine.Split(new char[] { '=' }' 2);  						if (LineParts.Length < 2) { continue; }    						LineParts[0] = LineParts[0].ToLowerInvariant();    						ConfigStore.Add(LineParts[0].Trim()' LineParts[1].Trim());  					}    					configReader.Close();  				}  			}  			catch (Exception)  			{    			}
Duplicate Code,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The method contains a code clone-set at the following line numbers (starting from the method definition): ((31' 50)' (102' 121))
Missing Default,KMPServer,Client,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,updateActivityLevel,The following switch statement is missing a default case: switch (level)  				{  					case ActivityLevel.IN_GAME:  						lastInGameActivityTime = parent.currentMillisecond;  						currentVessel = Guid.Empty;  						break;    					case ActivityLevel.IN_FLIGHT:  						lastInFlightActivityTime = parent.currentMillisecond;  						lastInGameActivityTime = parent.currentMillisecond;  						break;  				}
Missing Default,KMPServer,PublicServerInfo,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\PublicServerInfo.cs,PublicServerInfo,The following switch statement is missing a default case: switch (settings.gameMode)              {                  case 0:                      GameMode = "Sandbox";                      break;                  case 1:                      GameMode = "Career";                      break;              }
Missing Default,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clientActivityLevelChanged,The following switch statement is missing a default case: switch (cl.activityLevel)              {                  case Client.ActivityLevel.IN_GAME:                      HandleActivityUpdateInGame(cl);                      break;                    case Client.ActivityLevel.IN_FLIGHT:                      HandleActivityUpdateInFlight(cl);                      break;              }
Missing Default,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The following switch statement is missing a default case: switch (id)                      {                          case KMPCommon.ClientMessageID.HANDSHAKE:                              HandleHandshake(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.PRIMARY_PLUGIN_UPDATE:                          case KMPCommon.ClientMessageID.SECONDARY_PLUGIN_UPDATE:                              HandlePluginUpdate(cl' id' data);                              break;                            case KMPCommon.ClientMessageID.SCENARIO_UPDATE:                              HandleScenarioUpdate(cl' data);                              break;                            case KMPCommon.ClientMessageID.TEXT_MESSAGE:                              handleClientTextMessage(cl' encoder.GetString(data' 0' data.Length));                              break;                            case KMPCommon.ClientMessageID.SCREEN_WATCH_PLAYER:                              HandleScreenWatchPlayer(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.SCREENSHOT_SHARE:                              HandleScreenshotShare(cl' data);                              break;                            case KMPCommon.ClientMessageID.CONNECTION_END:                              HandleConnectionEnd(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.SHARE_CRAFT_FILE:                              HandleShareCraftFile(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT:                              HandleActivityUpdateInFlight(cl);                              break;                            case KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME:                              HandleActivityUpdateInGame(cl);                              break;                            case KMPCommon.ClientMessageID.PING:                              cl.queueOutgoingMessage(KMPCommon.ServerMessageID.PING_REPLY' data);                              break;                            case KMPCommon.ClientMessageID.UDP_PROBE:                              HandleUDPProbe(cl' data);                              break;                            case KMPCommon.ClientMessageID.WARPING:                              HandleWarping(cl' data);                              break;                            case KMPCommon.ClientMessageID.SSYNC:                              HandleSSync(cl' data);                              break;                            case KMPCommon.ClientMessageID.SYNC_TIME:                              HandleTimeSync(cl' data);                              break;                      }
Missing Default,KMPServer,Server,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following switch statement is missing a default case: switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }
Missing Default,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }
Missing Default,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }
Missing Default,KMPServer,ServerMain,C:\repos\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }
