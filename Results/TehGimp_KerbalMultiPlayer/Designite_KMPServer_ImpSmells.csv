Implementation smell,Namespace,Class,File,Method,Description
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The method has 117 lines of code.
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The method has 108 lines of code.
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The method has 120 lines of code.
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The method has 109 lines of code.
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has 234 lines of code.
Long Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The method has 199 lines of code.
Long Method,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has 272 lines of code.
Complex Method,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,Cyclomatic complexity of the method is 8
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,Cyclomatic complexity of the method is 15
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,Cyclomatic complexity of the method is 13
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,Cyclomatic complexity of the method is 11
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processCommand,Cyclomatic complexity of the method is 24
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,Cyclomatic complexity of the method is 9
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,Cyclomatic complexity of the method is 13
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,optimizeIncomingMessageQueue,Cyclomatic complexity of the method is 8
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,Cyclomatic complexity of the method is 9
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,Cyclomatic complexity of the method is 18
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,Cyclomatic complexity of the method is 11
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,Cyclomatic complexity of the method is 14
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,Cyclomatic complexity of the method is 24
Complex Method,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,Cyclomatic complexity of the method is 10
Complex Method,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,Cyclomatic complexity of the method is 34
Complex Method,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,getCommandInput,Cyclomatic complexity of the method is 15
Long Parameter List,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,storeVesselUpdate,The method has 5 parameters. Parameters: updateBlob' cl' kmpID' tick' isSecondary
Long Identifier,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The length of the parameter joined_message_data_decompressed is 32.
Long Identifier,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,,The length of the parameter CLIENT_HANDSHAKE_TIMEOUT_DELAY is 30.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForSQLite,The length of the statement  "            return new DatabaseHelper("Data Source=" + filePath + "; Pooling=true; Max Pool Size=100;"' DatabaseAttributes.SQLite | DatabaseAttributes.KeepRef); " is 148.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForMySQL,The length of the statement  "            // Not entirely sure of the right set of Attributes to apply to MySQL' but this should ensure that connections are being released to the pool " is 141.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateForMySQL,The length of the statement  "            return new DatabaseHelper((connectionString + additionalParams)' DatabaseAttributes.MySQL | DatabaseAttributes.MyISAM | DatabaseAttributes.KeepRef); " is 148.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The length of the statement  "                if (parameters.Length % 2 != 0) throw new IOException("Cannot create command with parameters. Argument count isn't a factor of 2"); " is 131.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The length of the statement  "                    if (parameters[i] as String == null) throw new IOException(String.Format("Cannot convert {0} to Parameter key in CreateCommand"' parameters[i] ?? "<null>")); " is 157.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,ToString,The length of the statement  "            return String.Format("DatabaseHelper connected to {0}. Total Queries: {1}' Total Database Opens: {2}' Total Database Closes: {7}' Time Spent On Query: {3}' Time Spent On State: {4}' Avg. Query: {5}' Avg. State Change: {6}"' " is 223.
Long Statement,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,ToString,The length of the statement  "                 new TimeSpan(TimeSpentOnQuery.Ticks / TotalServicedQueries == 0 ? 1 : TotalServicedQueries)' new TimeSpan(TimeSpentChangingState.Ticks / TotalDatabaseOpens == 0 ? 1 : TotalDatabaseOpens)' " is 187.
Long Statement,KMPServer,Log,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,WriteLog,The length of the statement  "                string Line = string.Format("[{0}] [{1}] : {2}"' DateTime.Now.ToString("HH:mm:ss")' level.ToString()' string.Format(format' args)); " is 131.
Long Statement,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The length of the statement  "					throw new System.IO.IOException("You somehow managed to read more bytes then we asked for. Good for you. Open this up on the bugtracker now."); " is 143.
Long Statement,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The length of the statement  "					client.GetStream().BeginRead(currentMessage' currentMessage.Length - currentBytesToReceive' currentBytesToReceive' new AsyncCallback(asyncReceive)' state); " is 155.
Long Statement,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The length of the statement  "					if ((queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isServerSendingData) " is 137.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("StandardCtrlSrf"); partList.Add("CanardController"); partList.Add("noseCone"); partList.Add("AdvancedCanard"); partList.Add("airplaneTail"); " is 154.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("deltaWing"); partList.Add("noseConeAdapter"); partList.Add("rocketNoseCone"); partList.Add("smallCtrlSrf"); partList.Add("standardNoseCone"); " is 155.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sweptWing"); partList.Add("tailfin"); partList.Add("wingConnector"); partList.Add("winglet"); partList.Add("R8winglet"); " is 134.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("winglet3"); partList.Add("Mark1Cockpit"); partList.Add("Mark2Cockpit"); partList.Add("Mark1-2Pod"); partList.Add("advSasModule"); " is 143.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("asasmodule1-2"); partList.Add("avionicsNoseCone"); partList.Add("crewCabin"); partList.Add("cupola"); partList.Add("landerCabinSmall"); " is 149.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("mark3Cockpit"); partList.Add("mk1pod"); partList.Add("mk2LanderCabin"); partList.Add("probeCoreCube"); partList.Add("probeCoreHex"); " is 146.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("probeCoreOcto"); partList.Add("probeCoreOcto2"); partList.Add("probeCoreSphere"); partList.Add("probeStackLarge"); partList.Add("probeStackSmall"); " is 161.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sasModule"); partList.Add("seatExternalCmd"); partList.Add("rtg"); partList.Add("batteryBank"); partList.Add("batteryBankLarge"); " is 143.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("batteryBankMini"); partList.Add("batteryPack"); partList.Add("ksp.r.largeBatteryPack"); partList.Add("largeSolarPanel"); partList.Add("solarPanels1"); " is 164.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("solarPanels2"); partList.Add("solarPanels3"); partList.Add("solarPanels4"); partList.Add("solarPanels5"); partList.Add("JetEngine"); " is 146.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("engineLargeSkipper"); partList.Add("ionEngine"); partList.Add("liquidEngine"); partList.Add("liquidEngine1-2"); partList.Add("liquidEngine2"); " is 156.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("liquidEngine2-2"); partList.Add("liquidEngine3"); partList.Add("liquidEngineMini"); partList.Add("microEngine"); partList.Add("nuclearEngine"); " is 157.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("radialEngineMini"); partList.Add("radialLiquidEngine1-2"); partList.Add("sepMotor1"); partList.Add("smallRadialEngine"); partList.Add("solidBooster"); " is 164.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("solidBooster1-1"); partList.Add("toroidalAerospike"); partList.Add("turboFanEngine"); partList.Add("MK1Fuselage"); partList.Add("Mk1FuselageStructural"); " is 167.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("RCSFuelTank"); partList.Add("RCSTank1-2"); partList.Add("rcsTankMini"); partList.Add("rcsTankRadialLong"); partList.Add("fuelTank"); " is 146.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("fuelTank1-2"); partList.Add("fuelTank2-2"); partList.Add("fuelTank3-2"); partList.Add("fuelTank4-2"); partList.Add("fuelTankSmall"); " is 146.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("fuelTankSmallFlat"); partList.Add("fuelTank.long"); partList.Add("miniFuelTank"); partList.Add("mk2Fuselage"); partList.Add("mk2SpacePlaneAdapter"); " is 162.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("mk3Fuselage"); partList.Add("mk3spacePlaneAdapter"); partList.Add("radialRCSTank"); partList.Add("toroidalFuelTank"); partList.Add("xenonTank"); " is 158.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("xenonTankRadial"); partList.Add("adapterLargeSmallBi"); partList.Add("adapterLargeSmallQuad"); partList.Add("adapterLargeSmallTri"); partList.Add("adapterSmallMiniShort"); " is 185.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("adapterSmallMiniTall"); partList.Add("nacelleBody"); partList.Add("radialEngineBody"); partList.Add("smallHardpoint"); partList.Add("stationHub"); " is 160.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("structuralIBeam1"); partList.Add("structuralIBeam2"); partList.Add("structuralIBeam3"); partList.Add("structuralMiniNode"); partList.Add("structuralPanel1"); " is 171.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("structuralPanel2"); partList.Add("structuralPylon"); partList.Add("structuralWing"); partList.Add("strutConnector"); partList.Add("strutCube"); " is 157.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("strutOcto"); partList.Add("trussAdapter"); partList.Add("trussPiece1x"); partList.Add("trussPiece3x"); partList.Add("CircularIntake"); " is 148.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("landingLeg1"); partList.Add("landingLeg1-2"); partList.Add("RCSBlock"); partList.Add("stackDecoupler"); partList.Add("airScoop"); " is 143.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("commDish"); partList.Add("decoupler1-2"); partList.Add("dockingPort1"); partList.Add("dockingPort2"); partList.Add("dockingPort3"); " is 145.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("dockingPortLarge"); partList.Add("dockingPortLateral"); partList.Add("fuelLine"); partList.Add("ladder1"); partList.Add("largeAdapter"); " is 150.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("largeAdapter2"); partList.Add("launchClamp1"); partList.Add("linearRcs"); partList.Add("longAntenna"); partList.Add("miniLandingLeg"); " is 148.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("parachuteDrogue"); partList.Add("parachuteLarge"); partList.Add("parachuteRadial"); partList.Add("parachuteSingle"); partList.Add("radialDecoupler"); " is 163.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("radialDecoupler1-2"); partList.Add("radialDecoupler2"); partList.Add("ramAirIntake"); partList.Add("roverBody"); partList.Add("sensorAccelerometer"); " is 163.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("sensorBarometer"); partList.Add("sensorGravimeter"); partList.Add("sensorThermometer"); partList.Add("spotLight1"); partList.Add("spotLight2"); " is 157.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("stackBiCoupler"); partList.Add("stackDecouplerMini"); partList.Add("stackPoint1"); partList.Add("stackQuadCoupler"); partList.Add("stackSeparator"); " is 162.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("stackSeparatorBig"); partList.Add("stackSeparatorMini"); partList.Add("stackTriCoupler"); partList.Add("telescopicLadder"); partList.Add("telescopicLadderBay"); " is 174.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("SmallGearBay"); partList.Add("roverWheel1"); partList.Add("roverWheel2"); partList.Add("roverWheel3"); partList.Add("wheelMed"); partList.Add("flag"); " is 164.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("GrapplingDevice"); partList.Add("LaunchEscapeSystem"); partList.Add("MassiveBooster"); partList.Add("PotatoRoid"); partList.Add("Size2LFB"); " is 154.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,generatePartsList,The length of the statement  "            partList.Add("Size3AdvancedEngine"); partList.Add("size3Decoupler"); partList.Add("Size3EngineCluster"); partList.Add("Size3LargeTank"); partList.Add("Size3MediumTank"); " is 169.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                        if (!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar")) " is 243.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                    if (!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar") && trimmedModFile.ToLowerInvariant().EndsWith(".dll")) " is 297.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The length of the statement  "                        result += modFile.Remove(0' MODS_PATH.Length + 1).Replace("\\"' "/") + "\n"; //Remove the starting parth and add it to the list. " is 128.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                Log.Info("To generate an automatic KMPModControl.txt file' Copy mods from the GameData directory to the '" + MODS_PATH + "' folder."); " is 134.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#The client will be required to have the files found in required-files' and they must match the SHA hash if specified (this is where part mod files and play-altering files should go' like KWRocketry or Ferram Aerospace Research" + " is 231.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#The client may have the files found in optional-files' but IF they do then they must match the SHA hash (this is where mods that do not affect other players should go' like EditorExtensions or part catalogue managers\n" + " is 223.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#resource-whitelist bans ALL resources except those specified in the resource-whitelist section OR in the SHA sections. A file listed in resource-whitelist will NOT be checked for SHA hash. This is useful if you want a mod that modifies files in its own directory as you play.\n" + " is 282.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#To generate the SHA256 of a file you can use a utility such as this one: http://hash.online-convert.com/sha256-generator (use the 'hex' string)' or use sha256sum on linux.\n" + " is 178.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#If there is no SHA256 hash listed here (i.e. blank after the equals sign or no equals sign)' SHA matching will not be enforced.\n" + " is 134.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#You may not specify multiple SHAs for the same file. Do not put spaces around equals sign. Follow the example carefully.\n" + " is 127.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                filestring += "#Alternatively' change 'blacklist' to 'whitelist' and clients will only be allowed to use dll's listed here or in the 'required-files' and 'optional-files' sections.\n"; " is 184.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                filestring += "#Alternatively' change 'whitelist' to 'blacklist' and clients will not be allowed to use dll's listed here.\n"; " is 126.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "            filestring += "#You can ban specific files in resource-blacklist mode' or only allow specific files in resource-whitelist mode.\n" + " is 132.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#To add a mod part' add the name from the part's .cfg file. The name is the name from the PART{} section' where underscores are replaced with periods.\n" + " is 156.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#Example: mumech.MJ2.Pod (NOTE: In the part.cfg this MechJeb2 pod is named mumech_MJ2_Pod. The _ have been replaced with .)\n" + " is 129.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                "#You can use this application to generate partlists from a KSP installation if you want to add mod parts: http://forum.kerbalspaceprogram.com/threads/57284 \n" + " is 162.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                    if (!file.ToLowerInvariant().StartsWith("squad") && !file.ToLowerInvariant().StartsWith("nasamission") && file.Substring(file.Length - 4).Equals(".cfg"' StringComparison.InvariantCultureIgnoreCase)) // check if config file (only place where parts are located) " is 259.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                                else if (word.Equals("name"' StringComparison.InvariantCultureIgnoreCase) && str_nextword(sr).Equals("="' StringComparison.InvariantCultureIgnoreCase) && newPart) " is 162.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The length of the statement  "                                    string[] temp = line.Split(toperiod' StringSplitOptions.RemoveEmptyEntries); // convert spaces and underscores to periods " is 121.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The length of the statement  "            String filename = string.Format("{0}/{1} {2}.png"' SCREENSHOT_DIR' KMPCommon.filteredFileName(player)' System.DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")); " is 156.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                        //Windows defaults to v6 only' but this option does not exist in mono so it has to be in a try/catch block along with the casted int. " is 133.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                    autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000); " is 153.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The length of the statement  "                    if (currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty)) " is 130.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The length of the statement  "                    Database.ExecuteNonQuery("UPDATE kmpPlayer SET Guid = @newGuid WHERE Guid = @guid;"' "newGuid"' Guid.NewGuid()' "guid"' guid); " is 126.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The length of the statement  "                    Log.Info("Player '{0}' and all known aliases banned from server for {1} days. Edit KMPBans.txt or /unregister to allow this user to reconnect."' ban_name' days); " is 161.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60); " is 138.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                        results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2))); " is 126.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The length of the statement  "                Log.Info("Debris older than {0} minutes cleared from universe database' {1} vessels affected."' minsToKeep' clearedCount); " is 122.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,The length of the statement  "                    foreach (var client in clients.ToList().Where(c => !c.isValid || markedClients.Exists(mc => mc.clientIndex == c.clientIndex))) " is 126.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleConnections,The length of the statement  "                        disconnectClient(client' (String.IsNullOrEmpty(client.disconnectMessage)) ? "Connection lost" : client.disconnectMessage); " is 122.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,optimizeIncomingMessageQueue,The length of the statement  "                if (message.id == KMPCommon.ClientMessageID.PRIMARY_PLUGIN_UPDATE || message.id == KMPCommon.ClientMessageID.SECONDARY_PLUGIN_UPDATE) " is 133.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,optimizeIncomingMessageQueue,The length of the statement  "            //Log.Debug("Optimize took " + (stopwatch.ElapsedMilliseconds - optimizeTime) + "ms' old length: " + clientMessageQueue.Count + "' new length: " + newQueue.Count); " is 163.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,getClientByName,The length of the statement  "            return clients.Where(c => c.isReady && c.username.Equals(name' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault(); " is 126.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The length of the statement  "                    //Log.Info("Message id: " + id.ToString() + " from client: " + cl + " data: " + (data != null ? data.Length.ToString() : "0")); " is 127.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleSSync,The length of the statement  "                Database.ExecuteReader("SELECT ss1.ID FROM kmpSubspace ss1 LEFT JOIN kmpSubspace ss2 ON ss1.LastTick < ss2.LastTick WHERE ss2.ID IS NULL;"' " is 139.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleTimeSync,The length of the statement  "            //Message format: clientsendtick(8)' serverreceivetick(8)' serversendtick(8). The server send tick gets added during actual sending. " is 132.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleTimeSync,The length of the statement  "            byte[] message_bytes = buildMessageArray(KMPCommon.ServerMessageID.SYNC_TIME' data); //This has already been rewritten in the queueClientMessage. " is 145.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleWarping,The length of the statement  "                    newSubspace = Convert.ToInt32(Database.ExecuteScalar("INSERT INTO kmpSubspace (LastTick) VALUES (@tick);" + (settings.useMySQL ? " is 128.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The length of the statement  "            int player_exists = Convert.ToInt32(Database.ExecuteScalar("SELECT COUNT(*) FROM kmpPlayer WHERE Guid = @guid AND Name LIKE @username"' " is 135.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The length of the statement  "            int playerID = Convert.ToInt32(Database.ExecuteScalar("SELECT ID FROM kmpPlayer WHERE Guid = @guid AND Name LIKE @username;"' " is 125.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHistoricalVesselUpdates,The length of the statement  "                    foreach (var client in clients.ToList().Where(c => c.currentSubspaceID == toSubspace && !c.warping && c.currentVessel != vessel_update.kmpID)) " is 142.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendServerSync,The length of the statement  "                Database.ExecuteReader("SELECT ss1.ID' ss1.LastTick FROM kmpSubspace ss1 LEFT JOIN kmpSubspace ss2 ON ss1.LastTick < ss2.LastTick WHERE ss2.ID IS NULL;"' " is 153.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The length of the statement  "                        sb.Append(KMPCommon.SHARE_CRAFT_COMMAND + " <craftname> - Shares the craft of name <craftname> with all other players\n"); " is 122.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The length of the statement  "                string full_message = string.Format("{2}<{0}> {1}"' cl.username' message_text' (isAdmin(cl.username) ? "[" + KMPCommon.ADMIN_MARKER + "] " : "")); " is 146.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                            object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" + " is 144.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                            object result = Database.ExecuteScalar("SELECT kmpVessel.Subspace FROM kmpVessel LEFT JOIN kmpSubspace ON kmpSubspace.ID = kmpVessel.Subspace" + " is 144.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID" + " is 122.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Private = @ves_up_isPrivate' Active = @ves_up_state' OwnerID = @playerID'" + " is 123.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "                                    Database.ExecuteNonQuery("UPDATE kmpVessel SET ProtoVessel = @protoVessel' Subspace = @curSubspace WHERE Guid = @kmpID;"' " is 121.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                if (!recentlyDestroyed.ContainsKey(vessel_update.kmpID) || (recentlyDestroyed[vessel_update.kmpID] + 1500L) < currentMillisecond) " is 129.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    Database.ExecuteNonQuery("UPDATE kmpVessel SET Destroyed = @ves_up_destroyed WHERE Guid = @kmpID AND (@ves_up_destroyed IS NULL OR Destroyed IS NULL OR Destroyed > @ves_up_destroyed);"' " is 185.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    if (!recentlyDestroyed.ContainsKey(vessel_update.kmpID) && vessel_update.situation == Situation.DESTROYED) //Only report first destruction event " is 144.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The length of the statement  "                    else if (recentlyDestroyed.ContainsKey(vessel_update.kmpID)) recentlyDestroyed.Remove(vessel_update.kmpID); //Vessel was restored for whatever reason " is 149.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdateToAll,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c.isReady && c != cl && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendScreenshotToWatchers,The length of the statement  "            foreach (var client in clients.ToList().Where(c => c != cl && c.isReady && c.activityLevel != Client.ActivityLevel.INACTIVE)) " is 125.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The length of the statement  "                double tickOffset = (double)(subspaceTime - subSpaceMasterTime[cl.currentSubspaceID]) / 10000000; //The magic number that converts 100ns to seconds. " is 148.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearEmptySubspace,The length of the statement  "                    minTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(s.LastTick) Tick FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 170.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "                if (currentMillisecond < subSpaceLastRateCheck[subspaceID] + 30000) return; //Only check once every 30 seconds per subspace. " is 124.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            if (!subSpaceMasterSpeed.ContainsKey(subspaceID) || !subSpaceMasterTick.ContainsKey(subspaceID) || !subSpaceMasterSpeed.ContainsKey(subspaceID)) return; //Only works for locked subspaces " is 186.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            float subspaceAverageWarpRate = subspaceWarpRateTotal / numberOfClientsInSubspace; //Aka: The average warp rate of the subspace. " is 128.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            float subspaceTargetRate = (subspaceAverageWarpRate + subspaceMinWarpRate) / 2; //Lets slow down to halfway between the average and slowest player. " is 147.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "            if (subspaceTargetRate < 0.75f) subspaceTargetRate = 0.75f; //Let's set a lower bound to something still reasonable like 0.75f. " is 127.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The length of the statement  "                double tickOffset = (double)(currenttime - subSpaceMasterTime[subspaceID]) / 10000000; //The magic number that converts 100ns to seconds. " is 137.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        Database.ExecuteNonQuery(String.Format("CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage BLOB);" + " is 169.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                            "CREATE INDEX kmpScenariosIdxPlayerID on kmpScenarios(PlayerID);"' settings.useMySQL ? "AUTO_INCREMENT" : "AUTOINCREMENT")); " is 124.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        //MySQL databases need the type changed to match v6 definition' SQLite doesn't allow us to alter tables and will happily store DOUBLEs in a BIT field anyway " is 156.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        "CREATE TABLE kmpVessel (Guid CHAR({1})' GameGuid CHAR({1})' OwnerID INTEGER' Private BIT' Active BIT' ProtoVessel {2}' Subspace INTEGER' Destroyed DOUBLE){3};" + " is 162.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The length of the statement  "                        "CREATE TABLE kmpScenarios (ID INTEGER PRIMARY KEY {0}' PlayerID INTEGER' Name NVARCHAR(100)' Tick DOUBLE' UpdateMessage {2}){3};" + " is 132.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "             int vesselCount = Convert.ToInt32(Database.ExecuteScalar("SELECT COUNT(*) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 165.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                         earliestClearTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(LastTick) FROM kmpSubspace WHERE ID IN (@subspaceids);"' " is 128.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                     double earliestClearSubspaceTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MIN(s.LastTick) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND (v.Destroyed IS NULL OR v.Destroyed > @minTick);"' " is 216.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The length of the statement  "                             Database.ExecuteScalar("SELECT MIN(s.LastTick) FROM kmpSubspace s INNER JOIN kmpVessel v ON v.Subspace = s.ID AND v.Destroyed IS NULL;")); " is 138.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,GetDataReaderBytes,The length of the statement  "            int length = (int)reader.GetBytes(column' 0' null' 0' 0); //MySQL is apparently fussy about requesting too many bytes' so use exact length " is 138.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/register [username] [token] - Add new roster entry for player <username> with authentication token <token> (BEWARE: will delete any matching roster entries)"); " is 170.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/update [username] [token] - Update existing roster entry for player <username>/token <token> (one param must match existing roster entry' other will be updated)"); " is 174.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/dekessler <mins> - Remove debris that has not been updated for at least <mins> minutes (in-game time) (If no <mins> value is specified' debris that is older than 30 minutes will be cleared)"); " is 203.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "            Log.Info("/reloadmodfile - Reloads the {0} file. Note that this will not recheck any currently logged in clients' only those joining"' MOD_CONTROL_FILE); " is 153.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,displayCommands,The length of the statement  "         Log.Info("/modgen [blacklist|whitelist] [sha] - Auto-generate a KMPModControl.txt file using what you have placed in the server's 'Mods' directory"); " is 149.
Long Statement,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkGhosts,The length of the statement  "                foreach (Client client in clients.ToList().Where(c => !c.isReady && currentMillisecond - c.connectionStartTime > CLIENT_HANDSHAKE_TIMEOUT_DELAY + CLIENT_TIMEOUT_DELAY)) " is 168.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one."); " is 131.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command."); " is 137.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe."); " is 154.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty)."); " is 178.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly."); " is 546.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                        	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");     " is 158.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running."); " is 133.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult)."); " is 142.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The length of the statement  "                            Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server)."); " is 183.
Long Statement,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,hostServer,The length of the statement  "						Log.Error("Your specified IP binding ({0}) is not valid. You must use an IP address belonging to a network interface on this system. Use 0.0.0.0 to use all available interfaces."' settings.ipBinding); " is 200.
Long Statement,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveBans,The length of the statement  "						configWriter.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}"' b.When.ToString()' b.Expires.ToString()' b.WhoBy' b.BannedIP.ToString()' b.BannedGUID.ToString()' b.BannedName' b.Why); " is 179.
Complex Conditional,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The conditional expression  "(queuedOutMessagesHighPriority.Count > 0 || queuedOutMessagesSplit.Count > 0 || queuedOutMessages.Count > 0) && !isServerSendingData"  is complex.
Complex Conditional,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The conditional expression  "!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar")"  is complex.
Complex Conditional,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,ModFilesToListing,The conditional expression  "!trimmedModFile.ToLowerInvariant().StartsWith("squad") && !trimmedModFile.ToLowerInvariant().StartsWith("nasamission") && !trimmedModFile.ToLowerInvariant().StartsWith("kmp") && !trimmedModFile.ToLowerInvariant().StartsWith("000_toolbar") && trimmedModFile.ToLowerInvariant().EndsWith(".dll")"  is complex.
Complex Conditional,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The conditional expression  "(client.currentSubspaceID == cl.currentSubspaceID)                      && !client.warping && !cl.warping                      && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)"  is complex.
Complex Conditional,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The conditional expression  "!secondaryUpdate                          && !client.warping && !cl.warping                          && (cl.activityLevel == Client.ActivityLevel.IN_GAME || cl.lastTick > 0d)                          && firstSubspaceIsPresentOrFutureOfSecondSubspace(client.currentSubspaceID' cl.currentSubspaceID)"  is complex.
Empty Catch Block,KMPServer,Log,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,WriteLog,The method has an empty catch block.
Empty Catch Block,KMPServer,Log,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Logger.cs,SendToAdmin,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncSend,The method has an empty catch block.
Empty Catch Block,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,sendOutgoingMessages,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearState,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,safeAbort,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,safeAbort,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleCommands,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleCommands,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearClientsServerCommand,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendOutgoingMessages,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,disconnectClient,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncHTTPCallback,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleActivityUpdateInGame,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleClientTextMessage,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeRefusalMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendConnectionEndMessageDirect,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearEmptySubspace,The method has an empty catch block.
Empty Catch Block,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkGhosts,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveWhitelist,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadWhitelist,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,saveAdmins,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadAdmins,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,writeToFile,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,SetFieldValue,The method has an empty catch block.
Empty Catch Block,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The method has an empty catch block.
Magic Number,KMPServer,DatabaseHelper,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\DatabaseHelper.cs,CreateCommand,The following statement contains a magic number: parameters.Length % 2 != 0
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,asyncReceive,The following statement contains a magic number: currentBytesToReceive = BitConverter.ToInt32(currentMessage' 4);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: int split_message_length = KMPCommon.intFromBytes (data' 4);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: splitMessageData = new byte[8 + split_message_length];
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: int joined_message_length = KMPCommon.intFromBytes (splitMessageData' 4);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,messageReceived,The following statement contains a magic number: Array.Copy (splitMessageData' 8' joined_message_data' 0' joined_message_length);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: byte[] next_message_stripped = new byte[next_message.Length - 8];
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: Array.Copy (next_message' 8' next_message_stripped' 0' next_message.Length - 8);
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: byte[] time_sync_rewrite = new byte[24];
Magic Number,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,syncTimeRewrite,The following statement contains a magic number: BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(time_sync_rewrite' 16);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControlCommand,The following statement contains a magic number: input.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,writeModControl,The following statement contains a magic number: !file.ToLowerInvariant().StartsWith("squad") && !file.ToLowerInvariant().StartsWith("nasamission") && file.Substring(file.Length - 4).Equals(".cfg"' StringComparison.InvariantCultureIgnoreCase)
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The following statement contains a magic number: byte[] trimmed_bytes = new byte[bytes.Length - 4 - description_length];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,saveScreenshot,The following statement contains a magic number: Array.Copy(bytes' 4 + description_length' trimmed_bytes' 0' trimmed_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: autoDekesslerTimer = new Timer(_ => dekesslerServerCommand(new string[0])' null' settings.autoDekesslerTime * 60000' settings.autoDekesslerTime * 60000);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: currentMillisecond - last_backup_time > (settings.backupInterval * 60000) && (activeClientCount() > 0 || !backedUpSinceEmpty)
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,hostingLoop,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processCommand,The following statement contains a magic number: var rawParts = input.Split(new char[] { ' ' }' 2);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processCommand,The following statement contains a magic number: var parts = cleanInput.Split(new char[] { ' ' }' 2);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: parts = parts[1].Split(new char[] { ' ' }' 3);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: string message = parts[2];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sayServerCommand,The following statement contains a magic number: parts.Length > 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,lockShipServerCommand,The following statement contains a magic number: args.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The following statement contains a magic number: int days = 365;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,banServerCommand,The following statement contains a magic number: args.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,kickServerCommand,The following statement contains a magic number: parts.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,registerServerCommand,The following statement contains a magic number: args.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,updateServerCommand,The following statement contains a magic number: args.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,unregisterServerCommand,The following statement contains a magic number: parts.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: int minsToKeep = 30;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: parts.Length == 2
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: double cutOffTick = Convert.ToDouble(Database.ExecuteScalar("SELECT MAX(LastTick) FROM kmpSubspace")) - Convert.ToDouble(minsToKeep * 60);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: Database.ExecuteReader("SELECT  vu.UpdateMessage' v.ProtoVessel' v.Guid" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND v.Destroyed IS NULL" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick;"'                      record =>                      {                          results.Add(new Tuple<byte[]' byte[]' Guid>(GetDataReaderBytes(record' 0)' GetDataReaderBytes(record' 1)' record.GetGuid(2)));                      });
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: s.Substring(s.IndexOf("type")' 20).Contains("Debris")
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,dekesslerServerCommand,The following statement contains a magic number: s.IndexOf("type") > 0 && s.Length > s.IndexOf("type") + 20
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,listenForClients,The following statement contains a magic number: tcpListener.Start(4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: index += 4;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: index += 4;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: index += 4;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,asyncUDPReceive,The following statement contains a magic number: received.Length >= KMPCommon.MSG_HEADER_LENGTH + 4
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,queueClientMessage,The following statement contains a magic number: byte[] rewriteMessage = new byte[16];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,queueClientMessage,The following statement contains a magic number: BitConverter.GetBytes(DateTime.UtcNow.Ticks).CopyTo(rewriteMessage' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleWarping,The following statement contains a magic number: double newsubspacetick = BitConverter.ToDouble(data' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleWarping,The following statement contains a magic number: rate < 1.1f
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleUDPProbe,The following statement contains a magic number: lastSubspaceTick > 100d
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleUDPProbe,The following statement contains a magic number: cl.averageWarpRate = BitConverter.ToSingle(data' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: !(data.Length > 8 && (data.Length - 8) <= KMPCommon.MAX_CRAFT_FILE_BYTES)
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: !(data.Length > 8 && (data.Length - 8) <= KMPCommon.MAX_CRAFT_FILE_BYTES)
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: int craft_name_length = KMPCommon.intFromBytes(data' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: String craft_name = encoder.GetString(data' 8' craft_name_length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: byte[] craft_bytes = new byte[data.Length - craft_name_length - 8];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: Array.Copy(data' 8 + craft_name_length' craft_bytes' 0' craft_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following statement contains a magic number: craft_name_length < data.Length - 8
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: String username = encoder.GetString(data' 4' username_length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: Int32 guid_length = KMPCommon.intFromBytes(data' 4 + username_length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: int offset = 4 + username_length + 4;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: int offset = 4 + username_length + 4;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: offset = 4 + username_length + 4 + guid_length;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleHandshake,The following statement contains a magic number: offset = 4 + username_length + 4 + guid_length;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSubspace,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND (v.Destroyed IS NULL OR v.Destroyed > @subTick)" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace AND s.LastTick <= @subTick" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick" +                      (excludeOwnActive ? " AND NOT v.Guid = @curVessel;" : ";")'                      record => {                          KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                          ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                          vessel_update.state = State.INACTIVE;                          vessel_update.isPrivate = record.GetBoolean(2);                          vessel_update.isMine = record.GetInt32(3) == cl.playerID;                          vessel_update.setProtoVessel(protoVessel);                          vessel_update.isSyncOnlyUpdate = true;                          vessel_update.distance = 0;                          byte[] update = ObjectToByteArray(vessel_update);                          sendVesselMessage(cl' update);                      }'                      "subTick"' subTick.ToString("0.0").Replace("'"' ".")'                      "curVessel"' cl.currentVessel);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSubspace,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID" +                      " FROM kmpVesselUpdate vu" +                      " INNER JOIN kmpVessel v ON v.Guid = vu.Guid AND (v.Destroyed IS NULL OR v.Destroyed > @subTick)" +                      " INNER JOIN kmpSubspace s ON s.ID = vu.Subspace" +                      " INNER JOIN" +                      "  (SELECT vu.Guid' MAX(s.LastTick) AS LastTick" +                      "  FROM kmpVesselUpdate vu" +                      "  INNER JOIN kmpSubspace s ON s.ID = vu.Subspace AND s.LastTick <= @subTick" +                      "  GROUP BY vu.Guid) t ON t.Guid = vu.Guid AND t.LastTick = s.LastTick" +                      (excludeOwnActive ? " AND NOT v.Guid = @curVessel;" : ";")'                      record => {                          KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                          ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                          vessel_update.state = State.INACTIVE;                          vessel_update.isPrivate = record.GetBoolean(2);                          vessel_update.isMine = record.GetInt32(3) == cl.playerID;                          vessel_update.setProtoVessel(protoVessel);                          vessel_update.isSyncOnlyUpdate = true;                          vessel_update.distance = 0;                          byte[] update = ObjectToByteArray(vessel_update);                          sendVesselMessage(cl' update);                      }'                      "subTick"' subTick.ToString("0.0").Replace("'"' ".")'                      "curVessel"' cl.currentVessel);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,buildMessageArray,The following statement contains a magic number: KMPCommon.intToBytes(msg_data_length).CopyTo(message_bytes' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: byte[] data_bytes = new byte[version_bytes.Length + 24 + kmpModControl.Length + 1];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(version_bytes.Length).CopyTo(data_bytes' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: version_bytes.CopyTo(data_bytes' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(cl.clientIndex).CopyTo(data_bytes' 8 + version_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(settings.gameMode).CopyTo(data_bytes' 12 + version_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(countShipsInDatabase()).CopyTo(data_bytes' 16 + version_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: KMPCommon.intToBytes(kmpModControl.Length).CopyTo(data_bytes' 20 + version_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendHandshakeMessage,The following statement contains a magic number: kmpModControl.CopyTo(data_bytes' 24 + version_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: vessel_info = new String[5];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: vessel_info[2] = "Using vessel: " + vessel_update.name;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: vessel_info[3] = "";
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendPluginUpdateToAll,The following statement contains a magic number: vessel_info[4] = vessel_update.id.ToString();
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,checkVesselDestruction,The following statement contains a magic number: !recentlyDestroyed.ContainsKey(vessel_update.kmpID) || (recentlyDestroyed[vessel_update.kmpID] + 1500L) < currentMillisecond
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendVesselStatusUpdate,The following statement contains a magic number: Database.ExecuteReader("SELECT vu.UpdateMessage' v.ProtoVessel' v.Private' v.OwnerID' v.Active" +                  " FROM kmpVesselUpdate vu" +                  " INNER JOIN kmpVessel v ON v.Guid = vu.Guid" +                  " WHERE vu.Subspace = @curSubspace AND v.Guid = @vessel;"'                  record => {                      KMPVesselUpdate vessel_update = (KMPVesselUpdate)ByteArrayToObject(GetDataReaderBytes(record' 0));                      ConfigNode protoVessel = (ConfigNode)ByteArrayToObject(GetDataReaderBytes(record' 1));                      vessel_update.isPrivate = record.GetBoolean(2);                      vessel_update.isMine = record.GetInt32(3) == cl.playerID;                      if (record.GetBoolean(4))                          vessel_update.state = State.ACTIVE;                      else                          vessel_update.state = State.INACTIVE;                      vessel_update.setProtoVessel(protoVessel);                      byte[] update = ObjectToByteArray(vessel_update);                      sendVesselMessage(cl' update);                  }'                  "curSubspace"' cl.currentSubspaceID.ToString("D")'                  "vessel"' vessel);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: byte[] bytes = new byte[8 + name_bytes.Length + data.Length];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: KMPCommon.intToBytes(name_bytes.Length).CopyTo(bytes' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: name_bytes.CopyTo(bytes' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendCraftFile,The following statement contains a magic number: data.CopyTo(bytes' 8 + name_bytes.Length);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: double tickOffset = (double)(subspaceTime - subSpaceMasterTime[cl.currentSubspaceID]) / 10000000;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: byte[] timesyncdata = new byte[20];
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: BitConverter.GetBytes(subspaceTime).CopyTo(timesyncdata' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,sendSyncMessage,The following statement contains a magic number: BitConverter.GetBytes(subspaceSpeed).CopyTo(timesyncdata' 16);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clearEmptySubspace,The following statement contains a magic number: double minTick = 2d;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: currentMillisecond < subSpaceLastRateCheck[subspaceID] + 30000
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: float subspaceTargetRate = (subspaceAverageWarpRate + subspaceMinWarpRate) / 2;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: subspaceTargetRate = 0.75f;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: subspaceTargetRate < 0.75f
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: double tickOffset = (double)(currenttime - subSpaceMasterTime[subspaceID]) / 10000000;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,processClientAverageWarpRates,The following statement contains a magic number: subspaceDiffRate > 0.03f
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: KMPCommon.intToBytes(settings.screenshotInterval).CopyTo(bytes' 4);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: KMPCommon.intToBytes(settings.screenshotSettings.maxHeight).CopyTo(bytes' 8);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: BitConverter.GetBytes(settings.safetyBubbleRadius).CopyTo(bytes' 12);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[20] = inactiveShipsPerClient;
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[21] = Convert.ToByte(settings.cheatsEnabled);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,serverSettingBytes,The following statement contains a magic number: bytes[22] = Convert.ToByte(settings.allowPiracy);
Magic Number,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,CleanDatabase,The following statement contains a magic number: double earliestClearTick = 2d;
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: var tabs = (kvp.Key.Length > 11) ? "\t" : "\t\t";
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following statement contains a magic number: switch (parts[0].ToLowerInvariant())                  {                      case "/quit":                          return;                      case "/modgen":                          Server.writeModControlCommand(parts);                          break;                      case "/whitelist":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /whitelist [add|del] [user]");                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveWhitelist(settings);                          break;                        case "/admin":                          if (parts.Length != 3)                          {                              Log.Info("Invalid usage. /admin [add|del] [user]");                              break;                          }                            switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }                            ServerSettings.saveAdmins(settings);                          break;                        case "/mode":                          if (parts.Length != 2)                          {                              Log.Info("Invalid usage. /mode [sandbox|career]");                              break;                          }                          switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }                          ServerSettings.writeToFile(settings);                          break;                        case "/set":                          if (parts.Length > 1 && parts[1].Equals("help"))                          {                              Log.Info("ipBinding - The IP address the server should bind to. Defaults to binding to all available IPs.");                              Log.Info("port - The port used for connecting to the server.");                              Log.Info("httpPort - The port used for viewing server information from a web browser.");                              Log.Info("httpBroadcast - Enable simple http server for viewing server information from  a web browser.");                              Log.Info("maxClients - The maximum number of players that can be connected to the server simultaneously.");                                Log.Info("screenshotInterval - The minimum time a client must wait after sharing a screenshot before they can share another one.");                              Log.Info("autoRestart - If true' the server will attempt to restart after catching an unhandled exception.");                              Log.Info("autoHost - If true' the server will start hosting immediately rather than requiring the admin to enter the '/start' command.");                              Log.Info("saveScreenshots - If true' the server will save all screenshots to the KMPScreenshots folder.");                              Log.Info("hostIPV6 - If true' the server will be listening on a IPv6 address.");  						      							Log.Info("useMySQL - If true' the server will use the configured MySQL connection string instead of the built-in SQLite database to store the universe.");  							Log.Info("mySQLConnString - The connection string to use when using a MySQL server to host the universe database.");                              Log.Info("backupInterval - Time' in minutes' between universe database backups.");                              Log.Info("maxDirtyBackups - The maximum number of backups the server will perform before forcing database optimization (which otherwise happens only when the server is empty).");                              Log.Info("updatesPerSecond - CHANGING THIS VALUE IS NOT RECOMMENDED - The number of updates that will be received from all clients combined per second. The higher you set this number' the more frequently clients will send updates. As the number of active clients increases' the frequency of updates will decrease to not exceed this many updates per second. " + "WARNING: If this value is set too high then players will be more likely to be disconnected due to lag' while if it is set too low the gameplay experience will degrade significantly.");  						                          	Log.Info("totalInactiveShips - CHANGING THIS VALUE IS NOT RECOMMENDED - The maximum number of inactive ships that can be updated by clients simultaneously.");      							Log.Info("consoleScale - Changes the window size of the scale. Defaults to 1.0' requires restart.");	  							Log.Info("LogLevel - Log verbosity. Choose from: Debug' Activity' Info' Notice' Warning' or Error.");	  							Log.Info("maximumLogs - The maximum number of log files to store.");	  							Log.Info("screenshotHeight - The height of screenshots sent by players' in pixels.");  						  							Log.Info("autoDekessler - If true' server will clean up all debris in 'autoDekesslerTime'.");                              Log.Info("autoDekesslerTime - Time' in minutes' that the server will clean up all debris.");                          	Log.Info("profanityFilter - If true' enables the built-in profanity filter.");      							Log.Info("profanityWords - List of profanity replacements. Replaces the first word with the second.");  							Log.Info("whitelisted - If true' enables the player whitelist.");  						  							Log.Info("joinMessage - A message shown to players when they join the server.");                              Log.Info("serverInfo - A message displayed to anyone viewing server information in a browser.");                              Log.Info("serverMotd - A message displayed to users when they login to the server that can be changed while the server is running.");                              Log.Info("serverRules - A message displayed to users when they ask to view the server's rules.");                              Log.Info("safetyBubbleRadius - The radius of the 'safety cylinder' which prevents collisions near KSC.");  							  							Log.Info("cheatsEnabled - If true' enable KSP's built-in debug cheats.");                              Log.Info("allowPiracy - If true' a player can take control of another player's ship if they can accomplish manual docking (very difficult).");                              Log.Info("freezeTimeWhenServerIsEmpty - If true' universe time is frozen when the server is empty (otherwise universe time runs continuously once a single player joins the server).");                          }                          else if (parts.Length < 3)                          {                              Log.Info("Invalid usage. Usage is /set [key] [value] or /set help");                          }                          else                          {                              string val = String.Join(" "' parts.Skip(2).ToArray());                              string setKey = settings.MatchCaseInsensitive(parts[1]);                              if (settings.Contains(setKey))                              {                                  try                                  {                                      ServerSettings.modifySetting(settings' setKey' val);                                      Log.Info("{0} changed to {1}"' setKey' val);                                      ServerSettings.writeToFile(settings);                                  }                                  catch                                  {                                      Log.Info("{0} cannot be set to {1}"' parts[1]' val);                                  }                              }                              else                                  Log.Info("No key found for {0}"' parts[1]);                          }                          break;                        case "/start":                          startServer(settings);                          break;                      default:                          Log.Info("Unrecognised command: {0}"' parts[0]);                          break;                  }
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,loadBans,The following statement contains a magic number: var newBan = new BanRecord()  							{  								When = DateTime.Parse(parts[0])'  								Expires = DateTime.Parse(parts[1])'  								WhoBy = parts[2]'  								BannedIP = IPAddress.Parse(parts[3])'  								BannedGUID = Guid.Parse(parts[4])'  								BannedName = parts[5]'  								Why = parts[6]'  							};
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The following statement contains a magic number: LineParts = CurrentLine.Split(new char[] { '=' }' 2);
Magic Number,KMPServer,ServerSettings,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerSettings.cs,readFromFile,The following statement contains a magic number: LineParts.Length < 2
Duplicate Code,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,startDatabase,The method contains a code clone-set at the following line numbers (starting from the method definition): ((31' 50)' (102' 121))
Missing Default,KMPServer,Client,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Client.cs,updateActivityLevel,The following switch statement is missing a default case: switch (level)  				{  					case ActivityLevel.IN_GAME:  						lastInGameActivityTime = parent.currentMillisecond;  						currentVessel = Guid.Empty;  						break;    					case ActivityLevel.IN_FLIGHT:  						lastInFlightActivityTime = parent.currentMillisecond;  						lastInGameActivityTime = parent.currentMillisecond;  						break;  				}
Missing Default,KMPServer,PublicServerInfo,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\PublicServerInfo.cs,PublicServerInfo,The following switch statement is missing a default case: switch (settings.gameMode)              {                  case 0:                      GameMode = "Sandbox";                      break;                  case 1:                      GameMode = "Career";                      break;              }
Missing Default,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,clientActivityLevelChanged,The following switch statement is missing a default case: switch (cl.activityLevel)              {                  case Client.ActivityLevel.IN_GAME:                      HandleActivityUpdateInGame(cl);                      break;                    case Client.ActivityLevel.IN_FLIGHT:                      HandleActivityUpdateInFlight(cl);                      break;              }
Missing Default,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,handleMessage,The following switch statement is missing a default case: switch (id)                      {                          case KMPCommon.ClientMessageID.HANDSHAKE:                              HandleHandshake(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.PRIMARY_PLUGIN_UPDATE:                          case KMPCommon.ClientMessageID.SECONDARY_PLUGIN_UPDATE:                              HandlePluginUpdate(cl' id' data);                              break;                            case KMPCommon.ClientMessageID.SCENARIO_UPDATE:                              HandleScenarioUpdate(cl' data);                              break;                            case KMPCommon.ClientMessageID.TEXT_MESSAGE:                              handleClientTextMessage(cl' encoder.GetString(data' 0' data.Length));                              break;                            case KMPCommon.ClientMessageID.SCREEN_WATCH_PLAYER:                              HandleScreenWatchPlayer(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.SCREENSHOT_SHARE:                              HandleScreenshotShare(cl' data);                              break;                            case KMPCommon.ClientMessageID.CONNECTION_END:                              HandleConnectionEnd(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.SHARE_CRAFT_FILE:                              HandleShareCraftFile(cl' data' encoder);                              break;                            case KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_FLIGHT:                              HandleActivityUpdateInFlight(cl);                              break;                            case KMPCommon.ClientMessageID.ACTIVITY_UPDATE_IN_GAME:                              HandleActivityUpdateInGame(cl);                              break;                            case KMPCommon.ClientMessageID.PING:                              cl.queueOutgoingMessage(KMPCommon.ServerMessageID.PING_REPLY' data);                              break;                            case KMPCommon.ClientMessageID.UDP_PROBE:                              HandleUDPProbe(cl' data);                              break;                            case KMPCommon.ClientMessageID.WARPING:                              HandleWarping(cl' data);                              break;                            case KMPCommon.ClientMessageID.SSYNC:                              HandleSSync(cl' data);                              break;                            case KMPCommon.ClientMessageID.SYNC_TIME:                              HandleTimeSync(cl' data);                              break;                      }
Missing Default,KMPServer,Server,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\Server.cs,HandleShareCraftFile,The following switch statement is missing a default case: switch (craft_type)                  {                      case KMPCommon.CraftType.VAB:                          sb.Append(" (VAB)");                          break;                        case KMPCommon.CraftType.SPH:                          sb.Append(" (SPH)");                          break;                        case KMPCommon.CraftType.SUBASSEMBLY:                          sb.Append(" (Subassembly)");                          break;                  }
Missing Default,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1])                          {                              case "add":                                  if (!settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the whitelist"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.whitelist.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.whitelist.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the whitelist"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the whitelist"' parts[2]);                                  }                                  break;                          }
Missing Default,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1])                          {                              case "add":                                  if (!settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Add(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been added to the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} is already on the admin list"' parts[2]);                                  }                                  break;                              case "del":                                  if (settings.admins.Contains(parts[2]' StringComparer.InvariantCultureIgnoreCase))                                  {                                      settings.admins.Remove(parts[2].ToLowerInvariant());                                      Log.Info("{0} has been removed from the admin list"' parts[2]);                                  }                                  else                                  {                                      Log.Info("{0} was not already on the admin list"' parts[2]);                                  }                                  break;                          }
Missing Default,KMPServer,ServerMain,D:\research\architectureSmells\repos1\TehGimp_KerbalMultiPlayer\KMPServer\ServerMain.cs,Main,The following switch statement is missing a default case: switch (parts[1].ToLowerInvariant())                          {                              case "sandbox":                                  settings.gameMode = 0;                                  Log.Info("Game mode set to sandbox");                                  break;                              case "career":                                  settings.gameMode = 1;                                  Log.Info("Game mode set to career");                                  break;                          }
