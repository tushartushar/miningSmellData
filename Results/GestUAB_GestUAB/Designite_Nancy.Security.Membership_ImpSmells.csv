Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,Cyclomatic complexity of the method is 9
Long Parameter List,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,CreateUser,The method has 7 parameters. Parameters: username' password' email' pwdQuestion' pwdAnswer' isApproved' status
Long Parameter List,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' pwdQuestion' pwdAnswer' isApproved' providerUserKey' status
Long Parameter List,Nancy.Security,MembershipProvider,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,MembershipUser,The method has 12 parameters. Parameters: name' providerUserKey' email' passwordQuestion' comment' isApproved' isLockedOut' creationDate' lastLoginDate' lastActivityDate' lastPasswordChangedDate' lastLockoutDate
Long Identifier,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The length of the parameter numberOfNonAlphanumericCharacters is 33.
Complex Conditional,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The conditional expression  "(pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126)"  is complex.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Empty Catch Block,Nancy.Security,MembershipUser,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MembershipUser.cs,UpdateSelf,The method has an empty catch block.
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: for (i = 0; i < length; i ++)              {                  /* convert the random bytes to ascii values 33-126 */                  pass_bytes [i] = (byte)(pass_bytes [i] % 93 + 33);                    /* and count the number of                   * non-alphanumeric characters we have                   * as we go */                  if ((pass_bytes [i] >= 33 && pass_bytes [i] <= 47)                      || (pass_bytes [i] >= 58 && pass_bytes [i] <= 64)                      || (pass_bytes [i] >= 91 && pass_bytes [i] <= 96)                      || (pass_bytes [i] >= 123 && pass_bytes [i] <= 126))                      num_nonalpha++;                    /* get rid of any quotes in the                   * password' just in case they cause                   * problems */                  if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                      pass_bytes [i] ++;                  else if (pass_bytes [i] == 96)                      pass_bytes [i] --;              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
Magic Number,Nancy.Security,Membership,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership\MemberShip.cs,GeneratePassword,The following statement contains a magic number: if (num_nonalpha < numberOfNonAlphanumericCharacters)              {                  /* loop over the array' converting the                   * least number of alphanumeric                   * characters to non-alpha */                  for (i = 0; i < length; i ++)                  {                      if (num_nonalpha == numberOfNonAlphanumericCharacters)                          break;                      if (pass_bytes [i] >= 48 && pass_bytes [i] <= 57)                      {                          pass_bytes [i] = (byte)(pass_bytes [i] - 48 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 65 && pass_bytes [i] <= 90)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 65) % 13 + 33);                          num_nonalpha++;                      } else if (pass_bytes [i] >= 97 && pass_bytes [i] <= 122)                      {                          pass_bytes [i] = (byte)((pass_bytes [i] - 97) % 13 + 33);                          num_nonalpha++;                      }                        /* and make sure we don't end up with quote characters */                      if (pass_bytes [i] == 34 || pass_bytes [i] == 39)                          pass_bytes [i]++;                      else if (pass_bytes [i] == 96)                          pass_bytes [i] --;                  }              }
