Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GestUAB.Security,RavenDbMembershipProvider,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership.Providers\RavenDbMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,GestUAB.Security,RavenDbMembershipProvider,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership.Providers\RavenDbMembershipProvider.cs,ValidateUserNameAndEmail,The method has 5 parameters. Parameters: userName' email' userNameIsOk' emailIsOk' excludeKey
Magic Number,GestUAB.Security,RavenDbMembershipProvider,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership.Providers\RavenDbMembershipProvider.cs,TransformPassword,The following statement contains a magic number: switch (PasswordFormat) {              case MembershipPasswordFormat.Clear:                  ret = password;                  break;              case MembershipPasswordFormat.Hashed:                      // Generate the salt if not passed in                  if (string.IsNullOrEmpty (salt)) {                      var saltBytes = new byte[16];                      RandomNumberGenerator rng = RandomNumberGenerator.Create ();                      rng.GetBytes (saltBytes);                      salt = Convert.ToBase64String (saltBytes);                  }                  ret = HashPassword ((salt + password)' "SHA1");                  break;              case MembershipPasswordFormat.Encrypted:                  byte[] clearText = Encoding.UTF8.GetBytes (password);                  byte[] encryptedText = base.EncryptPassword (clearText);                  ret = Convert.ToBase64String (encryptedText);                  break;              }
Missing Default,GestUAB.Security,RavenDbMembershipProvider,C:\repos\GestUAB_GestUAB\src\Nancy.Security.Membership.Providers\RavenDbMembershipProvider.cs,TransformPassword,The following switch statement is missing a default case: switch (PasswordFormat) {              case MembershipPasswordFormat.Clear:                  ret = password;                  break;              case MembershipPasswordFormat.Hashed:                      // Generate the salt if not passed in                  if (string.IsNullOrEmpty (salt)) {                      var saltBytes = new byte[16];                      RandomNumberGenerator rng = RandomNumberGenerator.Create ();                      rng.GetBytes (saltBytes);                      salt = Convert.ToBase64String (saltBytes);                  }                  ret = HashPassword ((salt + password)' "SHA1");                  break;              case MembershipPasswordFormat.Encrypted:                  byte[] clearText = Encoding.UTF8.GetBytes (password);                  byte[] encryptedText = base.EncryptPassword (clearText);                  ret = Convert.ToBase64String (encryptedText);                  break;              }
