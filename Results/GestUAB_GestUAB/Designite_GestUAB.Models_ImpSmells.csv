Implementation smell,Namespace,Class,File,Method,Description
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
Magic Number,GestUAB.Models,CpfValidator,C:\repos\GestUAB_GestUAB\src\GestUAB.Models\Validators.cs,IsValid,The following statement contains a magic number: if (string.IsNullOrEmpty (cpfcnpj))                  return true;              else {                  int[] d = new int[14];                  int[] v = new int[2];                  int j' i' soma;                  string sequencia' sonumero;                    sonumero = Regex.Replace (cpfcnpj' "[^0-9]"' string.Empty);                    //verificando se todos os numeros são iguais                  if (new string (sonumero [0]' sonumero.Length) == sonumero)                      return false;                    // se a quantidade de dígitos numérios for igual a 11                  // iremos verificar como CPF                  if (sonumero.Length == 11) {                      for (i = 0; i <= 10; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 8 + i; j++)                              soma += d [j] * (10 + i - j);                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [9] & v [1] == d [10]);                  }                  // se a quantidade de dígitos numérios for igual a 14                  // iremos verificar como CNPJ                  else if (sonumero.Length == 14) {                      sequencia = "6543298765432";                      for (i = 0; i <= 13; i++)                          d [i] = Convert.ToInt32 (sonumero.Substring (i' 1));                      for (i = 0; i <= 1; i++) {                          soma = 0;                          for (j = 0; j <= 11 + i; j++)                              soma += d [j] * Convert.ToInt32 (sequencia.Substring (j + 1 - i' 1));                            v [i] = (soma * 10) % 11;                          if (v [i] == 10)                              v [i] = 0;                      }                      return (v [0] == d [12] & v [1] == d [13]);                  }                  // CPF ou CNPJ inválido se                  // a quantidade de dígitos numérios for diferente de 11 e 14                  else                      return false;              }
