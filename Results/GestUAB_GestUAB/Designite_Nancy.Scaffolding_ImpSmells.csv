Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Nancy.Scaffolding,HtmlTagsExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\HtmlTagsExtensions.cs,GenerateFieldTag,The method has 5 parameters. Parameters: model' config' visibility' formAction' prop
Long Parameter List,Nancy.Scaffolding,ScaffoldConfigFluentInterface,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\ScaffoldConfig.cs,WithVisibilityConfig,The method has 5 parameters. Parameters: create' read' update' delete' all
Long Parameter List,Nancy.Scaffolding,IScaffoldFluentConfig,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\Sintax.cs,WithVisibilityConfig,The method has 5 parameters. Parameters: create' read' update' delete' all
Long Parameter List,Nancy.Scaffolding,ObjectListAttribute,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\ObjectListAttribute.cs,ObjectListAttribute,The method has 5 parameters. Parameters: listContainer' objectType' methodName' valueMember' selectType
Long Parameter List,Nancy.Scaffolding,VisibilityAttribute,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\VisibilityAttribute.cs,VisibilityAttribute,The method has 5 parameters. Parameters: create' read' update' delete' all
Long Parameter List,Nancy.Scaffolding.Validators,CustomValidatorExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\CustomValidators.cs,Remote,The method has 5 parameters. Parameters: ruleBuilder' errorMessage' action' httpMethod' additionalFields
Long Statement,Nancy.Scaffolding,HtmlTagsExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\HtmlTagsExtensions.cs,GenerateSelect,The length of the statement  "                var ge = (GlobalizedEnumAttribute)propertyInfo.PropertyType.GetCustomAttributes(typeof(GlobalizedEnumAttribute)' false).SingleOrDefault(); " is 138.
Long Statement,Nancy.Scaffolding,HtmlTagsExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\HtmlTagsExtensions.cs,GenerateLabel,The length of the statement  "                var ge = (GlobalizedEnumAttribute)member.PropertyType.GetCustomAttributes(typeof(GlobalizedEnumAttribute)' false).SingleOrDefault(); " is 132.
Magic Number,Nancy.Scaffolding,HtmlTagsExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\HtmlTagsExtensions.cs,FillValidation,The following statement contains a magic number: foreach (var v in r.Validators)              {                  var message = v.ErrorMessageSource;                  var messageFormatter = new MessageFormatter();                  messageFormatter.AppendPropertyName(r.DisplayName.GetString());                  var formattedMessage = messageFormatter.BuildMessage(message.GetString());                  if (v is NotEmptyValidator)                  {                      tag.Data("val-required"' formattedMessage);                  }                  else if (v is EmailValidator)                  {                      tag.Data("val-email"' formattedMessage);                  }                  else if (v is InclusiveBetweenValidator)                  {                      var ibv = v as InclusiveBetweenValidator;                      if (r.TypeToValidate == typeof(DateTime))                      {                          tag.Data("val-daterange"' formattedMessage);                          tag.Data("val-daterange-min"' ((DateTime)ibv.From).ToShortDateString());                          tag.Data("val-daterange-max"' ((DateTime)ibv.To).ToShortDateString());                      }                      else                      {                          tag.Data("val-range"' formattedMessage);                          tag.Data("val-range-min"' ibv.From);                          tag.Data("val-range-max"' ibv.To);                      }                  }                  else if (v is RegularExpressionWithMaskValidator)                  {                      tag.Data("val-regexwithmask"' formattedMessage);                      tag.Data("val-regexwithmask-pattern"' (v as RegularExpressionWithMaskValidator).Expression);                      tag.Data("val-regexwithmask-mask"' (v as RegularExpressionWithMaskValidator).Mask);                      tag.Data("mask"' (v as RegularExpressionWithMaskValidator).Mask);                  }                  else if (v is RegularExpressionValidator)                  {                      tag.Data("val-regex"' formattedMessage);                      tag.Data("val-regex-pattern"' (v as RegularExpressionValidator).Expression);                  }                  else if (v is LengthValidator)                  {                      var lv = v as LengthValidator;                      var length = lv.Max > 30 ? 30 : lv.Max;                      tag.Style("width"' length + "em");                      tag.Attr("maxlength"' lv.Max);                      tag.Data("val-length"' formattedMessage                                  .Replace("PropertyName"' "0")                                  .Replace("MinLength"' "1")                                  .Replace("MaxLength"' "2")                                  .Replace("TotalLength"' "3")                      );                      tag.Data("val-length-max"' lv.Max);                      tag.Data("val-length-min"' lv.Min);                  }                  else if (v is RemoteValidator)                  {                      var rv = v as RemoteValidator;                      tag.Data("val-remote"' formattedMessage);                      tag.Data("val-remote-additionalfields"' rv.AdditionalFields);                      tag.Data("val-remote-type"' rv.HttpMethod);                      tag.Data("val-remote-url"' rv.Action);                  }                  else                  {                      foreach (ICommand cmd in AddinManager.GetExtensionObjects<ICommand> ())                      {                          cmd.Run(v' tag' formattedMessage);                      }                  }              }
Magic Number,Nancy.Scaffolding,HtmlTagsExtensions,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\HtmlTagsExtensions.cs,FillValidation,The following statement contains a magic number: foreach (var v in r.Validators)              {                  var message = v.ErrorMessageSource;                  var messageFormatter = new MessageFormatter();                  messageFormatter.AppendPropertyName(r.DisplayName.GetString());                  var formattedMessage = messageFormatter.BuildMessage(message.GetString());                  if (v is NotEmptyValidator)                  {                      tag.Data("val-required"' formattedMessage);                  }                  else if (v is EmailValidator)                  {                      tag.Data("val-email"' formattedMessage);                  }                  else if (v is InclusiveBetweenValidator)                  {                      var ibv = v as InclusiveBetweenValidator;                      if (r.TypeToValidate == typeof(DateTime))                      {                          tag.Data("val-daterange"' formattedMessage);                          tag.Data("val-daterange-min"' ((DateTime)ibv.From).ToShortDateString());                          tag.Data("val-daterange-max"' ((DateTime)ibv.To).ToShortDateString());                      }                      else                      {                          tag.Data("val-range"' formattedMessage);                          tag.Data("val-range-min"' ibv.From);                          tag.Data("val-range-max"' ibv.To);                      }                  }                  else if (v is RegularExpressionWithMaskValidator)                  {                      tag.Data("val-regexwithmask"' formattedMessage);                      tag.Data("val-regexwithmask-pattern"' (v as RegularExpressionWithMaskValidator).Expression);                      tag.Data("val-regexwithmask-mask"' (v as RegularExpressionWithMaskValidator).Mask);                      tag.Data("mask"' (v as RegularExpressionWithMaskValidator).Mask);                  }                  else if (v is RegularExpressionValidator)                  {                      tag.Data("val-regex"' formattedMessage);                      tag.Data("val-regex-pattern"' (v as RegularExpressionValidator).Expression);                  }                  else if (v is LengthValidator)                  {                      var lv = v as LengthValidator;                      var length = lv.Max > 30 ? 30 : lv.Max;                      tag.Style("width"' length + "em");                      tag.Attr("maxlength"' lv.Max);                      tag.Data("val-length"' formattedMessage                                  .Replace("PropertyName"' "0")                                  .Replace("MinLength"' "1")                                  .Replace("MaxLength"' "2")                                  .Replace("TotalLength"' "3")                      );                      tag.Data("val-length-max"' lv.Max);                      tag.Data("val-length-min"' lv.Min);                  }                  else if (v is RemoteValidator)                  {                      var rv = v as RemoteValidator;                      tag.Data("val-remote"' formattedMessage);                      tag.Data("val-remote-additionalfields"' rv.AdditionalFields);                      tag.Data("val-remote-type"' rv.HttpMethod);                      tag.Data("val-remote-url"' rv.Action);                  }                  else                  {                      foreach (ICommand cmd in AddinManager.GetExtensionObjects<ICommand> ())                      {                          cmd.Run(v' tag' formattedMessage);                      }                  }              }
Missing Default,Nancy.Scaffolding,VisibilityConfig,C:\repos\GestUAB_GestUAB\src\Nancy.Scaffolding\VisibilityConfig.cs,GetFromFormAction,The following switch statement is missing a default case: switch (formAction)              {                  case FormAction.Create:                      return Create;                  case FormAction.Delete:                      return Delete;                  case FormAction.Read:                      return Read;                  case FormAction.Update:                      return Update;              }
