Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExcelDna.IntelliSense,ExcelToolTipWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\ExcelToolTipWatcher.cs,_windowWatcher_ExcelToolTipWindowChanged,Cyclomatic complexity of the method is 14
Complex Method,ExcelDna.IntelliSense,FormulaEditWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,_windowWatcher_FormulaBarWindowChanged,Cyclomatic complexity of the method is 24
Complex Method,ExcelDna.IntelliSense,FormulaEditWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,_windowWatcher_InCellEditWindowChanged,Cyclomatic complexity of the method is 24
Complex Method,ExcelDna.IntelliSense,FormulaEditWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,UpdateEditState,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.IntelliSense,FormulaEditWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,OnStateChanged,Cyclomatic complexity of the method is 11
Complex Method,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,StateUpdate,Cyclomatic complexity of the method is 48
Complex Method,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,GetFunctionIntelliSense,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.IntelliSense,PopupListWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\PopupListWatcher.cs,_windowWatcher_PopupListWindowChanged,Cyclomatic complexity of the method is 27
Complex Method,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,WndProc,Cyclomatic complexity of the method is 12
Complex Method,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,Cyclomatic complexity of the method is 12
Complex Method,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,Cyclomatic complexity of the method is 16
Long Parameter List,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ShowToolTip,The method has 6 parameters.
Long Parameter List,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,DrawString,The method has 7 parameters.
Long Parameter List,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,CreateRoundRectRgn,The method has 6 parameters.
Long Parameter List,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,MoveWindow,The method has 6 parameters.
Long Parameter List,ExcelDna.IntelliSense,WinEventHook,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,SetWinEventHook,The method has 7 parameters.
Long Parameter List,ExcelDna.IntelliSense,WinEventHook,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,HandleWinEvent,The method has 7 parameters.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The length of the statement  "				_argumentsToolTip.ShowToolTip (infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset); " is 138.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The length of the statement  "			}' linePrefix: null' left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left); " is 170.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListMove,The length of the statement  "	_descriptionToolTip.MoveToolTip (left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left); " is 182.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,IsDisabled,The length of the statement  "	var isDisabled = IsVersionMatch (thisVersion' machineDisabled) || IsVersionMatch (thisVersion' userDisabled) || IsVersionMatch (thisVersion' environmentDisabled); " is 162.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,ActivateServer,The length of the statement  "		var result = ExcelDna.Integration.XlCall.Excel (ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName ()' ControlMessageActivate); " is 148.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,DeactivateServer,The length of the statement  "		var result = ExcelDna.Integration.XlCall.Excel (ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName ()' ControlMessageDeactivate); " is 150.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,RefreshServer,The length of the statement  "		var result = ExcelDna.Integration.XlCall.Excel (ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName ()' ControlMessageRefresh); " is 147.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,RegisterControlMacro,The length of the statement  "	var method = typeof(IntelliSenseServer).GetMethod (nameof (IntelliSenseServerControl)' BindingFlags.Static | BindingFlags.NonPublic); " is 133.
Long Statement,ExcelDna.IntelliSense,PopupListWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\PopupListWatcher.cs,InstallEventHandlers,The length of the statement  "		_selectionChangeHook = new WinEventHook (WinEventHook.WinEvent.EVENT_OBJECT_SELECTION' WinEventHook.WinEvent.EVENT_OBJECT_SELECTION' _syncContextAuto' hwndListView); " is 165.
Long Statement,ExcelDna.IntelliSense,UIMonitor,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_popupListWatcher_SelectedItemChanged,The length of the statement  "		var newState = ((UIState.FunctionList)CurrentState).WithSelectedItem (_popupListWatcher.SelectedItemText' _popupListWatcher.SelectedItemBounds' _popupListWatcher.ListBounds); " is 174.
Long Statement,ExcelDna.IntelliSense,UIMonitor,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_formulaEditWatcher_StateChanged,The length of the statement  "			//                    var newState = ((UIState.FunctionList)CurrentState).WithBounds(_formulaEditWatcher.EditWindowBounds); " is 123.
Long Statement,ExcelDna.IntelliSense,UIMonitor,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_excelToolTipWatcher_ToolTipChanged,The length of the statement  "	// This allows the FormulaEdit or transitions to pick it up' hopefully not getting confused with the FunctionList tooltip " is 121.
Long Statement,ExcelDna.IntelliSense,UIMonitor,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,OnStateChanged,The length of the statement  "	// Debug.Print($"NEWSTATE: {newStateOrNull.ToString()} // {(newStateOrNull is UIState.Ready ? Environment.StackTrace : string.Empty)}"); " is 136.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "		PopupListWindowChanged.Invoke (this' new WindowChangedEventArgs (_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 175.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "		InCellEditWindowChanged.Invoke (this' new WindowChangedEventArgs (_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 176.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "		FormulaBarWindowChanged.Invoke (this' new WindowChangedEventArgs (_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 176.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "	//    // Debug.Print($"SelectDataSource {_selectDataSourceClass} Window update: {e.WindowHandle:X}' EventType: {e.EventType}' idChild: {e.ChildId}"); " is 149.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "	//        SelectDataSourceWindowChanged?.Invoke(this' new WindowChangedEventArgs { Type = WindowChangedEventArgs.ChangeType.Hide }); " is 132.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "	//        SelectDataSourceWindowChanged?.Invoke(this' new WindowChangedEventArgs { Type = WindowChangedEventArgs.ChangeType.Destroy }); " is 135.
Long Statement,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The length of the statement  "	var selectedItemIndex = (int)SendMessage (hwndList' WM.LVM_GETNEXTITEM' new IntPtr (-1)' new IntPtr ((int)WM.LVNI_SELECTED)); " is 125.
Long Statement,ExcelDna.IntelliSense,WinEventHook,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,HandleWinEvent,The length of the statement  "		_syncContextAuto.Post (OnWinEventReceived' new WinEventArgs (eventType' hWnd' idObject' idChild' dwEventThread' dwmsEventTime)); " is 128.
Long Statement,ExcelDna.IntelliSense,WinEventHook,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,IsSupportedWinEvent,The length of the statement  "	return winEvent == WinEvent.EVENT_OBJECT_CREATE || winEvent == WinEvent.EVENT_OBJECT_DESTROY || winEvent == WinEvent.EVENT_OBJECT_SHOW || winEvent == WinEvent.EVENT_OBJECT_HIDE || winEvent == WinEvent.EVENT_OBJECT_FOCUS || winEvent == WinEvent.EVENT_OBJECT_LOCATIONCHANGE || // Only for the on-demand hook " is 305.
Long Statement,ExcelDna.IntelliSense,XlCall,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\XlCall.cs,GetFormulaEditPrefix,The length of the statement  "		//    fmlaInfo.wPointMode' Marshal.PtrToStringUni(fmlaInfo.lpch' fmlaInfo.cch)' fmlaInfo.ichFirst' fmlaInfo.ichLast' fmlaInfo.ichCaret); " is 136.
Complex Conditional,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ShowToolTip,The conditional expression  "left != _showLeft || top != _showTop || topOffset != _topOffset || listLeft != _listLeft"  is complex.
Complex Conditional,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,MouseMoved,The conditional expression  "(inLink && !_linkActive) || (!inLink && _linkActive)"  is complex.
Magic Number,ExcelDna.IntelliSense,FormulaParser,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaParser.cs,TryGetFormulaInfo,The following statement contains a magic number: if (formulaPrefix.Count (c => c == '\"') % 2 != 0) {  	formulaPrefix = string.Concat (formulaPrefix' '\"');  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel (XlCallInt.xlfGetWorkspace' out result' 37) == XlCallInt.XlReturn.XlReturnSuccess) {  	object['] options = result as object['];  	if (options != null) {  		listSeparator = (string)options [0' 4];  		Logger.Initialization.Verbose ();  	}  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel (XlCallInt.xlfGetWorkspace' out result' 37) == XlCallInt.XlReturn.XlReturnSuccess) {  	object['] options = result as object['];  	if (options != null) {  		listSeparator = (string)options [0' 4];  		Logger.Initialization.Verbose ();  	}  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (options != null) {  	listSeparator = (string)options [0' 4];  	Logger.Initialization.Verbose ();  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: listSeparator = (string)options [0' 4];  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel (XlCallInt.xlfGetWorkspace' out result' 56) == XlCallInt.XlReturn.XlReturnSuccess) {  	// Standard Font Name  	standardFontName = (string)result;  	Logger.Initialization.Verbose ();  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel (XlCallInt.xlfGetWorkspace' out result' 57) == XlCallInt.XlReturn.XlReturnSuccess) {  	// Standard Font Size  	standardFontSize = (double)result;  	Logger.Initialization.Verbose ();  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditMove,The following statement contains a magic number: _argumentsToolTip.MoveToolTip ((int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The following statement contains a magic number: if (FormulaParser.TryGetFormulaInfo (formulaPrefix' out functionName' out currentArgIndex)) {  	FunctionInfo functionInfo;  	if (_functionInfoMap.TryGetValue (functionName' out functionInfo)) {  		var lineBeforeFunctionName = FormulaParser.GetLineBeforeFunctionName (formulaPrefix' functionName);  		// We have a function name and we want to show info  		if (_argumentsToolTip != null) {  			// NOTE: Hiding or moving just once doesn't help - the tooltip pops up in its original place again  			// TODO: Try to move it off-screen' behind or make invisible  			//if (!_argumentsToolTip.Visible)  			//{  			//    // Fiddle a bit with the ExcelToolTip if it is already visible when we first show our FunctionEdit ToolTip  			//    // At other times' the explicit UI update should catch and hide as appropriate  			//    if (excelToolTipWindow != IntPtr.Zero)  			//    {  			//        Win32Helper.HideWindow(excelToolTipWindow);  			//    }  			//}  			int topOffset = GetTopOffset (excelToolTipWindow);  			FormattedText infoText = GetFunctionIntelliSense (functionInfo' currentArgIndex);  			_argumentsToolTip.ShowToolTip (infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  		} else {  			Logger.Display.Warn ("FormulaEditTextChange with no arguments tooltip !?");  		}  		return;  	}  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The following statement contains a magic number: if (_functionInfoMap.TryGetValue (functionName' out functionInfo)) {  	var lineBeforeFunctionName = FormulaParser.GetLineBeforeFunctionName (formulaPrefix' functionName);  	// We have a function name and we want to show info  	if (_argumentsToolTip != null) {  		// NOTE: Hiding or moving just once doesn't help - the tooltip pops up in its original place again  		// TODO: Try to move it off-screen' behind or make invisible  		//if (!_argumentsToolTip.Visible)  		//{  		//    // Fiddle a bit with the ExcelToolTip if it is already visible when we first show our FunctionEdit ToolTip  		//    // At other times' the explicit UI update should catch and hide as appropriate  		//    if (excelToolTipWindow != IntPtr.Zero)  		//    {  		//        Win32Helper.HideWindow(excelToolTipWindow);  		//    }  		//}  		int topOffset = GetTopOffset (excelToolTipWindow);  		FormattedText infoText = GetFunctionIntelliSense (functionInfo' currentArgIndex);  		_argumentsToolTip.ShowToolTip (infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  	} else {  		Logger.Display.Warn ("FormulaEditTextChange with no arguments tooltip !?");  	}  	return;  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The following statement contains a magic number: if (_argumentsToolTip != null) {  	// NOTE: Hiding or moving just once doesn't help - the tooltip pops up in its original place again  	// TODO: Try to move it off-screen' behind or make invisible  	//if (!_argumentsToolTip.Visible)  	//{  	//    // Fiddle a bit with the ExcelToolTip if it is already visible when we first show our FunctionEdit ToolTip  	//    // At other times' the explicit UI update should catch and hide as appropriate  	//    if (excelToolTipWindow != IntPtr.Zero)  	//    {  	//        Win32Helper.HideWindow(excelToolTipWindow);  	//    }  	//}  	int topOffset = GetTopOffset (excelToolTipWindow);  	FormattedText infoText = GetFunctionIntelliSense (functionInfo' currentArgIndex);  	_argumentsToolTip.ShowToolTip (infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  } else {  	Logger.Display.Warn ("FormulaEditTextChange with no arguments tooltip !?");  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The following statement contains a magic number: _argumentsToolTip.ShowToolTip (infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,GetTopOffset,The following statement contains a magic number: return (excelToolTipWindow == IntPtr.Zero) ? 0 : 18;  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditExcelToolTipShow,The following statement contains a magic number: if (_argumentsToolTip != null && _argumentsToolTip.Visible) {  	int topOffset = GetTopOffset (excelToolTipWindow);  	_argumentsToolTip.MoveToolTip ((int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditExcelToolTipShow,The following statement contains a magic number: _argumentsToolTip.MoveToolTip ((int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The following statement contains a magic number: if (!string.IsNullOrEmpty (selectedItemText) && _functionInfoMap.TryGetValue (selectedItemText' out functionInfo)) {  	// It's ours!  	var descriptionLines = GetFunctionDescriptionOrNull (functionInfo);  	if (descriptionLines != null) {  		_descriptionToolTip.ShowToolTip (text: new FormattedText {  			GetFunctionDescriptionOrNull (functionInfo)  		}' linePrefix: null' left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left);  		return;  	}  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The following statement contains a magic number: if (descriptionLines != null) {  	_descriptionToolTip.ShowToolTip (text: new FormattedText {  		GetFunctionDescriptionOrNull (functionInfo)  	}' linePrefix: null' left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left);  	return;  }  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The following statement contains a magic number: _descriptionToolTip.ShowToolTip (text: new FormattedText {  	GetFunctionDescriptionOrNull (functionInfo)  }' linePrefix: null' left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListMove,The following statement contains a magic number: _descriptionToolTip.MoveToolTip (left: (int)listBounds.Right + DescriptionLeftMargin' top: (int)selectedItemBounds.Bottom - 18' topOffset: 0' listLeft: (int)selectedItemBounds.Left);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FixHelpTopic,The following statement contains a magic number: if (helpTopic != null && helpTopic.EndsWith ("!0"))  	return helpTopic.Substring (0' helpTopic.Length - 2);  
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FixHelpTopic,The following statement contains a magic number: return helpTopic.Substring (0' helpTopic.Length - 2);  
Magic Number,ExcelDna.IntelliSense,FunctionInfo,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\IIntelliSenseProvider.cs,ExpandHelpTopic,The following statement contains a magic number: if (helpTopic.StartsWith ("http://") || helpTopic.StartsWith ("https://") || helpTopic.StartsWith ("file://")) {  	if (helpTopic.EndsWith ("!0")) {  		helpTopic = helpTopic.Substring (0' helpTopic.Length - 2);  	}  } else if (!Path.IsPathRooted (helpTopic)) {  	helpTopic = Path.Combine (path' helpTopic);  }  
Magic Number,ExcelDna.IntelliSense,FunctionInfo,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\IIntelliSenseProvider.cs,ExpandHelpTopic,The following statement contains a magic number: if (helpTopic.EndsWith ("!0")) {  	helpTopic = helpTopic.Substring (0' helpTopic.Length - 2);  }  
Magic Number,ExcelDna.IntelliSense,FunctionInfo,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\IIntelliSenseProvider.cs,ExpandHelpTopic,The following statement contains a magic number: helpTopic = helpTopic.Substring (0' helpTopic.Length - 2);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font> {  	{  		FontStyle.Regular'  		new Font ("Segoe UI"' 9' FontStyle.Regular)  	}'  	{  		FontStyle.Bold'  		new Font ("Segoe UI"' 9' FontStyle.Bold)  	}'  	{  		FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Italic)  	}'  	{  		FontStyle.Underline'  		new Font ("Segoe UI"' 9' FontStyle.Underline)  	}'  	{  		FontStyle.Bold | FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic)  	}'  };  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font> {  	{  		FontStyle.Regular'  		new Font ("Segoe UI"' 9' FontStyle.Regular)  	}'  	{  		FontStyle.Bold'  		new Font ("Segoe UI"' 9' FontStyle.Bold)  	}'  	{  		FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Italic)  	}'  	{  		FontStyle.Underline'  		new Font ("Segoe UI"' 9' FontStyle.Underline)  	}'  	{  		FontStyle.Bold | FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic)  	}'  };  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font> {  	{  		FontStyle.Regular'  		new Font ("Segoe UI"' 9' FontStyle.Regular)  	}'  	{  		FontStyle.Bold'  		new Font ("Segoe UI"' 9' FontStyle.Bold)  	}'  	{  		FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Italic)  	}'  	{  		FontStyle.Underline'  		new Font ("Segoe UI"' 9' FontStyle.Underline)  	}'  	{  		FontStyle.Bold | FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic)  	}'  };  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font> {  	{  		FontStyle.Regular'  		new Font ("Segoe UI"' 9' FontStyle.Regular)  	}'  	{  		FontStyle.Bold'  		new Font ("Segoe UI"' 9' FontStyle.Bold)  	}'  	{  		FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Italic)  	}'  	{  		FontStyle.Underline'  		new Font ("Segoe UI"' 9' FontStyle.Underline)  	}'  	{  		FontStyle.Bold | FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic)  	}'  };  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font> {  	{  		FontStyle.Regular'  		new Font ("Segoe UI"' 9' FontStyle.Regular)  	}'  	{  		FontStyle.Bold'  		new Font ("Segoe UI"' 9' FontStyle.Bold)  	}'  	{  		FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Italic)  	}'  	{  		FontStyle.Underline'  		new Font ("Segoe UI"' 9' FontStyle.Underline)  	}'  	{  		FontStyle.Bold | FontStyle.Italic'  		new Font ("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic)  	}'  };  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush (Color.FromArgb (52' 52' 52));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush (Color.FromArgb (52' 52' 52));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush (Color.FromArgb (52' 52' 52));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen (Color.FromArgb (195' 195' 195));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen (Color.FromArgb (195' 195' 195));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen (Color.FromArgb (195' 195' 195));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen (Color.FromArgb (225' 225' 225));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen (Color.FromArgb (225' 225' 225));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen (Color.FromArgb (225' 225' 225));  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The following statement contains a magic number: try {  	if (address.StartsWith ("http"' StringComparison.OrdinalIgnoreCase)) {  		Process.Start (address);  	} else {  		var parts = address.Split ('!');  		if (parts.Length == 2) {  			// (This is the expected case)  			// Assume we have a filename!topicid  			var fileName = parts [0];  			var topicId = parts [1];  			if (File.Exists (fileName)) {  				Help.ShowHelp (null' fileName' HelpNavigator.TopicId' topicId);  			} else {  				MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  		} else {  			// Just show the file ...?  			if (File.Exists (address)) {  				Help.ShowHelp (null' address' HelpNavigator.TableOfContents);  			} else {  				MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	// NOTE: In this case' the Excel process does not quit after closing Excel...  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The following statement contains a magic number: if (address.StartsWith ("http"' StringComparison.OrdinalIgnoreCase)) {  	Process.Start (address);  } else {  	var parts = address.Split ('!');  	if (parts.Length == 2) {  		// (This is the expected case)  		// Assume we have a filename!topicid  		var fileName = parts [0];  		var topicId = parts [1];  		if (File.Exists (fileName)) {  			Help.ShowHelp (null' fileName' HelpNavigator.TopicId' topicId);  		} else {  			MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	} else {  		// Just show the file ...?  		if (File.Exists (address)) {  			Help.ShowHelp (null' address' HelpNavigator.TableOfContents);  		} else {  			MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The following statement contains a magic number: if (parts.Length == 2) {  	// (This is the expected case)  	// Assume we have a filename!topicid  	var fileName = parts [0];  	var topicId = parts [1];  	if (File.Exists (fileName)) {  		Help.ShowHelp (null' fileName' HelpNavigator.TopicId' topicId);  	} else {  		MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  } else {  	// Just show the file ...?  	if (File.Exists (address)) {  		Help.ShowHelp (null' address' HelpNavigator.TableOfContents);  	} else {  		MessageBox.Show ("IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format = (StringFormat)StringFormat.GenericTypographic.Clone ()) {  	int layoutLeft = ClientRectangle.Location.X + leftPadding;  	int layoutTop = ClientRectangle.Location.Y;  	Rectangle layoutRect = new Rectangle (layoutLeft' layoutTop - 1' 1000' 500);  	format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	Size textSize;  	foreach (var line in _text) {  		totalHeight += linePadding;  		int lineHeight = 16;  		foreach (var run in line) {  			// We support only a single link' for now  			Font font;  			Brush brush;  			if (run.IsLink && _linkActive) {  				font = _fonts [FontStyle.Underline];  				brush = _linkBrush;  			} else {  				font = _fonts [run.Style];  				brush = _textBrush;  			}  			// TODO: Empty strings are a problem....  			var text = run.Text == "" ? " " : run.Text;  			DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  			if (run.IsLink) {  				_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  				_linkAddress = run.LinkAddress;  			}  			totalWidth += textSize.Width;  			lineHeight = Math.Max (lineHeight' textSize.Height);  			// Pad by one extra pixel between runs' until we figure out kerning between runs  			layoutRect.X += 1;  			totalWidth += 1;  		}  		lineWidths.Add (totalWidth);  		totalWidth = 0;  		totalHeight += lineHeight;  		layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format = (StringFormat)StringFormat.GenericTypographic.Clone ()) {  	int layoutLeft = ClientRectangle.Location.X + leftPadding;  	int layoutTop = ClientRectangle.Location.Y;  	Rectangle layoutRect = new Rectangle (layoutLeft' layoutTop - 1' 1000' 500);  	format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	Size textSize;  	foreach (var line in _text) {  		totalHeight += linePadding;  		int lineHeight = 16;  		foreach (var run in line) {  			// We support only a single link' for now  			Font font;  			Brush brush;  			if (run.IsLink && _linkActive) {  				font = _fonts [FontStyle.Underline];  				brush = _linkBrush;  			} else {  				font = _fonts [run.Style];  				brush = _textBrush;  			}  			// TODO: Empty strings are a problem....  			var text = run.Text == "" ? " " : run.Text;  			DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  			if (run.IsLink) {  				_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  				_linkAddress = run.LinkAddress;  			}  			totalWidth += textSize.Width;  			lineHeight = Math.Max (lineHeight' textSize.Height);  			// Pad by one extra pixel between runs' until we figure out kerning between runs  			layoutRect.X += 1;  			totalWidth += 1;  		}  		lineWidths.Add (totalWidth);  		totalWidth = 0;  		totalHeight += lineHeight;  		layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format = (StringFormat)StringFormat.GenericTypographic.Clone ()) {  	int layoutLeft = ClientRectangle.Location.X + leftPadding;  	int layoutTop = ClientRectangle.Location.Y;  	Rectangle layoutRect = new Rectangle (layoutLeft' layoutTop - 1' 1000' 500);  	format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	Size textSize;  	foreach (var line in _text) {  		totalHeight += linePadding;  		int lineHeight = 16;  		foreach (var run in line) {  			// We support only a single link' for now  			Font font;  			Brush brush;  			if (run.IsLink && _linkActive) {  				font = _fonts [FontStyle.Underline];  				brush = _linkBrush;  			} else {  				font = _fonts [run.Style];  				brush = _textBrush;  			}  			// TODO: Empty strings are a problem....  			var text = run.Text == "" ? " " : run.Text;  			DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  			if (run.IsLink) {  				_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  				_linkAddress = run.LinkAddress;  			}  			totalWidth += textSize.Width;  			lineHeight = Math.Max (lineHeight' textSize.Height);  			// Pad by one extra pixel between runs' until we figure out kerning between runs  			layoutRect.X += 1;  			totalWidth += 1;  		}  		lineWidths.Add (totalWidth);  		totalWidth = 0;  		totalHeight += lineHeight;  		layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format = (StringFormat)StringFormat.GenericTypographic.Clone ()) {  	int layoutLeft = ClientRectangle.Location.X + leftPadding;  	int layoutTop = ClientRectangle.Location.Y;  	Rectangle layoutRect = new Rectangle (layoutLeft' layoutTop - 1' 1000' 500);  	format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	Size textSize;  	foreach (var line in _text) {  		totalHeight += linePadding;  		int lineHeight = 16;  		foreach (var run in line) {  			// We support only a single link' for now  			Font font;  			Brush brush;  			if (run.IsLink && _linkActive) {  				font = _fonts [FontStyle.Underline];  				brush = _linkBrush;  			} else {  				font = _fonts [run.Style];  				brush = _textBrush;  			}  			// TODO: Empty strings are a problem....  			var text = run.Text == "" ? " " : run.Text;  			DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  			if (run.IsLink) {  				_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  				_linkAddress = run.LinkAddress;  			}  			totalWidth += textSize.Width;  			lineHeight = Math.Max (lineHeight' textSize.Height);  			// Pad by one extra pixel between runs' until we figure out kerning between runs  			layoutRect.X += 1;  			totalWidth += 1;  		}  		lineWidths.Add (totalWidth);  		totalWidth = 0;  		totalHeight += lineHeight;  		layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format = (StringFormat)StringFormat.GenericTypographic.Clone ()) {  	int layoutLeft = ClientRectangle.Location.X + leftPadding;  	int layoutTop = ClientRectangle.Location.Y;  	Rectangle layoutRect = new Rectangle (layoutLeft' layoutTop - 1' 1000' 500);  	format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	Size textSize;  	foreach (var line in _text) {  		totalHeight += linePadding;  		int lineHeight = 16;  		foreach (var run in line) {  			// We support only a single link' for now  			Font font;  			Brush brush;  			if (run.IsLink && _linkActive) {  				font = _fonts [FontStyle.Underline];  				brush = _linkBrush;  			} else {  				font = _fonts [run.Style];  				brush = _textBrush;  			}  			// TODO: Empty strings are a problem....  			var text = run.Text == "" ? " " : run.Text;  			DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  			if (run.IsLink) {  				_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  				_linkAddress = run.LinkAddress;  			}  			totalWidth += textSize.Width;  			lineHeight = Math.Max (lineHeight' textSize.Height);  			// Pad by one extra pixel between runs' until we figure out kerning between runs  			layoutRect.X += 1;  			totalWidth += 1;  		}  		lineWidths.Add (totalWidth);  		totalWidth = 0;  		totalHeight += lineHeight;  		layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: foreach (var line in _text) {  	totalHeight += linePadding;  	int lineHeight = 16;  	foreach (var run in line) {  		// We support only a single link' for now  		Font font;  		Brush brush;  		if (run.IsLink && _linkActive) {  			font = _fonts [FontStyle.Underline];  			brush = _linkBrush;  		} else {  			font = _fonts [run.Style];  			brush = _textBrush;  		}  		// TODO: Empty strings are a problem....  		var text = run.Text == "" ? " " : run.Text;  		DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  		if (run.IsLink) {  			_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  			_linkAddress = run.LinkAddress;  		}  		totalWidth += textSize.Width;  		lineHeight = Math.Max (lineHeight' textSize.Height);  		// Pad by one extra pixel between runs' until we figure out kerning between runs  		layoutRect.X += 1;  		totalWidth += 1;  	}  	lineWidths.Add (totalWidth);  	totalWidth = 0;  	totalHeight += lineHeight;  	layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: foreach (var line in _text) {  	totalHeight += linePadding;  	int lineHeight = 16;  	foreach (var run in line) {  		// We support only a single link' for now  		Font font;  		Brush brush;  		if (run.IsLink && _linkActive) {  			font = _fonts [FontStyle.Underline];  			brush = _linkBrush;  		} else {  			font = _fonts [run.Style];  			brush = _textBrush;  		}  		// TODO: Empty strings are a problem....  		var text = run.Text == "" ? " " : run.Text;  		DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  		if (run.IsLink) {  			_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  			_linkAddress = run.LinkAddress;  		}  		totalWidth += textSize.Width;  		lineHeight = Math.Max (lineHeight' textSize.Height);  		// Pad by one extra pixel between runs' until we figure out kerning between runs  		layoutRect.X += 1;  		totalWidth += 1;  	}  	lineWidths.Add (totalWidth);  	totalWidth = 0;  	totalHeight += lineHeight;  	layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: foreach (var line in _text) {  	totalHeight += linePadding;  	int lineHeight = 16;  	foreach (var run in line) {  		// We support only a single link' for now  		Font font;  		Brush brush;  		if (run.IsLink && _linkActive) {  			font = _fonts [FontStyle.Underline];  			brush = _linkBrush;  		} else {  			font = _fonts [run.Style];  			brush = _textBrush;  		}  		// TODO: Empty strings are a problem....  		var text = run.Text == "" ? " " : run.Text;  		DrawString (e.Graphics' brush' ref layoutRect' out textSize' format' text' font);  		if (run.IsLink) {  			_linkClientRect = new Rectangle (layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);  			_linkAddress = run.LinkAddress;  		}  		totalWidth += textSize.Width;  		lineHeight = Math.Max (lineHeight' textSize.Height);  		// Pad by one extra pixel between runs' until we figure out kerning between runs  		layoutRect.X += 1;  		totalWidth += 1;  	}  	lineWidths.Add (totalWidth);  	totalWidth = 0;  	totalHeight += lineHeight;  	layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: layoutRect = new Rectangle (layoutLeft' layoutTop + totalHeight - 1' 1000' 500);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: DrawRoundedRectangle (e.Graphics' new RectangleF (0' 0' Width - 1' Height - 1)' 2' 2);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: DrawRoundedRectangle (e.Graphics' new RectangleF (0' 0' Width - 1' Height - 1)' 2' 2);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,UpdateLocation,The following statement contains a magic number: if (!tipFits && (_currentLeft == _showLeft && _currentTop == _showTop)) {  	// It doesn't fit and it's still where we initially tried to show it   	// (so it probably hasn't been moved).  	if (_listLeft == null) {  		// Not in list selection mode - probably FormulaEdit  		_currentLeft -= Math.Max (0' (_currentLeft + width) - workingArea.Right);  		// CONSIDER: Move up too???  	} else {  		const int leftPadding = 4;  		// Check if it fits on the left  		if (width < _listLeft.Value - leftPadding) {  			_currentLeft = _listLeft.Value - width - leftPadding;  		}  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,UpdateLocation,The following statement contains a magic number: if (_listLeft == null) {  	// Not in list selection mode - probably FormulaEdit  	_currentLeft -= Math.Max (0' (_currentLeft + width) - workingArea.Right);  	// CONSIDER: Move up too???  } else {  	const int leftPadding = 4;  	// Check if it fits on the left  	if (width < _listLeft.Value - leftPadding) {  		_currentLeft = _listLeft.Value - width - leftPadding;  	}  }  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (114' 20);  
Magic Number,ExcelDna.IntelliSense,ToolTipForm,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (114' 20);  
Magic Number,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: for (int i = 0; i < 512; ++i) {  	Marshal.WriteInt16 (nativeBuffer' i * 2' '\0');  }  
Magic Number,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: for (int i = 0; i < 512; ++i) {  	Marshal.WriteInt16 (nativeBuffer' i * 2' '\0');  }  
Magic Number,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: Marshal.WriteInt16 (nativeBuffer' i * 2' '\0');  
Magic Number,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: try {  	item.pszText = nativeBuffer;  	item.cchTextMax = 512;  	uint length = (uint)SendMessage (hwndList' WM.LVM_GETITEMTEXTW' new IntPtr (selectedItemIndex)' ref item);  	if (length > 0) {  		text = Marshal.PtrToStringUni (item.pszText' (int)length);  	} else {  		text = string.Empty;  	}  } finally {  	Marshal.FreeHGlobal (nativeBuffer);  }  
Magic Number,ExcelDna.IntelliSense,Win32Helper,F:\newReposMay17\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: item.cchTextMax = 512;  
