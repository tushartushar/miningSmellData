Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExcelDna.IntelliSense,UIState,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIState.cs,GetUpdates,The method has 111 lines of code.
Complex Method,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,GetFunctionIntelliSense,Cyclomatic complexity of the method is 8
Long Parameter List,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ShowToolTip,The method has 6 parameters. Parameters: text' linePrefix' left' top' topOffset' listLeft
Long Parameter List,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,DrawString,The method has 7 parameters. Parameters: g' brush' rect' used' format' text' font
Long Parameter List,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,CreateRoundRectRgn,The method has 6 parameters. Parameters: nLeftRect' nTopRect' nRightRect' nBottomRect' nWidthEllipse' nHeightEllipse
Long Parameter List,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,ExcelDna.IntelliSense,WinEventHook,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,SetWinEventHook,The method has 7 parameters. Parameters: eventMin' eventMax' hmodWinEventProc' lpfnWinEventProc' idProcess' idThread' dwFlags
Long Parameter List,ExcelDna.IntelliSense,WinEventHook,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,HandleWinEvent,The method has 7 parameters. Parameters: hWinEventHook' eventType' hWnd' idObject' idChild' dwEventThread' dwmsEventTime
Long Parameter List,ExcelDna.IntelliSense,WinEventArgs,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,WinEventArgs,The method has 6 parameters. Parameters: eventType' hWnd' idObject' idChild' dwEventThread' dwmsEventTime
Long Identifier,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,,The length of the parameter DisabledVersionsMachineKeyName is 30.
Long Statement,ExcelDna.IntelliSense,ExcelDnaIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,ProcessLoadNotification,The length of the statement  "                        //regInfo.Refresh();    // Rather not.... so that we don't even try during the AddIns enumeration... OnInvalidate will lead to Refresh() " is 136.
Long Statement,ExcelDna.IntelliSense,WorkbookIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,Initialize,The length of the statement  "                    if (addInName != null && Path.GetExtension(addInName) != ".xll")    // We don't actually expect the .xll add-ins here - and they're taken care of elsewhere " is 155.
Long Statement,ExcelDna.IntelliSense,XmlIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\XmlIntelliSenseProvider.cs,RegisterXmlFunctionInfo,The length of the statement  "            Logger.Provider.Verbose($"XmlIntelliSenseProvider.RegisterXmlFunctionInfo - Created XmlRegistrationInfo info for {fileName}"); " is 126.
Long Statement,ExcelDna.IntelliSense,XmlIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\XmlIntelliSenseProvider.cs,RegisterXmlFunctionInfo,The length of the statement  "                    Logger.Provider.Verbose($"XmlIntelliSenseProvider.RegisterXmlFunctionInfo - Posting OnInvalidate to Excel SyncContext"); " is 120.
Long Statement,ExcelDna.IntelliSense,XmlIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\XmlIntelliSenseProvider.cs,GetFunctionInfos,The length of the statement  "            Logger.Provider.Verbose($"XmlIntelliSenseProvider.GetFunctionInfos - Enter on Thread {Thread.CurrentThread.ManagedThreadId}"); " is 126.
Long Statement,ExcelDna.IntelliSense,XmlRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\XmlIntelliSenseProvider.cs,Refresh,The length of the statement  "                    Logger.Provider.Warn($"XmlIntelliSenseProvider - Loading IntelliSense from file {_fileName} failed:\r\n\t{ex.Message}"); " is 120.
Long Statement,ExcelDna.IntelliSense,FormulaEditWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,SetEditWindow,The length of the statement  "                    Logger.WindowWatcher.Info($"FormulaEdit SetEditWindow - Initialize {newWindowHandle}");    // Could be change of Excel window .... ? " is 132.
Long Statement,ExcelDna.IntelliSense,FormulaEditWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,UpdateEditState,The length of the statement  "            Logger.WindowWatcher.Verbose($"FormulaEdit UpdateEditState - Focus: {_formulaEditFocus} Window: {(_formulaEditFocus == FormulaEditFocus.FormulaBar ? _hwndFormulaBar : _hwndInCellEdit)}"); " is 187.
Long Statement,ExcelDna.IntelliSense,FormulaEditWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,UpdateEditState,The length of the statement  "                Logger.WindowWatcher.Verbose($"FormulaEdit UpdateEditState Formula editing: CurrentPrefix {CurrentPrefix}' EditWindowBounds: {EditWindowBounds}"); " is 146.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditStart,The length of the statement  "            Debug.Print($"IntelliSenseDisplay - FormulaEditStart - FormulaEditWindow: {_formulaEditWindow}' ArgumentsToolTip: {_argumentsToolTip}"); " is 136.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The length of the statement  "            Debug.Print($"^^^ FormulaEditStateChanged. CurrentPrefix: {formulaPrefix}' Thread {Thread.CurrentThread.ManagedThreadId}"); " is 123.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The length of the statement  "                            _argumentsToolTip.ShowToolTip(infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset); " is 137.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The length of the statement  "            Logger.Display.Verbose($"IntelliSenseDisplay - PopupListSelectedItemChanged - {selectedItemText} List/Item Bounds: {listBounds} / {selectedItemBounds}"); " is 153.
Long Statement,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,GetFunctionIntelliSense,The length of the statement  "            var nameLine = new TextLine { new TextRun { Text = functionInfo.Name' LinkAddress = FixHelpTopic(functionInfo.HelpTopic) } }; " is 125.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,Register,The length of the statement  "            Logger.Initialization.Info($"IntelliSenseServer.Register Begin: Version {ServerVersion} in {AppDomain.CurrentDomain.FriendlyName}"); " is 132.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,IsDisabled,The length of the statement  "                Logger.Initialization.Info($"IntelliSenseServer version {thisVersion} is disabled. MachineDisabled: {machineDisabled}' UserDisabled: {userDisabled}' EnvironmentDisabled: {environmentDisabled}"); " is 194.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,ActivateServer,The length of the statement  "                var result = ExcelDna.Integration.XlCall.Excel(ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName()' ControlMessageActivate); " is 146.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,ActivateServer,The length of the statement  "                Logger.Initialization.Error(ex' $"IntelliSenseServer {registrationInfo.ToRegistrationString()} could not be activated."); " is 121.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,DeactivateServer,The length of the statement  "                var result = ExcelDna.Integration.XlCall.Excel(ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName()' ControlMessageDeactivate); " is 148.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,DeactivateServer,The length of the statement  "                Logger.Initialization.Error(ex' $"IntelliSenseServer Deactivate call for {registrationInfo.ToRegistrationString()} failed."); " is 125.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,RefreshServer,The length of the statement  "                var result = ExcelDna.Integration.XlCall.Excel(ExcelDna.Integration.XlCall.xlUDF' registrationInfo.GetControlMacroName()' ControlMessageRefresh); " is 145.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,RefreshServer,The length of the statement  "                Logger.Initialization.Error(ex' $"IntelliSenseServer Deactivate call for {registrationInfo.ToRegistrationString()} failed."); " is 125.
Long Statement,ExcelDna.IntelliSense,IntelliSenseServer,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,RegisterControlMacro,The length of the statement  "            var method = typeof(IntelliSenseServer).GetMethod(nameof(IntelliSenseServerControl)' BindingFlags.Static | BindingFlags.NonPublic); " is 131.
Long Statement,ExcelDna.IntelliSense,PopupListWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\PopupListWatcher.cs,InstallEventHandlers,The length of the statement  "                _selectionChangeHook = new WinEventHook(WinEventHook.WinEvent.EVENT_OBJECT_SELECTION' WinEventHook.WinEvent.EVENT_OBJECT_SELECTION' _syncContextAuto' hwndListView); " is 164.
Long Statement,ExcelDna.IntelliSense,PopupListWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\PopupListWatcher.cs,_selectionChangeHook_WinEventReceived,The length of the statement  "            Logger.WindowWatcher.Verbose($"PopupList PopupListElementSelectedHandler on thread {Thread.CurrentThread.ManagedThreadId}"); " is 124.
Long Statement,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The length of the statement  "                            MessageBox.Show($"The help link could not be activated:\r\n\r\nThe file {fileName} could not be located."' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 180.
Long Statement,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The length of the statement  "                            MessageBox.Show($"The help link could not be activated:\r\n\r\nThe file {address} could not be located."' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 179.
Long Statement,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The length of the statement  "                MessageBox.Show($"The help link could not be activated:\r\n\r\n{ex.Message}"' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 151.
Long Statement,ExcelDna.IntelliSense,UIMonitor,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_formulaEditWatcher_StateChanged,The length of the statement  "            Logger.Monitor.Verbose($"!> FormulaEdit StateChanged ({args.StateChangeType}) - Thread {Thread.CurrentThread.ManagedThreadId}"); " is 128.
Long Statement,ExcelDna.IntelliSense,UIMonitor,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_formulaEditWatcher_StateChanged,The length of the statement  "//                    var newState = ((UIState.FunctionList)CurrentState).WithBounds(_formulaEditWatcher.EditWindowBounds); " is 123.
Long Statement,ExcelDna.IntelliSense,UIMonitor,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,_excelToolTipWatcher_ToolTipChanged,The length of the statement  "            // This allows the FormulaEdit or transitions to pick it up' hopefully not getting confused with the FunctionList tooltip " is 121.
Long Statement,ExcelDna.IntelliSense,UIMonitor,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,ReadCurrentState,The length of the statement  "                    ExcelToolTipWindow = _lastExcelToolTipShown // We also keep track here' since we'll by inferring the UIState change list using this too " is 135.
Long Statement,ExcelDna.IntelliSense,UIMonitor,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIMonitor.cs,OnStateChanged,The length of the statement  "            // Debug.Print($"NEWSTATE: {newStateOrNull.ToString()} // {(newStateOrNull is UIState.Ready ? Environment.StackTrace : string.Empty)}"); " is 136.
Long Statement,ExcelDna.IntelliSense,UIState,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIState.cs,ToString,The length of the statement  "                return $"{GetType().Name}{((this is Ready) ? "" : "\r\n")}{string.Join("\r\n"' GetType().GetFields().Select(fld => $"\t{fld.Name}: {fld.GetValue(this)}"))}"; " is 157.
Long Statement,ExcelDna.IntelliSense,UIState,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\UIState.cs,LogString,The length of the statement  "                return $"{GetType().Name}{((this is Ready) ? "" : "\t")}{string.Join("\t"' GetType().GetFields().Select(fld => $"\t{fld.Name}: {fld.GetValue(this)}"))}"; " is 153.
Long Statement,ExcelDna.IntelliSense,WindowLocationWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowLocationWatcher.cs,_windowLocationChangeHook_WinEventReceived,The length of the statement  "            Logger.WinEvents.Verbose($"{winEventArgs.EventType} - Window {winEventArgs.WindowHandle:X} ({Win32Helper.GetClassName(winEventArgs.WindowHandle)} - Object/Child {winEventArgs.ObjectId} / {winEventArgs.ChildId} - Thread {winEventArgs.EventThreadId} at {winEventArgs.EventTimeMs}"); " is 280.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "                Debug.Assert(_focusedWindowClassName == windowClassName);   // I've seen this' with _focusedWindowClassName == "" and windowClassName == "EXCEL7". " is 146.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "                    PopupListWindowChanged?.Invoke(this' new WindowChangedEventArgs(_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 174.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "                    InCellEditWindowChanged?.Invoke(this' new WindowChangedEventArgs(_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 175.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,UpdateFocus,The length of the statement  "                    FormulaBarWindowChanged?.Invoke(this' new WindowChangedEventArgs(_focusedWindowHandle' WindowChangedEventArgs.ChangeType.Unfocus' WindowChangedEventArgs.ChangeObjectId.Self)); " is 175.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "                //    // Debug.Print($"SelectDataSource {_selectDataSourceClass} Window update: {e.WindowHandle:X}' EventType: {e.EventType}' idChild: {e.ChildId}"); " is 149.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "                //        SelectDataSourceWindowChanged?.Invoke(this' new WindowChangedEventArgs { Type = WindowChangedEventArgs.ChangeType.Hide }); " is 132.
Long Statement,ExcelDna.IntelliSense,WindowWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WindowWatcher.cs,_windowStateChangeHook_WinEventReceived,The length of the statement  "                //        SelectDataSourceWindowChanged?.Invoke(this' new WindowChangedEventArgs { Type = WindowChangedEventArgs.ChangeType.Destroy }); " is 135.
Long Statement,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The length of the statement  "            var selectedItemIndex = (int)SendMessage(hwndList' WM.LVM_GETNEXTITEM' new IntPtr(-1)' new IntPtr((int)WM.LVNI_SELECTED)); " is 122.
Long Statement,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The length of the statement  "            IntPtr nativeBuffer = Marshal.AllocHGlobal(512 * 2);    // There might be a more elegant way to do this' sith a StringBuilder or something... " is 141.
Long Statement,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The length of the statement  "            Debug.Print($"#### >>> {selectedItemIndex} / {ok} / ({rect.Left}' {rect.Top}' {rect.Right}' {rect.Bottom}) / {bounds}"); " is 120.
Long Statement,ExcelDna.IntelliSense,LoaderNotification,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\LoaderNotification.cs,Notification,The length of the statement  "                IntPtr pFullDllName = Marshal.ReadIntPtr(pNotificationData' IntPtr.Size); // The offset is determined by the natural size for the struct packing " is 144.
Long Statement,ExcelDna.IntelliSense,UnicodeString,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\LoaderNotification.cs,ToString,The length of the statement  "                IntPtr buffer = Marshal.ReadIntPtr(pUnicodeString' IntPtr.Size);  // The offset is determined by the natural size for the struct packing " is 136.
Long Statement,ExcelDna.IntelliSense,WinEventHook,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,HandleWinEvent,The length of the statement  "                _syncContextAuto.Post(OnWinEventReceived' new WinEventArgs(eventType' hWnd' idObject' idChild' dwEventThread' dwmsEventTime)); " is 126.
Long Statement,ExcelDna.IntelliSense,WinEventHook,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\WinEvents.cs,OnWinEventReceived,The length of the statement  "            Logger.WinEvents.Verbose($"{winEventArgs.EventType} - Window {winEventArgs.WindowHandle:X} ({Win32Helper.GetClassName(winEventArgs.WindowHandle)} - Object/Child {winEventArgs.ObjectId} / {winEventArgs.ChildId} - Thread {winEventArgs.EventThreadId} at {winEventArgs.EventTimeMs}"); " is 280.
Long Statement,ExcelDna.IntelliSense,XlCall,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\XlCall.cs,GetFormulaEditPrefix,The length of the statement  "                //    fmlaInfo.wPointMode' Marshal.PtrToStringUni(fmlaInfo.lpch' fmlaInfo.cch)' fmlaInfo.ichFirst' fmlaInfo.ichLast' fmlaInfo.ichCaret); " is 136.
Long Statement,ExcelDna.IntelliSense,XlCall,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\XlCall.cs,GetFormulaEditPrefix,The length of the statement  "                var prefixLen = Math.Min(Math.Max(fmlaInfo.ichCaret' fmlaInfo.ichLast)' fmlaInfo.cch);  // I've never seen ichLast > cch !? " is 123.
Complex Conditional,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ShowToolTip,The conditional expression  "left != _showLeft || top != _showTop || topOffset != _topOffset || listLeft != _listLeft"  is complex.
Complex Conditional,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,MouseMoved,The conditional expression  "(inLink && !_linkActive) ||                  (!inLink && _linkActive)"  is complex.
Magic Number,ExcelDna.IntelliSense,XllRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 0; i < regInfoCount; i++)                  {                      if (regInfo[i' 0] is ExcelEmpty)                      {                          string functionName = regInfo[i' 3] as string;                          string helpTopic = regInfo[i' 8] as string;                          string description = regInfo[i' 9] as string;                            string argumentStr = regInfo[i' 4] as string;                          string[] argumentNames = string.IsNullOrEmpty(argumentStr) ? new string[0] : argumentStr.Split(''');                            List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                          for (int j = 0; j < argumentNames.Length; j++)                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                               {                                   Name = argumentNames[j]'                                   Description = regInfo[i' j + 10] as string                               });                          }                            yield return new FunctionInfo                          {                              Name = functionName'                              Description = description'                              HelpTopic = helpTopic'                              ArgumentList = argumentInfos'                              SourcePath = _xllPath                          };                      }                  }
Magic Number,ExcelDna.IntelliSense,XllRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 0; i < regInfoCount; i++)                  {                      if (regInfo[i' 0] is ExcelEmpty)                      {                          string functionName = regInfo[i' 3] as string;                          string helpTopic = regInfo[i' 8] as string;                          string description = regInfo[i' 9] as string;                            string argumentStr = regInfo[i' 4] as string;                          string[] argumentNames = string.IsNullOrEmpty(argumentStr) ? new string[0] : argumentStr.Split(''');                            List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                          for (int j = 0; j < argumentNames.Length; j++)                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                               {                                   Name = argumentNames[j]'                                   Description = regInfo[i' j + 10] as string                               });                          }                            yield return new FunctionInfo                          {                              Name = functionName'                              Description = description'                              HelpTopic = helpTopic'                              ArgumentList = argumentInfos'                              SourcePath = _xllPath                          };                      }                  }
Magic Number,ExcelDna.IntelliSense,XllRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 0; i < regInfoCount; i++)                  {                      if (regInfo[i' 0] is ExcelEmpty)                      {                          string functionName = regInfo[i' 3] as string;                          string helpTopic = regInfo[i' 8] as string;                          string description = regInfo[i' 9] as string;                            string argumentStr = regInfo[i' 4] as string;                          string[] argumentNames = string.IsNullOrEmpty(argumentStr) ? new string[0] : argumentStr.Split(''');                            List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                          for (int j = 0; j < argumentNames.Length; j++)                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                               {                                   Name = argumentNames[j]'                                   Description = regInfo[i' j + 10] as string                               });                          }                            yield return new FunctionInfo                          {                              Name = functionName'                              Description = description'                              HelpTopic = helpTopic'                              ArgumentList = argumentInfos'                              SourcePath = _xllPath                          };                      }                  }
Magic Number,ExcelDna.IntelliSense,XllRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 0; i < regInfoCount; i++)                  {                      if (regInfo[i' 0] is ExcelEmpty)                      {                          string functionName = regInfo[i' 3] as string;                          string helpTopic = regInfo[i' 8] as string;                          string description = regInfo[i' 9] as string;                            string argumentStr = regInfo[i' 4] as string;                          string[] argumentNames = string.IsNullOrEmpty(argumentStr) ? new string[0] : argumentStr.Split(''');                            List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                          for (int j = 0; j < argumentNames.Length; j++)                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                               {                                   Name = argumentNames[j]'                                   Description = regInfo[i' j + 10] as string                               });                          }                            yield return new FunctionInfo                          {                              Name = functionName'                              Description = description'                              HelpTopic = helpTopic'                              ArgumentList = argumentInfos'                              SourcePath = _xllPath                          };                      }                  }
Magic Number,ExcelDna.IntelliSense,XllRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\ExcelDnaIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 0; i < regInfoCount; i++)                  {                      if (regInfo[i' 0] is ExcelEmpty)                      {                          string functionName = regInfo[i' 3] as string;                          string helpTopic = regInfo[i' 8] as string;                          string description = regInfo[i' 9] as string;                            string argumentStr = regInfo[i' 4] as string;                          string[] argumentNames = string.IsNullOrEmpty(argumentStr) ? new string[0] : argumentStr.Split(''');                            List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                          for (int j = 0; j < argumentNames.Length; j++)                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                               {                                   Name = argumentNames[j]'                                   Description = regInfo[i' j + 10] as string                               });                          }                            yield return new FunctionInfo                          {                              Name = functionName'                              Description = description'                              HelpTopic = helpTopic'                              ArgumentList = argumentInfos'                              SourcePath = _xllPath                          };                      }                  }
Magic Number,ExcelDna.IntelliSense,WorkbookIntelliSenseProvider,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,Initialize,The following statement contains a magic number: lock (_workbookRegistrationInfos)              {                  Logger.Provider.Verbose("WorkbookIntelliSenseProvider.Initialize - Starting Workbooks loop");                  foreach (Workbook wb in xlApp.Workbooks)                  {                      var name = wb.Name;                      Logger.Provider.Verbose($"WorkbookIntelliSenseProvider.Initialize - Adding registration for {name}");                      if (!_workbookRegistrationInfos.ContainsKey(name))                      {                          WorkbookRegistrationInfo regInfo = new WorkbookRegistrationInfo(name);                          _workbookRegistrationInfos[name] = regInfo;                            regInfo.Refresh();                            RegisterWithXmlProvider(wb);                      }                  }                    // NOTE: This access to AddIns2 might have caused long load delays                  //if (ExcelDnaUtil.ExcelVersion >= 14.0)                  //{                  //    foreach (AddIn addIn in xlApp.AddIns2)                  //    {                  //        if (addIn.IsOpen && Path.GetExtension(addIn.FullName) != ".xll")                  //        {                  //            // Can it be "Open" and not be loaded?                  //            var name = addIn.Name;                  //            Workbook wbAddIn;                  //            try                  //            {                  //                // TODO: Log                  //                wbAddIn = xlApp.Workbooks[name];                  //            }                  //            catch                  //            {                  //                // TODO: Log                  //                continue;                  //            }                    //            WorkbookRegistrationInfo regInfo = new WorkbookRegistrationInfo(name);                  //            _workbookRegistrationInfos[name] = regInfo;                    //            regInfo.Refresh();                    //            RegisterWithXmlProvider(wbAddIn);                  //        }                  //    }                  //}                    Logger.Provider.Verbose($"WorkbookIntelliSenseProvider.Initialize - Checking Add-Ins");                    var loadedAddIns = Integration.XlCall.Excel(Integration.XlCall.xlfDocuments' 2) as object['];                  if (loadedAddIns == null)                  {                      // This is normal if there are none                      Logger.Provider.Verbose($"WorkbookIntelliSenseProvider.Initialize - DOCUMENTS(2) returned null");                      return;                  }                  for (int i = 0; i < loadedAddIns.GetLength(1); i++)                  {                      var addInName = loadedAddIns[0' i] as string;                      Logger.Provider.Verbose($"WorkbookIntelliSenseProvider.Initialize - Checking Add-In {addInName}");                      if (addInName != null && Path.GetExtension(addInName) != ".xll")    // We don't actually expect the .xll add-ins here - and they're taken care of elsewhere                      {                          // Can it be "Open" and not be loaded?                          var name = addInName;                          Workbook wbAddIn;                          try                          {                              // TODO: Log                              wbAddIn = xlApp.Workbooks[name];                          }                          catch                          {                              // TODO: Log                              continue;                          }                            Logger.Provider.Verbose($"WorkbookIntelliSenseProvider.Initialize - Adding registration for add-in {name}");                            WorkbookRegistrationInfo regInfo = new WorkbookRegistrationInfo(name);                          _workbookRegistrationInfos[name] = regInfo;                            regInfo.Refresh();                            RegisterWithXmlProvider(wbAddIn);                      }                  }              }
Magic Number,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 2; i <= numRows; i++)                  {                      string functionName = regInfo[i' 1] as string;                      string description = regInfo[i' 2] as string;                      string helpTopic = regInfo[i' 3] as string;                        if (string.IsNullOrEmpty(functionName))                          continue;                        List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                      for (int j = 4; j <= numCols - 1; j += 2)                      {                          var arg = regInfo[i' j] as string;                          var argDesc = regInfo[i' j + 1] as string;                          if (!string.IsNullOrEmpty(arg))                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                              {                                  Name = arg'                                  Description = argDesc                              });                          }                      }                        // Some cleanup and normalization                      functionName = functionName.Trim();                      helpTopic = FunctionInfo.ExpandHelpTopic(_path' helpTopic);                        yield return new FunctionInfo                      {                          Name = functionName'                          Description = description'                          HelpTopic = helpTopic'                          ArgumentList = argumentInfos'                          SourcePath = _name                      };                  }
Magic Number,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 2; i <= numRows; i++)                  {                      string functionName = regInfo[i' 1] as string;                      string description = regInfo[i' 2] as string;                      string helpTopic = regInfo[i' 3] as string;                        if (string.IsNullOrEmpty(functionName))                          continue;                        List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                      for (int j = 4; j <= numCols - 1; j += 2)                      {                          var arg = regInfo[i' j] as string;                          var argDesc = regInfo[i' j + 1] as string;                          if (!string.IsNullOrEmpty(arg))                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                              {                                  Name = arg'                                  Description = argDesc                              });                          }                      }                        // Some cleanup and normalization                      functionName = functionName.Trim();                      helpTopic = FunctionInfo.ExpandHelpTopic(_path' helpTopic);                        yield return new FunctionInfo                      {                          Name = functionName'                          Description = description'                          HelpTopic = helpTopic'                          ArgumentList = argumentInfos'                          SourcePath = _name                      };                  }
Magic Number,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 2; i <= numRows; i++)                  {                      string functionName = regInfo[i' 1] as string;                      string description = regInfo[i' 2] as string;                      string helpTopic = regInfo[i' 3] as string;                        if (string.IsNullOrEmpty(functionName))                          continue;                        List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                      for (int j = 4; j <= numCols - 1; j += 2)                      {                          var arg = regInfo[i' j] as string;                          var argDesc = regInfo[i' j + 1] as string;                          if (!string.IsNullOrEmpty(arg))                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                              {                                  Name = arg'                                  Description = argDesc                              });                          }                      }                        // Some cleanup and normalization                      functionName = functionName.Trim();                      helpTopic = FunctionInfo.ExpandHelpTopic(_path' helpTopic);                        yield return new FunctionInfo                      {                          Name = functionName'                          Description = description'                          HelpTopic = helpTopic'                          ArgumentList = argumentInfos'                          SourcePath = _name                      };                  }
Magic Number,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 2; i <= numRows; i++)                  {                      string functionName = regInfo[i' 1] as string;                      string description = regInfo[i' 2] as string;                      string helpTopic = regInfo[i' 3] as string;                        if (string.IsNullOrEmpty(functionName))                          continue;                        List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                      for (int j = 4; j <= numCols - 1; j += 2)                      {                          var arg = regInfo[i' j] as string;                          var argDesc = regInfo[i' j + 1] as string;                          if (!string.IsNullOrEmpty(arg))                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                              {                                  Name = arg'                                  Description = argDesc                              });                          }                      }                        // Some cleanup and normalization                      functionName = functionName.Trim();                      helpTopic = FunctionInfo.ExpandHelpTopic(_path' helpTopic);                        yield return new FunctionInfo                      {                          Name = functionName'                          Description = description'                          HelpTopic = helpTopic'                          ArgumentList = argumentInfos'                          SourcePath = _name                      };                  }
Magic Number,ExcelDna.IntelliSense,WorkbookRegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\WorkbookIntelliSenseProvider.cs,GetFunctionInfos,The following statement contains a magic number: for (int i = 2; i <= numRows; i++)                  {                      string functionName = regInfo[i' 1] as string;                      string description = regInfo[i' 2] as string;                      string helpTopic = regInfo[i' 3] as string;                        if (string.IsNullOrEmpty(functionName))                          continue;                        List<FunctionInfo.ArgumentInfo> argumentInfos = new List<FunctionInfo.ArgumentInfo>();                      for (int j = 4; j <= numCols - 1; j += 2)                      {                          var arg = regInfo[i' j] as string;                          var argDesc = regInfo[i' j + 1] as string;                          if (!string.IsNullOrEmpty(arg))                          {                              argumentInfos.Add(new FunctionInfo.ArgumentInfo                              {                                  Name = arg'                                  Description = argDesc                              });                          }                      }                        // Some cleanup and normalization                      functionName = functionName.Trim();                      helpTopic = FunctionInfo.ExpandHelpTopic(_path' helpTopic);                        yield return new FunctionInfo                      {                          Name = functionName'                          Description = description'                          HelpTopic = helpTopic'                          ArgumentList = argumentInfos'                          SourcePath = _name                      };                  }
Magic Number,ExcelDna.IntelliSense,FormulaEditWatcher,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaEditWatcher.cs,UpdateEditStateDelayed,The following statement contains a magic number: _syncContextAuto.Post(_ =>             {                 Thread.Sleep(50);                 UpdateEditState();             }' null);
Magic Number,ExcelDna.IntelliSense,FormulaParser,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\UIMonitor\FormulaParser.cs,TryGetFormulaInfo,The following statement contains a magic number: if (formulaPrefix.Count(c => c == '\"') % 2 != 0)              {                  formulaPrefix = string.Concat(formulaPrefix' '\"');              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: double standardFontSize = 11.0;
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel(XlCallInt.xlfGetWorkspace' out result' 37) == XlCallInt.XlReturn.XlReturnSuccess)              {                  object['] options = result as object['];                  if (options != null)                  {                      listSeparator = (string)options[0' 4];                      Logger.Initialization.Verbose($"InitializeOptions - Set ListSeparator to {listSeparator}");                  }              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel(XlCallInt.xlfGetWorkspace' out result' 37) == XlCallInt.XlReturn.XlReturnSuccess)              {                  object['] options = result as object['];                  if (options != null)                  {                      listSeparator = (string)options[0' 4];                      Logger.Initialization.Verbose($"InitializeOptions - Set ListSeparator to {listSeparator}");                  }              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel(XlCallInt.xlfGetWorkspace' out result' 56) == XlCallInt.XlReturn.XlReturnSuccess)              {                  // Standard Font Name                  standardFontName = (string)result;                  Logger.Initialization.Verbose($"InitializeOptions - Set StandardFontName to {standardFontName}");              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,InitializeOptions,The following statement contains a magic number: if (XlCallInt.TryExcel(XlCallInt.xlfGetWorkspace' out result' 57) == XlCallInt.XlReturn.XlReturnSuccess)              {                  // Standard Font Size                  standardFontSize = (double)result;                  Logger.Initialization.Verbose($"InitializeOptions - Set StandardFontSize to {standardFontSize}");              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditMove,The following statement contains a magic number: try              {                  _argumentsToolTip.MoveToolTip((int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);              }              catch (Exception ex)              {                  Logger.Display.Warn($"IntelliSenseDisplay - FormulaEditMove Error - {ex}");                  // Recycle the Arguments ToolTip - won't show now' but should for the next function                  _argumentsToolTip.Dispose();                  _argumentsToolTip = null;              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditTextChange,The following statement contains a magic number: if (FormulaParser.TryGetFormulaInfo(formulaPrefix' out functionName' out currentArgIndex))              {                  FunctionInfo functionInfo;                  if (_functionInfoMap.TryGetValue(functionName' out functionInfo))                  {                      var lineBeforeFunctionName = FormulaParser.GetLineBeforeFunctionName(formulaPrefix' functionName);                      // We have a function name and we want to show info                      if (_argumentsToolTip != null)                      {                          // NOTE: Hiding or moving just once doesn't help - the tooltip pops up in its original place again                          // TODO: Try to move it off-screen' behind or make invisible                          //if (!_argumentsToolTip.Visible)                          //{                          //    // Fiddle a bit with the ExcelToolTip if it is already visible when we first show our FunctionEdit ToolTip                          //    // At other times' the explicit UI update should catch and hide as appropriate                          //    if (excelToolTipWindow != IntPtr.Zero)                          //    {                          //        Win32Helper.HideWindow(excelToolTipWindow);                          //    }                          //}                          int topOffset = GetTopOffset(excelToolTipWindow);                          FormattedText infoText = GetFunctionIntelliSense(functionInfo' currentArgIndex);                          try                          {                              _argumentsToolTip.ShowToolTip(infoText' lineBeforeFunctionName' (int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);                          }                          catch (Exception ex)                          {                              Logger.Display.Warn($"IntelliSenseDisplay - FormulaEditTextChange Error - {ex}");                              _argumentsToolTip.Dispose();                              _argumentsToolTip = null;                          }                      }                      else                      {                          Logger.Display.Warn("FormulaEditTextChange with no arguments tooltip !?");                      }                      return;                  }                }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,GetTopOffset,The following statement contains a magic number: return (excelToolTipWindow == IntPtr.Zero) ? 0 : 18;
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FormulaEditExcelToolTipShow,The following statement contains a magic number: if (_argumentsToolTip != null && _argumentsToolTip.Visible)              {                  int topOffset = GetTopOffset(excelToolTipWindow);                  try                  {                      _argumentsToolTip.MoveToolTip((int)editWindowBounds.Left' (int)editWindowBounds.Bottom + 5' topOffset);                  }                  catch (Exception ex)                  {                      Logger.Display.Warn($"IntelliSenseDisplay - FormulaEditExcelToolTipShow Error - {ex}");                      _argumentsToolTip.Dispose();                      _argumentsToolTip = null;                  }              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListSelectedItemChange,The following statement contains a magic number: if (!string.IsNullOrEmpty(selectedItemText) &&                  _functionInfoMap.TryGetValue(selectedItemText' out functionInfo))              {                  // It's ours!                  var descriptionLines = GetFunctionDescriptionOrNull(functionInfo);                  if (descriptionLines != null)                  {                      try                      {                          _descriptionToolTip?.ShowToolTip(                              text: new FormattedText { GetFunctionDescriptionOrNull(functionInfo) }'                              linePrefix: null'                              left: (int)listBounds.Right + DescriptionLeftMargin'                              top: (int)selectedItemBounds.Bottom - 18'                              topOffset: 0'                              listLeft: (int)selectedItemBounds.Left);                          return;                      }                      catch (Exception ex)                      {                          Logger.Display.Warn($"IntelliSenseDisplay - PopupListSelectedItemChanged Error - {ex}");                          // Recycle the _DescriptionToolTip - won't show now' but should for the next function                          _descriptionToolTip.Dispose();                          _descriptionToolTip = null;                          return;                      }                  }              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FunctionListMove,The following statement contains a magic number: try              {                  _descriptionToolTip?.MoveToolTip(                     left: (int)listBounds.Right + DescriptionLeftMargin'                     top: (int)selectedItemBounds.Bottom - 18'                     topOffset: 0'                     listLeft: (int)selectedItemBounds.Left);              }              catch (Exception ex)              {                  Logger.Display.Warn($"IntelliSenseDisplay - FunctionListMove Error - {ex}");                  // Recycle the _DescriptionToolTip - won't show now' but should for the next function                  _descriptionToolTip?.Dispose();                  _descriptionToolTip = null;              }
Magic Number,ExcelDna.IntelliSense,IntelliSenseDisplay,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseDisplay.cs,FixHelpTopic,The following statement contains a magic number: if (helpTopic != null && helpTopic.EndsWith("!0"))                  return helpTopic.Substring(0' helpTopic.Length - 2);
Magic Number,ExcelDna.IntelliSense,FunctionInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\IIntelliSenseProvider.cs,ExpandHelpTopic,The following statement contains a magic number: if (helpTopic.StartsWith("http://") || helpTopic.StartsWith("https://") || helpTopic.StartsWith("file://"))              {                  if (helpTopic.EndsWith("!0"))                  {                      helpTopic = helpTopic.Substring(0' helpTopic.Length - 2);                  }              }              else if (!Path.IsPathRooted(helpTopic))              {                  helpTopic = Path.Combine(path' helpTopic);              }
Magic Number,ExcelDna.IntelliSense,RegistrationInfo,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\IntelliSenseServer.cs,FromRegistrationString,The following statement contains a magic number: try                  {                      var parts = registrationString.Split(''');                      return new RegistrationInfo                      {                          XllPath = parts[0]'                          ServerId = Guid.ParseExact(parts[1]' "N")'                          Version = parts[2]                      };                  }                  catch (Exception ex)                  {                      // TODO: Log                      Debug.Print($"!!! ERROR: Invalid RegistrationString {registrationString}: {ex.Message}");                      return null;                  }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font>              {                  { FontStyle.Regular' new Font("Segoe UI"' 9' FontStyle.Regular) }'                  { FontStyle.Bold' new Font("Segoe UI"' 9' FontStyle.Bold) }'                  { FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Italic) }'                  { FontStyle.Underline' new Font("Segoe UI"' 9' FontStyle.Underline) }'                  { FontStyle.Bold | FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic) }'                };
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font>              {                  { FontStyle.Regular' new Font("Segoe UI"' 9' FontStyle.Regular) }'                  { FontStyle.Bold' new Font("Segoe UI"' 9' FontStyle.Bold) }'                  { FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Italic) }'                  { FontStyle.Underline' new Font("Segoe UI"' 9' FontStyle.Underline) }'                  { FontStyle.Bold | FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic) }'                };
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font>              {                  { FontStyle.Regular' new Font("Segoe UI"' 9' FontStyle.Regular) }'                  { FontStyle.Bold' new Font("Segoe UI"' 9' FontStyle.Bold) }'                  { FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Italic) }'                  { FontStyle.Underline' new Font("Segoe UI"' 9' FontStyle.Underline) }'                  { FontStyle.Bold | FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic) }'                };
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font>              {                  { FontStyle.Regular' new Font("Segoe UI"' 9' FontStyle.Regular) }'                  { FontStyle.Bold' new Font("Segoe UI"' 9' FontStyle.Bold) }'                  { FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Italic) }'                  { FontStyle.Underline' new Font("Segoe UI"' 9' FontStyle.Underline) }'                  { FontStyle.Bold | FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic) }'                };
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _fonts = new Dictionary<FontStyle' Font>              {                  { FontStyle.Regular' new Font("Segoe UI"' 9' FontStyle.Regular) }'                  { FontStyle.Bold' new Font("Segoe UI"' 9' FontStyle.Bold) }'                  { FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Italic) }'                  { FontStyle.Underline' new Font("Segoe UI"' 9' FontStyle.Underline) }'                  { FontStyle.Bold | FontStyle.Italic' new Font("Segoe UI"' 9' FontStyle.Bold | FontStyle.Italic) }'                };
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush(Color.FromArgb(52' 52' 52));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush(Color.FromArgb(52' 52' 52));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _textBrush = new SolidBrush(Color.FromArgb(52' 52' 52));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen(Color.FromArgb(195' 195' 195));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen(Color.FromArgb(195' 195' 195));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderPen = new Pen(Color.FromArgb(195' 195' 195));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen(Color.FromArgb(225' 225' 225));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen(Color.FromArgb(225' 225' 225));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: _borderLightPen = new Pen(Color.FromArgb(225' 225' 225));
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,LaunchLink,The following statement contains a magic number: try              {                  if (address.StartsWith("http"' StringComparison.OrdinalIgnoreCase))                  {                      Process.Start(address);                  }                  else                  {                      var parts = address.Split('!');                      if (parts.Length == 2)                      {                          // (This is the expected case)                          // Assume we have a filename!topicid                          var fileName = parts[0];                          var topicId = parts[1];                          if (File.Exists(fileName))                          {                              Help.ShowHelp(null' fileName' HelpNavigator.TopicId' topicId);                          }                          else                          {                              MessageBox.Show($"The help link could not be activated:\r\n\r\nThe file {fileName} could not be located."' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          }                      }                      else                      {                          // Just show the file ...?                          if (File.Exists(address))                          {                              Help.ShowHelp(null' address' HelpNavigator.TableOfContents);                          }                          else                          {                              MessageBox.Show($"The help link could not be activated:\r\n\r\nThe file {address} could not be located."' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          }                      }                  }              }              catch (Exception ex)              {                  MessageBox.Show($"The help link could not be activated:\r\n\r\n{ex.Message}"' "IntelliSense by Excel-DNA"' MessageBoxButtons.OK' MessageBoxIcon.Error);                  // NOTE: In this case' the Excel process does not quit after closing Excel...              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,GetMouseLocation,The following statement contains a magic number: int y = (short)((unchecked((int)(long)lParam) >> 16) & 0xFFFF);
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: const int leftPadding = 6;
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: const int widthPadding = 12;
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: const int heightPadding = 2;
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format =                  (StringFormat)StringFormat.GenericTypographic.Clone())              {                  int layoutLeft = ClientRectangle.Location.X + leftPadding;                  int layoutTop = ClientRectangle.Location.Y;                  Rectangle layoutRect = new Rectangle(layoutLeft' layoutTop - 1' 1000' 500);                    format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;                  Size textSize;                    foreach (var line in _text)                  {                      totalHeight += linePadding;                      int lineHeight = 16;                      foreach (var run in line)                      {                          // We support only a single link' for now                            Font font;                          Brush brush;                          if (run.IsLink && _linkActive)                          {                              font = _fonts[FontStyle.Underline];                              brush = _linkBrush;                          }                          else                          {                              font = _fonts[run.Style];                              brush = _textBrush;                          }                            // TODO: Empty strings are a problem....                          var text = run.Text == "" ? " " : run.Text;                            DrawString(e.Graphics' brush' ref layoutRect' out textSize' format' text' font);                            if (run.IsLink)                          {                              _linkClientRect = new Rectangle(layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);                              _linkAddress = run.LinkAddress;                          }                            totalWidth += textSize.Width;                          lineHeight = Math.Max(lineHeight' textSize.Height);                            // Pad by one extra pixel between runs' until we figure out kerning between runs                          layoutRect.X += 1;                          totalWidth += 1;                      }                      lineWidths.Add(totalWidth);                      totalWidth = 0;                      totalHeight += lineHeight;                      layoutRect = new Rectangle(layoutLeft' layoutTop + totalHeight - 1' 1000' 500);                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format =                  (StringFormat)StringFormat.GenericTypographic.Clone())              {                  int layoutLeft = ClientRectangle.Location.X + leftPadding;                  int layoutTop = ClientRectangle.Location.Y;                  Rectangle layoutRect = new Rectangle(layoutLeft' layoutTop - 1' 1000' 500);                    format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;                  Size textSize;                    foreach (var line in _text)                  {                      totalHeight += linePadding;                      int lineHeight = 16;                      foreach (var run in line)                      {                          // We support only a single link' for now                            Font font;                          Brush brush;                          if (run.IsLink && _linkActive)                          {                              font = _fonts[FontStyle.Underline];                              brush = _linkBrush;                          }                          else                          {                              font = _fonts[run.Style];                              brush = _textBrush;                          }                            // TODO: Empty strings are a problem....                          var text = run.Text == "" ? " " : run.Text;                            DrawString(e.Graphics' brush' ref layoutRect' out textSize' format' text' font);                            if (run.IsLink)                          {                              _linkClientRect = new Rectangle(layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);                              _linkAddress = run.LinkAddress;                          }                            totalWidth += textSize.Width;                          lineHeight = Math.Max(lineHeight' textSize.Height);                            // Pad by one extra pixel between runs' until we figure out kerning between runs                          layoutRect.X += 1;                          totalWidth += 1;                      }                      lineWidths.Add(totalWidth);                      totalWidth = 0;                      totalHeight += lineHeight;                      layoutRect = new Rectangle(layoutLeft' layoutTop + totalHeight - 1' 1000' 500);                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format =                  (StringFormat)StringFormat.GenericTypographic.Clone())              {                  int layoutLeft = ClientRectangle.Location.X + leftPadding;                  int layoutTop = ClientRectangle.Location.Y;                  Rectangle layoutRect = new Rectangle(layoutLeft' layoutTop - 1' 1000' 500);                    format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;                  Size textSize;                    foreach (var line in _text)                  {                      totalHeight += linePadding;                      int lineHeight = 16;                      foreach (var run in line)                      {                          // We support only a single link' for now                            Font font;                          Brush brush;                          if (run.IsLink && _linkActive)                          {                              font = _fonts[FontStyle.Underline];                              brush = _linkBrush;                          }                          else                          {                              font = _fonts[run.Style];                              brush = _textBrush;                          }                            // TODO: Empty strings are a problem....                          var text = run.Text == "" ? " " : run.Text;                            DrawString(e.Graphics' brush' ref layoutRect' out textSize' format' text' font);                            if (run.IsLink)                          {                              _linkClientRect = new Rectangle(layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);                              _linkAddress = run.LinkAddress;                          }                            totalWidth += textSize.Width;                          lineHeight = Math.Max(lineHeight' textSize.Height);                            // Pad by one extra pixel between runs' until we figure out kerning between runs                          layoutRect.X += 1;                          totalWidth += 1;                      }                      lineWidths.Add(totalWidth);                      totalWidth = 0;                      totalHeight += lineHeight;                      layoutRect = new Rectangle(layoutLeft' layoutTop + totalHeight - 1' 1000' 500);                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format =                  (StringFormat)StringFormat.GenericTypographic.Clone())              {                  int layoutLeft = ClientRectangle.Location.X + leftPadding;                  int layoutTop = ClientRectangle.Location.Y;                  Rectangle layoutRect = new Rectangle(layoutLeft' layoutTop - 1' 1000' 500);                    format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;                  Size textSize;                    foreach (var line in _text)                  {                      totalHeight += linePadding;                      int lineHeight = 16;                      foreach (var run in line)                      {                          // We support only a single link' for now                            Font font;                          Brush brush;                          if (run.IsLink && _linkActive)                          {                              font = _fonts[FontStyle.Underline];                              brush = _linkBrush;                          }                          else                          {                              font = _fonts[run.Style];                              brush = _textBrush;                          }                            // TODO: Empty strings are a problem....                          var text = run.Text == "" ? " " : run.Text;                            DrawString(e.Graphics' brush' ref layoutRect' out textSize' format' text' font);                            if (run.IsLink)                          {                              _linkClientRect = new Rectangle(layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);                              _linkAddress = run.LinkAddress;                          }                            totalWidth += textSize.Width;                          lineHeight = Math.Max(lineHeight' textSize.Height);                            // Pad by one extra pixel between runs' until we figure out kerning between runs                          layoutRect.X += 1;                          totalWidth += 1;                      }                      lineWidths.Add(totalWidth);                      totalWidth = 0;                      totalHeight += lineHeight;                      layoutRect = new Rectangle(layoutLeft' layoutTop + totalHeight - 1' 1000' 500);                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: using (StringFormat format =                  (StringFormat)StringFormat.GenericTypographic.Clone())              {                  int layoutLeft = ClientRectangle.Location.X + leftPadding;                  int layoutTop = ClientRectangle.Location.Y;                  Rectangle layoutRect = new Rectangle(layoutLeft' layoutTop - 1' 1000' 500);                    format.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;                  Size textSize;                    foreach (var line in _text)                  {                      totalHeight += linePadding;                      int lineHeight = 16;                      foreach (var run in line)                      {                          // We support only a single link' for now                            Font font;                          Brush brush;                          if (run.IsLink && _linkActive)                          {                              font = _fonts[FontStyle.Underline];                              brush = _linkBrush;                          }                          else                          {                              font = _fonts[run.Style];                              brush = _textBrush;                          }                            // TODO: Empty strings are a problem....                          var text = run.Text == "" ? " " : run.Text;                            DrawString(e.Graphics' brush' ref layoutRect' out textSize' format' text' font);                            if (run.IsLink)                          {                              _linkClientRect = new Rectangle(layoutRect.X - textSize.Width' layoutRect.Y' textSize.Width' textSize.Height);                              _linkAddress = run.LinkAddress;                          }                            totalWidth += textSize.Width;                          lineHeight = Math.Max(lineHeight' textSize.Height);                            // Pad by one extra pixel between runs' until we figure out kerning between runs                          layoutRect.X += 1;                          totalWidth += 1;                      }                      lineWidths.Add(totalWidth);                      totalWidth = 0;                      totalHeight += lineHeight;                      layoutRect = new Rectangle(layoutLeft' layoutTop + totalHeight - 1' 1000' 500);                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: DrawRoundedRectangle(e.Graphics' new RectangleF(0'0' Width - 1' Height - 1)' 2' 2);
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,OnPaint,The following statement contains a magic number: DrawRoundedRectangle(e.Graphics' new RectangleF(0'0' Width - 1' Height - 1)' 2' 2);
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,UpdateLocation,The following statement contains a magic number: if (!tipFits && (_currentLeft == _showLeft && _currentTop == _showTop))              {                  // It doesn't fit and it's still where we initially tried to show it                   // (so it probably hasn't been moved).                  if (_listLeft == null)                  {                      // Not in list selection mode - probably FormulaEdit                      _currentLeft -= Math.Max(0' (_currentLeft + width) - workingArea.Right);                      // CONSIDER: Move up too???                  }                  else                  {                      const int leftPadding = 4;                      // Check if it fits on the left                      if (width < _listLeft.Value - leftPadding)                      {                          _currentLeft = _listLeft.Value - width - leftPadding;                      }                  }              }
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(114' 20);
Magic Number,ExcelDna.IntelliSense,ToolTipForm,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\ToolTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(114' 20);
Magic Number,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: IntPtr nativeBuffer = Marshal.AllocHGlobal(512 * 2);
Magic Number,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: IntPtr nativeBuffer = Marshal.AllocHGlobal(512 * 2);
Magic Number,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: for (int i = 0; i < 512; ++i)              {                  Marshal.WriteInt16(nativeBuffer' i * 2' '\0');              }
Magic Number,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: for (int i = 0; i < 512; ++i)              {                  Marshal.WriteInt16(nativeBuffer' i * 2' '\0');              }
Magic Number,ExcelDna.IntelliSense,Win32Helper,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Win32Helper.cs,GetListViewSelectedItemInfo,The following statement contains a magic number: try              {                  item.pszText = nativeBuffer;                  item.cchTextMax = 512;                    uint length = (uint)SendMessage(hwndList' WM.LVM_GETITEMTEXTW' new IntPtr(selectedItemIndex)' ref item);                  if (length > 0)                  {                      text = Marshal.PtrToStringUni(item.pszText' (int)length);                  }                  else                  {                      text = string.Empty;                  }              }              finally              {                  Marshal.FreeHGlobal(nativeBuffer);              }
Magic Number,ExcelDna.IntelliSense,UnicodeString,C:\repos\Excel-DNA_IntelliSense\Source\ExcelDna.IntelliSense\Providers\LoaderNotification.cs,ToString,The following statement contains a magic number: return Marshal.PtrToStringUni(buffer' length / 2);
