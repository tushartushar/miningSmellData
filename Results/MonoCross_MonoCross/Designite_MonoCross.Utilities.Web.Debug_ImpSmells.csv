Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MonoCross.Utilities.Encryption,AesEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\AesEncryption.cs,EncryptStream,The length of the statement  "                //FIXME: http://support.MonoCross.com/discussions/data-stack/47-v28-encryptor-cache-causes-file-locking-problem-in-windows " is 122.
Long Statement,MonoCross.Utilities.Encryption,AesEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\AesEncryption.cs,EncryptStream,The length of the statement  "            Device.Log.Metric(string.Format("AesEncryption.EncryptStream(stream' key' salt): Time: {0} milliseconds"' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 161.
Long Statement,MonoCross.Utilities.Encryption,AesEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\AesEncryption.cs,DecryptStream,The length of the statement  "                //FIXME: http://support.MonoCross.com/discussions/data-stack/47-v28-encryptor-cache-causes-file-locking-problem-in-windows " is 122.
Long Statement,MonoCross.Utilities.Encryption,AesEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\AesEncryption.cs,DecryptStream,The length of the statement  "            Device.Log.Metric( string.Format( "AesEncryption.DecryptStream(stream' key' salt): Time: {0} milliseconds"' DateTime.UtcNow.Subtract( dtMetric ).TotalMilliseconds ) ); " is 167.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Read,The length of the statement  "            Device.Log.Metric(string.Format("BaseFile.Read: Mode: {0} File: {1} Time: {2:0} milliseconds"' mode' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 166.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Read,The length of the statement  "            Device.Log.Metric(string.Format("BaseFile.Read(key'salt): File: {0} Time: {1:0} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 160.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,ReadString,The length of the statement  "            Device.Log.Metric(string.Format("BasicFile.ReadString: Mode: {0}  File: {1} Time: {2:0} milliseconds"' mode' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,CopyDirectory,The length of the statement  "            if (sourceDirectoryName == null) { throw new ArgumentNullException("sourceDirectoryName"' "Must specify source directory"); } " is 125.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,CopyDirectory,The length of the statement  "            else if (destinationDirectoryName == null) { throw new ArgumentNullException("destinationDirectoryName"' "Must specify destination directory"); } " is 145.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Save,The length of the statement  "            Device.Log.Metric(string.Format("BasicFile.Save(stream' key' salt): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 168.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,SaveClear,The length of the statement  "                Device.Log.Metric(string.Format("BasicFile.SaveClear(stream): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 162.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Save,The length of the statement  "            Device.Log.Metric(string.Format("BasicFile.Save(byte[]'key'salt): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 166.
Long Statement,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,SaveClear,The length of the statement  "            Device.Log.Metric(string.Format("BasicFile.SaveClear(byte[]): File: {0} Time: {1:0} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 164.
Long Statement,MonoCross.Utilities.Storage,BasicFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BasicFile.cs,Read,The length of the statement  "                Device.Log.Metric( string.Format( "BasicFile.Read(key'salt): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract( dtMetric ).TotalMilliseconds ) ); " is 165.
Long Statement,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,DeleteLogFiles,The length of the statement  "            var files = GetLogFiles().Where(file => DateTime.UtcNow.Subtract(store.GetLastWriteTime(file).UtcDateTime).Days >= days); " is 121.
Long Statement,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,DeleteLogFiles,The length of the statement  "            var files = GetLogFiles().Select(file => new FileInfo(file)).Where(fi => DateTime.UtcNow.Subtract(fi.LastWriteTime.ToUniversalTime()).Days >= days); " is 148.
Long Statement,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,AppendLog,The length of the statement  "            string textEntry = string.Format("{0:MM-dd-yyyy HH:mm:ss:ffff} :{1}: [{2}] {3}"' DateTime.Now' threadId' messageType' message); " is 127.
Long Statement,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,AppendText,The length of the statement  "                var fileTask = folderTask.Result.CreateFileAsync(Path.GetFileName(filename)' Windows.Storage.CreationCollisionOption.OpenIfExists).AsTask(); " is 140.
Long Statement,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,AppendText,The length of the statement  "                if (value.Length > store.AvailableFreeSpace && !((FileSystem.SLFile)Device.File).IncreaseStorage(value.Length + (store.Quota - store.AvailableFreeSpace))) " is 154.
Long Statement,MonoCross.Utilities.Logging,BasicLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BasicLogger.cs,AppendLog,The length of the statement  "            string textEntry = string.Format("{0:MM-dd-yyyy HH:mm:ss:ffff} :{1}: [{2}] {3}"' DateTime.Now' threadId' messageType' message); " is 127.
Long Statement,MonoCross.Utilities.Logging,QuietLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\QuietLogger.cs,AppendLog,The length of the statement  "            string textEntry = string.Format("{0:MM-dd-yyyy HH:mm:ss:ffff} :{1}: [{2}] {3}"' DateTime.Now' threadId' messageType' message); " is 127.
Virtual Method Call from Constructor,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,BaseLogger,The constructor "BaseLogger" calls a virtual method "InitLogger".
Empty Catch Block,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,AppendText,The method has an empty catch block.
Empty Catch Block,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,AppendText,The method has an empty catch block.
Magic Number,MonoCross.Utilities.Encryption,BaseEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\BaseEncryption.cs,CreateAesManaged,The following statement contains a magic number: byte[] key = rdb.GetBytes(32);
Magic Number,MonoCross.Utilities.Encryption,BaseEncryption,C:\repos\MonoCross_MonoCross\Utilities\Encryption\BaseEncryption.cs,CreateAesManaged,The following statement contains a magic number: byte[] iv = rdb.GetBytes(16);
Magic Number,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,SaveClear,The following statement contains a magic number: using (FileStream fileStream = new FileStream(filename' FileMode.Create))              using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))              using (BinaryReader binaryReader = new BinaryReader(contents))              {                  try                  {                      // process through stream in small chunks to keep peak memory usage down.                      byte[] bytes = binaryReader.ReadBytes(8192);                      while (bytes.Length > 0)                      {                          binaryWriter.Write(bytes);                          bytes = binaryReader.ReadBytes(8192);                      }                  }                  finally                  {                      binaryWriter.Close();                      fileStream.Close();                      fileStream.Dispose();                      binaryReader.Close();                  }                  Device.Log.Metric(string.Format("BasicFile.SaveClear(stream): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds));              }
Magic Number,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,SaveClear,The following statement contains a magic number: using (FileStream fileStream = new FileStream(filename' FileMode.Create))              using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))              using (BinaryReader binaryReader = new BinaryReader(contents))              {                  try                  {                      // process through stream in small chunks to keep peak memory usage down.                      byte[] bytes = binaryReader.ReadBytes(8192);                      while (bytes.Length > 0)                      {                          binaryWriter.Write(bytes);                          bytes = binaryReader.ReadBytes(8192);                      }                  }                  finally                  {                      binaryWriter.Close();                      fileStream.Close();                      fileStream.Dispose();                      binaryReader.Close();                  }                  Device.Log.Metric(string.Format("BasicFile.SaveClear(stream): File: {0} Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds));              }
Magic Number,MonoCross.Utilities.Logging,BaseLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\BaseLogger.cs,InitLogger,The following statement contains a magic number: DeleteLogFiles(21);
Missing Default,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Read,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      bytes = ReadClear(filename);                      break;                  case EncryptionMode.Encryption:                      bytes = Read(filename' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      if (Device.Encryption.Required)                          bytes = Read(filename' Device.Encryption.Key' Device.Encryption.Salt);                      else                          bytes = ReadClear(filename);                      break;              }
Missing Default,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,ReadString,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      text = ReadStringClear(filename);                      break;                  case EncryptionMode.Encryption:                      text = ReadString(filename' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      if (Device.Encryption.Required)                          text = ReadString(filename' Device.Encryption.Key' Device.Encryption.Salt);                      else                          text = ReadStringClear(filename);                      break;              }
Missing Default,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Save,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      SaveClear(filename' contents);                      break;                  case EncryptionMode.Encryption:                      Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      if (Device.Encryption.Required)                          Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      else                          SaveClear(filename' contents);                      break;              }
Missing Default,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Save,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      SaveClear(filename' contents);                      break;                  case EncryptionMode.Encryption:                      Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      if (Device.Encryption.Required)                          Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      else                          SaveClear(filename' contents);                      break;              }
Missing Default,MonoCross.Utilities.Storage,BaseFile,C:\repos\MonoCross_MonoCross\Utilities\Storage\BaseFile.cs,Save,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      SaveClear(filename' contents);                      break;                  case EncryptionMode.Encryption:                      Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      if (Device.Encryption.Required)                          Save(filename' contents' Device.Encryption.Key' Device.Encryption.Salt);                      else                          SaveClear(filename' contents);                      break;              }
