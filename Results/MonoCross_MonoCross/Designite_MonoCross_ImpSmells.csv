Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,InitEntities,The method has 257 lines of code.
Long Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The method has 125 lines of code.
Long Method,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,ResponseCallback,The method has 100 lines of code.
Long Method,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetResponseCallback,The method has 100 lines of code.
Complex Method,MonoCross.Navigation,TypeLoader,C:\repos\MonoCross_MonoCross\Navigation\TypeLoader.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 11
Complex Method,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 11
Complex Method,System.Collections.Generic,EnumerableExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\IEnumerableExtensions.cs,Equivalent,Cyclomatic complexity of the method is 11
Complex Method,MonoCross,PlatformUtils,C:\repos\MonoCross_MonoCross\Utilities\PlatformUtils.cs,GetMobilePlatform,Cyclomatic complexity of the method is 10
Complex Method,System.Collections,EnumerableExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\IEnumerableExtensions.cs,Equivalent,Cyclomatic complexity of the method is 11
Long Parameter List,MonoCross.Navigation,MXContainer,C:\repos\MonoCross_MonoCross\Navigation\MXContainer.cs,TryLoadController,The method has 5 parameters. Parameters: container' fromView' controller' navigatedUri' parameters
Long Parameter List,MonoCross.Navigation,MXContainer,C:\repos\MonoCross_MonoCross\Navigation\MXContainer.cs,Register,The method has 5 parameters. Parameters: keyType' nativeType' namedInstance' initialization' singletonInstance
Long Parameter List,MonoCross.Navigation,MXContainer,C:\repos\MonoCross_MonoCross\Navigation\MXContainer.cs,Register,The method has 5 parameters. Parameters: keyType' nativeType' namedInstance' initialization' singletonInstance
Long Parameter List,MonoCross.Navigation,NamedTypeMap,C:\repos\MonoCross_MonoCross\Navigation\NamedTypeMap.cs,Register,The method has 5 parameters. Parameters: keyType' nativeType' namedInstance' initialization' singletonInstance
Long Parameter List,MonoCross.Navigation,NamedTypeMap,C:\repos\MonoCross_MonoCross\Navigation\NamedTypeMap.cs,Register,The method has 5 parameters. Parameters: keyType' nativeType' namedInstance' initialization' singletonInstance
Long Parameter List,MonoCross.Utilities.Network,IPoster,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\IPoster.cs,PostBytes,The method has 5 parameters. Parameters: uri' postBytes' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,IPoster,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\IPoster.cs,PostBytes,The method has 6 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject
Long Parameter List,MonoCross.Utilities.Network,IPoster,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\IPoster.cs,PostBytes,The method has 7 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject' timeout
Long Parameter List,MonoCross.Utilities.Network,IPoster,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\IPoster.cs,PostObject,The method has 5 parameters. Parameters: uri' postObject' verb' headers' timeout
Long Parameter List,MonoCross.Utilities.Network,IPoster,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\IPoster.cs,PostString,The method has 5 parameters. Parameters: uri' postString' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostString,The method has 5 parameters. Parameters: uri' postString' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostObject,The method has 5 parameters. Parameters: uri' postObject' verb' headers' timeout
Long Parameter List,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The method has 5 parameters. Parameters: uri' postBytes' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The method has 6 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject
Long Parameter List,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The method has 7 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject' timeout
Long Parameter List,MonoCross.Utilities.Network,PosterSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterSynch.cs,PostString,The method has 5 parameters. Parameters: uri' postString' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,PosterSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterSynch.cs,PostObject,The method has 5 parameters. Parameters: uri' postObject' verb' headers' timeout
Long Parameter List,MonoCross.Utilities.Network,PosterSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterSynch.cs,PostBytes,The method has 5 parameters. Parameters: uri' postBytes' contentType' verb' headers
Long Parameter List,MonoCross.Utilities.Network,PosterSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterSynch.cs,PostBytes,The method has 6 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject
Long Parameter List,MonoCross.Utilities.Network,PosterSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterSynch.cs,PostBytes,The method has 7 parameters. Parameters: uri' postBytes' contentType' verb' headers' postObject' timeout
Long Statement,MonoCross.Navigation,NavigationList,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,MatchUrl,The length of the statement  "                        this.FirstOrDefault(mapping => Regex.Match(MXContainer.Instance.App.NavigateOnLoad' mapping.RegexPattern()).Value == MXContainer.Instance.App.NavigateOnLoad); " is 158.
Long Statement,MonoCross.Navigation,NavigationList,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,MatchUrl,The length of the statement  "                    // first get the mappings with the same number of pieces' then march down one at a time' skipping those with parameters mappings (e.g.' '{') " is 140.
Long Statement,MonoCross.Navigation,MXViewMap,C:\repos\MonoCross_MonoCross\Navigation\MXViewMap.cs,GetOrCreateView,The length of the statement  "                throw new ArgumentException(string.Format("No View for model type: {0} with perspective: {1}"' modelType.Name' perspective == string.Empty ? "Default" : perspective)' "perspective"); " is 182.
Long Statement,MonoCross.Navigation,TypeLoader,C:\repos\MonoCross_MonoCross\Navigation\TypeLoader.cs,Load,The length of the statement  "                    retval = AttemptConstruction(parameters' ctors.Where(c => c.Value.Length == parameters.Length)' Convert.ToBoolean(i)) ?? " is 120.
Long Statement,MonoCross.Utilities,StringExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\StringExtensions.cs,AppendPath,The length of the statement  "                return chars.Aggregate(relativePath' (current' separator) => current.Replace(separator' Device.DirectorySeparatorChar)); " is 120.
Long Statement,MonoCross.Utilities,StringExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\StringExtensions.cs,AppendPath,The length of the statement  "            return (basePath.TrimEnd(chars) + chars[index] + relativePath.TrimStart(chars)).Replace(chars[1 - index]' chars[index]); " is 120.
Long Statement,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,NotEncoded,The length of the statement  "            //  || '$'' '&' and '='  added per TRG as OData delimiters' e.g. $ marks a keyword' such as $filter' and should NOT be encoded         " is 126.
Long Statement,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,NotEncoded,The length of the statement  "            return (c == '!' || c == '(' || c == ')' || c == '*' || c == '-' || c == '.' || c == '_' || c == '$' || c == '&' || c == '=' ); " is 127.
Long Statement,MonoCross.Utilities,ImageUtility,C:\repos\MonoCross_MonoCross\Utilities\ImageComposition\ImageUtility.cs,EncodeImageToDataUri,The length of the statement  "            return image == null || image.Length == 0 ? null : string.Format("data:image/{0};base64'{1}"' extension.Trim(new[] { '.' })' Convert.ToBase64String(image)); " is 156.
Long Statement,MonoCross.Utilities,BasicReflector,C:\repos\MonoCross_MonoCross\Utilities\Reflection\BasicReflector.cs,GetMethod,The length of the statement  "            return type.GetRuntimeMethods().FirstOrDefault(m => m.Name == name && m.GetParameters().Select(p => p.ParameterType).Equivalent(parameterTypes' true)); " is 151.
Long Statement,MonoCross.Utilities,BasicReflector,C:\repos\MonoCross_MonoCross\Utilities\Reflection\BasicReflector.cs,GetInterface,The length of the statement  "            return type.GetTypeInfo().ImplementedInterfaces.FirstOrDefault(i => string.Equals(i.Name' name' ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal)); " is 173.
Long Statement,MonoCross.Utilities,SyncQueue<T>,C:\repos\MonoCross_MonoCross\Utilities\SyncQueue.cs,Dequeue,The length of the statement  "                if (handles.Length > 0 && WaitForMultipleObjects(handles.Length' handles.Select(w => w.Handle).ToArray()' true' timeout_milliseconds) == 0) " is 139.
Long Statement,MonoCross.Utilities,TypeSwitchExtensions,C:\repos\MonoCross_MonoCross\Utilities\TypeSwitch.cs,Case,The length of the statement  "            if ((typedObject == null || typedObject.Equals(default(T)) || !c(typedObject) || type != null && !Device.Reflector.IsAssignableFrom(caseType' type)) && " is 151.
Long Statement,MonoCross,ImageCache,C:\repos\MonoCross_MonoCross\Utilities\Imaging\ImageCache.cs,Add,The length of the statement  "                        cache.Remove(cache.Keys.FirstOrDefault(k => !k.Equals(filePath' StringComparison.OrdinalIgnoreCase)) ?? cache.Keys.FirstOrDefault()); " is 133.
Long Statement,MonoCross.Utilities.Logging,DiagnosticDebugLogger,C:\repos\MonoCross_MonoCross\Utilities\Logging\DiagnosticDebugLogger.cs,AppendLog,The length of the statement  "            string textEntry = string.Format("{0:MM-dd-yyyy HH:mm:ss:ffff} :{1}: [{2}] {3}"' DateTime.Now' threadId' messageType' message); " is 127.
Long Statement,MonoCross.Utilities.Logging,LogHelper,C:\repos\MonoCross_MonoCross\Utilities\Logging\LogHelper.cs,BuildExceptionMessage,The length of the statement  "            exMessage = ex.Data.Keys.Cast<object>().Aggregate(exMessage' (current' item) => current + string.Format(" key:{0}' value:{1};"' item' ex.Data[item])); " is 150.
Long Statement,MonoCross.Utilities.Logging,LogHelper,C:\repos\MonoCross_MonoCross\Utilities\Logging\LogHelper.cs,BuildInnerExceptionMessage,The length of the statement  "            inExMessage = ex.Data.Keys.Cast<object>().Aggregate(inExMessage' (current' item) => current + string.Format(" key:{0}' value:{1};"' item' ex.Data[item])); " is 154.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,Fetch,The length of the statement  "                Device.Log.Metric("FetchAsynch timed out: Uri: {0} Time: {1:F0} milliseconds "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds); " is 139.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,Fetch,The length of the statement  "			Device.Log.Metric(string.Format("FetchAsynch Completed: Uri: {0} Time: {1:F0} milliseconds  Size: {2} "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds' (PostNetworkResponse.ResponseBytes != null ? PostNetworkResponse.ResponseBytes.Length : -1))); " is 258.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,FetcherAsynch_OnError,The length of the statement  "            Exception exc = new Exception("FetcherAsynch call to FetchAsynch threw an exception: " + state.ErrorMessage' state.Exception); " is 126.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,FetcherAsynch_OnError,The length of the statement  "                    webEx.Message.Contains("(304) Not Modified")) // HttpWebResponse.EndGetResponse throws exception on HttpStatusCode.NotModified response " is 135.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,ResponseCallback,The length of the statement  "                // TODO: evaluate which headers are actually needed and skip those that aren't. So' what's our logic for "needed headers" ? " is 123.
Long Statement,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,ResponseCallback,The length of the statement  "                state.ErrorMessage = string.Format("Call to {0} had a Webexception. {1}   Status: {2}   Desc: {3}"' state.Request.RequestUri' ex.Message' ex.Status' StatusDescription); " is 168.
Long Statement,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The length of the statement  "                Device.Log.Metric(string.Format("PosterAsynch timed out: Uri: {0} Time: {1:F0} milliseconds "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 155.
Long Statement,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The length of the statement  "            Device.Log.Metric(string.Format("PosterAsynch Completed: Uri: {0} Time: {1:F0} milliseconds  Size: {2} "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds' (PostNetworkResponse.ResponseBytes != null ? PostNetworkResponse.ResponseBytes.Length : -1))); " is 259.
Long Statement,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetResponseCallback,The length of the statement  "                        state.ErrorMessage = String.Format("{0} failed. Received HTTP {1} for {2}"' state.Verb' response.StatusCode' state.Uri); " is 120.
Long Statement,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetResponseCallback,The length of the statement  "                string message = string.Format("Call to {0} had a Webexception. {1}   Status: {2}"' state.Request.RequestUri' ex.Message' ex.Status); " is 133.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeObjectToFile(1): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeObjectToFile(2): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeObjectToFile(3): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeObjectClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeObjectClear: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 239.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeObjectToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeObjectToBytesClear: Time: {0} milliseconds"' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 157.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,DeserializeObjectClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.DeserializeObject: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType()' value.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 198.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeListToFile(1): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 173.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeListToFile(2): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 173.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeListToFile(3): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 173.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeListToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeListToBytes: Time: {0} milliseconds"' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 150.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,SerializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.SerializeList: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 233.
Long Statement,MonoCross.Utilities.Serialization,SerializerJson<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerJson.cs,DeserializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.DeserializeListClear: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' value.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 202.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeObjectToFile(1): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 175.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeObjectToFile(2): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 175.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeObjectToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeObjectToFile(3): File {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 175.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeObjectClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeObjectClear: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 240.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeObjectToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeObjectToBytesClear: Time: {0} milliseconds"' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 158.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,DeserializeObjectClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.DeserializeObject: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType()' value.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 199.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeListToFile(1): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeListToFile(2): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeListToFile,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeListToFile(3): File: {0}  Time: {1} milliseconds"' filename' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 174.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeListToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeListToBytes: Time: {0} milliseconds"' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 151.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,SerializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerOdata.SerializeList: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 234.
Long Statement,MonoCross.Utilities.Serialization,SerializerOdata<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerOdata.cs,DeserializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerJson.DeserializeListClear: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' value.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 202.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "            //			Device.Log.Debug( "SerializeObjectToBytesClear() 1  type: "  + typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 124.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "            //			Device.Log.Debug( "SerializeObjectToBytesClear() 2  type: "  +  typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 125.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "                //				Device.Log.Debug( "SerializeObjectToBytesClear() 3  type: "  +  typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 126.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "                //				Device.Log.Debug( "SerializeObjectToBytesClear() 4  type: "  +  typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 126.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "                //				Device.Log.Debug( "SerializeObjectToBytesClear() 5  type: "  +  typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 126.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "                Device.Log.Error("SerializeObjectToBytesClear XML error: type " + typeof(T).ToString() + " ToString: " + obj.ToString()' exc); " is 126.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "                //				Device.Log.Debug( "SerializeObjectToBytesClear() 6  type: "  +  typeof(T).ToString() + " ToString: " + obj.ToString() ); " is 126.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerXml.SerializeObjectToBytes: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType().ToString()' byteData.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 216.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeObjectClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializeObject: Type: {0} Size: {1} Time: {2:0} milliseconds"' obj.GetType().ToString()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 230.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,DeserializeObjectClear,The length of the statement  "            //            Device.Log.Metric( string.Format( "SerializerXml.DeserializeObject: Type: {0} Size: {1} Time: {2} milliseconds"' obj.GetType().ToString()' value.Length' DateTime.UtcNow.Subtract( dtMetric ).TotalMilliseconds ) ); " is 226.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeListToBytesClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerXml.SerializeListToBytes: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' byteData.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 204.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,SerializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerXml.SerializeList: Type: {0} Size: {1} Time: {2:0'0} milliseconds"' list.GetType().ToString()' (string.IsNullOrEmpty(retval) ? 0 : retval.Length)' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 245.
Long Statement,MonoCross.Utilities.Serialization,SerializerXml<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerXml.cs,DeserializeListClear,The length of the statement  "            Device.Log.Metric(string.Format("SerializerXml.DeserializeList: Type: {0} Size: {1} Time: {2:0} milliseconds"' list.GetType()' value.Length' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds)); " is 196.
Long Statement,MonoCross.Utilities.Threading,IdleThreadQueue,C:\repos\MonoCross_MonoCross\Utilities\Threading\IdleThreadQueue.cs,ProcessQueue,The length of the statement  "                //iApp.Log.Debug(string.Format("ProcessQueue:  start of loop. staged count {0}  queue count {1}"' Interlocked.Read(ref threadCount)' this.Count)); " is 146.
Long Statement,MonoCross.Utilities.Threading,IdleThreadQueue,C:\repos\MonoCross_MonoCross\Utilities\Threading\IdleThreadQueue.cs,StageNext,The length of the statement  "                    //iApp.Log.Debug(string.Format("StageNext:  Adding delegate to thread. staged count {0}  queue count {1}"' ThreadCountSafeRead' this.Count)); " is 141.
Complex Conditional,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Complex Conditional,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,MonoCross.Utilities,TypeSwitchExtensions,C:\repos\MonoCross_MonoCross\Utilities\TypeSwitch.cs,Case,The conditional expression  "(typedObject == null || typedObject.Equals(default(T)) || !c(typedObject) || type != null && !Device.Reflector.IsAssignableFrom(caseType' type)) &&                  (type == null || !Device.Reflector.IsAssignableFrom(caseType' type) || !c(default(T)))"  is complex.
Complex Conditional,System.Collections.Generic,EnumerableExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\IEnumerableExtensions.cs,IndexOf,The conditional expression  "(item == null && element == null) || (item != null && item.Equals(element))"  is complex.
Complex Conditional,System.Collections,EnumerableExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\IEnumerableExtensions.cs,IndexOf,The conditional expression  "(item == null && element == null) || (item != null && item.Equals(element))"  is complex.
Complex Conditional,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,FetcherAsynch_OnError,The conditional expression  "webEx.Message.Contains("Network is unreachable") ||                      webEx.Message.Contains("Error: ConnectFailure") || // iOS Message when in Airplane mode                      webEx.Message.Contains("The remote name could not be resolved:") || // Windows message when no network access                      webEx.Message.Contains("(304) Not Modified")"  is complex.
Empty Catch Block,MonoCross.Utilities,WeakKeyDictionary<TKey;TValue>,C:\repos\MonoCross_MonoCross\Utilities\WeakKeyDictionary.cs,CopyTo,The method has an empty catch block.
Empty Catch Block,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,FetchAsynch,The method has an empty catch block.
Empty Catch Block,MonoCross.Utilities.Network,NetworkUtils,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkUtils.cs,ByteArrayToStr,The method has an empty catch block.
Empty Catch Block,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostAsynch,The method has an empty catch block.
Empty Catch Block,MonoCross.Scanning,MockScanner,C:\repos\MonoCross_MonoCross\Utilities\Scanning\MockScanner.cs,Dispose,The method has an empty catch block.
Magic Number,MonoCross.Navigation,MXNavigation,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Pattern != null ? Pattern.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Controller != null ? Controller.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parameters != null ? Parameters.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parts != null ? Parts.GetHashCode() : 0);                  return hashCode;              }
Magic Number,MonoCross.Navigation,MXNavigation,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Pattern != null ? Pattern.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Controller != null ? Controller.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parameters != null ? Parameters.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parts != null ? Parts.GetHashCode() : 0);                  return hashCode;              }
Magic Number,MonoCross.Navigation,MXNavigation,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Pattern != null ? Pattern.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Controller != null ? Controller.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parameters != null ? Parameters.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Parts != null ? Parts.GetHashCode() : 0);                  return hashCode;              }
Magic Number,MonoCross.Navigation,Segment,C:\repos\MonoCross_MonoCross\Navigation\MXNavigation.cs,Segment,The following statement contains a magic number: if (segment.Length > 1 && segment[0] == '{' && segment[segment.Length - 1] == '}')                  {                      // should be a part field' extract the part name                      SegmentValue = segment.Substring(1' segment.Length - 2);                      IsParameter = true;                  }                  else                  {                      SegmentValue = segment;                      IsParameter = false;                  }
Magic Number,MonoCross.Utilities,StringExtensions,C:\repos\MonoCross_MonoCross\Utilities\Extensions\StringExtensions.cs,AppendPath,The following statement contains a magic number: char[] chars = new char[2];
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                      buf.Add(b);              }              else                  buf.Add((byte)ch);
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                  if (current == -1)                      return -1;                  value = (value << 4) + current;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char c = s[i];                  if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159)                  {                      needEncode = true;                      break;                  }              }
Magic Number,MonoCross.Utilities,HttpUtility,C:\repos\MonoCross_MonoCross\Utilities\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)                  switch (s[i])                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;                      default:                          // MS starts encoding with &# from 160 and stops at 255.                          // We don't do that. One reason is the 65308/65310 unicode                          // characters that look like '<' and '>'.                          if (s[i] > 159)                          {                              output.Append("&#");                              output.Append(((int)s[i]).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append(s[i]);                          }                          break;                  }
Magic Number,MonoCross,ImageCache,C:\repos\MonoCross_MonoCross\Utilities\Imaging\ImageCache.cs,ImageCache,The following statement contains a magic number: capacity = 50;
Magic Number,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,Fetch,The following statement contains a magic number: if (!autoEvent.WaitOne(timeout))  #endif              {                  string message = "FetcherAsynch call to FetchAsynch timed out. uri " + fetchParameters.Uri;                  Device.Log.Metric("FetchAsynch timed out: Uri: {0} Time: {1:F0} milliseconds "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds);                    NetworkResponse networkResponse = new NetworkResponse()                  {                      Message = message'                      URI = fetchParameters.Uri'                      StatusCode = HttpStatusCode.RequestTimeout'                      WebExceptionStatusCode = (WebExceptionStatus)(14)'  // 14 = timeout' not available in silverlight                      ResponseString = string.Empty'                      Expiration = DateTime.MinValue.ToUniversalTime()'                      AttemptToRefresh = DateTime.MinValue.ToUniversalTime()'                      Downloaded = DateTime.UtcNow'                      Exception = threadExc                  };                    Device.PostNetworkResponse(networkResponse);                  return networkResponse;              }              else if (threadExc != null)              {                  PostNetworkResponse.Exception = threadExc;                  PostNetworkResponse.Message = "FetchAsync threw an exception";                  PostNetworkResponse.StatusCode = (HttpStatusCode)(-1);              }
Magic Number,MonoCross.Utilities.Network,FetcherAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Fetch\FetcherAsynch.cs,ResponseCallback,The following statement contains a magic number: try              {                  HttpWebRequest request = state.Request;                    // End the Asynchronous response and get the actual response object                  state.Response = (HttpWebResponse)request.EndGetResponse(result);  #if !NETCF                  state.Expiration = state.Response.Headers["Expires"].TryParseDateTimeUtc();                  state.AttemptToRefresh = state.Response.Headers["MonoCross-Attempt-Refresh"].TryParseDateTimeUtc();  #endif                  // apply web response headers to data collection.                  // TODO: evaluate which headers are actually needed and skip those that aren't. So' what's our logic for "needed headers" ?                  foreach (string key in state.Response.Headers.AllKeys)                  {                      state.Data[key] = state.Response.Headers[key];                  }                    state.StatusCode = state.Response.StatusCode;                    switch (state.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Created:                      case HttpStatusCode.Accepted:                          break;                      case HttpStatusCode.NoContent:                          Device.Log.Info("Empty payload returned in FetcherAsynch: Result {0} for {1}"' state.StatusCode' request.RequestUri);                          break;                      default:                          state.ErrorMessage = String.Format("Get failed. Received HTTP {0} for {1}"' state.StatusCode' request.RequestUri);                          Device.Log.Error(state.ErrorMessage);                          state.Expiration = DateTime.UtcNow;                          state.AttemptToRefresh = DateTime.UtcNow;                          state.Downloaded = DateTime.UtcNow;                          OnDownloadComplete(state);                            return;                  }                    // extract response into bytes and string.                  WebResponse webResponse = NetworkUtils.ExtractResponse(state.Response' state.FileName);                  state.ResponseBytes = webResponse.ResponseBytes;                  state.ResponseString = webResponse.ResponseString;                  state.ResponseHeaders = webResponse.ResponseHeaders;                    OnDownloadComplete(state);                }              catch (WebException ex)              {                  string StatusDescription = string.Empty;  #if !NETCF                  ex.Data.Add("Uri"' state.Request.RequestUri);                  ex.Data.Add("Verb"' state.Request.Method);  #endif                  if (ex.Response != null)                  {                      state.StatusCode = ((HttpWebResponse)ex.Response).StatusCode;                      StatusDescription = ((HttpWebResponse)ex.Response).StatusDescription;                      state.ResponseHeaders = ex.Response.Headers;                  }                  else if (ex.Message.ToLower().Contains("request was aborted"))                  {                      state.StatusCode = HttpStatusCode.RequestTimeout;                      StatusDescription = "Request cancelled by client because the server did not respond within timeout";                  }                  else                  {                      state.StatusCode = (HttpStatusCode)(-2);                  }                  state.WebExceptionStatusCode = ex.Status;  #if !NETCF                  ex.Data.Add("StatusCode"' state.StatusCode);                  ex.Data.Add("WebException.Status"' ex.Status);                  ex.Data.Add("StatusDescription"' StatusDescription);  #endif                  state.ErrorMessage = string.Format("Call to {0} had a Webexception. {1}   Status: {2}   Desc: {3}"' state.Request.RequestUri' ex.Message' ex.Status' StatusDescription);                  state.Exception = ex;                  state.Expiration = DateTime.UtcNow;                  state.AttemptToRefresh = DateTime.UtcNow;                    OnError(state);              }              catch (Exception ex)              {  #if !NETCF                  ex.Data.Add("Uri"' state.Request.RequestUri);                  ex.Data.Add("Verb"' state.Request.Method);  #endif                  state.ErrorMessage = string.Format("Call to {0} had an Exception. {1}"' state.Request.RequestUri' ex.Message);                  state.Exception = ex;                  state.StatusCode = (HttpStatusCode)(-1);                  state.WebExceptionStatusCode = (WebExceptionStatus)(-1);                  state.Expiration = DateTime.UtcNow;                  state.AttemptToRefresh = DateTime.UtcNow;                    OnError(state);              }              finally              {                  if (state.Response != null)                      ((IDisposable)state.Response).Dispose();                  state.Request = null;                    allDone.Set();              }
Magic Number,MonoCross.Utilities.Network,NetworkAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkAsynch.cs,Get,The following statement contains a magic number: NetworkResponse networkResponse = Fetcher.Fetch(uri' (Dictionary<string' string>)null' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkAsynch.cs,Get,The following statement contains a magic number: NetworkResponse networkResponse = Fetcher.Fetch(uri' headers' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkAsynch.cs,GetBytes,The following statement contains a magic number: NetworkResponse networkResponse = Fetcher.Fetch(uri' (Dictionary<string' string>)null' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkAsynch.cs,GetBytes,The following statement contains a magic number: NetworkResponse networkResponse = Fetcher.Fetch(uri' headers' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkSynch.cs,Get,The following statement contains a magic number: NetworkResponse networkResponse = fetcher.Fetch(uri' (Dictionary<string' string>)null' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkSynch.cs,Get,The following statement contains a magic number: NetworkResponse networkResponse = fetcher.Fetch(uri' headers' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkSynch.cs,GetBytes,The following statement contains a magic number: NetworkResponse networkResponse = fetcher.Fetch(uri' (Dictionary<string' string>)null' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkSynch,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkSynch.cs,GetBytes,The following statement contains a magic number: NetworkResponse networkResponse = fetcher.Fetch(uri' headers' 60000);
Magic Number,MonoCross.Utilities.Network,NetworkUtils,C:\repos\MonoCross_MonoCross\Utilities\Network\NetworkUtils.cs,StreamToByteArray,The following statement contains a magic number: byte[] buffer = new byte[32768];
Magic Number,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,PostBytes,The following statement contains a magic number: if (!autoEvent.WaitOne(requestParameters.Timeout))  #endif              {                  string message = "PosterAsynch call to RequestAsynch timed out. uri " + requestParameters.Uri;                  Device.Log.Metric(string.Format("PosterAsynch timed out: Uri: {0} Time: {1:F0} milliseconds "' uri' DateTime.UtcNow.Subtract(dtMetric).TotalMilliseconds));                    NetworkResponse networkResponse = new NetworkResponse()                  {                      Message = message'                      URI = requestParameters.Uri'                      StatusCode = HttpStatusCode.RequestTimeout'                      WebExceptionStatusCode = (WebExceptionStatus)(14)' // 14 = timeout' not available in silverlight                      ResponseString = string.Empty'                      Expiration = DateTime.MinValue.ToUniversalTime()'                      AttemptToRefresh = DateTime.MinValue.ToUniversalTime()'                      Downloaded = DateTime.UtcNow'                      Exception = threadExc'                  };                    Device.PostNetworkResponse(networkResponse);                  return networkResponse;              }              else if (threadExc != null)              {                  PostNetworkResponse.Exception = threadExc;                  PostNetworkResponse.Message = "PostAsynch threw an exception";                  PostNetworkResponse.StatusCode = (HttpStatusCode)(-1);              }
Magic Number,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetRequestStreamCallback,The following statement contains a magic number: try              {                  // End the operation                  Stream postStream = request.EndGetRequestStream(asynchronousResult);                    // Write to the request stream.                  if (state.PostBytes == null)                      state.PostBytes = new byte[0];                  postStream.Write(state.PostBytes' 0' state.PostBytes.Length);  #if NETCF                  postStream.Close();  #endif                  postStream.Dispose();                    // Start the asynchronous operation to get the response                  IAsyncResult result = request.BeginGetResponse(new AsyncCallback(GetResponseCallback)' state);              }              catch (WebException ex)              {                  string StatusDescription = string.Empty;  #if !NETCF                  ex.Data.Add("Uri"' state.Uri);                  ex.Data.Add("Verb"' state.Verb);                  ex.Data.Add("WebException.Status"' ex.Status);  #endif                  state.ErrorMessage = errorMsg;                  state.Exception = ex;                  state.WebExceptionStatusCode = ex.Status;                    if (ex.Response != null)                  {                      state.StatusCode = ((HttpWebResponse)ex.Response).StatusCode;                  }                  else if (ex.Message.ToLower().Contains("request was aborted"))                  {                      state.StatusCode = HttpStatusCode.RequestTimeout;                      StatusDescription = "Request cancelled by client because the server did not respond within timeout";                  }                  else                  {                      state.StatusCode = (HttpStatusCode)(-2);                  }  #if !NETCF                  ex.Data.Add("StatusCode"' state.StatusCode);                  ex.Data.Add("StatusDescription"' StatusDescription);  #endif                  OnError(state);                  allDone.Set();              }              catch (Exception ex)              {  #if !NETCF                  ex.Data.Add("Uri"' state.Uri);                  ex.Data.Add("Verb"' state.Verb);  #endif                  state.ErrorMessage = errorMsg;                  state.Exception = ex;                  state.StatusCode = (HttpStatusCode)(-2);                  OnError(state);                  allDone.Set();              }
Magic Number,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetRequestStreamCallback,The following statement contains a magic number: try              {                  // End the operation                  Stream postStream = request.EndGetRequestStream(asynchronousResult);                    // Write to the request stream.                  if (state.PostBytes == null)                      state.PostBytes = new byte[0];                  postStream.Write(state.PostBytes' 0' state.PostBytes.Length);  #if NETCF                  postStream.Close();  #endif                  postStream.Dispose();                    // Start the asynchronous operation to get the response                  IAsyncResult result = request.BeginGetResponse(new AsyncCallback(GetResponseCallback)' state);              }              catch (WebException ex)              {                  string StatusDescription = string.Empty;  #if !NETCF                  ex.Data.Add("Uri"' state.Uri);                  ex.Data.Add("Verb"' state.Verb);                  ex.Data.Add("WebException.Status"' ex.Status);  #endif                  state.ErrorMessage = errorMsg;                  state.Exception = ex;                  state.WebExceptionStatusCode = ex.Status;                    if (ex.Response != null)                  {                      state.StatusCode = ((HttpWebResponse)ex.Response).StatusCode;                  }                  else if (ex.Message.ToLower().Contains("request was aborted"))                  {                      state.StatusCode = HttpStatusCode.RequestTimeout;                      StatusDescription = "Request cancelled by client because the server did not respond within timeout";                  }                  else                  {                      state.StatusCode = (HttpStatusCode)(-2);                  }  #if !NETCF                  ex.Data.Add("StatusCode"' state.StatusCode);                  ex.Data.Add("StatusDescription"' StatusDescription);  #endif                  OnError(state);                  allDone.Set();              }              catch (Exception ex)              {  #if !NETCF                  ex.Data.Add("Uri"' state.Uri);                  ex.Data.Add("Verb"' state.Verb);  #endif                  state.ErrorMessage = errorMsg;                  state.Exception = ex;                  state.StatusCode = (HttpStatusCode)(-2);                  OnError(state);                  allDone.Set();              }
Magic Number,MonoCross.Utilities.Network,PosterAsynch,C:\repos\MonoCross_MonoCross\Utilities\Network\Post\PosterAsynch.cs,GetResponseCallback,The following statement contains a magic number: try              {                  // End the Asynchronous response and get the actual response object                  response = (HttpWebResponse)request.EndGetResponse(asynchronousResult);                    state.StatusCode = response.StatusCode;                    switch (response.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Created:                      case HttpStatusCode.Accepted:                          break;                      case HttpStatusCode.NoContent:                          Device.Log.Info("Empty payload returned in PosterAsynch: Result {0} for {1}"' state.StatusCode' request.RequestUri);                          break;                      default:                          state.ErrorMessage = String.Format("{0} failed. Received HTTP {1} for {2}"' state.Verb' response.StatusCode' state.Uri);                          Device.Log.Error(state.ErrorMessage);                          state.Expiration = DateTime.UtcNow;                          state.AttemptToRefresh = DateTime.UtcNow;                          OnComplete(state);                            return;                  }                    // extract response into bytes and string.                  WebResponse webResponse = NetworkUtils.ExtractResponse(response);                  state.ResponseBytes = webResponse.ResponseBytes;                  state.ResponseString = webResponse.ResponseString;                  state.ResponseHeaders = webResponse.ResponseHeaders;  #if !NETCF                  state.Expiration = response.Headers["Expires"].TryParseDateTimeUtc();                  state.AttemptToRefresh = response.Headers["MonoCross-Attempt-Refresh"].TryParseDateTimeUtc();  #endif                  OnComplete(state);              }              catch (WebException ex)              {                  string StatusDescription = string.Empty;                  string message = string.Format("Call to {0} had a Webexception. {1}   Status: {2}"' state.Request.RequestUri' ex.Message' ex.Status);  #if !NETCF                  ex.Data.Add("WebException.StatusCode"' ex.Status);                  ex.Data.Add("Uri"' state.Uri);                  ex.Data.Add("Verb"' state.Verb);                    ex.Data.Add("StatusCode"' state.StatusCode);  #endif                  if (ex.Response != null)                  {                      state.StatusCode = ((HttpWebResponse)ex.Response).StatusCode;                      StatusDescription = ((HttpWebResponse)ex.Response).StatusDescription;                      state.ResponseHeaders = ex.Response.Headers;                  }                  else if (ex.Message.ToLower().Contains("request was aborted"))                  {                      state.StatusCode = HttpStatusCode.RequestTimeout;                      StatusDescription = "Request cancelled by client because the server did not respond within timeout";                  }                  else                  {                      state.StatusCode = (HttpStatusCode)(-2);                  }                  state.WebExceptionStatusCode = ex.Status;  #if !NETCF                  ex.Data.Add("WebException.Status"' ex.Status);                  ex.Data.Add("StatusDescription"' StatusDescription);  #endif                  state.ErrorMessage = message;                  state.Exception = ex;                  state.Expiration = DateTime.UtcNow;                  state.AttemptToRefresh = DateTime.UtcNow;                    OnError(state);              }              catch (Exception ex)              {                  // TODO: Consider adding custom post exceptions...                  string message = string.Format("Call to {0} had an Exception. {1}"' state.Request.RequestUri' ex.Message);                  Exception qexc = new Exception(message' ex);  #if !NETCF                  qexc.Data.Add("Uri"' state.Uri);                  qexc.Data.Add("Verb"' state.Verb);  #endif                  state.ErrorMessage = message;                  state.Exception = qexc;                  state.Expiration = DateTime.UtcNow;                  state.AttemptToRefresh = DateTime.UtcNow;                  state.StatusCode = (HttpStatusCode)(-1);                  state.WebExceptionStatusCode = (WebExceptionStatus)(-1);                    OnError(state);              }              finally              {                  // Release the HttpWebResponse                  if (response != null)                      ((IDisposable)response).Dispose();                  state.Request = null;                    allDone.Set();              }
Magic Number,MonoCross.Utilities.Threading,IdleThreadQueue,C:\repos\MonoCross_MonoCross\Utilities\Threading\IdleThreadQueue.cs,TriggerTimer,The following statement contains a magic number: if (_timer != null)              {                  // execute again in 10 seconds.                  _timer.Change(10 * 1000' Timeout.Infinite);              }              else              {                  _timer = new Timer(new TimerCallback((o) =>                  {                      ProcessQueue();                  })' null' 1 * 1000' Timeout.Infinite);              }
Magic Number,MonoCross.Utilities.Threading,IdleThreadQueue,C:\repos\MonoCross_MonoCross\Utilities\Threading\IdleThreadQueue.cs,TriggerTimer,The following statement contains a magic number: if (_timer != null)              {                  // execute again in 10 seconds.                  _timer.Change(10 * 1000' Timeout.Infinite);              }              else              {                  _timer = new Timer(new TimerCallback((o) =>                  {                      ProcessQueue();                  })' null' 1 * 1000' Timeout.Infinite);              }
Magic Number,MonoCross.Utilities.Threading,IdleThreadQueue,C:\repos\MonoCross_MonoCross\Utilities\Threading\IdleThreadQueue.cs,TriggerTimer,The following statement contains a magic number: if (_timer != null)              {                  // execute again in 10 seconds.                  _timer.Change(10 * 1000' Timeout.Infinite);              }              else              {                  _timer = new Timer(new TimerCallback((o) =>                  {                      ProcessQueue();                  })' null' 1 * 1000' Timeout.Infinite);              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,SerializeObject,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = SerializeObjectClear(obj);                      break;                  case EncryptionMode.Encryption:                      retval = SerializeObject(obj' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          SerializeObject(obj' Device.Encryption.Key' Device.Encryption.Salt) :                          SerializeObjectClear(obj);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,SerializeObjectToBytes,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      bytes = SerializeObjectToBytesClear(obj);                      break;                  case EncryptionMode.Encryption:                      bytes = SerializeObjectToBytes(obj' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      bytes = Device.Encryption.Required ?                          SerializeObjectToBytes(obj' Device.Encryption.Key' Device.Encryption.Salt) :                          SerializeObjectToBytesClear(obj);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,SerializeList,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = SerializeListClear(list);                      break;                  case EncryptionMode.Encryption:                      retval = SerializeList(list' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          SerializeList(list' Device.Encryption.Key' Device.Encryption.Salt) :                          SerializeListClear(list);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,SerializeListToBytes,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      bytes = SerializeListToBytesClear(list);                      break;                  case EncryptionMode.Encryption:                      bytes = SerializeListToBytes(list' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      bytes = Device.Encryption.Required ?                          SerializeListToBytes(list' Device.Encryption.Key' Device.Encryption.Salt) :                          SerializeListToBytesClear(list);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = DeserializeObjectClear(value);                      break;                  case EncryptionMode.Encryption:                      retval = DeserializeObject(value' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          DeserializeObject(value' Device.Encryption.Key' Device.Encryption.Salt) :                          DeserializeObjectClear(value);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,DeserializeObject,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = DeserializeObjectClear(value);                      break;                  case EncryptionMode.Encryption:                      retval = DeserializeObject(value' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          DeserializeObject(value' Device.Encryption.Key' Device.Encryption.Salt) :                          DeserializeObjectClear(value);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,DeserializeList,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = DeserializeListClear(value);                      break;                  case EncryptionMode.Encryption:                      retval = DeserializeList(value' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          DeserializeList(value' Device.Encryption.Key' Device.Encryption.Salt) :                          DeserializeListClear(value);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,BaseSerializer<T>,C:\repos\MonoCross_MonoCross\Utilities\Serialization\BaseSerializer.cs,DeserializeList,The following switch statement is missing a default case: switch (mode)              {                  case EncryptionMode.NoEncryption:                      retval = DeserializeListClear(value);                      break;                  case EncryptionMode.Encryption:                      retval = DeserializeList(value' Device.Encryption.Key' Device.Encryption.Salt);                      break;                  case EncryptionMode.Default:                      retval = Device.Encryption.Required ?                          DeserializeList(value' Device.Encryption.Key' Device.Encryption.Salt) :                          DeserializeListClear(value);                      break;              }
Missing Default,MonoCross.Utilities.Serialization,SerializerFactory,C:\repos\MonoCross_MonoCross\Utilities\Serialization\SerializerFactory.cs,Create,The following switch statement is missing a default case: switch (format)              {                  case SerializationFormat.CUSTOM:                      if (customSerializerType == null)                          throw new ArgumentException("CustomSerializerType must be provided when SerializationFormat is CUSTOM");                      var instance = Activator.CreateInstance(customSerializerType);                      if (instance is ISerializer<T>)                          return (ISerializer<T>)instance;                      throw new ArgumentException(customSerializerType.FullName + " does not implement iSerializer<T>");                  case SerializationFormat.XML:                      return auxTypes != null ? new SerializerXml<T>(auxTypes) : new SerializerXml<T>();                  case SerializationFormat.JSON:                      return new SerializerJson<T>();                  case SerializationFormat.ODATA:                      return new SerializerOdata<T>();              }
