Implementation smell,Namespace,Class,File,Method,Description
Long Method,Algorithms,FractalRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\Interfaces.cs,SelectRender,The method has 116 lines of code.
Complex Method,Algorithms,FractalRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\Interfaces.cs,SelectRender,Cyclomatic complexity of the method is 24
Complex Method,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,Cyclomatic complexity of the method is 8
Long Parameter List,Algorithms,FractalRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\Interfaces.cs,SelectRender,The method has 7 parameters. Parameters: draw' abort' useVectorTypes' doublePrecision' isMultiThreaded' useAbstractDataType' dontUseIntTypes
Long Parameter List,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xmind' xmaxd' ymind' ymaxd' stepd
Long Parameter List,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xminf' xmaxf' yminf' ymaxf' stepf
Long Parameter List,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderMultiThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderMultiThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderSingleThreadedWithADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Parameter List,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderSingleThreadedNoADT,The method has 5 parameters. Parameters: xmin' xmax' ymin' ymax' step
Long Statement,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The length of the statement  "            var render = FractalRenderer.SelectRender(AddPixel' CheckAbort' UseSIMD' false' UseThreads' false); // always float' always raw " is 127.
Long Statement,Mandelbrot,App,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\App.xaml.cs,OnStartup,The length of the statement  "                MessageBox.Show("SIMD isn't enabled for the current process. Please make sure that" + Environment.NewLine + Environment.NewLine + " is 129.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The conditional expression  "xmin == xmax || ymin == ymax ||                      xmin + xstep <= xmin || ymin + ystep <= ymin ||                      ymax - ystep >= ymax || xmax - xstep >= xmax"  is complex.
Magic Number,Algorithms,ComplexFloat,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\Abstractions.cs,square,The following statement contains a magic number: return new ComplexFloat(Real * Real - Imaginary * Imaginary' 2.0f * Real * Imaginary);
Magic Number,Algorithms,extensions,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\Abstractions.cs,square,The following statement contains a magic number: return new Complex(val.Real * val.Real - val.Imaginary * val.Imaginary' 2.0 * val.Real * val.Imaginary);
Magic Number,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderSingleThreadedNoADT,The following statement contains a magic number: double naccumy = 2.0 * accumx * accumy;
Magic Number,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                  double y = ymin + step * yp;                  int xp = 0;                  for (double x = xmin; x < xmax; x += step' xp++)                  {                      Complex num = new Complex(x' y);                      Complex accum = num;                      int iters = 0;                      double sqabs = 0f;                      do                      {                          accum = accum.square();                          accum += num;                          iters++;                          sqabs = accum.sqabs();                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                  double y = ymin + step * yp;                  int xp = 0;                  for (double x = xmin; x < xmax; x += step' xp++)                  {                      double accumx = x;                      double accumy = y;                      int iters = 0;                      double sqabs = 0.0;                      do                      {                          double naccumx = accumx * accumx - accumy * accumy;                          double naccumy = 2.0 * accumx * accumy;                          accumx = naccumx + x;                          accumy = naccumy + y;                          iters++;                          sqabs = accumx * accumx + accumy * accumy;                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,ScalarDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarDouble.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                  double y = ymin + step * yp;                  int xp = 0;                  for (double x = xmin; x < xmax; x += step' xp++)                  {                      double accumx = x;                      double accumy = y;                      int iters = 0;                      double sqabs = 0.0;                      do                      {                          double naccumx = accumx * accumx - accumy * accumy;                          double naccumy = 2.0 * accumx * accumy;                          accumx = naccumx + x;                          accumy = naccumy + y;                          iters++;                          sqabs = accumx * accumx + accumy * accumy;                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderSingleThreadedNoADT,The following statement contains a magic number: float naccumy = 2.0f * accumx * accumy;
Magic Number,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                  float y = ymin + step * yp;                  int xp = 0;                  for (float x = xmin; x < xmax; x += step' xp++)                  {                      ComplexFloat num = new ComplexFloat(x' y);                      ComplexFloat accum = num;                      int iters = 0;                      float sqabs = 0f;                      do                      {                          accum = accum.square();                          accum += num;                          iters++;                          sqabs = accum.sqabs();                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                  float y = ymin + step * yp;                  int xp = 0;                  for (float x = xmin; x < xmax; x += step' xp++)                  {                      float accumx = x;                      float accumy = y;                      int iters = 0;                      float sqabs = 0f;                      do                      {                          float naccumx = accumx * accumx - accumy * accumy;                          float naccumy = 2.0f * accumx * accumy;                          accumx = naccumx + x;                          accumy = naccumy + y;                          iters++;                          sqabs = accumx * accumx + accumy * accumy;                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,ScalarFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\ScalarFloat.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                  float y = ymin + step * yp;                  int xp = 0;                  for (float x = xmin; x < xmax; x += step' xp++)                  {                      float accumx = x;                      float accumy = y;                      int iters = 0;                      float sqabs = 0f;                      do                      {                          float naccumx = accumx * accumx - accumy * accumy;                          float naccumy = 2.0f * accumx * accumy;                          accumx = naccumx + x;                          accumy = naccumy + y;                          iters++;                          sqabs = accumx * accumx + accumy * accumy;                      } while (sqabs < limit && iters < max_iters);                        DrawPixel(xp' yp' iters);                  }              });
Magic Number,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                    Vector<double> vy = new Vector<double>(ymin + step * yp);                  int xp = 0;                  for (Vector<double> vx = vxmin; Vector.LessThanOrEqualAny(vx' vxmax); vx += vinc' xp += Vector<long>.Count)                  {                      Vector<double> accumx = vx;                      Vector<double> accumy = vy;                        Vector<long> viters = Vector<long>.Zero;                      Vector<long> increment = Vector<long>.One;                        do                      {                          Vector<double> naccumx = accumx * accumx - accumy * accumy;                          Vector<double> naccumy = accumx * accumy + accumx * accumy;                          accumx = naccumx + vx;                          accumy = naccumy + vy;                          viters += increment;                          Vector<double> sqabs = accumx * accumx + accumy * accumy;                          Vector<long> vCond = Vector.LessThanOrEqual(sqabs' vlimit) &                              Vector.LessThanOrEqual(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<long>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorDoubleRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDouble.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                    Vector<double> vy = new Vector<double>(ymin + step * yp);                  int xp = 0;                  for (Vector<double> vx = vxmin; Vector.LessThanOrEqualAny(vx' vxmax); vx += vinc' xp += Vector<long>.Count)                  {                      ComplexVecDouble num = new ComplexVecDouble(vx' vy);                      ComplexVecDouble accum = num;                        Vector<long> viters = Vector<long>.Zero;                      Vector<long> increment = Vector<long>.One;                        do                      {                          accum = accum.square() + num;                          viters += increment;                           Vector<long> vCond = Vector.LessThanOrEqual(accum.sqabs()' vlimit) &                              Vector.LessThanOrEqual(viters' vmax_iters);                          increment = increment & vCond;                       } while (increment != Vector<long>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                    Vector<double> vy = new Vector<double>(ymin + step * yp);                  int xp = 0;                  for (Vector<double> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<double>.Count)                  {                      ComplexVecDouble num = new ComplexVecDouble(vx' vy);                      ComplexVecDouble accum = num;                        Vector<double> viters = Vector<double>.Zero;                      Vector<double> increment = Vector<double>.One;                      do                      {                          accum = accum.square() + num;                          viters += increment;                          Vector<double> vCond = Vector.LessThanOrEqual<double>(accum.sqabs()' vlimit) &                              Vector.LessThanOrEqual<double>(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<double>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorDoubleStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorDoubleStrict.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5)' (yp) =>              {                  if (Abort)                      return;                    Vector<double> vy = new Vector<double>(ymin + step * yp);                  int xp = 0;                  for (Vector<double> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<double>.Count)                  {                      Vector<double> accumx = vx;                      Vector<double> accumy = vy;                        Vector<double> viters = Vector<double>.Zero;                      Vector<double> increment = Vector<double>.One;                      do                      {                          Vector<double> naccumx = accumx * accumx - accumy * accumy;                          Vector<double> naccumy = accumx * accumy + accumx * accumy;                          accumx = naccumx + vx;                          accumy = naccumy + vy;                          viters += increment;                          Vector<double> sqabs = accumx * accumx + accumy * accumy;                          Vector<double> vCond = Vector.LessThanOrEqual<double>(sqabs' vlimit) &                              Vector.LessThanOrEqual<double>(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<double>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                    Vector<float> vy = new Vector<float>(ymin + step * yp);                  int xp = 0;                  for (Vector<float> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<int>.Count)                  {                      Vector<float> accumx = vx;                      Vector<float> accumy = vy;                        Vector<int> viters = Vector<int>.Zero;                      Vector<int> increment = Vector<int>.One;                      do                      {                          Vector<float> naccumx = accumx * accumx - accumy * accumy;                          Vector<float> XtimesY = accumx * accumy;                          Vector<float> naccumy = XtimesY + XtimesY;                          accumx = naccumx + vx;                          accumy = naccumy + vy;                          viters += increment;                          Vector<float> sqabs = accumx * accumx + accumy * accumy;                          Vector<int> vCond = Vector.LessThanOrEqual(sqabs' vlimit) &                              Vector.LessThanOrEqual(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<int>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorFloatRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloat.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                    Vector<float> vy = new Vector<float>(ymin + step * yp);                  int xp = 0;                  for (Vector<float> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<int>.Count)                  {                      ComplexVecFloat num = new ComplexVecFloat(vx' vy);                      ComplexVecFloat accum = num;                        Vector<int> viters = Vector<int>.Zero;                      Vector<int> increment = Vector<int>.One;                      do                      {                          accum = accum.square() + num;                          viters += increment;                          Vector<int> vCond = Vector.LessThanOrEqual(accum.sqabs()' vlimit) &                              Vector.LessThanOrEqual(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<int>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' iter));                  }              });
Magic Number,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderMultiThreadedWithADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                    Vector<float> vy = new Vector<float>(ymin + step * yp);                  int xp = 0;                  for (Vector<float> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<int>.Count)                  {                      ComplexVecFloat num = new ComplexVecFloat(vx' vy);                      ComplexVecFloat accum = num;                        Vector<float> viters = Vector<float>.Zero;                      Vector<float> increment = Vector<float>.One;                      do                      {                          accum = accum.square() + num;                          viters += increment;                          Vector<float> vCond = Vector.LessThanOrEqual<float>(accum.sqabs()' vlimit) &                              Vector.LessThanOrEqual<float>(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<float>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Algorithms,VectorFloatStrictRenderer,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\VectorFloatStrict.cs,RenderMultiThreadedNoADT,The following statement contains a magic number: Parallel.For(0' (int)(((ymax - ymin) / step) + .5f)' (yp) =>              {                  if (Abort)                      return;                    Vector<float> vy = new Vector<float>(ymin + step * yp);                  int xp = 0;                  for (Vector<float> vx = vxmin; Vector.LessThanOrEqualAll(vx' vxmax); vx += vinc' xp += Vector<float>.Count)                  {                      Vector<float> accumx = vx;                      Vector<float> accumy = vy;                        Vector<float> viters = Vector<float>.Zero;                      Vector<float> increment = Vector<float>.One;                      do                      {                          Vector<float> naccumx = accumx * accumx - accumy * accumy;                          Vector<float> naccumy = accumx * accumy + accumx * accumy;                          accumx = naccumx + vx;                          accumy = naccumy + vy;                          viters += increment;                          Vector<float> sqabs = accumx * accumx + accumy * accumy;                          Vector<float> vCond = Vector.LessThanOrEqual<float>(sqabs' vlimit) &                              Vector.LessThanOrEqual<float>(viters' vmax_iters);                          increment = increment & vCond;                      } while (increment != Vector<float>.Zero);                        viters.ForEach((iter' elemNum) => DrawPixel(xp + elemNum' yp' (int)iter));                  }              });
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float xs = -0.5f;
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float rs = 3.0f;
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float xe = -.2649f;
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float ye = -.8506f;
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float re = 0.00048828125f;
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: float scale = (float)Math.Pow(l * i' 0.03125);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,FlyThru,The following statement contains a magic number: renderClock = new DispatcherTimer() { Interval = new TimeSpan(0' 0' 0' 0' 16) };
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Begin_Click,The following statement contains a magic number: cw < 10 || ch < 10
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Begin_Click,The following statement contains a magic number: cw < 10 || ch < 10
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,renderClock_Tick,The following statement contains a magic number: theBitmap = new WriteableBitmap(width' height' 96' 96' PixelFormats.Bgr32' null);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,renderClock_Tick,The following statement contains a magic number: theBitmap = new WriteableBitmap(width' height' 96' 96' PixelFormats.Bgr32' null);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,renderClock_Tick,The following statement contains a magic number: theBitmap.WritePixels(new Int32Rect(0' 0' width' height)' img' width * 4' 0' 0);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: int pos = 4 * (y * width + x);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: int val = 1000 - Math.Min(iters' 1000);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: int val = 1000 - Math.Min(iters' 1000);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte blue = (byte)(val % 43 * 23);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte blue = (byte)(val % 43 * 23);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte red = (byte)(val % 97 * 41);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte red = (byte)(val % 97 * 41);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte green = (byte)(val % 71 * 19);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,AddPixel,The following statement contains a magic number: byte green = (byte)(val % 71 * 19);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: byte[] buffer1 = new byte[cw * ch * 4];
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: byte[] buffer2 = new byte[cw * ch * 4];
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float xmin = (xc - scale / 2.0f).Clamp(-3.0f' 1f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float xmin = (xc - scale / 2.0f).Clamp(-3.0f' 1f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float xmax = (xc + scale / 2.0f).Clamp(-3.0f' 1f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float xmax = (xc + scale / 2.0f).Clamp(-3.0f' 1f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymax = (yc + scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymax = (yc + scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymax = (yc + scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymin = (yc - scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymin = (yc - scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: float ymin = (yc - scale / 2.0f).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: xmin = xc - (cw * step / 2);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: xmax = xc + (cw * step / 2);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: ymin = yc - (ch * step / 2);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,DrawMandelbrot,The following statement contains a magic number: ymax = yc + (ch * step / 2);
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Magic Number,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: XC = -1.248;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: YC = -.0362;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Range = .001;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: renderClock.Interval = new TimeSpan(0' 0' 0' 0' 100);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,renderClock_Tick,The following statement contains a magic number: theImage.Source = WriteableBitmap.Create(width' height' 96' 96' PixelFormats.Bgr32' null' bytes' width * 4);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,renderClock_Tick,The following statement contains a magic number: theImage.Source = WriteableBitmap.Create(width' height' 96' 96' PixelFormats.Bgr32' null' bytes' width * 4);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,renderClock_Tick,The following statement contains a magic number: theImage.Source = WriteableBitmap.Create(width' height' 96' 96' PixelFormats.Bgr32' null' bytes' width * 4);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,ResetValues,The following statement contains a magic number: XC = -0.5;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,ResetValues,The following statement contains a magic number: Range = 3.0;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: int pos = 4 * (y * width + x);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: int val = 1000 - Math.Min(iters' 1000);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: int val = 1000 - Math.Min(iters' 1000);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte blue = (byte)(val % 43 * 23);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte blue = (byte)(val % 43 * 23);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte red = (byte)(val % 97 * 41);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte red = (byte)(val % 97 * 41);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte green = (byte)(val % 71 * 19);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,AddPixel,The following statement contains a magic number: byte green = (byte)(val % 71 * 19);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: bytes = new byte[width * height * 4];
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double xmin = (xc - range / 2.0).Clamp(-3.0' 1);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double xmin = (xc - range / 2.0).Clamp(-3.0' 1);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double xmax = (xc + range / 2.0).Clamp(-3.0' 1);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double xmax = (xc + range / 2.0).Clamp(-3.0' 1);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymin = (yc - range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymin = (yc - range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymin = (yc - range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymax = (yc + range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymax = (yc + range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: double ymax = (yc + range / 2.0).Clamp(-1.5f' 1.5f);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: xmin = xc - (cw * step / 2);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: xmax = xc + (cw * step / 2);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: ymin = yc - (ch * step / 2);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,DrawMandelbrot,The following statement contains a magic number: ymax = yc + (ch * step / 2);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: double r = RenderRange / 2.0;
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: XC = ext.Clamp(RenderXC - ratioX * RenderRange / 2.0 + ratioX * RenderRange * p.X / canvas.ActualWidth' -3.0' 1.0);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: XC = ext.Clamp(RenderXC - ratioX * RenderRange / 2.0 + ratioX * RenderRange * p.X / canvas.ActualWidth' -3.0' 1.0);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: YC = ext.Clamp(RenderYC - ratioY * RenderRange / 2.0 + ratioY * RenderRange * p.Y / canvas.ActualHeight' -2.0' 2.0);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: YC = ext.Clamp(RenderYC - ratioY * RenderRange / 2.0 + ratioY * RenderRange * p.Y / canvas.ActualHeight' -2.0' 2.0);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,canvas_MouseLeftButtonUp,The following statement contains a magic number: YC = ext.Clamp(RenderYC - ratioY * RenderRange / 2.0 + ratioY * RenderRange * p.Y / canvas.ActualHeight' -2.0' 2.0);
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Magic Number,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
Missing Default,Mandelbrot,FlyThru,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\FlyThru.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.BeginButton = ((System.Windows.Controls.Button)(target));                            #line 59 "..\..\FlyThru.xaml"              this.BeginButton.Click += new System.Windows.RoutedEventHandler(this.Begin_Click);                            #line default              #line hidden              return;              }
Missing Default,Mandelbrot,MainWindow,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\System.Numerics\SIMD\Mandelbrot\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.canvas = ((System.Windows.Controls.Canvas)(target));                            #line 42 "..\..\MainWindow.xaml"              this.canvas.SizeChanged += new System.Windows.SizeChangedEventHandler(this.Canvas_SizeChanged);                            #line default              #line hidden                            #line 42 "..\..\MainWindow.xaml"              this.canvas.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 2:              this.theImage = ((System.Windows.Controls.Image)(target));                            #line 43 "..\..\MainWindow.xaml"              this.theImage.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.canvas_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 3:                            #line 58 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Render_Click);                            #line default              #line hidden              return;              case 4:                            #line 59 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Reset_Click);                            #line default              #line hidden              return;              case 5:              this.xcElem = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.ycElem = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.scaleElem = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.slider = ((System.Windows.Controls.Slider)(target));              return;              }
