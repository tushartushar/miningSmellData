Implementation smell,Namespace,Class,File,Method,Description
Long Method,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The method has 125 lines of code.
Long Method,TraceEventSamples,KernelAndClrMonitorWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\33_KernelAndClrMonitorWin7.cs,Run,The method has 102 lines of code.
Long Method,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The method has 118 lines of code.
Long Method,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The method has 103 lines of code.
Long Statement,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The length of the statement  "                // Hook up events.   To so this first we need a 'Parser. which knows how to part the events of a particular Event Provider. " is 123.
Long Statement,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The length of the statement  "                session.Source.Dynamic.AddCallbackForProviderEvent("Microsoft-Demos-SimpleMonitor"' "MyFirstEvent"' delegate(TraceEvent data) " is 125.
Long Statement,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The length of the statement  "                session.Source.Dynamic.AddCallbackForProviderEvent("Microsoft-Demos-SimpleMonitor"' "MySecondEvent"' delegate(TraceEvent data) " is 126.
Long Statement,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The length of the statement  "                // The callback above will only be called for events the parser recognizes (in the case of DynamicTraceEventParser' EventSources) " is 129.
Long Statement,TraceEventSamples,SimpleEventSourceMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\10_SimpleEventSourceMonitor.cs,Run,The length of the statement  "                // It is sometimes useful to see the other events that are not otherwise being handled.  The source knows about these and you  " is 125.
Long Statement,TraceEventSamples,SimpleEventSourceFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\11_SimpleEventSourceFile.cs,CollectData,The length of the statement  "            using (var session = new TraceEventSession(sessionName' dataFileName))      // Since we give it a file name' the data goes there.    " is 129.
Long Statement,TraceEventSamples,SimpleEventSourceFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\11_SimpleEventSourceFile.cs,ProcessData,The length of the statement  "                // Hook up events.   To so this first we need a 'Parser. which knows how to part the events of a particular Event Provider. " is 123.
Long Statement,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The length of the statement  "                    Out.WriteLine("GC Alloc  :  Proc: {0'10} Amount: {1'6:f1}K  TypeSample: {2}"' GetProcessName(allocData.ProcessID)' allocData.AllocationAmount / 1000.0' allocData.TypeName)); " is 173.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                userSession.EnableProvider(ClrTraceEventParser.ProviderGuid' TraceEventLevel.Verbose' (ulong)(ClrTraceEventParser.Keywords.Default)); " is 133.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                IObservable<MethodJittingStartedTraceData> jitStartStream = userSession.Source.Clr.Observe<MethodJittingStartedTraceData>("Method/JittingStarted"); " is 147.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                IObservable<MethodLoadUnloadVerboseTraceData> jitEndStream = userSession.Source.Clr.Observe<MethodLoadUnloadVerboseTraceData>("Method/LoadVerbose"); " is 148.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // Compute the stream of matched-up pairs' and for each create a tuple of the start event and the time between the pair of events.   " is 130.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // Note that the 'Take(1)' is pretty important because a nested 'from' statement logically creates the 'cross product' of a two streams " is 135.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // In this case the stream of starts and the stream of ends).   Because we filter this stream only to matching entities and then only " is 133.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // take the first entry' we stop waiting.   Thus we only 'remember' those 'starts' that are not yet matched' which is very important " is 132.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // for efficiency.   Note that any 'lost' end events will never be matched and will accumulate over time' slowing things down. " is 126.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                jitTimes.Subscribe(onNext: jitData => Out.WriteLine("JIT_TIME: {0'7:f2} PROC: {1'10} METHOD: {2}"' jitData.JitTIme' GetProcessName(jitData.ProcessID)' jitData.Name)); " is 166.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The length of the statement  "                // unhandledEventStream.Subscribe(onNext: ev => Out.WriteLine("UNHANDLED :  PID: {0'5} {1}/{2} "' ev.ProcessID' ev.ProviderName' ev.EventName)); " is 144.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,ComputeRunningStats,The length of the statement  "                             new { curCount = 0' curSum = 0.0' curSumSquares = 0.0' curMin = double.PositiveInfinity' curMax = double.NegativeInfinity }' " is 124.
Long Statement,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,ComputeRunningStats,The length of the statement  "                            Deviation = Math.Sqrt((accum.curCount * accum.curSumSquares - accum.curSum * accum.curSum) / (accum.curCount * accum.curCount - 1))' " is 132.
Long Statement,TraceEventSamples,Statistics,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,ToString,The length of the statement  "{ return string.Format("STATS: count {0} avg {1:F1}. stddev {2:F1}. min {3:F1}. max {4:F1}."' Count' Average' Deviation' Min' Max); }" is 133.
Long Statement,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,Run,The length of the statement  "                IObservable<TraceEvent> firstEventStream = userSession.Source.Dynamic.Observe("Microsoft-Demos-SimpleMonitor"' "MyFirstEvent"); " is 127.
Long Statement,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,Run,The length of the statement  "                firstEventStream.Subscribe(onNext: ev => Out.WriteLine("FIRST_EVENTS :  MyName: '{0}' MyId: {1}"' ev.PayloadByName("MyName")' ev.PayloadByName("MyId"))); " is 153.
Long Statement,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,Run,The length of the statement  "                IObservable<TraceEvent> secondEventStream = userSession.Source.Dynamic.Observe("Microsoft-Demos-SimpleMonitor"' "MySecondEvent"); " is 129.
Long Statement,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,Run,The length of the statement  "                // It is also useful for debugging purposes to see any events that entered by were not handled by any parser.   These can be bugs.   " is 130.
Long Statement,TraceEventSamples,ModuleLoadMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\30_MonitorLoads.cs,Run,The length of the statement  "                    cancelArgs.Cancel = true;                   // This says don't abort' since Process() will return we can terminate nicely.    " is 122.
Long Statement,TraceEventSamples,ModuleLoadMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\30_MonitorLoads.cs,Run,The length of the statement  "                // Enable the Kernel events that we want.   At this point data is being collected (but being buffered since we are not reading it) " is 130.
Long Statement,TraceEventSamples,ModuleLoadMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\30_MonitorLoads.cs,Run,The length of the statement  "                // .ImageLoad is an event that you can subscribe to that will be called back when Image load events happen (complete with parsed event) " is 135.
Long Statement,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,DataProcessing,The length of the statement  "                // It is sometimes useful to see the other events that are not otherwise being handled.  The source knows about these and you  " is 125.
Long Statement,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,DataProcessing,The length of the statement  "                // It is sometimes useful to see the other events that are not otherwise being handled.  The source knows about these and you  " is 125.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "            using (var session = new TraceEventSession(sessionName' dataFileName))      // Since we give it a file name' the data goes there.  " is 129.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "            using (var kernelSession = new TraceEventSession(KernelTraceEventParser.KernelSessionName' Path.ChangeExtension(dataFileName' ".kernel.etl"))) " is 142.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "                Console.CancelKeyPress += delegate(object sender' ConsoleCancelEventArgs e) { session.Dispose(); kernelSession.Dispose(); }; " is 124.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "                kernelSession.EnableKernelProvider(KernelTraceEventParser.Keywords.ImageLoad | KernelTraceEventParser.Keywords.Process | KernelTraceEventParser.Keywords.Thread); " is 161.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "                session.EnableProvider(ClrTraceEventParser.ProviderGuid' TraceEventLevel.Verbose' (ulong)ClrTraceEventParser.Keywords.Default); " is 127.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The length of the statement  "                    rundownSession.EnableProvider(ClrRundownTraceEventParser.ProviderGuid' TraceEventLevel.Verbose' (ulong)ClrRundownTraceEventParser.Keywords.Default); " is 148.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,ProcessData,The length of the statement  "            silentSymbolReader.Options = SymbolReaderOptions.CacheOnly;     // don't try to look things up on the network for source  " is 120.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,ProcessData,The length of the statement  "            silentSymbolReader.SecurityCheck = (pdbPath) => true;           // for this demo we trust any pdb location.   This lets us find the PDB of the demo itself " is 154.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,ProcessData,The length of the statement  "                Out.WriteLine("Found an EXCEPTION event in SimpleTraceLog: Type: {0} Message: {1}"' exceptionData.ExceptionType' exceptionData.ExceptionMessage); " is 145.
Long Statement,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,PrintStack,The length of the statement  "                        lineInfo = string.Format("  AT: {0}({1})"' Path.GetFileName(sourceLocation.SourceFile.BuildTimeFilePath)' sourceLocation.LineNumber); " is 133.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    // KernelTraceEventParser.Keywords.Thread |             // If you want context switch events you also need thread start events.   " is 127.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    KernelTraceEventParser.Keywords.Process'   /****** The second parameter indicates which kernel events should have stacks *****/ " is 127.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    (ulong)(ClrTraceEventParser.Keywords.Jit |              // Turning on JIT events is necessary to resolve JIT compiled code  " is 122.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    ClrTraceEventParser.Keywords.JittedMethodILToNativeMap | // This is needed if you want line number information in the stacks " is 124.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    ClrTraceEventParser.Keywords.Loader |                   // You must include loader events as well to resolve JIT compiled code.  " is 127.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    ClrTraceEventParser.Keywords.JittedMethodILToNativeMap | // This is needed if you want line number information in the stacks " is 124.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    // We use this action in the particular callbacks below.  Basically we pass in a symbol reader so we can decode the stack.   " is 122.
Long Statement,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The length of the statement  "                    // If you want to see stacks for various other kernel events' uncomment these (you also need to turn on the events above) " is 121.
Long Statement,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,DataProcessing,The length of the statement  "                // It is sometimes useful to see the other events that are not otherwise being handled.  The source knows about these and you  " is 125.
Long Statement,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The length of the statement  "                session.EnableProvider(ClrTraceEventParser.ProviderGuid' TraceEventLevel.Verbose' (ulong)ClrTraceEventParser.Keywords.Default); " is 127.
Long Statement,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The length of the statement  "                Out.WriteLine("The monitor will run for a maximum of {0} seconds.  Run managed code for more output."' monitoringTimeSec); " is 122.
Long Statement,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,DataProcessing,The length of the statement  "                // It is sometimes useful to see the other events that are not otherwise being handled.  The source knows about these and you  " is 125.
Empty Catch Block,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,GetProcessName,The method has an empty catch block.
Empty Catch Block,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,GetProcessName,The method has an empty catch block.
Empty Catch Block,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,GetProcessName,The method has an empty catch block.
Empty Catch Block,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,ThrowException1,The method has an empty catch block.
Empty Catch Block,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,GenerateExceptions,The method has an empty catch block.
Empty Catch Block,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,GenerateExceptions,The method has an empty catch block.
Magic Number,TraceEventSamples,SimpleEventSourceFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\11_SimpleEventSourceFile.cs,CollectData,The following statement contains a magic number: Thread.Sleep(12000);
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: gcAllocStream.Subscribe(allocData =>                      Out.WriteLine("GC Alloc  :  Proc: {0'10} Amount: {1'6:f1}K  TypeSample: {2}"' GetProcessName(allocData.ProcessID)' allocData.AllocationAmount / 1000.0' allocData.TypeName));
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: gcCollectStream.Subscribe(collectData =>                      Out.WriteLine("GC Collect:  Proc: {0'10} Gen0: {1'6:f1}M Gen1: {2'6:f1}M Gen2: {3'6:f1}M LargeObj: {4'6:f1}M"'                           GetProcessName(collectData.ProcessID)'                           collectData.GenerationSize0 / 1000000.0'                           collectData.GenerationSize1 / 1000000.0'                           collectData.GenerationSize2 / 1000000.0'                           collectData.GenerationSize3 / 1000000.0));
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: gcCollectStream.Subscribe(collectData =>                      Out.WriteLine("GC Collect:  Proc: {0'10} Gen0: {1'6:f1}M Gen1: {2'6:f1}M Gen2: {3'6:f1}M LargeObj: {4'6:f1}M"'                           GetProcessName(collectData.ProcessID)'                           collectData.GenerationSize0 / 1000000.0'                           collectData.GenerationSize1 / 1000000.0'                           collectData.GenerationSize2 / 1000000.0'                           collectData.GenerationSize3 / 1000000.0));
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: gcCollectStream.Subscribe(collectData =>                      Out.WriteLine("GC Collect:  Proc: {0'10} Gen0: {1'6:f1}M Gen1: {2'6:f1}M Gen2: {3'6:f1}M LargeObj: {4'6:f1}M"'                           GetProcessName(collectData.ProcessID)'                           collectData.GenerationSize0 / 1000000.0'                           collectData.GenerationSize1 / 1000000.0'                           collectData.GenerationSize2 / 1000000.0'                           collectData.GenerationSize3 / 1000000.0));
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,Run,The following statement contains a magic number: gcCollectStream.Subscribe(collectData =>                      Out.WriteLine("GC Collect:  Proc: {0'10} Gen0: {1'6:f1}M Gen1: {2'6:f1}M Gen2: {3'6:f1}M LargeObj: {4'6:f1}M"'                           GetProcessName(collectData.ProcessID)'                           collectData.GenerationSize0 / 1000000.0'                           collectData.GenerationSize1 / 1000000.0'                           collectData.GenerationSize2 / 1000000.0'                           collectData.GenerationSize3 / 1000000.0));
Magic Number,TraceEventSamples,ObserveGCEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\20_ObserveGCEvent.cs,GetProcessName,The following statement contains a magic number: (now - s_processNameCacheLastUpdate).TotalSeconds > 10
Magic Number,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,Run,The following statement contains a magic number: IObservable<Statistics> jitStats = ComputeRunningStats(jitTimes' jitData => jitData.JitTIme' windowSize: 8);
Magic Number,TraceEventSamples,ObserveJitEvents,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\21_ObserveJitEvents.cs,GetProcessName,The following statement contains a magic number: (now - s_processNameCacheLastUpdate).TotalSeconds > 10
Magic Number,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 15;
Magic Number,TraceEventSamples,ObserveEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\22_ObserveEventSource.cs,GetProcessName,The following statement contains a magic number: (now - s_processNameCacheLastUpdate).TotalSeconds > 10
Magic Number,TraceEventSamples,ModuleLoadMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\30_MonitorLoads.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,ModuleLoadMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\30_MonitorLoads.cs,Run,The following statement contains a magic number: var timer = new Timer(delegate(object state)                  {                      Out.WriteLine("Stopped after {0} sec"' monitoringTimeSec);                      session.Source.StopProcessing();                  }' null' monitoringTimeSec * 1000' Timeout.Infinite);
Magic Number,TraceEventSamples,KernelAndClrMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\31_KernelAndClrMonitor.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,KernelAndClrMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\31_KernelAndClrMonitor.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,KernelAndClrMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\31_KernelAndClrMonitor.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,KernelAndClrMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\31_KernelAndClrMonitor.cs,Run,The following statement contains a magic number: var timer = new Timer(delegate(object state)              {                  Out.WriteLine("Stopped Monitoring after {0} sec"' monitoringTimeSec);                  if (session != null)                      session.Dispose();              }' null' monitoringTimeSec * 1000' Timeout.Infinite);
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,DataCollection,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      if ((int)data.ID == 0xFFFE)         // The EventSource manifest events show up as unhandled' filter them out.                          return;                        // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      if ((int)data.ID == 0xFFFE)         // The EventSource manifest events show up as unhandled' filter them out.                          return;                        // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,KernelAndClrFile,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\32_KernelAndClrFile.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,KernelAndClrMonitorWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\33_KernelAndClrMonitorWin7.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,KernelAndClrMonitorWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\33_KernelAndClrMonitorWin7.cs,Run,The following statement contains a magic number: var timer = new Timer(delegate(object state)              {                  Out.WriteLine("Stopped Monitoring after {0} sec"' monitoringTimeSec);                  StopSessions();              }' null' monitoringTimeSec * 1000' Timeout.Infinite);
Magic Number,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,DataCollection,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      if ((int)data.ID == 0xFFFE)         // The EventSource manifest events show up as unhandled' filter them out.                          return;                        // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      if ((int)data.ID == 0xFFFE)         // The EventSource manifest events show up as unhandled' filter them out.                          return;                        // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,KernelAndClrFileWin7,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\34_KernelAndClrFileWin7.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The following statement contains a magic number: Thread.Sleep(12000);
Magic Number,TraceEventSamples,SimpleTraceLog,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\40_SimpleTraceLog.cs,CollectData,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The following statement contains a magic number: var monitoringTimeSec = 10;
Magic Number,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The following statement contains a magic number: var exceptionGeneationTask = Task.Factory.StartNew(delegate              {                  Thread.Sleep(3000);                  ThrowException();              });
Magic Number,TraceEventSamples,TraceLogMonitor,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\41_TraceLogMonitor.cs,Run,The following statement contains a magic number: timer = new Timer(delegate(object state)                      {                          Out.WriteLine("Stopped Monitoring after {0} sec"' monitoringTimeSec);                          if (session != null)                              session.Dispose();                          session = null;                      }' null' monitoringTimeSec * 1000' Timeout.Infinite);
Magic Number,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,DataCollection,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,SimpleFileRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\50_SimpleFileRelogger.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The following statement contains a magic number: int monitoringTimeSec = 10;
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The following statement contains a magic number: Environment.OSVersion.Version.Major * 10 + Environment.OSVersion.Version.Minor < 62
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Run,The following statement contains a magic number: var timer = new Timer(delegate(object state)                  {                      Out.WriteLine("Stopped after {0} sec"' monitoringTimeSec);                      session.Dispose();                  }' null' monitoringTimeSec * 1000' Timeout.Infinite);
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,DataProcessing,The following statement contains a magic number: source.UnhandledEvents += delegate(TraceEvent data)                  {                      // To avoid 'rundown' events that happen in the beginning and end of the trace filter out things during those times                      if (data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec)                          return;                        Out.WriteLine("GOT UNHANDLED EVENT: " + data.Dump());                  };
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,TraceEventSamples,SimpleMonitorRelogger,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\51_SimpleMonitorRelogger.cs,Print,The following statement contains a magic number: data.TimeStampRelativeMSec < 1000 || 9000 < data.TimeStampRelativeMSec
Magic Number,Producer,MyEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,MySecondEvent,The following statement contains a magic number: WriteEvent(2' MyId);
Magic Number,Producer,MyEventSource,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,Stop,The following statement contains a magic number: WriteEvent(3);
Magic Number,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,CreateEvents,The following statement contains a magic number: Task.Factory.StartNew(delegate                  {                      Out.WriteLine("***** Starting to generate events to Microsoft-Demos-SimpleMonitor for 10 seconds.");                      for (int i = 0; i < 10; i++)                      {                          Out.WriteLine("** Generating a MyFirst and MySecond from Microsoft-Demos-SimpleMonitor.");                          MyEventSource.Log.MyFirstEvent("Some string " + i.ToString()' i);                          Thread.Sleep(10);                          MyEventSource.Log.MySecondEvent(i);                          Out.WriteLine("Waiting a second");                          Thread.Sleep(1000);                      }                      Out.WriteLine("** Generating the Microsoft-Demos-SimpleMonitor Stop Event.");                      MyEventSource.Log.Stop();                  });
Magic Number,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,CreateEvents,The following statement contains a magic number: Task.Factory.StartNew(delegate                  {                      Out.WriteLine("***** Starting to generate events to Microsoft-Demos-SimpleMonitor for 10 seconds.");                      for (int i = 0; i < 10; i++)                      {                          Out.WriteLine("** Generating a MyFirst and MySecond from Microsoft-Demos-SimpleMonitor.");                          MyEventSource.Log.MyFirstEvent("Some string " + i.ToString()' i);                          Thread.Sleep(10);                          MyEventSource.Log.MySecondEvent(i);                          Out.WriteLine("Waiting a second");                          Thread.Sleep(1000);                      }                      Out.WriteLine("** Generating the Microsoft-Demos-SimpleMonitor Stop Event.");                      MyEventSource.Log.Stop();                  });
Magic Number,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,CreateEvents,The following statement contains a magic number: Task.Factory.StartNew(delegate                  {                      Out.WriteLine("***** Starting to generate events to Microsoft-Demos-SimpleMonitor for 10 seconds.");                      for (int i = 0; i < 10; i++)                      {                          Out.WriteLine("** Generating a MyFirst and MySecond from Microsoft-Demos-SimpleMonitor.");                          MyEventSource.Log.MyFirstEvent("Some string " + i.ToString()' i);                          Thread.Sleep(10);                          MyEventSource.Log.MySecondEvent(i);                          Out.WriteLine("Waiting a second");                          Thread.Sleep(1000);                      }                      Out.WriteLine("** Generating the Microsoft-Demos-SimpleMonitor Stop Event.");                      MyEventSource.Log.Stop();                  });
Magic Number,Producer,EventGenerator,D:\research\architectureSmells\repos\Microsoft_dotnetsamples\Microsoft.Diagnostics.Tracing\TraceEvent\TraceEvent\SupportFiles\EventProducer.cs,GenerateExceptions,The following statement contains a magic number: MethodB(-3);
