Implementation smell,Namespace,Class,File,Method,Description
Long Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The method has 109 lines of code.
Long Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The method has 153 lines of code.
Long Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The method has 135 lines of code.
Complex Method,PerformanceLab.Utils.ReportMaker,ConfigMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ConfigMaster.cs,ConfigMaster,Cyclomatic complexity of the method is 9
Complex Method,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,Cyclomatic complexity of the method is 9
Complex Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,Cyclomatic complexity of the method is 11
Complex Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,Cyclomatic complexity of the method is 12
Complex Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,Cyclomatic complexity of the method is 30
Complex Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,Cyclomatic complexity of the method is 12
Complex Method,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,Cyclomatic complexity of the method is 26
Complex Method,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,Cyclomatic complexity of the method is 19
Complex Method,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,addMetFilesButton_Click,Cyclomatic complexity of the method is 22
Long Parameter List,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The method has 5 parameters.
Long Parameter List,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The method has 6 parameters.
Long Parameter List,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The method has 5 parameters.
Long Parameter List,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The method has 5 parameters.
Long Parameter List,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The method has 5 parameters.
Long Parameter List,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The method has 5 parameters.
Long Statement,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The length of the statement  "			_perl.StartInfo.Arguments = " /c \"cd parser && type \"" + sourceLogFile.FullName + "\" | " + AGGREGATE_REPORT_PARSER_NAME + " " + fromTime + " " + toTime + "\""; " is 162.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The length of the statement  "	newSheet.Cells ["F6"].Hyperlink = new ExcelHyperLink (_excelFile.Workbook.Worksheets ["CPU_All"].Name + "!A1"' "График загрузки по всем ядрам"); " is 144.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The length of the statement  "	newSheet.Cells ["F10"].Hyperlink = new ExcelHyperLink (_excelFile.Workbook.Worksheets ["CPU"].Name + "!A1"' "Данные по процессору"); " is 132.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The length of the statement  "	newSheet.Cells ["F15"].Hyperlink = new ExcelHyperLink (_excelFile.Workbook.Worksheets ["Mem"].Name + "!A1"' "Данные по памяти"); " is 128.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The length of the statement  "	newSheet.Cells ["F21"].Hyperlink = new ExcelHyperLink (_excelFile.Workbook.Worksheets ["Disk_use"].Name + "!A1"' "Данные по дискам (нагрузка)"); " is 144.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The length of the statement  "	newSheet.Cells ["F22"].Hyperlink = new ExcelHyperLink (_excelFile.Workbook.Worksheets ["Disk_io"].Name + "!A1"' "Данные по дискам (время отклика)"); " is 148.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The length of the statement  "			if (!((row > 1) && (DateTime.Parse (newSheet.Cells ["A" + row].Text) >= (DateTime.Parse (fromTime)) && (DateTime.Parse (newSheet.Cells ["A" + row].Text) <= (DateTime.Parse (toTime)))))) { " is 187.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The length of the statement  "	if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) { " is 152.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The length of the statement  "	if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("mem")) { " is 151.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The length of the statement  "	if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("disk_io")) { " is 155.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The length of the statement  "	if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("sar-disk")) { " is 156.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The length of the statement  "	if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu_")) { " is 152.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) { " is 132.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) { " is 132.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "					// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address); " is 177.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "				var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 172.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "				var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 171.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The length of the statement  "				var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 168.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The length of the statement  "			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) { " is 131.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The length of the statement  "						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress; " is 175.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The length of the statement  "						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress; " is 175.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The length of the statement  "				newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address); " is 261.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The length of the statement  "			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 168.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The length of the statement  "				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) { " is 135.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The length of the statement  "				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) { " is 136.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The length of the statement  "				var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 168.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The length of the statement  "				var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2)); " is 168.
Long Statement,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,hideLists,The length of the statement  "		if (_excelFile.Workbook.Worksheets [page].Name.Contains (bf.ToLower ()) || _excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") || _excelFile.Workbook.Worksheets [page].Name.Contains ("201")) " is 200.
Long Statement,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,buttonMakeXLSX_Click,The length of the statement  "				throw new Exception ("Не заданы параметры запуска: файлы с метриками должны находиться в папке Metrics' в папке соответствующего сервера!"); " is 140.
Long Statement,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,addMetFilesButton_Click,The length of the statement  "			foreach (var res in Directory.GetFiles (metrFoldBrowserDialog.SelectedPath' "*sys_info.txt*"' SearchOption.AllDirectories)) " is 123.
Long Statement,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,addMetFilesButton_Click,The length of the statement  "			foreach (var res in Directory.GetFiles (metrFoldBrowserDialog.SelectedPath' "*day-aggregate*"' SearchOption.AllDirectories)) " is 124.
Long Statement,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,metricsGridView_RowsAdded,The length of the statement  "			metricsGridView [1' i + e.RowIndex].Value = jMeterLogDictionary.Lookup (System.IO.Path.GetFileName (metricsGridView [0' i + e.RowIndex].Value.ToString ())); " is 156.
Long Statement,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,metricsGridView_RowsAdded,The length of the statement  "			JmeterGridView [1' i + e.RowIndex].Value = jMeterLogDictionary.Lookup (System.IO.Path.GetFileName (JmeterGridView [0' i + e.RowIndex].Value.ToString ())); " is 154.
Long Statement,PerformanceLab.Utils.ReportMaker,Popup,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\Popup.cs,ShowException,The length of the statement  "	return MessageBox.Show ("Произошла ошибка:\n" + ex.Message + "\n\nПодробная информация:\n" + ex.StackTrace' "Error!"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 162.
Complex Conditional,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,buttonMakeXLSX_Click,The conditional expression  "(numericEffort.Value == 0 || numericRump.Value < 0 || numericUpDown1.Value < 0) && checkBoxTime.Checked == false"  is complex.
Empty Catch Block,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,Finish,The method has an empty catch block.
Empty Catch Block,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The method has an empty catch block.
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: try {  	using (_perl = new Process ()) {  		_perl.StartInfo.FileName = "cmd.exe";  		_perl.StartInfo.Arguments = " /c \"cd parser && type \"" + sourceLogFile.FullName + "\" | " + AGGREGATE_REPORT_PARSER_NAME + " " + fromTime + " " + toTime + "\"";  		_perl.StartInfo.RedirectStandardError = false;  		_perl.StartInfo.RedirectStandardInput = false;  		_perl.StartInfo.RedirectStandardOutput = true;  		_perl.StartInfo.CreateNoWindow = true;  		_perl.StartInfo.StandardOutputEncoding = Encoding.UTF8;  		_perl.StartInfo.Verb = "Open";  		_perl.StartInfo.UseShellExecute = false;  		_perl.Start ();  		Thread.Sleep (1000);  		// время на одупление  		if (_perl.HasExited && _perl.ExitCode != 0)// если какой-то косяк с парсером (например' неверный формат input-файла)  		 {  			return duration;  		}  		using (var stdout = _perl.StandardOutput) {  			excelMaster.AddAggregateReportWorksheet (sheetName' stdout);  		}  		//excelMaster.AddMainSheet("Main"' 3000);  		duration = _perl.ExitTime - _perl.StartTime;  	}  }  catch (InvalidOperationException) {  	return duration;  }  catch (FileNotFoundException) {  	Stop ();  	return new TimeSpan (-3);  }  catch (ThreadInterruptedException) {  	Stop ();  	return new TimeSpan (-2);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: try {  	using (_perl = new Process ()) {  		_perl.StartInfo.FileName = "cmd.exe";  		_perl.StartInfo.Arguments = " /c \"cd parser && type \"" + sourceLogFile.FullName + "\" | " + AGGREGATE_REPORT_PARSER_NAME + " " + fromTime + " " + toTime + "\"";  		_perl.StartInfo.RedirectStandardError = false;  		_perl.StartInfo.RedirectStandardInput = false;  		_perl.StartInfo.RedirectStandardOutput = true;  		_perl.StartInfo.CreateNoWindow = true;  		_perl.StartInfo.StandardOutputEncoding = Encoding.UTF8;  		_perl.StartInfo.Verb = "Open";  		_perl.StartInfo.UseShellExecute = false;  		_perl.Start ();  		Thread.Sleep (1000);  		// время на одупление  		if (_perl.HasExited && _perl.ExitCode != 0)// если какой-то косяк с парсером (например' неверный формат input-файла)  		 {  			return duration;  		}  		using (var stdout = _perl.StandardOutput) {  			excelMaster.AddAggregateReportWorksheet (sheetName' stdout);  		}  		//excelMaster.AddMainSheet("Main"' 3000);  		duration = _perl.ExitTime - _perl.StartTime;  	}  }  catch (InvalidOperationException) {  	return duration;  }  catch (FileNotFoundException) {  	Stop ();  	return new TimeSpan (-3);  }  catch (ThreadInterruptedException) {  	Stop ();  	return new TimeSpan (-2);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: try {  	using (_perl = new Process ()) {  		_perl.StartInfo.FileName = "cmd.exe";  		_perl.StartInfo.Arguments = " /c \"cd parser && type \"" + sourceLogFile.FullName + "\" | " + AGGREGATE_REPORT_PARSER_NAME + " " + fromTime + " " + toTime + "\"";  		_perl.StartInfo.RedirectStandardError = false;  		_perl.StartInfo.RedirectStandardInput = false;  		_perl.StartInfo.RedirectStandardOutput = true;  		_perl.StartInfo.CreateNoWindow = true;  		_perl.StartInfo.StandardOutputEncoding = Encoding.UTF8;  		_perl.StartInfo.Verb = "Open";  		_perl.StartInfo.UseShellExecute = false;  		_perl.Start ();  		Thread.Sleep (1000);  		// время на одупление  		if (_perl.HasExited && _perl.ExitCode != 0)// если какой-то косяк с парсером (например' неверный формат input-файла)  		 {  			return duration;  		}  		using (var stdout = _perl.StandardOutput) {  			excelMaster.AddAggregateReportWorksheet (sheetName' stdout);  		}  		//excelMaster.AddMainSheet("Main"' 3000);  		duration = _perl.ExitTime - _perl.StartTime;  	}  }  catch (InvalidOperationException) {  	return duration;  }  catch (FileNotFoundException) {  	Stop ();  	return new TimeSpan (-3);  }  catch (ThreadInterruptedException) {  	Stop ();  	return new TimeSpan (-2);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: using (_perl = new Process ()) {  	_perl.StartInfo.FileName = "cmd.exe";  	_perl.StartInfo.Arguments = " /c \"cd parser && type \"" + sourceLogFile.FullName + "\" | " + AGGREGATE_REPORT_PARSER_NAME + " " + fromTime + " " + toTime + "\"";  	_perl.StartInfo.RedirectStandardError = false;  	_perl.StartInfo.RedirectStandardInput = false;  	_perl.StartInfo.RedirectStandardOutput = true;  	_perl.StartInfo.CreateNoWindow = true;  	_perl.StartInfo.StandardOutputEncoding = Encoding.UTF8;  	_perl.StartInfo.Verb = "Open";  	_perl.StartInfo.UseShellExecute = false;  	_perl.Start ();  	Thread.Sleep (1000);  	// время на одупление  	if (_perl.HasExited && _perl.ExitCode != 0)// если какой-то косяк с парсером (например' неверный формат input-файла)  	 {  		return duration;  	}  	using (var stdout = _perl.StandardOutput) {  		excelMaster.AddAggregateReportWorksheet (sheetName' stdout);  	}  	//excelMaster.AddMainSheet("Main"' 3000);  	duration = _perl.ExitTime - _perl.StartTime;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: return new TimeSpan (-3);  
Magic Number,PerformanceLab.Utils.ReportMaker,PerlMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\PerlMaster.cs,MakeAggregateReport,The following statement contains a magic number: return new TimeSpan (-2);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddAggregateReportWorksheet,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 11;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddAggregateReportWorksheet,The following statement contains a magic number: newSheet.View.FreezePanes (2' 1);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddAggregateReportWorksheet,The following statement contains a magic number: newSheet.Column (8).StyleName = stylePercent.Name;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 11;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: if (InfoList.Count < 5)  	for (int i = InfoList.Count; i < cout; i++)  		InfoList.Add ("0");  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [7' 3].Value = "Имя сервера";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [7' 3].Value = "Имя сервера";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [8' 3].Value = "Операционная система";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [8' 3].Value = "Операционная система";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [11' 3].Value = "Общее количество активных ядер";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [11' 3].Value = "Общее количество активных ядер";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: if (InfoList [4].ToString ().Contains ("---"))  	InfoList [4] = Cores.Count;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: if (InfoList [4].ToString ().Contains ("---"))  	InfoList [4] = Cores.Count;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: InfoList [4] = Cores.Count;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells ["D11"].Value = InfoList [4];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [12' 3].Value = "Модель процессора";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [12' 3].Value = "Модель процессора";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells ["D12"].Value = InfoList [3];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [13' 3].Value = "Средняя загрузка' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [13' 3].Value = "Средняя загрузка' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [16' 3].Value = "Общее количество памяти' Mb";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [16' 3].Value = "Общее количество памяти' Mb";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells ["D16"].Value = InfoList [2];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [17' 3].Value = "Средняя загрузка памяти' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [17' 3].Value = "Средняя загрузка памяти' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [18' 3].Value = "Свободная  память' Мb";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [18' 3].Value = "Свободная  память' Мb";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [19' 3].Value = "Свободная память' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells [19' 3].Value = "Свободная память' %";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: for (int i = 0; i < DiskList.Count; i++) {  	newSheet.Cells ["C" + (22 + i)].Value = i + 1;  	newSheet.Cells ["D" + (22 + i)].Value = DiskList [i];  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: for (int i = 0; i < DiskList.Count; i++) {  	newSheet.Cells ["C" + (22 + i)].Value = i + 1;  	newSheet.Cells ["D" + (22 + i)].Value = DiskList [i];  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells ["C" + (22 + i)].Value = i + 1;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMainSheet,The following statement contains a magic number: newSheet.Cells ["D" + (22 + i)].Value = DiskList [i];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,doMemTot,The following statement contains a magic number: return int.Parse (MemString.Remove (MemString.IndexOf (" "))) / 1024;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 11;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if (sheetName.Contains ("sys_info")) {  	while (!inputStream.EndOfStream) {  		string buff = inputStream.ReadLine ();  		if ((row % 3) == 0) {  			InfoList.Add (buff);  			//MessageBox.Show(InfoList[next].ToString());  			next++;  		}  		newSheet.Cells ["A" + row].LoadFromText (buff' format);  		row++;  	}  }  else {  	newSheet.Column (1).StyleName = "MyTime";  	while (!inputStream.EndOfStream) {  		newSheet.Cells ["A" + row].LoadFromText (inputStream.ReadLine ()' format);  		if (!((row > 1) && (DateTime.Parse (newSheet.Cells ["A" + row].Text) >= (DateTime.Parse (fromTime)) && (DateTime.Parse (newSheet.Cells ["A" + row].Text) <= (DateTime.Parse (toTime)))))) {  			newSheet.DeleteRow (row' 1);  		}  		else  			row++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: while (!inputStream.EndOfStream) {  	string buff = inputStream.ReadLine ();  	if ((row % 3) == 0) {  		InfoList.Add (buff);  		//MessageBox.Show(InfoList[next].ToString());  		next++;  	}  	newSheet.Cells ["A" + row].LoadFromText (buff' format);  	row++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if ((row % 3) == 0) {  	InfoList.Add (buff);  	//MessageBox.Show(InfoList[next].ToString());  	next++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if (sheetName.Contains ("disk")) {  	for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  		DiskList.Add (newSheet.Cells ["B" + i].Value);  	}  	DiskList = RemoveDuplicate (DiskList);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  	DiskList.Add (newSheet.Cells ["B" + i].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if (sheetName.Contains ("cpu_a")) {  	for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  		Cores.Add ((newSheet.Cells ["B" + i].Value).ToString ());  		// MessageBox.Show((newSheet.Cells["B" + i].Value).ToString());  	}  	Cores = RemoveDuplicate (Cores);  	for (int i = 3; i < 7; i++) {  		CPUzagolov.Add ((newSheet.Cells [1' i].Value).ToString ());  		//MessageBox.Show((newSheet.Cells[1' i].Value).ToString());  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if (sheetName.Contains ("cpu_a")) {  	for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  		Cores.Add ((newSheet.Cells ["B" + i].Value).ToString ());  		// MessageBox.Show((newSheet.Cells["B" + i].Value).ToString());  	}  	Cores = RemoveDuplicate (Cores);  	for (int i = 3; i < 7; i++) {  		CPUzagolov.Add ((newSheet.Cells [1' i].Value).ToString ());  		//MessageBox.Show((newSheet.Cells[1' i].Value).ToString());  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: if (sheetName.Contains ("cpu_a")) {  	for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  		Cores.Add ((newSheet.Cells ["B" + i].Value).ToString ());  		// MessageBox.Show((newSheet.Cells["B" + i].Value).ToString());  	}  	Cores = RemoveDuplicate (Cores);  	for (int i = 3; i < 7; i++) {  		CPUzagolov.Add ((newSheet.Cells [1' i].Value).ToString ());  		//MessageBox.Show((newSheet.Cells[1' i].Value).ToString());  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: for (int i = 2; i < newSheet.Dimension.End.Row; i++) {  	Cores.Add ((newSheet.Cells ["B" + i].Value).ToString ());  	// MessageBox.Show((newSheet.Cells["B" + i].Value).ToString());  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: for (int i = 3; i < 7; i++) {  	CPUzagolov.Add ((newSheet.Cells [1' i].Value).ToString ());  	//MessageBox.Show((newSheet.Cells[1' i].Value).ToString());  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMetricWorksheet,The following statement contains a magic number: for (int i = 3; i < 7; i++) {  	CPUzagolov.Add ((newSheet.Cells [1' i].Value).ToString ());  	//MessageBox.Show((newSheet.Cells[1' i].Value).ToString());  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 11;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu2")) {  	var usrField = pivotTable.DataFields.Add (pivotTable.Fields [1]);  	usrField.Name = source.Worksheet.Cells [1' 2].Text;  	usrField.Function = DataFieldFunctions.Average;  	var sysField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	sysField.Name = source.Worksheet.Cells [1' 3].Text;  	sysField.Function = DataFieldFunctions.Average;  	var wioField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	wioField.Name = source.Worksheet.Cells [1' 4].Text;  	wioField.Function = DataFieldFunctions.Average;  	var loadField = pivotTable.DataFields.Add (pivotTable.Fields [4]);  	loadField.Name = source.Worksheet.Cells [1' 5].Text;  	loadField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: usrField.Name = source.Worksheet.Cells [1' 2].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: sysField.Name = source.Worksheet.Cells [1' 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: wioField.Name = source.Worksheet.Cells [1' 4].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: loadField.Name = source.Worksheet.Cells [1' 5].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("mem")) {  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	dataField.Name = source.Worksheet.Cells [1' 4].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("mem")) {  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [3]);  	dataField.Name = source.Worksheet.Cells [1' 4].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataField.Name = source.Worksheet.Cells [1' 4].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("disk_io")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	/*/pivotTable.Fields[1].Sort = eSortType.Ascending;                 if (_excelFile.Workbook.Worksheets[newSheet.Index].Name.Contains("db"))                 {*/var dataField2 = pivotTable.DataFields.Add (pivotTable.Fields [6]);  	dataField2.Name = source.Worksheet.Cells [1' 7].Text;  	dataField2.Function = DataFieldFunctions.Average;  	/*}                 else                 {                     var dataField2 = pivotTable.DataFields.Add(pivotTable.Fields[4]);                     dataField2.Name = source.Worksheet.Cells[1' 5].Text;                     dataField2.Function = DataFieldFunctions.Average;                 }*/}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("disk_io")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	/*/pivotTable.Fields[1].Sort = eSortType.Ascending;                 if (_excelFile.Workbook.Worksheets[newSheet.Index].Name.Contains("db"))                 {*/var dataField2 = pivotTable.DataFields.Add (pivotTable.Fields [6]);  	dataField2.Name = source.Worksheet.Cells [1' 7].Text;  	dataField2.Function = DataFieldFunctions.Average;  	/*}                 else                 {                     var dataField2 = pivotTable.DataFields.Add(pivotTable.Fields[4]);                     dataField2.Name = source.Worksheet.Cells[1' 5].Text;                     dataField2.Function = DataFieldFunctions.Average;                 }*/}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("disk_io")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	/*/pivotTable.Fields[1].Sort = eSortType.Ascending;                 if (_excelFile.Workbook.Worksheets[newSheet.Index].Name.Contains("db"))                 {*/var dataField2 = pivotTable.DataFields.Add (pivotTable.Fields [6]);  	dataField2.Name = source.Worksheet.Cells [1' 7].Text;  	dataField2.Function = DataFieldFunctions.Average;  	/*}                 else                 {                     var dataField2 = pivotTable.DataFields.Add(pivotTable.Fields[4]);                     dataField2.Name = source.Worksheet.Cells[1' 5].Text;                     dataField2.Function = DataFieldFunctions.Average;                 }*/}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataName.Name = source.Worksheet.Cells [1' 2].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataField2.Name = source.Worksheet.Cells [1' 7].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("sar-disk")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	//pivotTable.Fields[1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	dataField.Name = source.Worksheet.Cells [1' 3].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("sar-disk")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	//pivotTable.Fields[1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	dataField.Name = source.Worksheet.Cells [1' 3].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("sar-disk")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	//pivotTable.Fields[1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [2]);  	dataField.Name = source.Worksheet.Cells [1' 3].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataName.Name = source.Worksheet.Cells [1' 2].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataField.Name = source.Worksheet.Cells [1' 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu_")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	pivotTable.Fields [1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [5]);  	dataField.Name = source.Worksheet.Cells [1' 6].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu_")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	pivotTable.Fields [1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [5]);  	dataField.Name = source.Worksheet.Cells [1' 6].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [newSheet.Index].Name.Contains ("cpu_")) {  	var dataName = pivotTable.ColumnFields.Add (pivotTable.Fields [1]);  	dataName.Name = source.Worksheet.Cells [1' 2].Text;  	pivotTable.Fields [1].Sort = eSortType.Ascending;  	var dataField = pivotTable.DataFields.Add (pivotTable.Fields [5]);  	dataField.Name = source.Worksheet.Cells [1' 6].Text;  	dataField.Function = DataFieldFunctions.Average;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataName.Name = source.Worksheet.Cells [1' 2].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddPivotTables,The following statement contains a magic number: dataField.Name = source.Worksheet.Cells [1' 6].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Column (2).StyleName = "AbsTime";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 8;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.DefaultColWidth = 50;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: try {  	if (sheetName == "CPU_All") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  				row = 0;  				indexCPUA = page;  				int n = Cores.Count + 2;  				for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  					}  				}  				using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  			}  	}  	else if (sheetName == "CPU") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			column = 6;  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  				indexCPU = page;  				//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  				for (column = 3; column < 7; column++)  					for (row = 2; row < 5 + interval; row++) {  						newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  					}  				for (int i = 0; i < 4; i++) {  					newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  				}  				newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  				// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  				//column++;  				using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  					var border = col.Style.Border;  					newSheet.Cells ["H2"].Value = "AVERAGE";  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  					var border = col.Style.Border;  					border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  				}  				newSheet.Cells ["F2"].Value = serv;  			}  		}  	}  	if (indexCPUA == 0)//отрезок определяющий "Absol. time"  	 {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	else {  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  	if (indexCPUA == 0)//отрезок кода рисующий график  	 {  		var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  		loadChart.Title.Text = serv + " CPU Load";  		loadChart.Title.Font.Size = 12;  		loadChart.SetPosition (200' 300);  		loadChart.Legend.Position = eLegendPosition.Bottom;  		loadChart.Legend.Add ();  		loadChart.SetSize (1000' 600);  		loadChart.YAxis.Format = "#'##0";  		loadChart.YAxis.MaxValue = 100;  		loadChart.YAxis.MinValue = 0;  		loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		loadChart.XAxis.Title.Text = "Время теста' мин";  		loadChart.YAxis.Title.Font.Bold = true;  		loadChart.YAxis.Title.Font.Size = 10;  		loadChart.XAxis.Title.Font.Bold = true;  		loadChart.XAxis.Title.Font.Size = 10;  		for (int i = 3; i < 4; i++) {  			var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  		var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  		OstChart.Title.Text = serv + " CPU usage";  		OstChart.Title.Font.Size = 12;  		OstChart.SetPosition (1000' 300);  		OstChart.Legend.Position = eLegendPosition.Bottom;  		OstChart.Legend.Add ();  		OstChart.SetSize (1000' 600);  		OstChart.YAxis.Format = "#'##0";  		OstChart.YAxis.MinValue = 0;  		OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		OstChart.XAxis.Title.Text = "Время теста' мин";  		OstChart.YAxis.Title.Font.Bold = true;  		OstChart.YAxis.Title.Font.Size = 10;  		OstChart.XAxis.Title.Font.Bold = true;  		OstChart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < 3; i++) {  			var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  		chart.Title.Text = serv + " CPU usage cores";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#'##0";  		chart.YAxis.MaxValue = 100 * Cores.Count;  		chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		for (int i = 0; i < Cores.Count; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU_All") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  			row = 0;  			indexCPUA = page;  			int n = Cores.Count + 2;  			for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  				}  			}  			using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  		}  }  else if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++)  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  		row = 0;  		indexCPUA = page;  		int n = Cores.Count + 2;  		for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  			}  		}  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu_")) {  	row = 0;  	indexCPUA = page;  	int n = Cores.Count + 2;  	for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  		}  	}  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: column = 2
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = "Core #" + Convert.ToString (column - 2);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (sheetName == "CPU") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		column = 6;  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  			indexCPU = page;  			//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  			for (column = 3; column < 7; column++)  				for (row = 2; row < 5 + interval; row++) {  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  				}  			for (int i = 0; i < 4; i++) {  				newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  			}  			newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  			// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  			//column++;  			using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  				var border = col.Style.Border;  				newSheet.Cells ["H2"].Value = "AVERAGE";  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  				var border = col.Style.Border;  				border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  			}  			newSheet.Cells ["F2"].Value = serv;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	column = 6;  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  		indexCPU = page;  		//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  		for (column = 3; column < 7; column++)  			for (row = 2; row < 5 + interval; row++) {  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  			}  		for (int i = 0; i < 4; i++) {  			newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  		}  		newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  		// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  		//column++;  		using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  			var border = col.Style.Border;  			newSheet.Cells ["H2"].Value = "AVERAGE";  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		newSheet.Cells ["F2"].Value = serv;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: column = 6;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("cpu2")) {  	indexCPU = page;  	//string header = dictExcel.search(_excelFile.Workbook.Worksheets[index].Name);  	for (column = 3; column < 7; column++)  		for (row = 2; row < 5 + interval; row++) {  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  		}  	for (int i = 0; i < 4; i++) {  		newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  	}  	newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  	// String.Format("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets[indexCPU].Cells[3 + minutes' 3].Address' _excelFile.Workbook.Worksheets[indexCPU].Cells[row - 1' 3].Address);  	//column++;  	using (ExcelRange col = newSheet.Cells ["H2:H3"]) {  		var border = col.Style.Border;  		newSheet.Cells ["H2"].Value = "AVERAGE";  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	using (ExcelRange col = newSheet.Cells ["A1:F" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	newSheet.Cells ["F2"].Value = serv;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 3; column < 7; column++)  	for (row = 2; row < 5 + interval; row++) {  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 3; column < 7; column++)  	for (row = 2; row < 5 + interval; row++) {  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 3; column < 7; column++)  	for (row = 2; row < 5 + interval; row++) {  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (column = 3; column < 7; column++)  	for (row = 2; row < 5 + interval; row++) {  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: column = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 2; row < 5 + interval; row++) {  	newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 2; row < 5 + interval; row++) {  	newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' column - 1].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: row = 2
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [2' i + 3].Value = CPUzagolov [i];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [3' column + 1].Formula = newSheet.Cells ["F" + newSheet.Dimension.End.Row].FullAddress;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок определяющий "Absol. time"   {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  else {  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPU].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexCPUA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: if (indexCPUA == 0)//отрезок кода рисующий график   {  	var loadChart = newSheet.Drawings.AddChart ("CPU-Load"' eChartType.Line);  	loadChart.Title.Text = serv + " CPU Load";  	loadChart.Title.Font.Size = 12;  	loadChart.SetPosition (200' 300);  	loadChart.Legend.Position = eLegendPosition.Bottom;  	loadChart.Legend.Add ();  	loadChart.SetSize (1000' 600);  	loadChart.YAxis.Format = "#'##0";  	loadChart.YAxis.MaxValue = 100;  	loadChart.YAxis.MinValue = 0;  	loadChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	loadChart.XAxis.Title.Text = "Время теста' мин";  	loadChart.YAxis.Title.Font.Bold = true;  	loadChart.YAxis.Title.Font.Size = 10;  	loadChart.XAxis.Title.Font.Bold = true;  	loadChart.XAxis.Title.Font.Size = 10;  	for (int i = 3; i < 4; i++) {  		var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  	var OstChart = newSheet.Drawings.AddChart ("CPU-use"' eChartType.AreaStacked);  	OstChart.Title.Text = serv + " CPU usage";  	OstChart.Title.Font.Size = 12;  	OstChart.SetPosition (1000' 300);  	OstChart.Legend.Position = eLegendPosition.Bottom;  	OstChart.Legend.Add ();  	OstChart.SetSize (1000' 600);  	OstChart.YAxis.Format = "#'##0";  	OstChart.YAxis.MinValue = 0;  	OstChart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	OstChart.XAxis.Title.Text = "Время теста' мин";  	OstChart.YAxis.Title.Font.Bold = true;  	OstChart.YAxis.Title.Font.Size = 10;  	OstChart.XAxis.Title.Font.Bold = true;  	OstChart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 3; i++) {  		var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("CPU_ALL"' eChartType.AreaStacked);  	chart.Title.Text = serv + " CPU usage cores";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#'##0";  	chart.YAxis.MaxValue = 100 * Cores.Count;  	chart.YAxis.Title.Text = "Средняя нагрузка на CPU' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < Cores.Count; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.YAxis.MaxValue = 100;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: loadChart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 3; i < 4; i++) {  	var serie = loadChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.SetPosition (1000' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.SetPosition (1000' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: OstChart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var serie = OstChart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.YAxis.MaxValue = 100 * Cores.Count;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: chart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: for (int i = 0; i < Cores.Count; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddCPUTable,The following statement contains a magic number: serie.Header = Convert.ToString (newSheet.Cells [2' i + 3].Value);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	newSheet.Cells ["C2"].Value = serv;  	int index = 0;  	int column = 3;  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		int row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  			index = page;  			string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  			// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  			//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  			for (row = 3; row < 4 + interval; row++) {  				if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  				else  					newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			}  			newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  			column++;  		}  	}  	for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	newSheet.Cells ["E2"].Value = "AVERAGE";  	using (ExcelRange col = newSheet.Cells ["E2:E3'A1:C" + newSheet.Dimension.End.Row]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	var chart = newSheet.Drawings.AddChart ("Memory"' eChartType.Line);  	chart.Title.Text = serv + " Memory usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.MaxValue = 100;  	chart.YAxis.Format = "000";  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя загрузка по памяти' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	for (int i = 0; i < 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	int row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  		index = page;  		string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  		// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  		//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  		for (row = 3; row < 4 + interval; row++) {  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			else  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		}  		newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  		column++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	int row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  		index = page;  		string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  		// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  		//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  		for (row = 3; row < 4 + interval; row++) {  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			else  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		}  		newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  		column++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	int row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  		index = page;  		string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  		// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  		//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  		for (row = 3; row < 4 + interval; row++) {  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			else  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		}  		newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  		column++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	int row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  		index = page;  		string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  		// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  		//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  		for (row = 3; row < 4 + interval; row++) {  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			else  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		}  		newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  		column++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	int row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  		index = page;  		string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  		// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  		//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  		for (row = 3; row < 4 + interval; row++) {  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  			else  				newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		}  		newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  		column++;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  	index = page;  	string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  	// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  	//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  	for (row = 3; row < 4 + interval; row++) {  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		else  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	}  	newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  	column++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  	index = page;  	string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  	// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  	//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  	for (row = 3; row < 4 + interval; row++) {  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		else  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	}  	newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  	column++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  	index = page;  	string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  	// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  	//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  	for (row = 3; row < 4 + interval; row++) {  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		else  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	}  	newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  	column++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  	index = page;  	string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  	// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  	//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  	for (row = 3; row < 4 + interval; row++) {  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		else  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	}  	newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  	column++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("mem")) {  	index = page;  	string header = dictExcel.search (_excelFile.Workbook.Worksheets [page].Name);  	// newSheet.Cells[1' column + 9].Value = newSheet.Cells[1' column].Value = header.Split('_')[0];  	//newSheet.Cells[2' column + 9].Value = newSheet.Cells[2' column].Value = header.Split('_')[1];  	for (row = 3; row < 4 + interval; row++) {  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  		else  			newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	}  	newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  	column++;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (row = 3; row < 4 + interval; row++) {  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	else  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (row = 3; row < 4 + interval; row++) {  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("app"))  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  	else  		newSheet.Cells [row' column].Formula = _excelFile.Workbook.Worksheets [page].Cells [row' getFieldNum (_excelFile.Workbook.Worksheets [page].PivotTables [0]' "%")].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells [row' column].Formula = newSheet.Cells [3' column + 2].Formula = String.Format ("AVERAGE({0}:{1})"' _excelFile.Workbook.Worksheets [page].Cells [3 + minutes' column].Address' _excelFile.Workbook.Worksheets [page].Cells [row - 1' column].Address);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Column (2).StyleName = "AbsTime";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 8;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.YAxis.MaxValue = 100;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: chart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: for (int i = 0; i < 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddMemTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: try {  	newSheet.Cells ["A2"].Value = "Time";  	newSheet.Cells ["B2"].Value = "Absol. time";  	int index = 0;  	int indexA = 0;  	int row = 0;  	if (sheetName == "Disk_io") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  				index = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  				column = n + 1;  				newSheet.Cells [2' column].Value = "20 ms";  				for (row = 3; row < 4 + interval; row++) {  					newSheet.Cells [row' column].Value = 20;  				}  			}  		}  	}  	else if (sheetName == "Disk_use") {  		for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  			row = 0;  			if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  				indexA = page;  				int n = DiskList.Count + 2;  				/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  					newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  					for (row = 3; row < 5 + interval; row++) {  						newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  					}  				}  				for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  					newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  					if (row != newSheet.Dimension.End.Row)  						newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  				}  			}  		}  	}  	newSheet.Column (1).StyleName = "MyTime";  	newSheet.Column (2).StyleName = "AbsTime";  	newSheet.Cells.Style.Font.Name = "Calibri";  	newSheet.Cells.Style.Font.Size = 8;  	newSheet.Cells ["C:X"].Style.Numberformat.Format = "#'##0.00";  	if (indexA == 0)//отрезок кода рисующий график  	 {  		var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  		chart.Title.Text = serv + " Disk iotime";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "000";  		chart.YAxis.Title.Text = "Время отклика дисков' мс";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n + 1; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Text;  			if (i == n + 1)  				chart.Border.LineStyle = eLineStyle.Dash;  		}  	}  	else {  		var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  		chart.Title.Text = serv + " Disk usage";  		chart.Title.Font.Size = 12;  		chart.SetPosition (200' 300);  		chart.Legend.Position = eLegendPosition.Bottom;  		chart.Legend.Add ();  		chart.SetSize (1000' 600);  		chart.YAxis.Format = "#0";  		chart.YAxis.MaxValue = 100;  		chart.YAxis.MinValue = 0;  		chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  		chart.XAxis.Title.Text = "Время теста' мин";  		chart.YAxis.Title.Font.Bold = true;  		chart.YAxis.Title.Font.Size = 10;  		chart.XAxis.Title.Font.Bold = true;  		chart.XAxis.Title.Font.Size = 10;  		int n = DiskList.Count;  		using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  			var border = col.Style.Border;  			border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  		}  		for (int i = 0; i < n; i++) {  			var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  			serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_io") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  			index = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  			column = n + 1;  			newSheet.Cells [2' column].Value = "20 ms";  			for (row = 3; row < 4 + interval; row++) {  				newSheet.Cells [row' column].Value = 20;  			}  		}  	}  }  else if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  		index = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  		column = n + 1;  		newSheet.Cells [2' column].Value = "20 ms";  		for (row = 3; row < 4 + interval; row++) {  			newSheet.Cells [row' column].Value = 20;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("disk_io")) {  	index = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  	column = n + 1;  	newSheet.Cells [2' column].Value = "20 ms";  	for (row = 3; row < 4 + interval; row++) {  		newSheet.Cells [row' column].Value = 20;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: column = 2
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [index].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [2' column].Value = "20 ms";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 4 + interval; row++) {  	newSheet.Cells [row' column].Value = 20;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 4 + interval; row++) {  	newSheet.Cells [row' column].Value = 20;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 4 + interval; row++) {  	newSheet.Cells [row' column].Value = 20;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [row' column].Value = 20;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (sheetName == "Disk_use") {  	for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  		row = 0;  		if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  			indexA = page;  			int n = DiskList.Count + 2;  			/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  				newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  				for (row = 3; row < 5 + interval; row++) {  					newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  				}  			}  			for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  				newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  				if (row != newSheet.Dimension.End.Row)  					newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  			}  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int page = 1; page < _excelFile.Workbook.Worksheets.Count; page++) {  	row = 0;  	if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  		indexA = page;  		int n = DiskList.Count + 2;  		/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  			newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  			for (row = 3; row < 5 + interval; row++) {  				newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  			}  		}  		for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  			newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  			if (row != newSheet.Dimension.End.Row)  				newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  		}  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (_excelFile.Workbook.Worksheets [page].Name.Contains ("pivot") && _excelFile.Workbook.Worksheets [page].Name.Contains ("sar-disk")) {  	indexA = page;  	int n = DiskList.Count + 2;  	/*                             if (_excelFile.Workbook.Worksheets[page].Name.Contains("app"))                                 n = 4;                             else n = 15;*/for (column = 2; column < n; column++) {  		newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  		for (row = 3; row < 5 + interval; row++) {  			newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  		}  	}  	for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  		newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  		if (row != newSheet.Dimension.End.Row)  			newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (column = 2; column < n; column++) {  	newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  	for (row = 3; row < 5 + interval; row++) {  		newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: column = 2
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [2' column + 1].Value = DiskList [column - 2];  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < 5 + interval; row++) {  	newSheet.Cells [row' column + 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' column].FullAddress;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (row = 3; row < newSheet.Dimension.End.Row + 1; row++) {  	newSheet.Cells [row' 1].Formula = _excelFile.Workbook.Worksheets [indexA].Cells [row' 1].FullAddress;  	if (row != newSheet.Dimension.End.Row)  		newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: row = 3
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (row != newSheet.Dimension.End.Row)  	newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells [row' 2].Formula = newSheet.Cells [row' 1].Address + "-" + newSheet.Cells [3' 1].Address;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Column (2).StyleName = "AbsTime";  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: newSheet.Cells.Style.Font.Size = 8;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: if (indexA == 0)//отрезок кода рисующий график   {  	var chart = newSheet.Drawings.AddChart ("Disk_io"' eChartType.Line);  	chart.Title.Text = serv + " Disk iotime";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "000";  	chart.YAxis.Title.Text = "Время отклика дисков' мс";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n + 1; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Text;  		if (i == n + 1)  			chart.Border.LineStyle = eLineStyle.Dash;  	}  }  else {  	var chart = newSheet.Drawings.AddChart ("Disk_use"' eChartType.Line);  	chart.Title.Text = serv + " Disk usage";  	chart.Title.Font.Size = 12;  	chart.SetPosition (200' 300);  	chart.Legend.Position = eLegendPosition.Bottom;  	chart.Legend.Add ();  	chart.SetSize (1000' 600);  	chart.YAxis.Format = "#0";  	chart.YAxis.MaxValue = 100;  	chart.YAxis.MinValue = 0;  	chart.YAxis.Title.Text = "Средняя нагрузка на диски' %";  	chart.XAxis.Title.Text = "Время теста' мин";  	chart.YAxis.Title.Font.Bold = true;  	chart.YAxis.Title.Font.Size = 10;  	chart.XAxis.Title.Font.Bold = true;  	chart.XAxis.Title.Font.Size = 10;  	int n = DiskList.Count;  	using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  		var border = col.Style.Border;  		border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  	}  	for (int i = 0; i < n; i++) {  		var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  		serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 3]) {  	var border = col.Style.Border;  	border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (3' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Text;  	if (i == n + 1)  		chart.Border.LineStyle = eLineStyle.Dash;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Text;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.Title.Font.Size = 12;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetPosition (200' 300);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.SetSize (1000' 600);  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.YAxis.MaxValue = 100;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.YAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: chart.XAxis.Title.Font.Size = 10;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: using (ExcelRange col = newSheet.Cells [1' 1' newSheet.Dimension.End.Row' n + 2]) {  	var border = col.Style.Border;  	border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	var serie = chart.Series.Add (ExcelRange.GetAddress (2' i + 3' newSheet.Dimension.End.Row - 1' i + 3)' ExcelRange.GetAddress (3' 2' newSheet.Dimension.End.Row - 1' 2));  	serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,AddDiskTable,The following statement contains a magic number: serie.Header = newSheet.Cells [2' i + 3].Value.ToString ();  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,getFieldNum,The following statement contains a magic number: for (int i = 0; i < table.DataFields.Count; i++) {  	if (table.DataFields [i].Name.Contains (toFind))  		return i + 2;  }  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,getFieldNum,The following statement contains a magic number: if (table.DataFields [i].Name.Contains (toFind))  	return i + 2;  
Magic Number,PerformanceLab.Utils.ReportMaker,ExcelMaster,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ExcelMaster.cs,getFieldNum,The following statement contains a magic number: return i + 2;  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: foreach (string str in Pieces)  	if (str.Contains ("app") || str.Contains ("db")) {  		int r = str.IndexOf ("(") + 1;  		int lr = str.LastIndexOf (")");  		buff = str.Substring (r' lr - r);  		buff = buff.ToUpper ();  		//MessageBox.Show(buff);  		if (buff.Length > 7)  			buff = buff.Substring (0' 7);  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: foreach (string str in Pieces)  	if (str.Contains ("app") || str.Contains ("db")) {  		int r = str.IndexOf ("(") + 1;  		int lr = str.LastIndexOf (")");  		buff = str.Substring (r' lr - r);  		buff = buff.ToUpper ();  		//MessageBox.Show(buff);  		if (buff.Length > 7)  			buff = buff.Substring (0' 7);  	}  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (str.Contains ("app") || str.Contains ("db")) {  	int r = str.IndexOf ("(") + 1;  	int lr = str.LastIndexOf (")");  	buff = str.Substring (r' lr - r);  	buff = buff.ToUpper ();  	//MessageBox.Show(buff);  	if (buff.Length > 7)  		buff = buff.Substring (0' 7);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (str.Contains ("app") || str.Contains ("db")) {  	int r = str.IndexOf ("(") + 1;  	int lr = str.LastIndexOf (")");  	buff = str.Substring (r' lr - r);  	buff = buff.ToUpper ();  	//MessageBox.Show(buff);  	if (buff.Length > 7)  		buff = buff.Substring (0' 7);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (buff.Length > 7)  	buff = buff.Substring (0' 7);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (buff.Length > 7)  	buff = buff.Substring (0' 7);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: buff = buff.Substring (0' 7);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (e.Argument.ToString () == "Unix") {  	if (buff == metricsGridView [0' 0].Value.ToString ())  		buff = "";  	mesStat = "Проверка на существующий  Excel-файл";  	backgroundWorker.ReportProgress (1);  	try {  		if (File.Exists ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx"))  			throw new IOException ("Файл с таким именем уже существует");  	}  	catch (IOException ex) {  		Popup.ShowException (ex);  		return;  	}  	mesStat = "Создание нового Excel-файла";  	var xlsx = new FileInfo ("Результат_Теста_" + (int)numericUpDown1.Value + "_" + "(" + buff.ToLower () + ")" + ".xlsx");  	var em = new ExcelMaster (xlsx' excelDictionary);  	DateTime t1 = new DateTime ();  	DateTime t2 = new DateTime ();  	for (int row = 0; row < metricsGridView.RowCount; row++) {  		try {  			using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  				string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  				mesStat = "Обрабатываю " + sheetN;  				ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  				backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  				//while (!DateTime.TryParse(to' out t1))  				if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  					em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  				backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  				if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  					em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  				}  			}  		}  		catch (Exception ex) {  			Popup.ShowException (ex);  		}  	}  	// toolStripStatusLabel1.Text = "Metrics copied";  	mesStat = "Метрики с таблицами добавлены! Создаем графики...";  	int i = metricsGridView.RowCount;  	i++;  	int minutes = 0;  	if (DateTime.TryParse (to' out t2) && DateTime.TryParse (from' out t1))  		minutes = (int)(t2 - t1).TotalMinutes;  	try {  		em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  		i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  		em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  		i = changebar ("процессору"' i * 100 / OneHundPerc' i);  		em.AddMemTable ("Mem"' rumpMin' minutes' buff);  		i = changebar ("памяти"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  		i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  		em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  		i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  		em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  		i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  		em.hideLists (buff);  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  	em.Finish ();  	backgroundWorker.ReportProgress (100);  	try {  		var pi = new ProcessStartInfo (xlsx.FullName);  		Process.Start (pi);  	}  	catch (Win32Exception) {  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: for (int row = 0; row < metricsGridView.RowCount; row++) {  	try {  		using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  			string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  			mesStat = "Обрабатываю " + sheetN;  			ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  			backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  			//while (!DateTime.TryParse(to' out t1))  			if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  				em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  			backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  			if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  				em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  			}  		}  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: for (int row = 0; row < metricsGridView.RowCount; row++) {  	try {  		using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  			string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  			mesStat = "Обрабатываю " + sheetN;  			ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  			backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  			//while (!DateTime.TryParse(to' out t1))  			if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  				em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  			backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  			if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  				em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  			}  		}  	}  	catch (Exception ex) {  		Popup.ShowException (ex);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  		string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  		mesStat = "Обрабатываю " + sheetN;  		ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  		backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  		//while (!DateTime.TryParse(to' out t1))  		if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  			em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  		backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  		if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  			em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  		string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  		mesStat = "Обрабатываю " + sheetN;  		ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  		backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  		//while (!DateTime.TryParse(to' out t1))  		if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  			em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  		backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  		if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  			em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  		}  	}  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  	string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  	mesStat = "Обрабатываю " + sheetN;  	ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  	backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  	//while (!DateTime.TryParse(to' out t1))  	if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  		em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  	backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  	if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  		em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: using (StreamReader sr = new StreamReader (metricsGridView [0' row].Value.ToString ())) {  	string sheetN = getListName (System.IO.Path.GetFullPath (metricsGridView [0' row].Value.ToString ()));  	mesStat = "Обрабатываю " + sheetN;  	ExcelWorksheet hidden = em.AddMetricWorksheet (sheetN' sr' from' to' ';');  	backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  	//while (!DateTime.TryParse(to' out t1))  	if (!(metricsGridView [0' row].Value.ToString ().Contains ("sys_info")))  		em.AddPivotTables ("pivot " + hidden.Name' hidden.Cells [hidden.Dimension.Address]);  	backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  	if (metricsGridView [0' row].Value.ToString ().Contains ("disk")) {  		em.AddPivotTables ("pivot (" + buff.ToLower () + ") disk_io"' hidden.Cells [hidden.Dimension.Address]);  	}  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: backgroundWorker.ReportProgress ((row + 1) * 100 / OneHundPerc);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: backgroundWorker.ReportProgress ((row + 2) * OnePerc / OneHundPerc);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	em.AddCPUTable ("CPU_All"' rumpMin' minutes' buff);  	i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  	em.AddCPUTable ("CPU"' rumpMin' minutes' buff);  	i = changebar ("процессору"' i * 100 / OneHundPerc' i);  	em.AddMemTable ("Mem"' rumpMin' minutes' buff);  	i = changebar ("памяти"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_io"' rumpMin' minutes' buff);  	i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  	em.AddDiskTable ("Disk_use"' rumpMin' minutes' buff);  	i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  	em.AddMainSheet ("Main"' int.Parse (numericEffort.Value.ToString ())' from' to' buff);  	i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  	em.hideLists (buff);  }  catch (Exception ex) {  	Popup.ShowException (ex);  }  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("всем ядрам"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("процессору"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("памяти"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("времени отклику дисков"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("нагрузке дисков"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: i = changebar ("общей информации о системе"' i * 100 / OneHundPerc' i);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,backgroundWorker_DoWork,The following statement contains a magic number: backgroundWorker.ReportProgress (100);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,getListName,The following statement contains a magic number: return path.Split ('\\') [path.Split ('\\').Length - 3] + System.IO.Path.GetFileNameWithoutExtension (path);  
Magic Number,PerformanceLab.Utils.ReportMaker,MainForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\MainForm.cs,timer1_Tick,The following statement contains a magic number: if (viI == 100) {  	timer1.Enabled = false;  	FormElemEnabl (true);  	labelMetrics.Text = "Готово!";  	//MessageBox.Show("Готово!");  }  
Magic Number,PfLb.ReportMaker,ProgressForm,C:\repos\vbienf_MyMetrDick\MetrReport\MetrReport\ProgressForm.cs,timer1_Tick,The following statement contains a magic number: if (progrDonePerc == 100) {  	timer1.Enabled = false;  	labelMetrics.Text = "Готово!";  	MessageBox.Show ("Готово!");  	this.Close ();  }  else  	labelMetrics.Text = Stat;  
