Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSConnect,cConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cConnect.cs,fillParameters,Cyclomatic complexity of the method is 12
Complex Method,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,getSqlParameters,Cyclomatic complexity of the method is 11
Complex Method,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,Cyclomatic complexity of the method is 24
Long Statement,CSConnect,cConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cConnect.cs,fillColumns,The length of the statement  "		if (db.openRs (sqlstmt' out rs' "fillColumns"' "cConnect"' "Update columns's definition"' CSKernelClient.eErrorLevel.eErrorInformation)) { " is 138.
Long Statement,CSConnect,cParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cParameters.cs,getByPosition,The length of the statement  "	throw new Exception ("This parameters collection doesn't contain a parameter with a position = " + position.ToString ()); " is 121.
Magic Number,CSConnect,cConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cConnect.cs,fillParameters,The following statement contains a magic number: if (db.initDb (m_strConnect)) {  	string[] restrictions = new string[4];  	restrictions [2] = dataSource;  	DataTable dt = db.openSchema ("ProcedureParameters"' restrictions);  	if (m_parameters == null)  		m_parameters = new cParameters ();  	cParameters parameters = new cParameters ();  	foreach (DataRow row in dt.Rows) {  		if (row ["parameter_mode"].ToString () != "OUT") {  			cParameter p = null;  			bool found = false;  			for (var i = 0; i < m_parameters.count (); i++) {  				p = m_parameters.item (i);  				if (p.getName () == row ["parameter_name"].ToString ()) {  					found = true;  					break;  				}  			}  			if (!found)  				p = null;  			p = parameters.add (p' "");  			p.setName (row ["parameter_name"].ToString ());  			p.setPosition ((int)row ["ordinal_position"]);  			p.setColumnType (cDatabaseGlobals.getDataTypeFromString (row ["data_type"].ToString ()));  		}  	}  	//  	// openSchema can be sorted by any column (usually by name)  	// we need this collection to be sorted by position  	//  	m_parameters = new cParameters ();  	for (var j = 1; j < parameters.count () + 1; j++) {  		cParameter p = null;  		bool found = false;  		for (var i = 0; i < parameters.count (); i++) {  			p = parameters.item (i);  			if (p.getPosition () == j) {  				found = true;  				break;  			}  		}  		if (!found) {  			throw new Exception ("Parameter not found for position: " + j);  		}  		else {  			m_parameters.add (p' p.getKey ());  		}  	}  	return true;  }  
Magic Number,CSConnect,cConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cConnect.cs,fillParameters,The following statement contains a magic number: if (db.initDb (m_strConnect)) {  	string[] restrictions = new string[4];  	restrictions [2] = dataSource;  	DataTable dt = db.openSchema ("ProcedureParameters"' restrictions);  	if (m_parameters == null)  		m_parameters = new cParameters ();  	cParameters parameters = new cParameters ();  	foreach (DataRow row in dt.Rows) {  		if (row ["parameter_mode"].ToString () != "OUT") {  			cParameter p = null;  			bool found = false;  			for (var i = 0; i < m_parameters.count (); i++) {  				p = m_parameters.item (i);  				if (p.getName () == row ["parameter_name"].ToString ()) {  					found = true;  					break;  				}  			}  			if (!found)  				p = null;  			p = parameters.add (p' "");  			p.setName (row ["parameter_name"].ToString ());  			p.setPosition ((int)row ["ordinal_position"]);  			p.setColumnType (cDatabaseGlobals.getDataTypeFromString (row ["data_type"].ToString ()));  		}  	}  	//  	// openSchema can be sorted by any column (usually by name)  	// we need this collection to be sorted by position  	//  	m_parameters = new cParameters ();  	for (var j = 1; j < parameters.count () + 1; j++) {  		cParameter p = null;  		bool found = false;  		for (var i = 0; i < parameters.count (); i++) {  			p = parameters.item (i);  			if (p.getPosition () == j) {  				found = true;  				break;  			}  		}  		if (!found) {  			throw new Exception ("Parameter not found for position: " + j);  		}  		else {  			m_parameters.add (p' p.getKey ());  		}  	}  	return true;  }  
Magic Number,CSConnect,cConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\cConnect.cs,fillParameters,The following statement contains a magic number: restrictions [2] = dataSource;  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: for (int j = 0; j < m_parameters.count (); j++) {  	cParameter parameter = m_parameters.getByPosition (j + 1);  	System.Windows.Forms.Label label = new System.Windows.Forms.Label ();  	label.AutoSize = true;  	label.Location = new System.Drawing.Point (30' top);  	label.Text = parameter.getName ();  	System.Windows.Forms.TextBox input = new System.Windows.Forms.TextBox ();  	input.Location = new System.Drawing.Point (150' top);  	input.Size = new System.Drawing.Size (150' 20);  	input.Text = parameter.getValue ();  	input.Tag = parameter.getKey ();  	switch (parameter.getColumnType ()) {  	case csDataType.CSTDLONGVARCHAR:  	case csDataType.CSTDCHAR:  		input.Tag = "T";  		break;  	case csDataType.CSTDBIGINT:  	case csDataType.CSTDBINARY:  	case csDataType.CSTDINTEGER:  	case csDataType.CSTDSMALLINT:  	case csDataType.CSTDTINYINT:  	case csDataType.CSTDUNSIGNEDTINYINT:  		input.Tag = "N";  		break;  	case csDataType.CSTDBOOLEAN:  		input.Tag = "N";  		break;  	case csDataType.CSTDSINGLE:  	case csDataType.CSTDDECIMAL:  	case csDataType.CSTDDOUBLE:  		input.Tag = "N";  		break;  	case csDataType.CSTDDBTIME:  		input.Tag = "F";  		break;  	}  	m_texts [j] = input;  	pnlParameters.Controls.Add (label);  	pnlParameters.Controls.Add (input);  	top += 30;  }  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: for (int j = 0; j < m_parameters.count (); j++) {  	cParameter parameter = m_parameters.getByPosition (j + 1);  	System.Windows.Forms.Label label = new System.Windows.Forms.Label ();  	label.AutoSize = true;  	label.Location = new System.Drawing.Point (30' top);  	label.Text = parameter.getName ();  	System.Windows.Forms.TextBox input = new System.Windows.Forms.TextBox ();  	input.Location = new System.Drawing.Point (150' top);  	input.Size = new System.Drawing.Size (150' 20);  	input.Text = parameter.getValue ();  	input.Tag = parameter.getKey ();  	switch (parameter.getColumnType ()) {  	case csDataType.CSTDLONGVARCHAR:  	case csDataType.CSTDCHAR:  		input.Tag = "T";  		break;  	case csDataType.CSTDBIGINT:  	case csDataType.CSTDBINARY:  	case csDataType.CSTDINTEGER:  	case csDataType.CSTDSMALLINT:  	case csDataType.CSTDTINYINT:  	case csDataType.CSTDUNSIGNEDTINYINT:  		input.Tag = "N";  		break;  	case csDataType.CSTDBOOLEAN:  		input.Tag = "N";  		break;  	case csDataType.CSTDSINGLE:  	case csDataType.CSTDDECIMAL:  	case csDataType.CSTDDOUBLE:  		input.Tag = "N";  		break;  	case csDataType.CSTDDBTIME:  		input.Tag = "F";  		break;  	}  	m_texts [j] = input;  	pnlParameters.Controls.Add (label);  	pnlParameters.Controls.Add (input);  	top += 30;  }  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: for (int j = 0; j < m_parameters.count (); j++) {  	cParameter parameter = m_parameters.getByPosition (j + 1);  	System.Windows.Forms.Label label = new System.Windows.Forms.Label ();  	label.AutoSize = true;  	label.Location = new System.Drawing.Point (30' top);  	label.Text = parameter.getName ();  	System.Windows.Forms.TextBox input = new System.Windows.Forms.TextBox ();  	input.Location = new System.Drawing.Point (150' top);  	input.Size = new System.Drawing.Size (150' 20);  	input.Text = parameter.getValue ();  	input.Tag = parameter.getKey ();  	switch (parameter.getColumnType ()) {  	case csDataType.CSTDLONGVARCHAR:  	case csDataType.CSTDCHAR:  		input.Tag = "T";  		break;  	case csDataType.CSTDBIGINT:  	case csDataType.CSTDBINARY:  	case csDataType.CSTDINTEGER:  	case csDataType.CSTDSMALLINT:  	case csDataType.CSTDTINYINT:  	case csDataType.CSTDUNSIGNEDTINYINT:  		input.Tag = "N";  		break;  	case csDataType.CSTDBOOLEAN:  		input.Tag = "N";  		break;  	case csDataType.CSTDSINGLE:  	case csDataType.CSTDDECIMAL:  	case csDataType.CSTDDOUBLE:  		input.Tag = "N";  		break;  	case csDataType.CSTDDBTIME:  		input.Tag = "F";  		break;  	}  	m_texts [j] = input;  	pnlParameters.Controls.Add (label);  	pnlParameters.Controls.Add (input);  	top += 30;  }  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: for (int j = 0; j < m_parameters.count (); j++) {  	cParameter parameter = m_parameters.getByPosition (j + 1);  	System.Windows.Forms.Label label = new System.Windows.Forms.Label ();  	label.AutoSize = true;  	label.Location = new System.Drawing.Point (30' top);  	label.Text = parameter.getName ();  	System.Windows.Forms.TextBox input = new System.Windows.Forms.TextBox ();  	input.Location = new System.Drawing.Point (150' top);  	input.Size = new System.Drawing.Size (150' 20);  	input.Text = parameter.getValue ();  	input.Tag = parameter.getKey ();  	switch (parameter.getColumnType ()) {  	case csDataType.CSTDLONGVARCHAR:  	case csDataType.CSTDCHAR:  		input.Tag = "T";  		break;  	case csDataType.CSTDBIGINT:  	case csDataType.CSTDBINARY:  	case csDataType.CSTDINTEGER:  	case csDataType.CSTDSMALLINT:  	case csDataType.CSTDTINYINT:  	case csDataType.CSTDUNSIGNEDTINYINT:  		input.Tag = "N";  		break;  	case csDataType.CSTDBOOLEAN:  		input.Tag = "N";  		break;  	case csDataType.CSTDSINGLE:  	case csDataType.CSTDDECIMAL:  	case csDataType.CSTDDOUBLE:  		input.Tag = "N";  		break;  	case csDataType.CSTDDBTIME:  		input.Tag = "F";  		break;  	}  	m_texts [j] = input;  	pnlParameters.Controls.Add (label);  	pnlParameters.Controls.Add (input);  	top += 30;  }  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: for (int j = 0; j < m_parameters.count (); j++) {  	cParameter parameter = m_parameters.getByPosition (j + 1);  	System.Windows.Forms.Label label = new System.Windows.Forms.Label ();  	label.AutoSize = true;  	label.Location = new System.Drawing.Point (30' top);  	label.Text = parameter.getName ();  	System.Windows.Forms.TextBox input = new System.Windows.Forms.TextBox ();  	input.Location = new System.Drawing.Point (150' top);  	input.Size = new System.Drawing.Size (150' 20);  	input.Text = parameter.getValue ();  	input.Tag = parameter.getKey ();  	switch (parameter.getColumnType ()) {  	case csDataType.CSTDLONGVARCHAR:  	case csDataType.CSTDCHAR:  		input.Tag = "T";  		break;  	case csDataType.CSTDBIGINT:  	case csDataType.CSTDBINARY:  	case csDataType.CSTDINTEGER:  	case csDataType.CSTDSMALLINT:  	case csDataType.CSTDTINYINT:  	case csDataType.CSTDUNSIGNEDTINYINT:  		input.Tag = "N";  		break;  	case csDataType.CSTDBOOLEAN:  		input.Tag = "N";  		break;  	case csDataType.CSTDSINGLE:  	case csDataType.CSTDDECIMAL:  	case csDataType.CSTDDOUBLE:  		input.Tag = "N";  		break;  	case csDataType.CSTDDBTIME:  		input.Tag = "F";  		break;  	}  	m_texts [j] = input;  	pnlParameters.Controls.Add (label);  	pnlParameters.Controls.Add (input);  	top += 30;  }  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: label.Location = new System.Drawing.Point (30' top);  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: input.Location = new System.Drawing.Point (150' top);  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: input.Size = new System.Drawing.Size (150' 20);  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: input.Size = new System.Drawing.Size (150' 20);  
Magic Number,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following statement contains a magic number: top += 30;  
Missing Default,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,getSqlParameters,The following switch statement is missing a default case: switch (input.Tag.ToString ()) {  case "T":  	value = cDataBase.sqlString (input.Text);  	break;  case "N":  	value = cDataBase.sqlNumber (input.Text);  	break;  case "F":  	value = cDataBase.sqlDate (input.Text);  	break;  }  
Missing Default,CSConnect,fParameters,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSConnect\Codigo\CSConnect\fParameters.cs,loadParameters,The following switch statement is missing a default case: switch (parameter.getColumnType ()) {  case csDataType.CSTDLONGVARCHAR:  case csDataType.CSTDCHAR:  	input.Tag = "T";  	break;  case csDataType.CSTDBIGINT:  case csDataType.CSTDBINARY:  case csDataType.CSTDINTEGER:  case csDataType.CSTDSMALLINT:  case csDataType.CSTDTINYINT:  case csDataType.CSTDUNSIGNEDTINYINT:  	input.Tag = "N";  	break;  case csDataType.CSTDBOOLEAN:  	input.Tag = "N";  	break;  case csDataType.CSTDSINGLE:  case csDataType.CSTDDECIMAL:  case csDataType.CSTDDOUBLE:  	input.Tag = "N";  	break;  case csDataType.CSTDDBTIME:  	input.Tag = "F";  	break;  }  
